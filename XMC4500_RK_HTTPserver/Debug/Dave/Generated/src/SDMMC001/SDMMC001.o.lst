   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"SDMMC001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              	SDMMC001_InitializeFlag:
  21 0000 00       		.space	1
  22              	SDMMC001_LockFlag:
  23 0001 00       		.space	1
  24              		.section	.text.SDMMC001_lFindDiskStatus,"ax",%progbits
  25              		.align	2
  26              		.global	SDMMC001_lFindDiskStatus
  27              		.thumb
  28              		.thumb_func
  30              	SDMMC001_lFindDiskStatus:
  31              	.LFB117:
  32              		.file 1 "../Dave/Generated/src/SDMMC001/SDMMC001.c"
   1:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*******************************************************************************
   2:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **  DAVE App Name : SDMMC001       App Version: 1.0.12               
   3:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/SDMMC001/SDMMC001.c **** *******************************************************************************/
   6:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
   7:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
   8:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* CODE_BLOCK_BEGIN[SDMMC001.c] */
   9:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
  10:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*******************************************************************************
  11:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  Copyright (c) 2011, Infineon Technologies AG                                 **
  12:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  All rights reserved.                                                         **
  13:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                                                               **
  14:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  Redistribution and use in source and binary forms, with or without           **
  15:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  modification,are permitted provided that the following conditions are met:   **
  16:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                                                               **
  17:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  18:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  this list of conditions and the following disclaimer.                        **
  19:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  20:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  this list of conditions and the following disclaimer in the documentation    **
  21:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  and/or other materials provided with the distribution.                       **
  22:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  23:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  may be used to endorse or promote products derived from this software without** 
  24:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  specific prior written permission.                                           **
  25:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                                                               **
  26:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  27:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  28:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  29:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  30:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  31:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  32:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  33:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  34:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  35:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  36:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  37:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                                                               **
  38:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  To improve the quality of the software, users are encouraged to share        **
  39:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  40:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  dave@infineon.com).                                                          **
  41:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                                                               **
  42:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ********************************************************************************
  43:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                                                                            **
  44:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                                                                            **
  45:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ** PLATFORM : Infineon XMC4000 Series                                         **
  46:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                                                                            **
  47:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ** COMPILER : Compiler Independent                                            **
  48:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                                                                            **
  49:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ** AUTHOR : App Developer                                                     **
  50:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                                                                            **
  51:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  52:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                                                                            **
  53:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ** MODIFICATION DATE : July 31, 2012                                           **
  54:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                                                                            **
  55:../Dave/Generated/src/SDMMC001/SDMMC001.c **** *******************************************************************************/
  56:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
  57:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*******************************************************************************
  58:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                       Author(s) Identity                                   **
  59:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ********************************************************************************
  60:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                                                                            **
  61:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ** Initials    Name                                                           **
  62:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ** ---------------------------------------------------------------------------**
  63:../Dave/Generated/src/SDMMC001/SDMMC001.c **** ** SK          App Developer                                                  **
  64:../Dave/Generated/src/SDMMC001/SDMMC001.c **** *******************************************************************************/
  65:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
  66:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
  67:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
  68:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @file   SDMMC001.c
  69:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  *
  70:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @brief  This file contains definitions of all private and public functions
  71:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  *         of SDMMC Block Layer App in Non-RTOS environment
  72:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  *
  73:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
  74:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  
  75:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
  76:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*******************************************************************************
  77:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                      INCLUDE FILES                                         **
  78:../Dave/Generated/src/SDMMC001/SDMMC001.c **** *******************************************************************************/
  79:../Dave/Generated/src/SDMMC001/SDMMC001.c **** #include <DAVE3.h>
  80:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
  81:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
  82:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @cond INTERNAL_DOCS
  83:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
  84:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*******************************************************************************
  85:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                      Global Variable Definitions                           **
  86:../Dave/Generated/src/SDMMC001/SDMMC001.c **** *******************************************************************************/
  87:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
  88:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @ingroup SDMMC001_privateparam
  89:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @{
  90:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
  91:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
  92:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * Global variable to hold SDMMC device initialization status. It is set to 1 if
  93:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * SDMMC device is initialized.
  94:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
  95:../Dave/Generated/src/SDMMC001/SDMMC001.c **** static uint8_t SDMMC001_InitializeFlag;
  96:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
  97:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * Global variable to hold SDMMC device lock flag status. It is set to 1 if
  98:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * SDMMC device is initialized but is locked.
  99:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 100:../Dave/Generated/src/SDMMC001/SDMMC001.c **** static uint8_t SDMMC001_LockFlag;
 101:../Dave/Generated/src/SDMMC001/SDMMC001.c **** #ifdef SDMMC001_UVP_TEST
 102:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   bool  CardNotInit = FALSE;
 103:../Dave/Generated/src/SDMMC001/SDMMC001.c **** #endif
 104:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
 105:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @}
 106:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 107:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
 108:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @ingroup SDMMC001_privatefunc
 109:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @{
 110:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 111:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*******************************************************************************
 112:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                     Private Function Declarations                           **
 113:../Dave/Generated/src/SDMMC001/SDMMC001.c **** *******************************************************************************/
 114:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
 115:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @brief This function gets the Current Disk Status.
 116:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @return uint8_t \n
 117:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * STA_NOINIT: Not Initialized\n
 118:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * STA_NODISK: No card\n
 119:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * STA_PROTECT: Card is write protected\n
 120:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * <b>Reentrant: No </b><BR>
 121:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * <b>Sync/Async: Synchronous</b>
 122:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @return <b>uint8_t</b><BR>
 123:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 124:../Dave/Generated/src/SDMMC001/SDMMC001.c **** uint8_t SDMMC001_lFindDiskStatus(void);
 125:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 126:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
 127:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @}
 128:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 129:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*******************************************************************************
 130:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                     Private Function Definitions                           **
 131:../Dave/Generated/src/SDMMC001/SDMMC001.c **** *******************************************************************************/
 132:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_nonAPI_1>>>*/
 133:../Dave/Generated/src/SDMMC001/SDMMC001.c **** uint8_t SDMMC001_lFindDiskStatus()
 134:../Dave/Generated/src/SDMMC001/SDMMC001.c **** {
  33              		.loc 1 134 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 8
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 82B0     		sub	sp, sp, #8
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              	.LCFI2:
  47              		.cfi_def_cfa_register 7
 135:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   status_t Status;
 136:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t DiskStatus = 0;
  48              		.loc 1 136 0
  49 0006 4FF00003 		mov	r3, #0
  50 000a FB71     		strb	r3, [r7, #7]
 137:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* Get the Status Information */
 138:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   do
 139:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   {
 140:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  /* Get the Current State information . */
 141:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     Status = SDMMC003_GetCurrentState();
  51              		.loc 1 141 0
  52 000c FFF7FEFF 		bl	SDMMC003_GetCurrentState
  53 0010 3860     		str	r0, [r7, #0]
 142:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_nonAPI_1_1>>>*/
 143:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if (Status & (uint32_t)SDMMC003_STATE_NO_CARD )
  54              		.loc 1 143 0
  55 0012 3B68     		ldr	r3, [r7, #0]
  56 0014 03F00203 		and	r3, r3, #2
  57 0018 002B     		cmp	r3, #0
  58 001a 03D0     		beq	.L2
 144:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 145:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       DiskStatus = (SDMMC001_STA_NOINIT | SDMMC001_STA_NODISK);
  59              		.loc 1 145 0
  60 001c 4FF00303 		mov	r3, #3
  61 0020 FB71     		strb	r3, [r7, #7]
 146:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       break;
  62              		.loc 1 146 0
  63 0022 23E0     		b	.L3
  64              	.L2:
 147:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }/* End of "if ((Status & SDMMC003_STATE_CARD_INSERTED) == 0)"		*/
 148:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_nonAPI_1_2>>>*/
 149:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if ((Status & (uint32_t)SDMMC003_STATE_CARD_INITIALIZED) == 0)
  65              		.loc 1 149 0
  66 0024 3B68     		ldr	r3, [r7, #0]
  67 0026 03F00103 		and	r3, r3, #1
  68 002a 002B     		cmp	r3, #0
  69 002c 04D1     		bne	.L4
 150:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 151:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       DiskStatus |= SDMMC001_STA_NOINIT;
  70              		.loc 1 151 0
  71 002e FB79     		ldrb	r3, [r7, #7]
  72 0030 43F00103 		orr	r3, r3, #1
  73 0034 FB71     		strb	r3, [r7, #7]
 152:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       break;
  74              		.loc 1 152 0
  75 0036 19E0     		b	.L3
  76              	.L4:
 153:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }/* End of "if ((Status & SDMMC003_STATE_CARD_INITIALIZED) == 0)"	*/
 154:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if (( Status & (uint32_t)SDMMC003_STATE_CARD_LOCKED) != 0 )
  77              		.loc 1 154 0
  78 0038 3B68     		ldr	r3, [r7, #0]
  79 003a 03F04003 		and	r3, r3, #64
  80 003e 002B     		cmp	r3, #0
  81 0040 0BD0     		beq	.L5
 155:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 156:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       SDMMC001_LockFlag = 1;
  82              		.loc 1 156 0
  83 0042 40F20003 		movw	r3, #:lower16:SDMMC001_LockFlag
  84 0046 C0F20003 		movt	r3, #:upper16:SDMMC001_LockFlag
  85 004a 4FF00102 		mov	r2, #1
  86 004e 1A70     		strb	r2, [r3, #0]
 157:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       DiskStatus |= SDMMC001_STA_NOINIT;
  87              		.loc 1 157 0
  88 0050 FB79     		ldrb	r3, [r7, #7]
  89 0052 43F00103 		orr	r3, r3, #1
  90 0056 FB71     		strb	r3, [r7, #7]
 158:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       break;
  91              		.loc 1 158 0
  92 0058 08E0     		b	.L3
  93              	.L5:
 159:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }/* End of "if ((Status & (uint32_t)SDMMC003_STATE_CARD_LOCKED) == 0)" */
 160:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_nonAPI_1_3>>>*/
 161:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if ((Status & (uint32_t)SDMMC003_STATE_CARD_WRITE_PROTECT) != 0)
  94              		.loc 1 161 0
  95 005a 3B68     		ldr	r3, [r7, #0]
  96 005c 03F01003 		and	r3, r3, #16
  97 0060 002B     		cmp	r3, #0
  98 0062 03D0     		beq	.L3
 162:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 163:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       DiskStatus |= SDMMC001_STA_PROTECT;
  99              		.loc 1 163 0
 100 0064 FB79     		ldrb	r3, [r7, #7]
 101 0066 43F00403 		orr	r3, r3, #4
 102 006a FB71     		strb	r3, [r7, #7]
 103              	.L3:
 164:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }/* End of "if ((Status & SDMMC003_STATE_CARD_WRITE_PROTECT) != 0)"	*/
 165:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   } while(0);
 166:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   return DiskStatus;
 104              		.loc 1 166 0
 105 006c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 167:../Dave/Generated/src/SDMMC001/SDMMC001.c **** }
 106              		.loc 1 167 0
 107 006e 1846     		mov	r0, r3
 108 0070 07F10807 		add	r7, r7, #8
 109 0074 BD46     		mov	sp, r7
 110 0076 80BD     		pop	{r7, pc}
 111              		.cfi_endproc
 112              	.LFE117:
 114              		.section	.text.SDMMC001_Initialize,"ax",%progbits
 115              		.align	2
 116              		.global	SDMMC001_Initialize
 117              		.thumb
 118              		.thumb_func
 120              	SDMMC001_Initialize:
 121              	.LFB118:
 168:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 169:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 170:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /**
 171:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * @endcond
 172:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 173:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*******************************************************************************
 174:../Dave/Generated/src/SDMMC001/SDMMC001.c **** **                     Public Function Definitions                            **
 175:../Dave/Generated/src/SDMMC001/SDMMC001.c **** *******************************************************************************/
 176:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 177:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_1>>>*/
 178:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*
 179:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * The function checks and returns the initialization status of the card .
 180:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 181:../Dave/Generated/src/SDMMC001/SDMMC001.c **** uint8_t SDMMC001_Initialize(void)
 182:../Dave/Generated/src/SDMMC001/SDMMC001.c **** {
 122              		.loc 1 182 0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0000 80B5     		push	{r7, lr}
 127              	.LCFI3:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 82B0     		sub	sp, sp, #8
 132              	.LCFI4:
 133              		.cfi_def_cfa_offset 16
 134 0004 00AF     		add	r7, sp, #0
 135              	.LCFI5:
 136              		.cfi_def_cfa_register 7
 183:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   status_t Status;
 184:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t DiskStatus ;
 185:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_ENTRY(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_ENTRY);
 186:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   do
 187:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   {
 188:../Dave/Generated/src/SDMMC001/SDMMC001.c **** #ifdef SDMMC001_UVP_TEST
 189:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if (CardNotInit == TRUE)
 190:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 191:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       SDMMC001_InitializeFlag =1 ;
 192:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }
 193:../Dave/Generated/src/SDMMC001/SDMMC001.c **** #endif
 194:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     /* Check the device initialization status. If SDMMC device is
 195:../Dave/Generated/src/SDMMC001/SDMMC001.c ****      * already initialized, Skip this step else initialize Sdmmc device */
 196:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if ( SDMMC001_InitializeFlag == 0)
 137              		.loc 1 196 0
 138 0006 40F20003 		movw	r3, #:lower16:SDMMC001_InitializeFlag
 139 000a C0F20003 		movt	r3, #:upper16:SDMMC001_InitializeFlag
 140 000e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 141 0010 002B     		cmp	r3, #0
 142 0012 24D1     		bne	.L8
 197:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 198:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Status = SDMMC003_Start();
 143              		.loc 1 198 0
 144 0014 FFF7FEFF 		bl	SDMMC003_Start
 145 0018 7860     		str	r0, [r7, #4]
 199:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       if ( (Status != (uint32_t)DAVEApp_SUCCESS) &&  \
 146              		.loc 1 199 0
 147 001a 7B68     		ldr	r3, [r7, #4]
 148 001c 002B     		cmp	r3, #0
 149 001e 02D0     		beq	.L9
 150              		.loc 1 199 0 is_stmt 0 discriminator 1
 151 0020 7B68     		ldr	r3, [r7, #4]
 152 0022 2C2B     		cmp	r3, #44
 153 0024 18D1     		bne	.L13
 154              	.L9:
 200:../Dave/Generated/src/SDMMC001/SDMMC001.c ****            (Status != (uint32_t)SDMMC003_HOST_CONTROLLER_INITIALIZED))
 201:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       {
 202:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 203:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       }
 204:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Status = SDMMC003_CardDetectionSupport();
 155              		.loc 1 204 0 is_stmt 1
 156 0026 FFF7FEFF 		bl	SDMMC003_CardDetectionSupport
 157 002a 7860     		str	r0, [r7, #4]
 205:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       if (Status != (uint32_t)DAVEApp_SUCCESS )
 158              		.loc 1 205 0
 159 002c 7B68     		ldr	r3, [r7, #4]
 160 002e 002B     		cmp	r3, #0
 161 0030 0AD0     		beq	.L10
 206:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       {
 207:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         if (Status == (uint32_t)SDMMC003_INITIALIZED_BUT_LOCKED)
 162              		.loc 1 207 0
 163 0032 7B68     		ldr	r3, [r7, #4]
 164 0034 2B2B     		cmp	r3, #43
 165 0036 11D1     		bne	.L14
 208:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         {
 209:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           SDMMC001_LockFlag = 1;
 166              		.loc 1 209 0
 167 0038 40F20003 		movw	r3, #:lower16:SDMMC001_LockFlag
 168 003c C0F20003 		movt	r3, #:upper16:SDMMC001_LockFlag
 169 0040 4FF00102 		mov	r2, #1
 170 0044 1A70     		strb	r2, [r3, #0]
 210:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         }
 211:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 171              		.loc 1 211 0
 172 0046 09E0     		b	.L14
 173              	.L10:
 212:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       }
 213:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       SDMMC001_InitializeFlag = 1; 
 174              		.loc 1 213 0
 175 0048 40F20003 		movw	r3, #:lower16:SDMMC001_InitializeFlag
 176 004c C0F20003 		movt	r3, #:upper16:SDMMC001_InitializeFlag
 177 0050 4FF00102 		mov	r2, #1
 178 0054 1A70     		strb	r2, [r3, #0]
 179 0056 02E0     		b	.L8
 180              	.L13:
 202:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 181              		.loc 1 202 0
 182 0058 00BF     		nop
 183 005a 00E0     		b	.L8
 184              	.L14:
 211:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 185              		.loc 1 211 0
 186 005c 00BF     		nop
 187              	.L8:
 214:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }
 215:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   } while(0);
 216:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* Debug Log Message */
 217:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   DiskStatus =  SDMMC001_lFindDiskStatus();
 188              		.loc 1 217 0
 189 005e FFF7FEFF 		bl	SDMMC001_lFindDiskStatus
 190 0062 0346     		mov	r3, r0
 191 0064 FB70     		strb	r3, [r7, #3]
 218:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   ERROR(GID_SDMMC001,Status,0,0);
 219:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_EXIT(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_EXIT);
 220:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   return DiskStatus;
 192              		.loc 1 220 0
 193 0066 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 221:../Dave/Generated/src/SDMMC001/SDMMC001.c **** }
 194              		.loc 1 221 0
 195 0068 1846     		mov	r0, r3
 196 006a 07F10807 		add	r7, r7, #8
 197 006e BD46     		mov	sp, r7
 198 0070 80BD     		pop	{r7, pc}
 199              		.cfi_endproc
 200              	.LFE118:
 202 0072 00BF     		.section	.text.SDMMC001_GetStatus,"ax",%progbits
 203              		.align	2
 204              		.global	SDMMC001_GetStatus
 205              		.thumb
 206              		.thumb_func
 208              	SDMMC001_GetStatus:
 209              	.LFB119:
 222:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 223:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_2>>>*/
 224:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*
 225:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * The function gets the status of the card whether the card is initialized,
 226:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * inserted or write protected.
 227:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 228:../Dave/Generated/src/SDMMC001/SDMMC001.c **** uint8_t SDMMC001_GetStatus(void)
 229:../Dave/Generated/src/SDMMC001/SDMMC001.c **** {
 210              		.loc 1 229 0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 8
 213              		@ frame_needed = 1, uses_anonymous_args = 0
 214 0000 80B5     		push	{r7, lr}
 215              	.LCFI6:
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219 0002 82B0     		sub	sp, sp, #8
 220              	.LCFI7:
 221              		.cfi_def_cfa_offset 16
 222 0004 00AF     		add	r7, sp, #0
 223              	.LCFI8:
 224              		.cfi_def_cfa_register 7
 230:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t  DiskStatus;
 231:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_ENTRY(GID_SDMMC001,(uint32_t)SDMMC001_FUNCTION_ENTRY);
 232:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   DiskStatus  = SDMMC001_Initialize();
 225              		.loc 1 232 0
 226 0006 FFF7FEFF 		bl	SDMMC001_Initialize
 227 000a 0346     		mov	r3, r0
 228 000c FB71     		strb	r3, [r7, #7]
 233:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_EXIT(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_EXIT);
 234:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   return DiskStatus;
 229              		.loc 1 234 0
 230 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 235:../Dave/Generated/src/SDMMC001/SDMMC001.c **** }
 231              		.loc 1 235 0
 232 0010 1846     		mov	r0, r3
 233 0012 07F10807 		add	r7, r7, #8
 234 0016 BD46     		mov	sp, r7
 235 0018 80BD     		pop	{r7, pc}
 236              		.cfi_endproc
 237              	.LFE119:
 239 001a 00BF     		.section	.text.SDMMC001_ReadBlock,"ax",%progbits
 240              		.align	2
 241              		.global	SDMMC001_ReadBlock
 242              		.thumb
 243              		.thumb_func
 245              	SDMMC001_ReadBlock:
 246              	.LFB120:
 236:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 237:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* <<<DD_SDMMC001_API_3>>>*/
 238:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*
 239:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * The function reads the data from the card.
 240:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 241:../Dave/Generated/src/SDMMC001/SDMMC001.c **** uint32_t SDMMC001_ReadBlock
 242:../Dave/Generated/src/SDMMC001/SDMMC001.c **** (
 243:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t *ReadBuf,
 244:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint32_t SectorNumber,
 245:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t  SectorCount
 246:../Dave/Generated/src/SDMMC001/SDMMC001.c **** )
 247:../Dave/Generated/src/SDMMC001/SDMMC001.c **** {
 247              		.loc 1 247 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 32
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251 0000 80B5     		push	{r7, lr}
 252              	.LCFI9:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 7, -8
 255              		.cfi_offset 14, -4
 256 0002 88B0     		sub	sp, sp, #32
 257              	.LCFI10:
 258              		.cfi_def_cfa_offset 40
 259 0004 00AF     		add	r7, sp, #0
 260              	.LCFI11:
 261              		.cfi_def_cfa_register 7
 262 0006 F860     		str	r0, [r7, #12]
 263 0008 B960     		str	r1, [r7, #8]
 264 000a 1346     		mov	r3, r2
 265 000c FB71     		strb	r3, [r7, #7]
 248:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   status_t Status;
 249:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t DiskStatus;
 250:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint32_t Result;
 251:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_ENTRY(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_ENTRY);
 252:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* Check the status before reading data */
 253:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   DiskStatus = SDMMC001_GetStatus();
 266              		.loc 1 253 0
 267 000e FFF7FEFF 		bl	SDMMC001_GetStatus
 268 0012 0346     		mov	r3, r0
 269 0014 FB75     		strb	r3, [r7, #23]
 254:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_3_1>>>*/
 255:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   if ((DiskStatus & (uint8_t)SDMMC001_STA_NOINIT) != 0)
 270              		.loc 1 255 0
 271 0016 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 272 0018 03F00103 		and	r3, r3, #1
 273 001c 002B     		cmp	r3, #0
 274 001e 03D0     		beq	.L18
 256:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   {
 257:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     Result = SDMMC001_RES_NOTRDY;
 275              		.loc 1 257 0
 276 0020 4FF00303 		mov	r3, #3
 277 0024 BB61     		str	r3, [r7, #24]
 278 0026 19E0     		b	.L19
 279              	.L18:
 258:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     ERROR(GID_SDMMC001,Result,0,0);
 259:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   }
 260:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   else
 261:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   {
 262:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*Check for single block read or multiple block read based on sector count */
 263:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_3_2>>>*/
 264:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if (SectorCount == 1)
 280              		.loc 1 264 0
 281 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282 002a 012B     		cmp	r3, #1
 283 002c 05D1     		bne	.L20
 265:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 266:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Status = SDMMC003_CardReadSingleBlock( (uint32_t *)ReadBuf, SectorNumber);
 284              		.loc 1 266 0
 285 002e F868     		ldr	r0, [r7, #12]
 286 0030 B968     		ldr	r1, [r7, #8]
 287 0032 FFF7FEFF 		bl	SDMMC003_CardReadSingleBlock
 288 0036 F861     		str	r0, [r7, #28]
 289 0038 06E0     		b	.L21
 290              	.L20:
 267:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }
 268:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_3_3>>>*/
 269:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     else
 270:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 271:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Status = SDMMC003_CardReadMultipleBlocks((uint32_t *)ReadBuf,SectorNumber, \
 291              		.loc 1 271 0
 292 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 293 003c F868     		ldr	r0, [r7, #12]
 294 003e B968     		ldr	r1, [r7, #8]
 295 0040 1A46     		mov	r2, r3
 296 0042 FFF7FEFF 		bl	SDMMC003_CardReadMultipleBlocks
 297 0046 F861     		str	r0, [r7, #28]
 298              	.L21:
 272:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                                 SectorCount);
 273:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }/*End of "if (SectorCount == 1)"*/
 274:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_3_4>>>*/
 275:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if (Status == (uint32_t)DAVEApp_SUCCESS)
 299              		.loc 1 275 0
 300 0048 FB69     		ldr	r3, [r7, #28]
 301 004a 002B     		cmp	r3, #0
 302 004c 03D1     		bne	.L22
 276:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 277:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Result = SDMMC001_RES_OK;
 303              		.loc 1 277 0
 304 004e 4FF00003 		mov	r3, #0
 305 0052 BB61     		str	r3, [r7, #24]
 306 0054 02E0     		b	.L19
 307              	.L22:
 278:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }
 279:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_3_5>>>*/
 280:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     else
 281:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 282:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Result = SDMMC001_RES_ERROR;
 308              		.loc 1 282 0
 309 0056 4FF00103 		mov	r3, #1
 310 005a BB61     		str	r3, [r7, #24]
 311              	.L19:
 283:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       ERROR(GID_SDMMC001,SDMMC001_SDMMC00x_ERROR,sizeof(int),Status);
 284:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }/* End of "if (Status == (uint32_t)DAVEApp_SUCCESS)"*/
 285:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   }/* End of " if ((DiskStatus & (uint8_t)STA_NOINIT) != 0)"*/
 286:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_EXIT(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_EXIT);
 287:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   return Result;
 312              		.loc 1 287 0
 313 005c BB69     		ldr	r3, [r7, #24]
 288:../Dave/Generated/src/SDMMC001/SDMMC001.c **** }
 314              		.loc 1 288 0
 315 005e 1846     		mov	r0, r3
 316 0060 07F12007 		add	r7, r7, #32
 317 0064 BD46     		mov	sp, r7
 318 0066 80BD     		pop	{r7, pc}
 319              		.cfi_endproc
 320              	.LFE120:
 322              		.section	.text.SDMMC001_WriteBlock,"ax",%progbits
 323              		.align	2
 324              		.global	SDMMC001_WriteBlock
 325              		.thumb
 326              		.thumb_func
 328              	SDMMC001_WriteBlock:
 329              	.LFB121:
 289:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 290:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_4>>>*/
 291:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*
 292:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * The function writes the data on the card.
 293:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 294:../Dave/Generated/src/SDMMC001/SDMMC001.c **** uint32_t SDMMC001_WriteBlock
 295:../Dave/Generated/src/SDMMC001/SDMMC001.c **** (
 296:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   const uint8_t *WriteBuf,
 297:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint32_t SectorNumber,
 298:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t SectorCount
 299:../Dave/Generated/src/SDMMC001/SDMMC001.c **** )
 300:../Dave/Generated/src/SDMMC001/SDMMC001.c **** {
 330              		.loc 1 300 0
 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 32
 333              		@ frame_needed = 1, uses_anonymous_args = 0
 334 0000 80B5     		push	{r7, lr}
 335              	.LCFI12:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 7, -8
 338              		.cfi_offset 14, -4
 339 0002 88B0     		sub	sp, sp, #32
 340              	.LCFI13:
 341              		.cfi_def_cfa_offset 40
 342 0004 00AF     		add	r7, sp, #0
 343              	.LCFI14:
 344              		.cfi_def_cfa_register 7
 345 0006 F860     		str	r0, [r7, #12]
 346 0008 B960     		str	r1, [r7, #8]
 347 000a 1346     		mov	r3, r2
 348 000c FB71     		strb	r3, [r7, #7]
 301:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   status_t Status ;
 302:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t DiskStatus;
 303:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint32_t Result;
 304:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_ENTRY(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_ENTRY);
 305:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 306:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   do
 307:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   {
 308:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     DiskStatus = SDMMC001_GetStatus ();
 349              		.loc 1 308 0
 350 000e FFF7FEFF 		bl	SDMMC001_GetStatus
 351 0012 0346     		mov	r3, r0
 352 0014 FB75     		strb	r3, [r7, #23]
 309:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_4_1>>>*/
 310:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* If the card is not initialized */
 311:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if ((DiskStatus & SDMMC001_STA_NOINIT) != 0)
 353              		.loc 1 311 0
 354 0016 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 355 0018 03F00103 		and	r3, r3, #1
 356 001c 002B     		cmp	r3, #0
 357 001e 03D0     		beq	.L25
 312:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 313:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Result = SDMMC001_RES_NOTRDY;
 358              		.loc 1 313 0
 359 0020 4FF00303 		mov	r3, #3
 360 0024 BB61     		str	r3, [r7, #24]
 314:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       ERROR(GID_SDMMC001,Result,0,0);
 315:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       break;
 361              		.loc 1 315 0
 362 0026 22E0     		b	.L26
 363              	.L25:
 316:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }/* End of "if ((DiskStatus & SDMMC001_STA_NOINIT) != 0)"*/
 317:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* If the card is read only or write protected */
 318:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_4_2>>>*/
 319:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if ((DiskStatus & SDMMC001_STA_PROTECT) != 0)
 364              		.loc 1 319 0
 365 0028 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 366 002a 03F00403 		and	r3, r3, #4
 367 002e 002B     		cmp	r3, #0
 368 0030 03D0     		beq	.L27
 320:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 321:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Result = SDMMC001_RES_WRPRT;
 369              		.loc 1 321 0
 370 0032 4FF00203 		mov	r3, #2
 371 0036 BB61     		str	r3, [r7, #24]
 322:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       ERROR(GID_SDMMC001,Result,0,0);
 323:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       break;
 372              		.loc 1 323 0
 373 0038 19E0     		b	.L26
 374              	.L27:
 324:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }/* End of "if ((DiskStatus & SDMMC001_STA_PROTECT) != 0)"*/
 325:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*Check for single block write or multiple block write.*/
 326:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_4_3>>>*/
 327:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if (SectorCount == 1)
 375              		.loc 1 327 0
 376 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 377 003c 012B     		cmp	r3, #1
 378 003e 05D1     		bne	.L28
 328:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 329:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Status = SDMMC003_CardWriteSingleBlock((uint32_t *)WriteBuf, SectorNumber);
 379              		.loc 1 329 0
 380 0040 F868     		ldr	r0, [r7, #12]
 381 0042 B968     		ldr	r1, [r7, #8]
 382 0044 FFF7FEFF 		bl	SDMMC003_CardWriteSingleBlock
 383 0048 F861     		str	r0, [r7, #28]
 384 004a 06E0     		b	.L29
 385              	.L28:
 330:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }
 331:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_4_4>>>*/
 332:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     else
 333:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 334:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Status = SDMMC003_CardWriteMultipleBlocks((uint32_t *)WriteBuf,\
 386              		.loc 1 334 0
 387 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 388 004e F868     		ldr	r0, [r7, #12]
 389 0050 B968     		ldr	r1, [r7, #8]
 390 0052 1A46     		mov	r2, r3
 391 0054 FFF7FEFF 		bl	SDMMC003_CardWriteMultipleBlocks
 392 0058 F861     		str	r0, [r7, #28]
 393              	.L29:
 335:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                                  SectorNumber, SectorCount );
 336:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     } /* End of "if (SectorCount == 1)"*/
 337:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_4_5>>>*/
 338:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if (Status == (uint32_t)DAVEApp_SUCCESS)
 394              		.loc 1 338 0
 395 005a FB69     		ldr	r3, [r7, #28]
 396 005c 002B     		cmp	r3, #0
 397 005e 03D1     		bne	.L30
 339:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 340:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Result = SDMMC001_RES_OK;
 398              		.loc 1 340 0
 399 0060 4FF00003 		mov	r3, #0
 400 0064 BB61     		str	r3, [r7, #24]
 401 0066 02E0     		b	.L26
 402              	.L30:
 341:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }
 342:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_4_6>>>*/
 343:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     else
 344:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 345:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       Result = SDMMC001_RES_ERROR;
 403              		.loc 1 345 0
 404 0068 4FF00103 		mov	r3, #1
 405 006c BB61     		str	r3, [r7, #24]
 406              	.L26:
 346:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       ERROR(GID_SDMMC001,SDMMC001_SDMMC00x_ERROR,0,0);
 347:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     } /* End of "if (Status == (uint32_t)DAVEApp_SUCCESS)"*/
 348:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   } while(0);
 349:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_EXIT(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_EXIT);
 350:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   return Result;
 407              		.loc 1 350 0
 408 006e BB69     		ldr	r3, [r7, #24]
 351:../Dave/Generated/src/SDMMC001/SDMMC001.c **** }
 409              		.loc 1 351 0
 410 0070 1846     		mov	r0, r3
 411 0072 07F12007 		add	r7, r7, #32
 412 0076 BD46     		mov	sp, r7
 413 0078 80BD     		pop	{r7, pc}
 414              		.cfi_endproc
 415              	.LFE121:
 417 007a 00BF     		.section	.text.SDMMC001_Ioctl,"ax",%progbits
 418              		.align	2
 419              		.global	SDMMC001_Ioctl
 420              		.thumb
 421              		.thumb_func
 423              	SDMMC001_Ioctl:
 424              	.LFB122:
 352:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 353:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5>>>*/
 354:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*
 355:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  * The function performs the various IOCTL operation.
 356:../Dave/Generated/src/SDMMC001/SDMMC001.c ****  */
 357:../Dave/Generated/src/SDMMC001/SDMMC001.c **** uint32_t SDMMC001_Ioctl
 358:../Dave/Generated/src/SDMMC001/SDMMC001.c **** (
 359:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t Command,
 360:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   void *Buffer
 361:../Dave/Generated/src/SDMMC001/SDMMC001.c **** )
 362:../Dave/Generated/src/SDMMC001/SDMMC001.c **** {
 425              		.loc 1 362 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 544
 428              		@ frame_needed = 1, uses_anonymous_args = 0
 429 0000 80B5     		push	{r7, lr}
 430              	.LCFI15:
 431              		.cfi_def_cfa_offset 8
 432              		.cfi_offset 7, -8
 433              		.cfi_offset 14, -4
 434 0002 ADF5087D 		sub	sp, sp, #544
 435              	.LCFI16:
 436              		.cfi_def_cfa_offset 552
 437 0006 00AF     		add	r7, sp, #0
 438              	.LCFI17:
 439              		.cfi_def_cfa_register 7
 440 0008 0246     		mov	r2, r0
 441 000a 3B46     		mov	r3, r7
 442 000c 1960     		str	r1, [r3, #0]
 443 000e 07F10703 		add	r3, r7, #7
 444 0012 1A70     		strb	r2, [r3, #0]
 363:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   status_t Status = (uint32_t)SDMMC001_ERROR;
 445              		.loc 1 363 0
 446 0014 4FF00103 		mov	r3, #1
 447 0018 C7F81C32 		str	r3, [r7, #540]
 364:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint8_t DiskStatus;
 365:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   uint32_t Result;
 366:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   SDMMC001_EraseAddrType *ErasePtr;
 367:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   const SDMMC001_PasswdType *PasswdPtr;
 368:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   SDMMC003_LocalLockStructType LockStruct = {0};
 448              		.loc 1 368 0
 449 001c 07F10803 		add	r3, r7, #8
 450 0020 1A46     		mov	r2, r3
 451 0022 4FF40173 		mov	r3, #516
 452 0026 1046     		mov	r0, r2
 453 0028 4FF00001 		mov	r1, #0
 454 002c 1A46     		mov	r2, r3
 455 002e FFF7FEFF 		bl	memset
 369:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_ENTRY(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_ENTRY);
 370:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   do
 371:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   {
 372:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     DiskStatus = SDMMC001_GetStatus();
 456              		.loc 1 372 0
 457 0032 FFF7FEFF 		bl	SDMMC001_GetStatus
 458 0036 0346     		mov	r3, r0
 459 0038 87F81732 		strb	r3, [r7, #535]
 373:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_1>>>*/
 374:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* If card is not initialized or inserted */
 375:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     if ((DiskStatus & (uint8_t)SDMMC001_STA_NOINIT) != 0)
 460              		.loc 1 375 0
 461 003c 97F81732 		ldrb	r3, [r7, #535]	@ zero_extendqisi2
 462 0040 03F00103 		and	r3, r3, #1
 463 0044 002B     		cmp	r3, #0
 464 0046 33D0     		beq	.L33
 376:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 377:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       if (SDMMC001_LockFlag == 1UL)
 465              		.loc 1 377 0
 466 0048 40F20003 		movw	r3, #:lower16:SDMMC001_LockFlag
 467 004c C0F20003 		movt	r3, #:upper16:SDMMC001_LockFlag
 468 0050 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 469 0052 012B     		cmp	r3, #1
 470 0054 27D1     		bne	.L34
 378:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       {
 379:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = (uint32_t)SDMMC001_DISK_LOCKED;
 471              		.loc 1 379 0
 472 0056 4FF00303 		mov	r3, #3
 473 005a C7F81C32 		str	r3, [r7, #540]
 380:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         if ( (Command != SDMMC001_MMC_UNLOCK_CARD) &&
 474              		.loc 1 380 0
 475 005e 07F10703 		add	r3, r7, #7
 476 0062 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 477 0064 202B     		cmp	r3, #32
 478 0066 23D0     		beq	.L33
 479              		.loc 1 380 0 is_stmt 0 discriminator 1
 480 0068 07F10703 		add	r3, r7, #7
 481 006c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 482 006e 212B     		cmp	r3, #33
 483 0070 1ED0     		beq	.L33
 381:../Dave/Generated/src/SDMMC001/SDMMC001.c ****            (Command != SDMMC001_MMC_SET_PASSWD) &&
 484              		.loc 1 381 0 is_stmt 1
 485 0072 07F10703 		add	r3, r7, #7
 486 0076 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 487 0078 222B     		cmp	r3, #34
 488 007a 19D0     		beq	.L33
 382:../Dave/Generated/src/SDMMC001/SDMMC001.c ****            (Command != SDMMC001_MMC_CLEAR_PASSWD) &&
 489              		.loc 1 382 0
 490 007c 07F10703 		add	r3, r7, #7
 491 0080 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 492 0082 232B     		cmp	r3, #35
 493 0084 14D0     		beq	.L33
 383:../Dave/Generated/src/SDMMC001/SDMMC001.c ****            (Command != SDMMC001_MMC_SET_LOCK) &&
 494              		.loc 1 383 0
 495 0086 07F10703 		add	r3, r7, #7
 496 008a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 497 008c 242B     		cmp	r3, #36
 498 008e 0FD0     		beq	.L33
 384:../Dave/Generated/src/SDMMC001/SDMMC001.c ****            (Command != SDMMC001_MMC_READ_LOCK_STATUS) &&
 499              		.loc 1 384 0
 500 0090 07F10703 		add	r3, r7, #7
 501 0094 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 502 0096 252B     		cmp	r3, #37
 503 0098 0AD0     		beq	.L33
 385:../Dave/Generated/src/SDMMC001/SDMMC001.c ****            (Command != SDMMC001_MMC_FORCE_ERASE) &&
 504              		.loc 1 385 0
 505 009a 07F10703 		add	r3, r7, #7
 506 009e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 507 00a0 072B     		cmp	r3, #7
 508 00a2 05D0     		beq	.L33
 386:../Dave/Generated/src/SDMMC001/SDMMC001.c ****            (Command != SDMMC001_CTRL_EJECT) )
 387:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         {
 388:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           ERROR(GID_SDMMC001,Status,0,0);
 389:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 509              		.loc 1 389 0
 510 00a4 FAE1     		b	.L35
 511              	.L34:
 390:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         }
 391:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       }
 392:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       else
 393:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       {
 394:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = (uint32_t)SDMMC001_RES_NOTRDY;
 512              		.loc 1 394 0
 513 00a6 4FF00303 		mov	r3, #3
 514 00aa C7F81C32 		str	r3, [r7, #540]
 395:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         ERROR(GID_SDMMC001,Status,0,0);
 396:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 515              		.loc 1 396 0
 516 00ae F5E1     		b	.L35
 517              	.L33:
 397:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       }
 398:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     }
 399:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /* Switch to the respective IOCTL command */
 400:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     switch (Command)
 518              		.loc 1 400 0
 519 00b0 07F10703 		add	r3, r7, #7
 520 00b4 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 521 00b6 252B     		cmp	r3, #37
 522 00b8 00F2E481 		bhi	.L36
 523 00bc 01A2     		adr	r2, .L55
 524 00be 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 525 00c2 00BF     		.align	2
 526              	.L55:
 527 00c4 5D010000 		.word	.L37+1
 528 00c8 75010000 		.word	.L38+1
 529 00cc 67010000 		.word	.L39+1
 530 00d0 A5010000 		.word	.L40+1
 531 00d4 83010000 		.word	.L41+1
 532 00d8 85040000 		.word	.L36+1
 533 00dc 85040000 		.word	.L36+1
 534 00e0 7B040000 		.word	.L42+1
 535 00e4 85040000 		.word	.L36+1
 536 00e8 85040000 		.word	.L36+1
 537 00ec B3010000 		.word	.L43+1
 538 00f0 C1010000 		.word	.L44+1
 539 00f4 CF010000 		.word	.L45+1
 540 00f8 DD010000 		.word	.L46+1
 541 00fc EB010000 		.word	.L47+1
 542 0100 85040000 		.word	.L36+1
 543 0104 85040000 		.word	.L36+1
 544 0108 85040000 		.word	.L36+1
 545 010c 85040000 		.word	.L36+1
 546 0110 85040000 		.word	.L36+1
 547 0114 85040000 		.word	.L36+1
 548 0118 85040000 		.word	.L36+1
 549 011c 85040000 		.word	.L36+1
 550 0120 85040000 		.word	.L36+1
 551 0124 85040000 		.word	.L36+1
 552 0128 85040000 		.word	.L36+1
 553 012c 85040000 		.word	.L36+1
 554 0130 85040000 		.word	.L36+1
 555 0134 85040000 		.word	.L36+1
 556 0138 85040000 		.word	.L36+1
 557 013c 85040000 		.word	.L36+1
 558 0140 F9010000 		.word	.L48+1
 559 0144 57020000 		.word	.L49+1
 560 0148 B5020000 		.word	.L50+1
 561 014c 5B030000 		.word	.L51+1
 562 0150 B9030000 		.word	.L52+1
 563 0154 4F040000 		.word	.L53+1
 564 0158 5D040000 		.word	.L54+1
 565              	.L37:
 401:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     {
 402:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_2>>>*/
 403:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_CTRL_SYNC:
 404:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_FlushDiskWriteCache();
 566              		.loc 1 404 0
 567 015c FFF7FEFF 		bl	SDMMC003_FlushDiskWriteCache
 568 0160 C7F81C02 		str	r0, [r7, #540]
 405:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 569              		.loc 1 405 0
 570 0164 9AE1     		b	.L35
 571              	.L39:
 406:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 407:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_GET_SECTOR_SIZE:
 408:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetSectorSize(Buffer);
 572              		.loc 1 408 0
 573 0166 3B46     		mov	r3, r7
 574 0168 1868     		ldr	r0, [r3, #0]
 575 016a FFF7FEFF 		bl	SDMMC003_GetSectorSize
 576 016e C7F81C02 		str	r0, [r7, #540]
 409:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 		break;
 577              		.loc 1 409 0
 578 0172 93E1     		b	.L35
 579              	.L38:
 410:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 		 
 411:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_3>>>*/
 412:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_GET_SECTOR_COUNT:
 413:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetSectorCount( Buffer );
 580              		.loc 1 413 0
 581 0174 3B46     		mov	r3, r7
 582 0176 1868     		ldr	r0, [r3, #0]
 583 0178 FFF7FEFF 		bl	SDMMC003_GetSectorCount
 584 017c C7F81C02 		str	r0, [r7, #540]
 414:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 585              		.loc 1 414 0
 586 0180 8CE1     		b	.L35
 587              	.L41:
 415:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 416:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_4>>>*/
 417:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_CTRL_ERASE_SECTOR:
 418:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         ErasePtr = (SDMMC001_EraseAddrType *) Buffer;
 588              		.loc 1 418 0
 589 0182 3B46     		mov	r3, r7
 590 0184 1B68     		ldr	r3, [r3, #0]
 591 0186 C7F81032 		str	r3, [r7, #528]
 419:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_EraseBlock( (ErasePtr->StartAddress),
 592              		.loc 1 419 0
 593 018a D7F81032 		ldr	r3, [r7, #528]
 594 018e 1A68     		ldr	r2, [r3, #0]
 420:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                       (ErasePtr->EndAddress));
 595              		.loc 1 420 0
 596 0190 D7F81032 		ldr	r3, [r7, #528]
 419:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_EraseBlock( (ErasePtr->StartAddress),
 597              		.loc 1 419 0
 598 0194 5B68     		ldr	r3, [r3, #4]
 599 0196 1046     		mov	r0, r2
 600 0198 1946     		mov	r1, r3
 601 019a FFF7FEFF 		bl	SDMMC003_EraseBlock
 602 019e C7F81C02 		str	r0, [r7, #540]
 421:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 603              		.loc 1 421 0
 604 01a2 7BE1     		b	.L35
 605              	.L40:
 422:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 423:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_5>>>*/
 424:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_GET_BLOCK_SIZE:
 425:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetBlockSize(Buffer);
 606              		.loc 1 425 0
 607 01a4 3B46     		mov	r3, r7
 608 01a6 1868     		ldr	r0, [r3, #0]
 609 01a8 FFF7FEFF 		bl	SDMMC003_GetBlockSize
 610 01ac C7F81C02 		str	r0, [r7, #540]
 426:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 611              		.loc 1 426 0
 612 01b0 74E1     		b	.L35
 613              	.L43:
 427:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 428:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_6>>>*/
 429:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_GET_TYPE:
 430:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetCardType(Buffer);
 614              		.loc 1 430 0
 615 01b2 3B46     		mov	r3, r7
 616 01b4 1868     		ldr	r0, [r3, #0]
 617 01b6 FFF7FEFF 		bl	SDMMC003_GetCardType
 618 01ba C7F81C02 		str	r0, [r7, #540]
 431:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 619              		.loc 1 431 0
 620 01be 6DE1     		b	.L35
 621              	.L44:
 432:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 433:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_7>>>*/
 434:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_GET_CSD:
 435:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetCsd(Buffer);
 622              		.loc 1 435 0
 623 01c0 3B46     		mov	r3, r7
 624 01c2 1868     		ldr	r0, [r3, #0]
 625 01c4 FFF7FEFF 		bl	SDMMC003_GetCsd
 626 01c8 C7F81C02 		str	r0, [r7, #540]
 436:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 627              		.loc 1 436 0
 628 01cc 66E1     		b	.L35
 629              	.L45:
 437:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 438:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_8>>>*/
 439:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_GET_CID:
 440:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetCid(Buffer);
 630              		.loc 1 440 0
 631 01ce 3B46     		mov	r3, r7
 632 01d0 1868     		ldr	r0, [r3, #0]
 633 01d2 FFF7FEFF 		bl	SDMMC003_GetCid
 634 01d6 C7F81C02 		str	r0, [r7, #540]
 441:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 635              		.loc 1 441 0
 636 01da 5FE1     		b	.L35
 637              	.L46:
 442:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 443:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_8>>>*/
 444:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_GET_OCR:
 445:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetOcr(Buffer);
 638              		.loc 1 445 0
 639 01dc 3B46     		mov	r3, r7
 640 01de 1868     		ldr	r0, [r3, #0]
 641 01e0 FFF7FEFF 		bl	SDMMC003_GetOcr
 642 01e4 C7F81C02 		str	r0, [r7, #540]
 446:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 643              		.loc 1 446 0
 644 01e8 58E1     		b	.L35
 645              	.L47:
 447:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 448:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_10>>>*/
 449:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_GET_SDSTAT:
 450:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetSdStatus(Buffer);
 646              		.loc 1 450 0
 647 01ea 3B46     		mov	r3, r7
 648 01ec 1868     		ldr	r0, [r3, #0]
 649 01ee FFF7FEFF 		bl	SDMMC003_GetSdStatus
 650 01f2 C7F81C02 		str	r0, [r7, #540]
 451:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 651              		.loc 1 451 0
 652 01f6 51E1     		b	.L35
 653              	.L48:
 452:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 453:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_11>>>*/
 454:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_LOCK_CARD:
 455:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.Mode = 0x04UL;
 654              		.loc 1 455 0
 655 01f8 07F10803 		add	r3, r7, #8
 656 01fc 4FF00402 		mov	r2, #4
 657 0200 1A70     		strb	r2, [r3, #0]
 456:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         PasswdPtr = (const SDMMC001_PasswdType *)Buffer;
 658              		.loc 1 456 0
 659 0202 3B46     		mov	r3, r7
 660 0204 1B68     		ldr	r3, [r3, #0]
 661 0206 C7F80C32 		str	r3, [r7, #524]
 457:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /* Check password length doesn't exceeds the permitted length */
 458:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /*<<<DD_SDMMC001_API_5_11_1>>>*/
 459:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         if( PasswdPtr->OldPwdLength > SDMMC001_MAX_PASSWD_LEN )
 662              		.loc 1 459 0
 663 020a D7F80C32 		ldr	r3, [r7, #524]
 664 020e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 665 0212 102B     		cmp	r3, #16
 666 0214 00F23B81 		bhi	.L63
 667              	.L56:
 460:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         {
 461:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 462:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         }
 463:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.PwdLen = PasswdPtr->OldPwdLength;
 668              		.loc 1 463 0
 669 0218 D7F80C32 		ldr	r3, [r7, #524]
 670 021c 93F82020 		ldrb	r2, [r3, #32]	@ zero_extendqisi2
 671 0220 07F10803 		add	r3, r7, #8
 672 0224 5A70     		strb	r2, [r3, #1]
 464:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData, PasswdPtr->OldPassword, \
 673              		.loc 1 464 0
 674 0226 D7F80C22 		ldr	r2, [r7, #524]
 465:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                (uint32_t)LockStruct.PwdLen);
 675              		.loc 1 465 0
 676 022a 07F10803 		add	r3, r7, #8
 677 022e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 464:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData, PasswdPtr->OldPassword, \
 678              		.loc 1 464 0
 679 0230 07F10801 		add	r1, r7, #8
 680 0234 01F10201 		add	r1, r1, #2
 681 0238 0846     		mov	r0, r1
 682 023a 1146     		mov	r1, r2
 683 023c 1A46     		mov	r2, r3
 684 023e FFF7FEFF 		bl	memcpy
 466:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_LockUnlockCard(&LockStruct, SDMMC003_LOCK);
 685              		.loc 1 466 0
 686 0242 07F10803 		add	r3, r7, #8
 687 0246 1846     		mov	r0, r3
 688 0248 4FF00001 		mov	r1, #0
 689 024c FFF7FEFF 		bl	SDMMC003_LockUnlockCard
 690 0250 C7F81C02 		str	r0, [r7, #540]
 467:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 691              		.loc 1 467 0
 692 0254 22E1     		b	.L35
 693              	.L49:
 468:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 469:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_12>>>*/
 470:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_UNLOCK_CARD:
 471:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.Mode = 0x00UL;
 694              		.loc 1 471 0
 695 0256 07F10803 		add	r3, r7, #8
 696 025a 4FF00002 		mov	r2, #0
 697 025e 1A70     		strb	r2, [r3, #0]
 472:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         PasswdPtr = (const SDMMC001_PasswdType *)Buffer;
 698              		.loc 1 472 0
 699 0260 3B46     		mov	r3, r7
 700 0262 1B68     		ldr	r3, [r3, #0]
 701 0264 C7F80C32 		str	r3, [r7, #524]
 473:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /* Check password length doesn't exceeds the permitted length */
 474:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /*<<<DD_SDMMC001_API_5_12_1>>>*/
 475:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         if( PasswdPtr->OldPwdLength > SDMMC001_MAX_PASSWD_LEN )
 702              		.loc 1 475 0
 703 0268 D7F80C32 		ldr	r3, [r7, #524]
 704 026c 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 705 0270 102B     		cmp	r3, #16
 706 0272 00F20E81 		bhi	.L64
 707              	.L57:
 476:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         {
 477:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 478:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         }
 479:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.PwdLen = PasswdPtr->OldPwdLength;
 708              		.loc 1 479 0
 709 0276 D7F80C32 		ldr	r3, [r7, #524]
 710 027a 93F82020 		ldrb	r2, [r3, #32]	@ zero_extendqisi2
 711 027e 07F10803 		add	r3, r7, #8
 712 0282 5A70     		strb	r2, [r3, #1]
 480:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData,PasswdPtr->OldPassword, LockStruct.PwdLen);
 713              		.loc 1 480 0
 714 0284 D7F80C22 		ldr	r2, [r7, #524]
 715 0288 07F10803 		add	r3, r7, #8
 716 028c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 717 028e 07F10801 		add	r1, r7, #8
 718 0292 01F10201 		add	r1, r1, #2
 719 0296 0846     		mov	r0, r1
 720 0298 1146     		mov	r1, r2
 721 029a 1A46     		mov	r2, r3
 722 029c FFF7FEFF 		bl	memcpy
 481:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status  = SDMMC003_LockUnlockCard(&LockStruct,  \
 723              		.loc 1 481 0
 724 02a0 07F10803 		add	r3, r7, #8
 725 02a4 1846     		mov	r0, r3
 726 02a6 4FF00101 		mov	r1, #1
 727 02aa FFF7FEFF 		bl	SDMMC003_LockUnlockCard
 728 02ae C7F81C02 		str	r0, [r7, #540]
 482:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                           SDMMC003_UNLOCK);
 483:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 729              		.loc 1 483 0
 730 02b2 F3E0     		b	.L35
 731              	.L50:
 484:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 485:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_13>>>*/
 486:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_SET_PASSWD:
 487:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*Fill the local lock structure with the information provided*/
 488:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.Mode  = 0x01UL;
 732              		.loc 1 488 0
 733 02b4 07F10803 		add	r3, r7, #8
 734 02b8 4FF00102 		mov	r2, #1
 735 02bc 1A70     		strb	r2, [r3, #0]
 489:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         PasswdPtr = (const SDMMC001_PasswdType *)Buffer;
 736              		.loc 1 489 0
 737 02be 3B46     		mov	r3, r7
 738 02c0 1B68     		ldr	r3, [r3, #0]
 739 02c2 C7F80C32 		str	r3, [r7, #524]
 490:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /* Check password length doesn't exceeds the permitted length */
 491:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /*<<<DD_SDMMC001_API_5_13_1>>>*/
 492:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         if( (PasswdPtr->OldPwdLength > SDMMC001_MAX_PASSWD_LEN) ||
 740              		.loc 1 492 0
 741 02c6 D7F80C32 		ldr	r3, [r7, #524]
 742 02ca 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 743 02ce 102B     		cmp	r3, #16
 744 02d0 00F2E480 		bhi	.L35
 493:../Dave/Generated/src/SDMMC001/SDMMC001.c ****             (PasswdPtr->NewPwdLength > SDMMC001_MAX_PASSWD_LEN ))
 745              		.loc 1 493 0 discriminator 1
 746 02d4 D7F80C32 		ldr	r3, [r7, #524]
 747 02d8 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 492:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         if( (PasswdPtr->OldPwdLength > SDMMC001_MAX_PASSWD_LEN) ||
 748              		.loc 1 492 0 discriminator 1
 749 02dc 102B     		cmp	r3, #16
 750 02de 00F2DD80 		bhi	.L35
 494:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         {
 495:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 496:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         }
 497:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.PwdLen = PasswdPtr->OldPwdLength + PasswdPtr->NewPwdLength;
 751              		.loc 1 497 0
 752 02e2 D7F80C32 		ldr	r3, [r7, #524]
 753 02e6 93F82020 		ldrb	r2, [r3, #32]	@ zero_extendqisi2
 754 02ea D7F80C32 		ldr	r3, [r7, #524]
 755 02ee 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 756 02f2 D318     		adds	r3, r2, r3
 757 02f4 DAB2     		uxtb	r2, r3
 758 02f6 07F10803 		add	r3, r7, #8
 759 02fa 5A70     		strb	r2, [r3, #1]
 498:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 499:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData, PasswdPtr->OldPassword, \
 760              		.loc 1 499 0
 761 02fc D7F80C22 		ldr	r2, [r7, #524]
 500:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                 PasswdPtr->OldPwdLength );
 762              		.loc 1 500 0
 763 0300 D7F80C32 		ldr	r3, [r7, #524]
 764 0304 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 499:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData, PasswdPtr->OldPassword, \
 765              		.loc 1 499 0
 766 0308 07F10801 		add	r1, r7, #8
 767 030c 01F10201 		add	r1, r1, #2
 768 0310 0846     		mov	r0, r1
 769 0312 1146     		mov	r1, r2
 770 0314 1A46     		mov	r2, r3
 771 0316 FFF7FEFF 		bl	memcpy
 501:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData + PasswdPtr->OldPwdLength, \
 772              		.loc 1 501 0
 773 031a D7F80C32 		ldr	r3, [r7, #524]
 774 031e 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 775 0322 07F10802 		add	r2, r7, #8
 776 0326 D318     		adds	r3, r2, r3
 777 0328 03F10201 		add	r1, r3, #2
 502:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                PasswdPtr->NewPassword, PasswdPtr->NewPwdLength );
 778              		.loc 1 502 0
 779 032c D7F80C32 		ldr	r3, [r7, #524]
 780 0330 03F11002 		add	r2, r3, #16
 781 0334 D7F80C32 		ldr	r3, [r7, #524]
 782 0338 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 501:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData + PasswdPtr->OldPwdLength, \
 783              		.loc 1 501 0
 784 033c 0846     		mov	r0, r1
 785 033e 1146     		mov	r1, r2
 786 0340 1A46     		mov	r2, r3
 787 0342 FFF7FEFF 		bl	memcpy
 503:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 504:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_LockUnlockCard(&LockStruct, \
 788              		.loc 1 504 0
 789 0346 07F10803 		add	r3, r7, #8
 790 034a 1846     		mov	r0, r3
 791 034c 4FF00101 		mov	r1, #1
 792 0350 FFF7FEFF 		bl	SDMMC003_LockUnlockCard
 793 0354 C7F81C02 		str	r0, [r7, #540]
 505:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                                           SDMMC003_UNLOCK);
 506:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 794              		.loc 1 506 0
 795 0358 A0E0     		b	.L35
 796              	.L51:
 507:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 508:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_14>>>*/
 509:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_CLEAR_PASSWD:
 510:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.Mode  = 0x02UL;
 797              		.loc 1 510 0
 798 035a 07F10803 		add	r3, r7, #8
 799 035e 4FF00202 		mov	r2, #2
 800 0362 1A70     		strb	r2, [r3, #0]
 511:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         PasswdPtr = (const SDMMC001_PasswdType *)Buffer;
 801              		.loc 1 511 0
 802 0364 3B46     		mov	r3, r7
 803 0366 1B68     		ldr	r3, [r3, #0]
 804 0368 C7F80C32 		str	r3, [r7, #524]
 512:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /* Check password length doesn't exceeds the permitted length */
 513:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /*<<<DD_SDMMC001_API_5_14_1>>>*/
 514:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         if( PasswdPtr->OldPwdLength > SDMMC001_MAX_PASSWD_LEN )
 805              		.loc 1 514 0
 806 036c D7F80C32 		ldr	r3, [r7, #524]
 807 0370 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 808 0374 102B     		cmp	r3, #16
 809 0376 00F28E80 		bhi	.L65
 810              	.L58:
 515:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         {
 516:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 517:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         }
 518:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.PwdLen =  PasswdPtr->OldPwdLength;
 811              		.loc 1 518 0
 812 037a D7F80C32 		ldr	r3, [r7, #524]
 813 037e 93F82020 		ldrb	r2, [r3, #32]	@ zero_extendqisi2
 814 0382 07F10803 		add	r3, r7, #8
 815 0386 5A70     		strb	r2, [r3, #1]
 519:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData, PasswdPtr ->OldPassword, \
 816              		.loc 1 519 0
 817 0388 D7F80C22 		ldr	r2, [r7, #524]
 520:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                LockStruct.PwdLen);
 818              		.loc 1 520 0
 819 038c 07F10803 		add	r3, r7, #8
 820 0390 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 519:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData, PasswdPtr ->OldPassword, \
 821              		.loc 1 519 0
 822 0392 07F10801 		add	r1, r7, #8
 823 0396 01F10201 		add	r1, r1, #2
 824 039a 0846     		mov	r0, r1
 825 039c 1146     		mov	r1, r2
 826 039e 1A46     		mov	r2, r3
 827 03a0 FFF7FEFF 		bl	memcpy
 521:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_LockUnlockCard(&LockStruct,SDMMC003_UNLOCK);
 828              		.loc 1 521 0
 829 03a4 07F10803 		add	r3, r7, #8
 830 03a8 1846     		mov	r0, r3
 831 03aa 4FF00101 		mov	r1, #1
 832 03ae FFF7FEFF 		bl	SDMMC003_LockUnlockCard
 833 03b2 C7F81C02 		str	r0, [r7, #540]
 522:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 834              		.loc 1 522 0
 835 03b6 71E0     		b	.L35
 836              	.L52:
 523:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 524:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_15>>>*/
 525:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_SET_LOCK:
 526:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.Mode  = 0x05UL;
 837              		.loc 1 526 0
 838 03b8 07F10803 		add	r3, r7, #8
 839 03bc 4FF00502 		mov	r2, #5
 840 03c0 1A70     		strb	r2, [r3, #0]
 527:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         PasswdPtr = (const SDMMC001_PasswdType *)Buffer;
 841              		.loc 1 527 0
 842 03c2 3B46     		mov	r3, r7
 843 03c4 1B68     		ldr	r3, [r3, #0]
 844 03c6 C7F80C32 		str	r3, [r7, #524]
 528:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /*<<<DD_SDMMC001_API_5_15_1>>>*/
 529:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         /* Check password length doesn't exceeds the permitted length */
 530:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         if( PasswdPtr->OldPwdLength > SDMMC001_MAX_PASSWD_LEN )
 845              		.loc 1 530 0
 846 03ca D7F80C32 		ldr	r3, [r7, #524]
 847 03ce 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 848 03d2 102B     		cmp	r3, #16
 849 03d4 61D8     		bhi	.L66
 850              	.L59:
 531:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         {
 532:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 533:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         }
 534:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.PwdLen =  PasswdPtr->OldPwdLength + PasswdPtr->NewPwdLength;
 851              		.loc 1 534 0
 852 03d6 D7F80C32 		ldr	r3, [r7, #524]
 853 03da 93F82020 		ldrb	r2, [r3, #32]	@ zero_extendqisi2
 854 03de D7F80C32 		ldr	r3, [r7, #524]
 855 03e2 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 856 03e6 D318     		adds	r3, r2, r3
 857 03e8 DAB2     		uxtb	r2, r3
 858 03ea 07F10803 		add	r3, r7, #8
 859 03ee 5A70     		strb	r2, [r3, #1]
 535:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData, PasswdPtr->OldPassword,PasswdPtr->OldPwdLength );
 860              		.loc 1 535 0
 861 03f0 D7F80C22 		ldr	r2, [r7, #524]
 862 03f4 D7F80C32 		ldr	r3, [r7, #524]
 863 03f8 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 864 03fc 07F10801 		add	r1, r7, #8
 865 0400 01F10201 		add	r1, r1, #2
 866 0404 0846     		mov	r0, r1
 867 0406 1146     		mov	r1, r2
 868 0408 1A46     		mov	r2, r3
 869 040a FFF7FEFF 		bl	memcpy
 536:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData + PasswdPtr->OldPwdLength, \
 870              		.loc 1 536 0
 871 040e D7F80C32 		ldr	r3, [r7, #524]
 872 0412 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
 873 0416 07F10802 		add	r2, r7, #8
 874 041a D318     		adds	r3, r2, r3
 875 041c 03F10201 		add	r1, r3, #2
 537:../Dave/Generated/src/SDMMC001/SDMMC001.c ****                        PasswdPtr->NewPassword, PasswdPtr->NewPwdLength );
 876              		.loc 1 537 0
 877 0420 D7F80C32 		ldr	r3, [r7, #524]
 878 0424 03F11002 		add	r2, r3, #16
 879 0428 D7F80C32 		ldr	r3, [r7, #524]
 880 042c 93F82130 		ldrb	r3, [r3, #33]	@ zero_extendqisi2
 536:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         memcpy(LockStruct.PwdData + PasswdPtr->OldPwdLength, \
 881              		.loc 1 536 0
 882 0430 0846     		mov	r0, r1
 883 0432 1146     		mov	r1, r2
 884 0434 1A46     		mov	r2, r3
 885 0436 FFF7FEFF 		bl	memcpy
 538:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status  = SDMMC003_LockUnlockCard(&LockStruct, SDMMC003_LOCK);
 886              		.loc 1 538 0
 887 043a 07F10803 		add	r3, r7, #8
 888 043e 1846     		mov	r0, r3
 889 0440 4FF00001 		mov	r1, #0
 890 0444 FFF7FEFF 		bl	SDMMC003_LockUnlockCard
 891 0448 C7F81C02 		str	r0, [r7, #540]
 539:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 892              		.loc 1 539 0
 893 044c 26E0     		b	.L35
 894              	.L53:
 540:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 541:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_16>>>*/
 542:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_READ_LOCK_STATUS:
 543:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_GetLockStatus((uint32_t *)Buffer);
 895              		.loc 1 543 0
 896 044e 3B46     		mov	r3, r7
 897 0450 1868     		ldr	r0, [r3, #0]
 898 0452 FFF7FEFF 		bl	SDMMC003_GetLockStatus
 899 0456 C7F81C02 		str	r0, [r7, #540]
 544:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 900              		.loc 1 544 0
 901 045a 1FE0     		b	.L35
 902              	.L54:
 545:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 546:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_17>>>*/
 547:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_MMC_FORCE_ERASE:
 548:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         LockStruct.Mode = 0x08UL;
 903              		.loc 1 548 0
 904 045c 07F10803 		add	r3, r7, #8
 905 0460 4FF00802 		mov	r2, #8
 906 0464 1A70     		strb	r2, [r3, #0]
 549:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_LockUnlockCard(&LockStruct, SDMMC003_UNLOCK);
 907              		.loc 1 549 0
 908 0466 07F10803 		add	r3, r7, #8
 909 046a 1846     		mov	r0, r3
 910 046c 4FF00101 		mov	r1, #1
 911 0470 FFF7FEFF 		bl	SDMMC003_LockUnlockCard
 912 0474 C7F81C02 		str	r0, [r7, #540]
 550:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 913              		.loc 1 550 0
 914 0478 10E0     		b	.L35
 915              	.L42:
 551:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 552:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_18>>>*/
 553:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       case SDMMC001_CTRL_EJECT:
 554:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Status = SDMMC003_EjectCard();
 916              		.loc 1 554 0
 917 047a FFF7FEFF 		bl	SDMMC003_EjectCard
 918 047e C7F81C02 		str	r0, [r7, #540]
 555:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 919              		.loc 1 555 0
 920 0482 0BE0     		b	.L35
 921              	.L36:
 556:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 557:../Dave/Generated/src/SDMMC001/SDMMC001.c ****       default:
 558:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         Result = SDMMC001_RES_PARERR;
 922              		.loc 1 558 0
 923 0484 4FF00403 		mov	r3, #4
 924 0488 C7F81832 		str	r3, [r7, #536]
 559:../Dave/Generated/src/SDMMC001/SDMMC001.c ****         break;
 925              		.loc 1 559 0
 926 048c 06E0     		b	.L35
 927              	.L63:
 461:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 928              		.loc 1 461 0
 929 048e 00BF     		nop
 930 0490 04E0     		b	.L35
 931              	.L64:
 477:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 932              		.loc 1 477 0
 933 0492 00BF     		nop
 934 0494 02E0     		b	.L35
 935              	.L65:
 516:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 936              		.loc 1 516 0
 937 0496 00BF     		nop
 938 0498 00E0     		b	.L35
 939              	.L66:
 532:../Dave/Generated/src/SDMMC001/SDMMC001.c ****           break;
 940              		.loc 1 532 0
 941 049a 00BF     		nop
 942              	.L35:
 560:../Dave/Generated/src/SDMMC001/SDMMC001.c ****      }
 561:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   } while (0);
 562:../Dave/Generated/src/SDMMC001/SDMMC001.c **** 
 563:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_18>>>*/
 564:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   if (Status == (uint32_t)DAVEApp_SUCCESS)
 943              		.loc 1 564 0
 944 049c D7F81C32 		ldr	r3, [r7, #540]
 945 04a0 002B     		cmp	r3, #0
 946 04a2 04D1     		bne	.L60
 565:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   {
 566:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     Result = SDMMC001_RES_OK;
 947              		.loc 1 566 0
 948 04a4 4FF00003 		mov	r3, #0
 949 04a8 C7F81832 		str	r3, [r7, #536]
 950 04ac 03E0     		b	.L61
 951              	.L60:
 567:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   }
 568:../Dave/Generated/src/SDMMC001/SDMMC001.c **** /*<<<DD_SDMMC001_API_5_19>>>*/
 569:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   else
 570:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   {
 571:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     Result = SDMMC001_RES_ERROR;
 952              		.loc 1 571 0
 953 04ae 4FF00103 		mov	r3, #1
 954 04b2 C7F81832 		str	r3, [r7, #536]
 955              	.L61:
 572:../Dave/Generated/src/SDMMC001/SDMMC001.c ****     ERROR(GID_SDMMC001,SDMMC001_SDMMC00x_ERROR,sizeof(int),Status);
 573:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   }
 574:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   FUNCTION_EXIT(GID_SDMMC001, (uint32_t)SDMMC001_FUNCTION_EXIT);
 575:../Dave/Generated/src/SDMMC001/SDMMC001.c ****   return Result;
 956              		.loc 1 575 0
 957 04b6 D7F81832 		ldr	r3, [r7, #536]
 576:../Dave/Generated/src/SDMMC001/SDMMC001.c **** }
 958              		.loc 1 576 0
 959 04ba 1846     		mov	r0, r3
 960 04bc 07F50877 		add	r7, r7, #544
 961 04c0 BD46     		mov	sp, r7
 962 04c2 80BD     		pop	{r7, pc}
 963              		.cfi_endproc
 964              	.LFE122:
 966              		.text
 967              	.Letext0:
 968              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 969              		.file 3 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 970              		.file 4 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 971              		.file 5 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 972              		.file 6 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 973              		.file 7 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 974              		.file 8 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 SDMMC001.c
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:20     .bss:00000000 SDMMC001_InitializeFlag
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:21     .bss:00000000 $d
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:22     .bss:00000001 SDMMC001_LockFlag
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:25     .text.SDMMC001_lFindDiskStatus:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:30     .text.SDMMC001_lFindDiskStatus:00000000 SDMMC001_lFindDiskStatus
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:115    .text.SDMMC001_Initialize:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:120    .text.SDMMC001_Initialize:00000000 SDMMC001_Initialize
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:203    .text.SDMMC001_GetStatus:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:208    .text.SDMMC001_GetStatus:00000000 SDMMC001_GetStatus
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:240    .text.SDMMC001_ReadBlock:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:245    .text.SDMMC001_ReadBlock:00000000 SDMMC001_ReadBlock
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:323    .text.SDMMC001_WriteBlock:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:328    .text.SDMMC001_WriteBlock:00000000 SDMMC001_WriteBlock
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:418    .text.SDMMC001_Ioctl:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:423    .text.SDMMC001_Ioctl:00000000 SDMMC001_Ioctl
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:527    .text.SDMMC001_Ioctl:000000c4 $d
C:\Users\Mihai\AppData\Local\Temp\ccPod7ke.s:567    .text.SDMMC001_Ioctl:0000015c $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1791a5ae2e936ca1033c1c44be394cc7
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.55.0006b5fda1d606516f2dcaf4aca92b11
                           .group:00000000 wm4.MULTIPLEXER.h.43.4aa654be3ec80895f631b5281bbb9105
                           .group:00000000 wm4.CCU8PWMLIB.h.70.a5d6a5267902b8b4aea2a0224518259a
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.SYSTM001.h.63.668098b2213d40a5bd0db5fbe813cf05
                           .group:00000000 wm4.ETH002_Conf.h.56.5bd2b085b66f43d51abd69396be7f35f
                           .group:00000000 wm4.EthernetPHY.h.54.7af1709186b21e62a5f1d4049da3988b
                           .group:00000000 wm4.ETH001_Conf.h.71.1e151af1ba54dd023e1f942bdf922819
                           .group:00000000 wm4.synopGMAC_plat.h.78.7a90e072b497857344aea4ba1e994097
                           .group:00000000 wm4.synopGMAC_stack_interface.h.73.6be6aaee0ac6637432f4d0589044479b
                           .group:00000000 wm4.SynopGMAC_Dev.h.72.7c89c07cf666d37f5c9b615720d5e111
                           .group:00000000 wm4.synopGMAC_network_interface.h.73.4dd08316a11bc43c8c4a9da15277fb0f
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.ETH004_Conf.h.56.564c3f309c32b3c742fc91049cf66940
                           .group:00000000 wm4.lwipopts.h.73.a7a63bda1e8216abd1d90275eaaa0027
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.b213c7fd77614ebc3691cef18ad2ff22
                           .group:00000000 wm4.cc.h.66.ec134211c658dcc89de4610e4e7bab46
                           .group:00000000 wm4.arch.h.47.5153c52bfb94ee3b37299920afab6afd
                           .group:00000000 wm4.debug.h.43.557ecd6c90cc70b375bb8a29118be47b
                           .group:00000000 wm4.opt.h.94.d36882acafebb8726bce646fc8b2397b
                           .group:00000000 wm4.err.h.52.37c5d17538f8e8347a9c84196701e92d
                           .group:00000000 wm4.pbuf.h.43.e9a1ad12b97478787a109e22d5306820
                           .group:00000000 wm4.inet.h.46.b516065779826845d16d49f513869a2b
                           .group:00000000 wm4.ip_addr.h.79.9a0ce887ca8c88c22ad7686bcb5105df
                           .group:00000000 wm4.sys.h.65.4a0cd87b9e0d8bb4cd6b30e939b2ca7e
                           .group:00000000 wm4.mem.h.96.20770766e6c9e6c42af6bfa95ef5c63f
                           .group:00000000 wm4.def.h.33.049f911dab26023a266ed46ced0ce4bc
                           .group:00000000 wm4.netif.h.53.c13431a64f0e73a26710e71455725e84
                           .group:00000000 wm4.ip.h.48.ad46847692d4d729760949b27e48a442
                           .group:00000000 wm4.icmp.h.44.450dbf91f594cc26ad19d086cdc83713
                           .group:00000000 wm4.tcp.h.55.5c30b9432fa60afaa85cbdd225b0c683
                           .group:00000000 wm4.udp.h.48.1a8dde095cd0a13580afaba1443e5a3f
                           .group:00000000 wm4.SDMMC003_Conf.h.50.e707c07613fb4e6f2eaec982a892429d
                           .group:00000000 wm4.SDMMC003.h.85.b66055f6032a052f5173e3d123f9c61e
                           .group:00000000 wm4.SDMMC001.h.50.3e2fedc7e5ace33db4121d5cc027e8a4
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.diskio.h.7.93a3c8131d08770c060b04d2180fd09a
                           .group:00000000 wm4.diskio.h.42.a863614abe78d56d18ed7cb292d0028d
                           .group:00000000 wm4.ffconf.h.57.4ab321a2116d35ff7f28236ac31fad7c
                           .group:00000000 wm4.ff.h.82.8f05a37d35a49dba2681a7f047fee4ee
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.LMM001.h.42.c21fe9cbedc336738c3dc89405cad216
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.100.69cb08672bc6ab3f052aa9d5bd6dc5ca
                           .group:00000000 wm4._default_fcntl.h.6.d036cf640d0f9a06bcff1be55acd66be
                           .group:00000000 wm4.stat.h.2.a761b02482a54847ff0d09dfcff24a5c
                           .group:00000000 wm4.fcntl.h.9.9336f33d7f5028f694c75e6e224e0cf7
                           .group:00000000 wm4.SLTHA001.h.97.d7e87c19a31e3244bdd5839e7cc42a61
                           .group:00000000 wm4.WEBSERVER001_Conf.h.54.cd6d29aaa96a848cbc5321bab5d6cd90
                           .group:00000000 wm4.IO004.h.51.dbf9dd216c57d6a7f14a22b2cb7e5626
                           .group:00000000 wm4.MOTORLIBS.h.59.b2e97de0df555dedfa51e24447b57ab8
                           .group:00000000 wm4.uc_id.h.35.a6c4837fad81477ba31967683332b8cc
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.c5c972f6f634bc5116c171852aaab668
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.4809ded45954a78aa476d1e9f44d110e
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d

UNDEFINED SYMBOLS
SDMMC003_GetCurrentState
SDMMC003_Start
SDMMC003_CardDetectionSupport
SDMMC003_CardReadSingleBlock
SDMMC003_CardReadMultipleBlocks
SDMMC003_CardWriteSingleBlock
SDMMC003_CardWriteMultipleBlocks
memset
SDMMC003_FlushDiskWriteCache
SDMMC003_GetSectorSize
SDMMC003_GetSectorCount
SDMMC003_EraseBlock
SDMMC003_GetBlockSize
SDMMC003_GetCardType
SDMMC003_GetCsd
SDMMC003_GetCid
SDMMC003_GetOcr
SDMMC003_GetSdStatus
memcpy
SDMMC003_LockUnlockCard
SDMMC003_GetLockStatus
SDMMC003_EjectCard
