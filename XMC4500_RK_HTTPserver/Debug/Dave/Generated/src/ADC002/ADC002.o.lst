   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"ADC002.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC002_Init,"ax",%progbits
  20              		.align	2
  21              		.global	ADC002_Init
  22              		.thumb
  23              		.thumb_func
  25              	ADC002_Init:
  26              	.LFB112:
  27              		.file 1 "../Dave/Generated/src/ADC002/ADC002.c"
   1:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
   2:../Dave/Generated/src/ADC002/ADC002.c **** **  DAVE App Name : ADC002       App Version: 1.0.4               
   3:../Dave/Generated/src/ADC002/ADC002.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/ADC002/ADC002.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
   6:../Dave/Generated/src/ADC002/ADC002.c **** 
   7:../Dave/Generated/src/ADC002/ADC002.c **** 
   8:../Dave/Generated/src/ADC002/ADC002.c **** /*CODE_BLOCK_BEGIN[ADC002.c]*/
   9:../Dave/Generated/src/ADC002/ADC002.c **** 
  10:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
  11:../Dave/Generated/src/ADC002/ADC002.c ****  Copyright (c) 2011, Infineon Technologies AG                                 **
  12:../Dave/Generated/src/ADC002/ADC002.c ****  All rights reserved.                                                         **
  13:../Dave/Generated/src/ADC002/ADC002.c ****                                                                               **
  14:../Dave/Generated/src/ADC002/ADC002.c ****  Redistribution and use in source and binary forms, with or without           **
  15:../Dave/Generated/src/ADC002/ADC002.c ****  modification,are permitted provided that the following conditions are met:   **
  16:../Dave/Generated/src/ADC002/ADC002.c ****                                                                               **
  17:../Dave/Generated/src/ADC002/ADC002.c ****  *Redistributions of source code must retain the above copyright notice,      **
  18:../Dave/Generated/src/ADC002/ADC002.c ****  this list of conditions and the following disclaimer.                        **
  19:../Dave/Generated/src/ADC002/ADC002.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  20:../Dave/Generated/src/ADC002/ADC002.c ****  this list of conditions and the following disclaimer in the documentation    **
  21:../Dave/Generated/src/ADC002/ADC002.c ****  and/or other materials provided with the distribution.                       **
  22:../Dave/Generated/src/ADC002/ADC002.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  23:../Dave/Generated/src/ADC002/ADC002.c ****  may be used to endorse or promote products derived from this software without**
  24:../Dave/Generated/src/ADC002/ADC002.c ****  specific prior written permission.                                           **
  25:../Dave/Generated/src/ADC002/ADC002.c ****                                                                               **
  26:../Dave/Generated/src/ADC002/ADC002.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  27:../Dave/Generated/src/ADC002/ADC002.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  28:../Dave/Generated/src/ADC002/ADC002.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  29:../Dave/Generated/src/ADC002/ADC002.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  30:../Dave/Generated/src/ADC002/ADC002.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  31:../Dave/Generated/src/ADC002/ADC002.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  32:../Dave/Generated/src/ADC002/ADC002.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  33:../Dave/Generated/src/ADC002/ADC002.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  34:../Dave/Generated/src/ADC002/ADC002.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  35:../Dave/Generated/src/ADC002/ADC002.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  36:../Dave/Generated/src/ADC002/ADC002.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  37:../Dave/Generated/src/ADC002/ADC002.c ****                                                                               **
  38:../Dave/Generated/src/ADC002/ADC002.c ****  To improve the quality of the software, users are encouraged to share        **
  39:../Dave/Generated/src/ADC002/ADC002.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  40:../Dave/Generated/src/ADC002/ADC002.c ****  dave@infineon.com).                                                          **
  41:../Dave/Generated/src/ADC002/ADC002.c ****                                                                               **
  42:../Dave/Generated/src/ADC002/ADC002.c **** ********************************************************************************
  43:../Dave/Generated/src/ADC002/ADC002.c **** **                                                                            **
  44:../Dave/Generated/src/ADC002/ADC002.c **** **                                                                            **
  45:../Dave/Generated/src/ADC002/ADC002.c **** ** PLATFORM : Infineon XMC4500 Series                                         **
  46:../Dave/Generated/src/ADC002/ADC002.c **** **                                                                            **
  47:../Dave/Generated/src/ADC002/ADC002.c **** ** COMPILER : Compiler Independent                                            **
  48:../Dave/Generated/src/ADC002/ADC002.c **** **                                                                            **
  49:../Dave/Generated/src/ADC002/ADC002.c **** ** AUTHOR   : KM                                                              **
  50:../Dave/Generated/src/ADC002/ADC002.c **** **                                                                            **
  51:../Dave/Generated/src/ADC002/ADC002.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  52:../Dave/Generated/src/ADC002/ADC002.c **** **                                                                            **
  53:../Dave/Generated/src/ADC002/ADC002.c **** ** MODIFICATION DATE : July 31, 2012                                          **
  54:../Dave/Generated/src/ADC002/ADC002.c **** **                                                                            **
  55:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
  56:../Dave/Generated/src/ADC002/ADC002.c **** 
  57:../Dave/Generated/src/ADC002/ADC002.c **** 
  58:../Dave/Generated/src/ADC002/ADC002.c **** /**
  59:../Dave/Generated/src/ADC002/ADC002.c ****  * @file ADC002.c
  60:../Dave/Generated/src/ADC002/ADC002.c ****  *
  61:../Dave/Generated/src/ADC002/ADC002.c ****  * @brief This file contains ADC002 App API definitions
  62:../Dave/Generated/src/ADC002/ADC002.c ****  *
  63:../Dave/Generated/src/ADC002/ADC002.c ****  */
  64:../Dave/Generated/src/ADC002/ADC002.c **** /**
  65:../Dave/Generated/src/ADC002/ADC002.c ****  * @cond INTERNAL_DOCS
  66:../Dave/Generated/src/ADC002/ADC002.c ****  */
  67:../Dave/Generated/src/ADC002/ADC002.c **** 
  68:../Dave/Generated/src/ADC002/ADC002.c **** /******************************************************************************
  69:../Dave/Generated/src/ADC002/ADC002.c **** **                      Author(s) Identity                                   **
  70:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************
  71:../Dave/Generated/src/ADC002/ADC002.c **** **                                                                           **
  72:../Dave/Generated/src/ADC002/ADC002.c **** ** Initials     Name                                                         **
  73:../Dave/Generated/src/ADC002/ADC002.c **** ** KM           DAVE App Developer                                           **
  74:../Dave/Generated/src/ADC002/ADC002.c **** ** --------------------------------------------------------------------------**
  75:../Dave/Generated/src/ADC002/ADC002.c **** 
  76:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
  77:../Dave/Generated/src/ADC002/ADC002.c **** 
  78:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
  79:../Dave/Generated/src/ADC002/ADC002.c ****  ** INCLUDE FILES                                                             **
  80:../Dave/Generated/src/ADC002/ADC002.c ****  ******************************************************************************/
  81:../Dave/Generated/src/ADC002/ADC002.c **** #include <DAVE3.h>
  82:../Dave/Generated/src/ADC002/ADC002.c **** 
  83:../Dave/Generated/src/ADC002/ADC002.c **** 
  84:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
  85:../Dave/Generated/src/ADC002/ADC002.c **** **                      Private Type Definitions                              **
  86:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
  87:../Dave/Generated/src/ADC002/ADC002.c **** 
  88:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
  89:../Dave/Generated/src/ADC002/ADC002.c **** **                 Private Function Declarations:
  90:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
  91:../Dave/Generated/src/ADC002/ADC002.c **** /**
  92:../Dave/Generated/src/ADC002/ADC002.c ****  * @brief This function initializes the app.
  93:../Dave/Generated/src/ADC002/ADC002.c ****  *
  94:../Dave/Generated/src/ADC002/ADC002.c ****  * @param [in] HandlePtr pointer to the Instance variable<BR>
  95:../Dave/Generated/src/ADC002/ADC002.c ****  *
  96:../Dave/Generated/src/ADC002/ADC002.c ****  * @return  NOne <BR>
  97:../Dave/Generated/src/ADC002/ADC002.c ****  *
  98:../Dave/Generated/src/ADC002/ADC002.c ****  * <b>Reentrancy:  Yes</b><BR>
  99:../Dave/Generated/src/ADC002/ADC002.c ****  * <b>Sync/Async:  Synchronous</b><BR>
 100:../Dave/Generated/src/ADC002/ADC002.c ****  */
 101:../Dave/Generated/src/ADC002/ADC002.c **** /*This is local init function*/
 102:../Dave/Generated/src/ADC002/ADC002.c **** static void ADC002_lInit(const ADC002_HandleType *HandlePtr );
 103:../Dave/Generated/src/ADC002/ADC002.c **** 
 104:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
 105:../Dave/Generated/src/ADC002/ADC002.c **** **                      Global Constant Definitions                           **
 106:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
 107:../Dave/Generated/src/ADC002/ADC002.c **** 
 108:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
 109:../Dave/Generated/src/ADC002/ADC002.c **** **                      Global Variable Definitions                           **
 110:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
 111:../Dave/Generated/src/ADC002/ADC002.c **** 
 112:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
 113:../Dave/Generated/src/ADC002/ADC002.c **** **                      Private Constant Definitions                          **
 114:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
 115:../Dave/Generated/src/ADC002/ADC002.c **** 
 116:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
 117:../Dave/Generated/src/ADC002/ADC002.c **** **                 Function like macro definitions                            **
 118:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
 119:../Dave/Generated/src/ADC002/ADC002.c **** 
 120:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
 121:../Dave/Generated/src/ADC002/ADC002.c **** **                      Private Function Definitions                          **
 122:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
 123:../Dave/Generated/src/ADC002/ADC002.c **** 
 124:../Dave/Generated/src/ADC002/ADC002.c **** /*******************************************************************************
 125:../Dave/Generated/src/ADC002/ADC002.c **** **                      Public Function Definitions                           **
 126:../Dave/Generated/src/ADC002/ADC002.c **** *******************************************************************************/
 127:../Dave/Generated/src/ADC002/ADC002.c **** 
 128:../Dave/Generated/src/ADC002/ADC002.c **** 
 129:../Dave/Generated/src/ADC002/ADC002.c **** 
 130:../Dave/Generated/src/ADC002/ADC002.c **** 
 131:../Dave/Generated/src/ADC002/ADC002.c **** /** This function initializes the app */
 132:../Dave/Generated/src/ADC002/ADC002.c **** void ADC002_Init(void)
 133:../Dave/Generated/src/ADC002/ADC002.c **** {
  28              		.loc 1 133 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 134:../Dave/Generated/src/ADC002/ADC002.c ****    /*Initialization of app 'ADCGLOB001'*/         
 135:../Dave/Generated/src/ADC002/ADC002.c ****   ADCGLOB001_Init();  
  40              		.loc 1 135 0
  41 0004 FFF7FEFF 		bl	ADCGLOB001_Init
 136:../Dave/Generated/src/ADC002/ADC002.c ****   ADC002_lInit(&ADC002_Handle0);    
  42              		.loc 1 136 0
  43 0008 40F20000 		movw	r0, #:lower16:ADC002_Handle0
  44 000c C0F20000 		movt	r0, #:upper16:ADC002_Handle0
  45 0010 FFF7FEFF 		bl	ADC002_lInit
 137:../Dave/Generated/src/ADC002/ADC002.c **** }
  46              		.loc 1 137 0
  47 0014 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE112:
  51 0016 00BF     		.section	.text.ADC002_lInit,"ax",%progbits
  52              		.align	2
  53              		.thumb
  54              		.thumb_func
  56              	ADC002_lInit:
  57              	.LFB113:
 138:../Dave/Generated/src/ADC002/ADC002.c **** /* 
 139:../Dave/Generated/src/ADC002/ADC002.c ****  * This function initializes the queue App. Local function is used to 
 140:../Dave/Generated/src/ADC002/ADC002.c ****  * initialize all the instances of the app.
 141:../Dave/Generated/src/ADC002/ADC002.c ****  */
 142:../Dave/Generated/src/ADC002/ADC002.c **** static void ADC002_lInit(const ADC002_HandleType *HandlePtr )
 143:../Dave/Generated/src/ADC002/ADC002.c **** {
  58              		.loc 1 143 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 16
  61              		@ frame_needed = 1, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63 0000 80B4     		push	{r7}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 4
  66              		.cfi_offset 7, -4
  67 0002 85B0     		sub	sp, sp, #20
  68              	.LCFI3:
  69              		.cfi_def_cfa_offset 24
  70 0004 00AF     		add	r7, sp, #0
  71              	.LCFI4:
  72              		.cfi_def_cfa_register 7
  73 0006 7860     		str	r0, [r7, #4]
 144:../Dave/Generated/src/ADC002/ADC002.c ****   /*Pointer to the VADC Group register structure */
 145:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
  74              		.loc 1 145 0
  75 0008 7B68     		ldr	r3, [r7, #4]
  76 000a 9B6D     		ldr	r3, [r3, #88]
  77 000c FB60     		str	r3, [r7, #12]
 146:../Dave/Generated/src/ADC002/ADC002.c ****   
 147:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 148:../Dave/Generated/src/ADC002/ADC002.c **** 
 149:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_UNINITIALIZED)
  78              		.loc 1 149 0
  79 000e 7B68     		ldr	r3, [r7, #4]
  80 0010 9B6A     		ldr	r3, [r3, #40]
  81 0012 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  82 0014 002B     		cmp	r3, #0
  83 0016 5AD1     		bne	.L2
 150:../Dave/Generated/src/ADC002/ADC002.c ****   {
 151:../Dave/Generated/src/ADC002/ADC002.c ****     /* Flush the Queue */
 152:../Dave/Generated/src/ADC002/ADC002.c ****     SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_FLUSH_Pos);
  84              		.loc 1 152 0
  85 0018 FB68     		ldr	r3, [r7, #12]
  86 001a D3F80431 		ldr	r3, [r3, #260]
  87 001e 43F48062 		orr	r2, r3, #1024
  88 0022 FB68     		ldr	r3, [r7, #12]
  89 0024 C3F80421 		str	r2, [r3, #260]
 153:../Dave/Generated/src/ADC002/ADC002.c ****     
 154:../Dave/Generated/src/ADC002/ADC002.c ****     /* Sets the priority of the queue request source */
 155:../Dave/Generated/src/ADC002/ADC002.c ****     WR_REG( VADCGroupPtr->ARBPR, VADC_G_ARBPR_PRIO0_Msk, 
  90              		.loc 1 155 0
  91 0028 7B68     		ldr	r3, [r7, #4]
  92 002a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
  93 002c 03F00302 		and	r2, r3, #3
  94 0030 FB68     		ldr	r3, [r7, #12]
  95 0032 D3F88430 		ldr	r3, [r3, #132]
  96 0036 23F00303 		bic	r3, r3, #3
  97 003a 1A43     		orrs	r2, r2, r3
  98 003c FB68     		ldr	r3, [r7, #12]
  99 003e C3F88420 		str	r2, [r3, #132]
 156:../Dave/Generated/src/ADC002/ADC002.c ****             VADC_G_ARBPR_PRIO0_Pos,(uint32_t)HandlePtr->kPriority);                                
 157:../Dave/Generated/src/ADC002/ADC002.c ****     /*
 158:../Dave/Generated/src/ADC002/ADC002.c ****      * Enable XTWC Bitfield so that XTMODE and XTSEL can be written 
 159:../Dave/Generated/src/ADC002/ADC002.c ****      * Selects trigger mode .
 160:../Dave/Generated/src/ADC002/ADC002.c ****      */
 161:../Dave/Generated/src/ADC002/ADC002.c ****     VADCGroupPtr->QCTRL0 |= (uint32_t)
 100              		.loc 1 161 0
 101 0042 FB68     		ldr	r3, [r7, #12]
 102 0044 D3F80021 		ldr	r2, [r3, #256]
 162:../Dave/Generated/src/ADC002/ADC002.c ****         ((((uint32_t)1 << VADC_G_QCTRL0_XTWC_Pos) & VADC_G_QCTRL0_XTWC_Msk)|\
 163:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)HandlePtr->kTriggerMode << VADC_G_QCTRL0_XTMODE_Pos) &\
 103              		.loc 1 163 0
 104 0048 7B68     		ldr	r3, [r7, #4]
 105 004a 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 106 004c 4FEA4333 		lsl	r3, r3, #13
 107 0050 03F4C043 		and	r3, r3, #24576
 161:../Dave/Generated/src/ADC002/ADC002.c ****     VADCGroupPtr->QCTRL0 |= (uint32_t)
 108              		.loc 1 161 0
 109 0054 1343     		orrs	r3, r3, r2
 110 0056 43F40042 		orr	r2, r3, #32768
 111 005a FB68     		ldr	r3, [r7, #12]
 112 005c C3F80021 		str	r2, [r3, #256]
 164:../Dave/Generated/src/ADC002/ADC002.c ****          VADC_G_QCTRL0_XTMODE_Msk));
 165:../Dave/Generated/src/ADC002/ADC002.c ****     /*
 166:../Dave/Generated/src/ADC002/ADC002.c ****      *Selects the gating mode and enables trigger mode
 167:../Dave/Generated/src/ADC002/ADC002.c ****      */
 168:../Dave/Generated/src/ADC002/ADC002.c ****     VADCGroupPtr->QMR0 |=(uint32_t)
 113              		.loc 1 168 0
 114 0060 FB68     		ldr	r3, [r7, #12]
 115 0062 D3F80421 		ldr	r2, [r3, #260]
 169:../Dave/Generated/src/ADC002/ADC002.c ****         ((((uint32_t)HandlePtr->kTriggerEn << VADC_G_QMR0_ENTR_Pos)& VADC_G_QMR0_ENTR_Msk)|\
 116              		.loc 1 169 0
 117 0066 7B68     		ldr	r3, [r7, #4]
 118 0068 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 119 006a 4FEA8303 		lsl	r3, r3, #2
 120 006e 03F00401 		and	r1, r3, #4
 170:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)HandlePtr->kGatingMode << VADC_G_QMR0_ENGT_Pos)& VADC_G_QMR0_ENGT_Msk));
 121              		.loc 1 170 0
 122 0072 7B68     		ldr	r3, [r7, #4]
 123 0074 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 124 0076 03F00303 		and	r3, r3, #3
 168:../Dave/Generated/src/ADC002/ADC002.c ****     VADCGroupPtr->QMR0 |=(uint32_t)
 125              		.loc 1 168 0
 126 007a 0B43     		orrs	r3, r3, r1
 127 007c 1A43     		orrs	r2, r2, r3
 128 007e FB68     		ldr	r3, [r7, #12]
 129 0080 C3F80421 		str	r2, [r3, #260]
 171:../Dave/Generated/src/ADC002/ADC002.c ****     /*
 172:../Dave/Generated/src/ADC002/ADC002.c ****      * Enable Arbitration slot.
 173:../Dave/Generated/src/ADC002/ADC002.c ****      * Select conversion start mode for request source. 
 174:../Dave/Generated/src/ADC002/ADC002.c ****      */
 175:../Dave/Generated/src/ADC002/ADC002.c ****     VADCGroupPtr->ARBPR |= (uint32_t)
 130              		.loc 1 175 0
 131 0084 FB68     		ldr	r3, [r7, #12]
 132 0086 D3F88420 		ldr	r2, [r3, #132]
 176:../Dave/Generated/src/ADC002/ADC002.c ****         ((((uint32_t)HandlePtr->kAsenEnable << VADC_G_ARBPR_ASEN0_Pos)&VADC_G_ARBPR_ASEN0_Msk)|\
 133              		.loc 1 176 0
 134 008a 7B68     		ldr	r3, [r7, #4]
 135 008c 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 136 008e 4FEA0363 		lsl	r3, r3, #24
 137 0092 03F08071 		and	r1, r3, #16777216
 177:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)HandlePtr->kStartmode << VADC_G_ARBPR_CSM0_Pos) & VADC_G_ARBPR_CSM0_Msk));
 138              		.loc 1 177 0
 139 0096 7B68     		ldr	r3, [r7, #4]
 140 0098 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 141 009a 4FEAC303 		lsl	r3, r3, #3
 142 009e 03F00803 		and	r3, r3, #8
 175:../Dave/Generated/src/ADC002/ADC002.c ****     VADCGroupPtr->ARBPR |= (uint32_t)
 143              		.loc 1 175 0
 144 00a2 0B43     		orrs	r3, r3, r1
 145 00a4 1A43     		orrs	r2, r2, r3
 146 00a6 FB68     		ldr	r3, [r7, #12]
 147 00a8 C3F88420 		str	r2, [r3, #132]
 178:../Dave/Generated/src/ADC002/ADC002.c ****     /*
 179:../Dave/Generated/src/ADC002/ADC002.c ****      * Enable cancel mode.
 180:../Dave/Generated/src/ADC002/ADC002.c ****      * Sets the bit rptdis of QMR0 Register 
 181:../Dave/Generated/src/ADC002/ADC002.c ****      */
 182:../Dave/Generated/src/ADC002/ADC002.c ****     if(HandlePtr->kStartmode == (uint8_t)ADC002_CANCEL_INJECT_REPEAT_WITH_CANCEL)
 148              		.loc 1 182 0
 149 00ac 7B68     		ldr	r3, [r7, #4]
 150 00ae 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 151 00b0 022B     		cmp	r3, #2
 152 00b2 07D1     		bne	.L4
 183:../Dave/Generated/src/ADC002/ADC002.c ****     {
 184:../Dave/Generated/src/ADC002/ADC002.c ****       SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_RPTDIS_Pos);
 153              		.loc 1 184 0
 154 00b4 FB68     		ldr	r3, [r7, #12]
 155 00b6 D3F80431 		ldr	r3, [r3, #260]
 156 00ba 43F48032 		orr	r2, r3, #65536
 157 00be FB68     		ldr	r3, [r7, #12]
 158 00c0 C3F80421 		str	r2, [r3, #260]
 159              	.L4:
 185:../Dave/Generated/src/ADC002/ADC002.c ****     }
 186:../Dave/Generated/src/ADC002/ADC002.c ****     /* Set the App State to Initialized */
 187:../Dave/Generated/src/ADC002/ADC002.c ****     HandlePtr->DynamicHandlePtr->State = ADC002_INITIALIZED;                            
 160              		.loc 1 187 0
 161 00c4 7B68     		ldr	r3, [r7, #4]
 162 00c6 9B6A     		ldr	r3, [r3, #40]
 163 00c8 4FF00102 		mov	r2, #1
 164 00cc 1A70     		strb	r2, [r3, #0]
 165              	.L2:
 188:../Dave/Generated/src/ADC002/ADC002.c ****   }
 189:../Dave/Generated/src/ADC002/ADC002.c ****   else
 190:../Dave/Generated/src/ADC002/ADC002.c ****   {
 191:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)ADC002_OPER_NOT_ALLOWED_ERROR, 0, (uint8_t*)NULL);
 192:../Dave/Generated/src/ADC002/ADC002.c ****   }
 193:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 194:../Dave/Generated/src/ADC002/ADC002.c **** }
 166              		.loc 1 194 0
 167 00ce 07F11407 		add	r7, r7, #20
 168 00d2 BD46     		mov	sp, r7
 169 00d4 80BC     		pop	{r7}
 170 00d6 7047     		bx	lr
 171              		.cfi_endproc
 172              	.LFE113:
 174              		.section	.text.ADC002_InitializeQueue,"ax",%progbits
 175              		.align	2
 176              		.global	ADC002_InitializeQueue
 177              		.thumb
 178              		.thumb_func
 180              	ADC002_InitializeQueue:
 181              	.LFB114:
 195:../Dave/Generated/src/ADC002/ADC002.c **** /*This function initializes queue entries*/
 196:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_InitializeQueue(const ADC002_HandleType *HandlePtr )
 197:../Dave/Generated/src/ADC002/ADC002.c **** {
 182              		.loc 1 197 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 24
 185              		@ frame_needed = 1, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 187 0000 80B4     		push	{r7}
 188              	.LCFI5:
 189              		.cfi_def_cfa_offset 4
 190              		.cfi_offset 7, -4
 191 0002 87B0     		sub	sp, sp, #28
 192              	.LCFI6:
 193              		.cfi_def_cfa_offset 32
 194 0004 00AF     		add	r7, sp, #0
 195              	.LCFI7:
 196              		.cfi_def_cfa_register 7
 197 0006 7860     		str	r0, [r7, #4]
 198:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 198              		.loc 1 198 0
 199 0008 4FF00103 		mov	r3, #1
 200 000c 7B61     		str	r3, [r7, #20]
 199:../Dave/Generated/src/ADC002/ADC002.c **** 
 200:../Dave/Generated/src/ADC002/ADC002.c ****   /*Pointer to the VADC Group register structure */
 201:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 201              		.loc 1 201 0
 202 000e 7B68     		ldr	r3, [r7, #4]
 203 0010 9B6D     		ldr	r3, [r3, #88]
 204 0012 FB60     		str	r3, [r7, #12]
 202:../Dave/Generated/src/ADC002/ADC002.c ****   uint8_t QueueEntryNum;
 203:../Dave/Generated/src/ADC002/ADC002.c ****   uint32_t QINR0Val;
 204:../Dave/Generated/src/ADC002/ADC002.c **** 
 205:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 206:../Dave/Generated/src/ADC002/ADC002.c ****   
 207:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 205              		.loc 1 207 0
 206 0014 7B68     		ldr	r3, [r7, #4]
 207 0016 9B6A     		ldr	r3, [r3, #40]
 208 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 209 001a 012B     		cmp	r3, #1
 210 001c 6AD1     		bne	.L6
 208:../Dave/Generated/src/ADC002/ADC002.c ****   { 
 209:../Dave/Generated/src/ADC002/ADC002.c ****    /* Inserts the selected entries to the Queue. */
 210:../Dave/Generated/src/ADC002/ADC002.c ****     for(QueueEntryNum = (uint8_t)0; QueueEntryNum <= (uint8_t)7; QueueEntryNum++)
 211              		.loc 1 210 0
 212 001e 4FF00003 		mov	r3, #0
 213 0022 FB74     		strb	r3, [r7, #19]
 214 0024 51E0     		b	.L7
 215              	.L9:
 211:../Dave/Generated/src/ADC002/ADC002.c ****     {
 212:../Dave/Generated/src/ADC002/ADC002.c ****       /* Register the queue entry */
 213:../Dave/Generated/src/ADC002/ADC002.c ****       if((&HandlePtr->kQueueEntryHandlePtr[QueueEntryNum] != NULL) &&
 216              		.loc 1 213 0
 217 0026 7B68     		ldr	r3, [r7, #4]
 218 0028 5968     		ldr	r1, [r3, #4]
 219 002a FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 220 002c 1346     		mov	r3, r2
 221 002e 4FEA8303 		lsl	r3, r3, #2
 222 0032 9B18     		adds	r3, r3, r2
 223 0034 CB18     		adds	r3, r1, r3
 224 0036 002B     		cmp	r3, #0
 225 0038 43D0     		beq	.L8
 214:../Dave/Generated/src/ADC002/ADC002.c ****         (HandlePtr->kQueueEntryHandlePtr[QueueEntryNum].Active == (uint8_t)1))
 226              		.loc 1 214 0 discriminator 1
 227 003a 7B68     		ldr	r3, [r7, #4]
 228 003c 5968     		ldr	r1, [r3, #4]
 229 003e FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 230 0040 1346     		mov	r3, r2
 231 0042 4FEA8303 		lsl	r3, r3, #2
 232 0046 9B18     		adds	r3, r3, r2
 233 0048 CB18     		adds	r3, r1, r3
 234 004a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 213:../Dave/Generated/src/ADC002/ADC002.c ****       if((&HandlePtr->kQueueEntryHandlePtr[QueueEntryNum] != NULL) &&
 235              		.loc 1 213 0 discriminator 1
 236 004c 012B     		cmp	r3, #1
 237 004e 38D1     		bne	.L8
 215:../Dave/Generated/src/ADC002/ADC002.c ****       {
 216:../Dave/Generated/src/ADC002/ADC002.c ****         QINR0Val = (uint32_t) 
 217:../Dave/Generated/src/ADC002/ADC002.c ****              ((((uint32_t)HandlePtr->kQueueEntryHandlePtr[QueueEntryNum].ChannelNumber\
 238              		.loc 1 217 0
 239 0050 7B68     		ldr	r3, [r7, #4]
 240 0052 5968     		ldr	r1, [r3, #4]
 241 0054 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 242 0056 1346     		mov	r3, r2
 243 0058 4FEA8303 		lsl	r3, r3, #2
 244 005c 9B18     		adds	r3, r3, r2
 245 005e CB18     		adds	r3, r1, r3
 246 0060 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 218:../Dave/Generated/src/ADC002/ADC002.c ****                    << VADC_G_QINR0_REQCHNR_Pos) &VADC_G_QINR0_REQCHNR_Msk ) |\
 247              		.loc 1 218 0
 248 0062 03F01F01 		and	r1, r3, #31
 219:../Dave/Generated/src/ADC002/ADC002.c ****              (((uint32_t)HandlePtr->kQueueEntryHandlePtr[QueueEntryNum].Refill\
 249              		.loc 1 219 0
 250 0066 7B68     		ldr	r3, [r7, #4]
 251 0068 5868     		ldr	r0, [r3, #4]
 252 006a FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 253 006c 1346     		mov	r3, r2
 254 006e 4FEA8303 		lsl	r3, r3, #2
 255 0072 9B18     		adds	r3, r3, r2
 256 0074 C318     		adds	r3, r0, r3
 257 0076 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 220:../Dave/Generated/src/ADC002/ADC002.c ****                    << VADC_G_QINR0_RF_Pos) &VADC_G_QINR0_RF_Msk)|\
 258              		.loc 1 220 0
 259 0078 4FEA4313 		lsl	r3, r3, #5
 260 007c 03F02003 		and	r3, r3, #32
 218:../Dave/Generated/src/ADC002/ADC002.c ****                    << VADC_G_QINR0_REQCHNR_Pos) &VADC_G_QINR0_REQCHNR_Msk ) |\
 261              		.loc 1 218 0
 262 0080 1943     		orrs	r1, r1, r3
 221:../Dave/Generated/src/ADC002/ADC002.c ****              (((uint32_t)HandlePtr->kQueueEntryHandlePtr[QueueEntryNum].Interrupt\
 263              		.loc 1 221 0
 264 0082 7B68     		ldr	r3, [r7, #4]
 265 0084 5868     		ldr	r0, [r3, #4]
 266 0086 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 267 0088 1346     		mov	r3, r2
 268 008a 4FEA8303 		lsl	r3, r3, #2
 269 008e 9B18     		adds	r3, r3, r2
 270 0090 C318     		adds	r3, r0, r3
 271 0092 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 222:../Dave/Generated/src/ADC002/ADC002.c ****                    << VADC_G_QINR0_ENSI_Pos) &VADC_G_QINR0_ENSI_Msk )     |\
 272              		.loc 1 222 0
 273 0094 4FEA8313 		lsl	r3, r3, #6
 274 0098 03F04003 		and	r3, r3, #64
 220:../Dave/Generated/src/ADC002/ADC002.c ****                    << VADC_G_QINR0_RF_Pos) &VADC_G_QINR0_RF_Msk)|\
 275              		.loc 1 220 0
 276 009c 1943     		orrs	r1, r1, r3
 223:../Dave/Generated/src/ADC002/ADC002.c ****              (((uint32_t)HandlePtr->kQueueEntryHandlePtr[QueueEntryNum].ExternalTrigger\
 277              		.loc 1 223 0
 278 009e 7B68     		ldr	r3, [r7, #4]
 279 00a0 5868     		ldr	r0, [r3, #4]
 280 00a2 FA7C     		ldrb	r2, [r7, #19]	@ zero_extendqisi2
 281 00a4 1346     		mov	r3, r2
 282 00a6 4FEA8303 		lsl	r3, r3, #2
 283 00aa 9B18     		adds	r3, r3, r2
 284 00ac C318     		adds	r3, r0, r3
 285 00ae DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 224:../Dave/Generated/src/ADC002/ADC002.c ****                    << VADC_G_QINR0_EXTR_Pos) & VADC_G_QINR0_EXTR_Msk))  ;
 286              		.loc 1 224 0
 287 00b0 4FEAC313 		lsl	r3, r3, #7
 288 00b4 DBB2     		uxtb	r3, r3
 216:../Dave/Generated/src/ADC002/ADC002.c ****         QINR0Val = (uint32_t) 
 289              		.loc 1 216 0
 290 00b6 0B43     		orrs	r3, r3, r1
 291 00b8 BB60     		str	r3, [r7, #8]
 225:../Dave/Generated/src/ADC002/ADC002.c ****         VADCGroupPtr->QINR0 = QINR0Val;
 292              		.loc 1 225 0
 293 00ba FB68     		ldr	r3, [r7, #12]
 294 00bc BA68     		ldr	r2, [r7, #8]
 295 00be C3F81021 		str	r2, [r3, #272]
 296              	.L8:
 210:../Dave/Generated/src/ADC002/ADC002.c ****     for(QueueEntryNum = (uint8_t)0; QueueEntryNum <= (uint8_t)7; QueueEntryNum++)
 297              		.loc 1 210 0
 298 00c2 FB7C     		ldrb	r3, [r7, #19]
 299 00c4 03F10103 		add	r3, r3, #1
 300 00c8 FB74     		strb	r3, [r7, #19]
 301              	.L7:
 210:../Dave/Generated/src/ADC002/ADC002.c ****     for(QueueEntryNum = (uint8_t)0; QueueEntryNum <= (uint8_t)7; QueueEntryNum++)
 302              		.loc 1 210 0 is_stmt 0 discriminator 1
 303 00ca FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 304 00cc 072B     		cmp	r3, #7
 305 00ce AAD9     		bls	.L9
 226:../Dave/Generated/src/ADC002/ADC002.c ****       }
 227:../Dave/Generated/src/ADC002/ADC002.c ****     }
 228:../Dave/Generated/src/ADC002/ADC002.c ****     
 229:../Dave/Generated/src/ADC002/ADC002.c ****     /* Generate a trigger event by software */
 230:../Dave/Generated/src/ADC002/ADC002.c ****     WR_REG(VADCGroupPtr->QMR0, VADC_G_QMR0_TREV_Msk, VADC_G_QMR0_TREV_Pos,
 306              		.loc 1 230 0 is_stmt 1
 307 00d0 7B68     		ldr	r3, [r7, #4]
 308 00d2 9B7B     		ldrb	r3, [r3, #14]	@ zero_extendqisi2
 309 00d4 4FEA4323 		lsl	r3, r3, #9
 310 00d8 03F40072 		and	r2, r3, #512
 311 00dc FB68     		ldr	r3, [r7, #12]
 312 00de D3F80431 		ldr	r3, [r3, #260]
 313 00e2 23F40073 		bic	r3, r3, #512
 314 00e6 1A43     		orrs	r2, r2, r3
 315 00e8 FB68     		ldr	r3, [r7, #12]
 316 00ea C3F80421 		str	r2, [r3, #260]
 231:../Dave/Generated/src/ADC002/ADC002.c ****                                                  (uint32_t)HandlePtr->kStart);
 232:../Dave/Generated/src/ADC002/ADC002.c ****   
 233:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 317              		.loc 1 233 0
 318 00ee 4FF00003 		mov	r3, #0
 319 00f2 7B61     		str	r3, [r7, #20]
 320              	.L6:
 234:../Dave/Generated/src/ADC002/ADC002.c ****   }
 235:../Dave/Generated/src/ADC002/ADC002.c ****   else
 236:../Dave/Generated/src/ADC002/ADC002.c ****   {
 237:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 238:../Dave/Generated/src/ADC002/ADC002.c ****   }
 239:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 240:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 321              		.loc 1 240 0
 322 00f4 7B69     		ldr	r3, [r7, #20]
 241:../Dave/Generated/src/ADC002/ADC002.c **** }
 323              		.loc 1 241 0
 324 00f6 1846     		mov	r0, r3
 325 00f8 07F11C07 		add	r7, r7, #28
 326 00fc BD46     		mov	sp, r7
 327 00fe 80BC     		pop	{r7}
 328 0100 7047     		bx	lr
 329              		.cfi_endproc
 330              	.LFE114:
 332 0102 00BF     		.section	.text.ADC002_Deinit,"ax",%progbits
 333              		.align	2
 334              		.global	ADC002_Deinit
 335              		.thumb
 336              		.thumb_func
 338              	ADC002_Deinit:
 339              	.LFB115:
 242:../Dave/Generated/src/ADC002/ADC002.c **** 
 243:../Dave/Generated/src/ADC002/ADC002.c **** 
 244:../Dave/Generated/src/ADC002/ADC002.c **** /* This function resets the ADC002 app */
 245:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_Deinit(const ADC002_HandleType *HandlePtr )
 246:../Dave/Generated/src/ADC002/ADC002.c **** {
 340              		.loc 1 246 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 16
 343              		@ frame_needed = 1, uses_anonymous_args = 0
 344              		@ link register save eliminated.
 345 0000 80B4     		push	{r7}
 346              	.LCFI8:
 347              		.cfi_def_cfa_offset 4
 348              		.cfi_offset 7, -4
 349 0002 85B0     		sub	sp, sp, #20
 350              	.LCFI9:
 351              		.cfi_def_cfa_offset 24
 352 0004 00AF     		add	r7, sp, #0
 353              	.LCFI10:
 354              		.cfi_def_cfa_register 7
 355 0006 7860     		str	r0, [r7, #4]
 247:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 356              		.loc 1 247 0
 357 0008 4FF00103 		mov	r3, #1
 358 000c FB60     		str	r3, [r7, #12]
 248:../Dave/Generated/src/ADC002/ADC002.c **** 
 249:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 250:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 359              		.loc 1 250 0
 360 000e 7B68     		ldr	r3, [r7, #4]
 361 0010 9B6D     		ldr	r3, [r3, #88]
 362 0012 BB60     		str	r3, [r7, #8]
 251:../Dave/Generated/src/ADC002/ADC002.c **** 
 252:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 253:../Dave/Generated/src/ADC002/ADC002.c ****   
 254:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 363              		.loc 1 254 0
 364 0014 7B68     		ldr	r3, [r7, #4]
 365 0016 9B6A     		ldr	r3, [r3, #40]
 366 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 367 001a 012B     		cmp	r3, #1
 368 001c 2ED1     		bne	.L12
 255:../Dave/Generated/src/ADC002/ADC002.c ****   { 
 256:../Dave/Generated/src/ADC002/ADC002.c ****     /* Reset the queue input Register */
 257:../Dave/Generated/src/ADC002/ADC002.c ****      VADCGroupPtr->QINR0 = (uint32_t)0x00000000; 
 369              		.loc 1 257 0
 370 001e BB68     		ldr	r3, [r7, #8]
 371 0020 4FF00002 		mov	r2, #0
 372 0024 C3F81021 		str	r2, [r3, #272]
 258:../Dave/Generated/src/ADC002/ADC002.c ****       
 259:../Dave/Generated/src/ADC002/ADC002.c ****     /* Reset ARBPR Register */
 260:../Dave/Generated/src/ADC002/ADC002.c ****      VADCGroupPtr->ARBPR &= (uint32_t)0x06000BB4;
 373              		.loc 1 260 0
 374 0028 BB68     		ldr	r3, [r7, #8]
 375 002a D3F88420 		ldr	r2, [r3, #132]
 376 002e 40F6B433 		movw	r3, #2996
 377 0032 C0F20063 		movt	r3, 1536
 378 0036 1340     		ands	r3, r3, r2
 379 0038 BA68     		ldr	r2, [r7, #8]
 380 003a C2F88430 		str	r3, [r2, #132]
 261:../Dave/Generated/src/ADC002/ADC002.c ****   
 262:../Dave/Generated/src/ADC002/ADC002.c ****     /* Reset QCTRL0 Register*/
 263:../Dave/Generated/src/ADC002/ADC002.c ****     /* set write control bit and clear other bits*/
 264:../Dave/Generated/src/ADC002/ADC002.c ****      VADCGroupPtr->QCTRL0 = (uint32_t)0x80008000;
 381              		.loc 1 264 0
 382 003e BB68     		ldr	r3, [r7, #8]
 383 0040 4FF08022 		mov	r2, #-2147450880
 384 0044 C3F80021 		str	r2, [r3, #256]
 265:../Dave/Generated/src/ADC002/ADC002.c ****      
 266:../Dave/Generated/src/ADC002/ADC002.c ****     /* Flush the Queue */
 267:../Dave/Generated/src/ADC002/ADC002.c ****      SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_FLUSH_Pos);
 385              		.loc 1 267 0
 386 0048 BB68     		ldr	r3, [r7, #8]
 387 004a D3F80431 		ldr	r3, [r3, #260]
 388 004e 43F48062 		orr	r2, r3, #1024
 389 0052 BB68     		ldr	r3, [r7, #8]
 390 0054 C3F80421 		str	r2, [r3, #260]
 268:../Dave/Generated/src/ADC002/ADC002.c ****     
 269:../Dave/Generated/src/ADC002/ADC002.c ****     /* Reset QMR0 Register */
 270:../Dave/Generated/src/ADC002/ADC002.c ****     VADCGroupPtr->QMR0 = (uint32_t)0x00000000;
 391              		.loc 1 270 0
 392 0058 BB68     		ldr	r3, [r7, #8]
 393 005a 4FF00002 		mov	r2, #0
 394 005e C3F80421 		str	r2, [r3, #260]
 271:../Dave/Generated/src/ADC002/ADC002.c ****     
 272:../Dave/Generated/src/ADC002/ADC002.c ****     /* Reset the source event flag */
 273:../Dave/Generated/src/ADC002/ADC002.c ****     VADCGroupPtr->SEFCLR = (uint32_t)0x1;
 395              		.loc 1 273 0
 396 0062 BB68     		ldr	r3, [r7, #8]
 397 0064 4FF00102 		mov	r2, #1
 398 0068 C3F89821 		str	r2, [r3, #408]
 274:../Dave/Generated/src/ADC002/ADC002.c ****     
 275:../Dave/Generated/src/ADC002/ADC002.c ****     /* Set the App State to Uninitialized */
 276:../Dave/Generated/src/ADC002/ADC002.c ****     HandlePtr->DynamicHandlePtr->State = ADC002_UNINITIALIZED;
 399              		.loc 1 276 0
 400 006c 7B68     		ldr	r3, [r7, #4]
 401 006e 9B6A     		ldr	r3, [r3, #40]
 402 0070 4FF00002 		mov	r2, #0
 403 0074 1A70     		strb	r2, [r3, #0]
 277:../Dave/Generated/src/ADC002/ADC002.c ****   
 278:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 404              		.loc 1 278 0
 405 0076 4FF00003 		mov	r3, #0
 406 007a FB60     		str	r3, [r7, #12]
 407              	.L12:
 279:../Dave/Generated/src/ADC002/ADC002.c ****   }
 280:../Dave/Generated/src/ADC002/ADC002.c ****   else
 281:../Dave/Generated/src/ADC002/ADC002.c ****   {
 282:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 283:../Dave/Generated/src/ADC002/ADC002.c ****   }
 284:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 285:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 408              		.loc 1 285 0
 409 007c FB68     		ldr	r3, [r7, #12]
 286:../Dave/Generated/src/ADC002/ADC002.c **** }
 410              		.loc 1 286 0
 411 007e 1846     		mov	r0, r3
 412 0080 07F11407 		add	r7, r7, #20
 413 0084 BD46     		mov	sp, r7
 414 0086 80BC     		pop	{r7}
 415 0088 7047     		bx	lr
 416              		.cfi_endproc
 417              	.LFE115:
 419 008a 00BF     		.section	.text.ADC002_ClearEvent,"ax",%progbits
 420              		.align	2
 421              		.global	ADC002_ClearEvent
 422              		.thumb
 423              		.thumb_func
 425              	ADC002_ClearEvent:
 426              	.LFB116:
 287:../Dave/Generated/src/ADC002/ADC002.c **** 
 288:../Dave/Generated/src/ADC002/ADC002.c **** 
 289:../Dave/Generated/src/ADC002/ADC002.c **** /* This function clears the Event flag. */
 290:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_ClearEvent(const ADC002_HandleType *HandlePtr)
 291:../Dave/Generated/src/ADC002/ADC002.c **** {
 427              		.loc 1 291 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 16
 430              		@ frame_needed = 1, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 432 0000 80B4     		push	{r7}
 433              	.LCFI11:
 434              		.cfi_def_cfa_offset 4
 435              		.cfi_offset 7, -4
 436 0002 85B0     		sub	sp, sp, #20
 437              	.LCFI12:
 438              		.cfi_def_cfa_offset 24
 439 0004 00AF     		add	r7, sp, #0
 440              	.LCFI13:
 441              		.cfi_def_cfa_register 7
 442 0006 7860     		str	r0, [r7, #4]
 292:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 443              		.loc 1 292 0
 444 0008 4FF00103 		mov	r3, #1
 445 000c FB60     		str	r3, [r7, #12]
 293:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 294:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 446              		.loc 1 294 0
 447 000e 7B68     		ldr	r3, [r7, #4]
 448 0010 9B6D     		ldr	r3, [r3, #88]
 449 0012 BB60     		str	r3, [r7, #8]
 295:../Dave/Generated/src/ADC002/ADC002.c **** 
 296:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 297:../Dave/Generated/src/ADC002/ADC002.c **** 
 298:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 450              		.loc 1 298 0
 451 0014 7B68     		ldr	r3, [r7, #4]
 452 0016 9B6A     		ldr	r3, [r3, #40]
 453 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 454 001a 012B     		cmp	r3, #1
 455 001c 0AD1     		bne	.L15
 299:../Dave/Generated/src/ADC002/ADC002.c ****   {
 300:../Dave/Generated/src/ADC002/ADC002.c ****     /* Clear event flag */
 301:../Dave/Generated/src/ADC002/ADC002.c ****     SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_CEV_Pos);
 456              		.loc 1 301 0
 457 001e BB68     		ldr	r3, [r7, #8]
 458 0020 D3F80431 		ldr	r3, [r3, #260]
 459 0024 43F40062 		orr	r2, r3, #2048
 460 0028 BB68     		ldr	r3, [r7, #8]
 461 002a C3F80421 		str	r2, [r3, #260]
 302:../Dave/Generated/src/ADC002/ADC002.c ****   
 303:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 462              		.loc 1 303 0
 463 002e 4FF00003 		mov	r3, #0
 464 0032 FB60     		str	r3, [r7, #12]
 465              	.L15:
 304:../Dave/Generated/src/ADC002/ADC002.c ****   }
 305:../Dave/Generated/src/ADC002/ADC002.c ****   else
 306:../Dave/Generated/src/ADC002/ADC002.c ****   {
 307:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 308:../Dave/Generated/src/ADC002/ADC002.c ****   }
 309:../Dave/Generated/src/ADC002/ADC002.c ****   
 310:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 311:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 466              		.loc 1 311 0
 467 0034 FB68     		ldr	r3, [r7, #12]
 312:../Dave/Generated/src/ADC002/ADC002.c **** }
 468              		.loc 1 312 0
 469 0036 1846     		mov	r0, r3
 470 0038 07F11407 		add	r7, r7, #20
 471 003c BD46     		mov	sp, r7
 472 003e 80BC     		pop	{r7}
 473 0040 7047     		bx	lr
 474              		.cfi_endproc
 475              	.LFE116:
 477 0042 00BF     		.section	.text.ADC002_FlushQueue,"ax",%progbits
 478              		.align	2
 479              		.global	ADC002_FlushQueue
 480              		.thumb
 481              		.thumb_func
 483              	ADC002_FlushQueue:
 484              	.LFB117:
 313:../Dave/Generated/src/ADC002/ADC002.c **** 
 314:../Dave/Generated/src/ADC002/ADC002.c **** 
 315:../Dave/Generated/src/ADC002/ADC002.c **** /* This function clears the queue entries. */
 316:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_FlushQueue(const ADC002_HandleType *HandlePtr)
 317:../Dave/Generated/src/ADC002/ADC002.c **** {
 485              		.loc 1 317 0
 486              		.cfi_startproc
 487              		@ args = 0, pretend = 0, frame = 16
 488              		@ frame_needed = 1, uses_anonymous_args = 0
 489              		@ link register save eliminated.
 490 0000 80B4     		push	{r7}
 491              	.LCFI14:
 492              		.cfi_def_cfa_offset 4
 493              		.cfi_offset 7, -4
 494 0002 85B0     		sub	sp, sp, #20
 495              	.LCFI15:
 496              		.cfi_def_cfa_offset 24
 497 0004 00AF     		add	r7, sp, #0
 498              	.LCFI16:
 499              		.cfi_def_cfa_register 7
 500 0006 7860     		str	r0, [r7, #4]
 318:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 501              		.loc 1 318 0
 502 0008 4FF00103 		mov	r3, #1
 503 000c FB60     		str	r3, [r7, #12]
 319:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 320:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 504              		.loc 1 320 0
 505 000e 7B68     		ldr	r3, [r7, #4]
 506 0010 9B6D     		ldr	r3, [r3, #88]
 507 0012 BB60     		str	r3, [r7, #8]
 321:../Dave/Generated/src/ADC002/ADC002.c **** 
 322:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 323:../Dave/Generated/src/ADC002/ADC002.c **** 
 324:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 508              		.loc 1 324 0
 509 0014 7B68     		ldr	r3, [r7, #4]
 510 0016 9B6A     		ldr	r3, [r3, #40]
 511 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 512 001a 012B     		cmp	r3, #1
 513 001c 0AD1     		bne	.L18
 325:../Dave/Generated/src/ADC002/ADC002.c ****   {
 326:../Dave/Generated/src/ADC002/ADC002.c ****     /* Clear the queue entries */
 327:../Dave/Generated/src/ADC002/ADC002.c ****     SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_FLUSH_Pos);
 514              		.loc 1 327 0
 515 001e BB68     		ldr	r3, [r7, #8]
 516 0020 D3F80431 		ldr	r3, [r3, #260]
 517 0024 43F48062 		orr	r2, r3, #1024
 518 0028 BB68     		ldr	r3, [r7, #8]
 519 002a C3F80421 		str	r2, [r3, #260]
 328:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;    
 520              		.loc 1 328 0
 521 002e 4FF00003 		mov	r3, #0
 522 0032 FB60     		str	r3, [r7, #12]
 523              	.L18:
 329:../Dave/Generated/src/ADC002/ADC002.c ****   }
 330:../Dave/Generated/src/ADC002/ADC002.c ****   else    
 331:../Dave/Generated/src/ADC002/ADC002.c ****   {
 332:../Dave/Generated/src/ADC002/ADC002.c ****       ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 333:../Dave/Generated/src/ADC002/ADC002.c ****   }
 334:../Dave/Generated/src/ADC002/ADC002.c ****   
 335:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 336:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 524              		.loc 1 336 0
 525 0034 FB68     		ldr	r3, [r7, #12]
 337:../Dave/Generated/src/ADC002/ADC002.c **** }
 526              		.loc 1 337 0
 527 0036 1846     		mov	r0, r3
 528 0038 07F11407 		add	r7, r7, #20
 529 003c BD46     		mov	sp, r7
 530 003e 80BC     		pop	{r7}
 531 0040 7047     		bx	lr
 532              		.cfi_endproc
 533              	.LFE117:
 535 0042 00BF     		.section	.text.ADC002_TriggerEvent,"ax",%progbits
 536              		.align	2
 537              		.global	ADC002_TriggerEvent
 538              		.thumb
 539              		.thumb_func
 541              	ADC002_TriggerEvent:
 542              	.LFB118:
 338:../Dave/Generated/src/ADC002/ADC002.c **** 
 339:../Dave/Generated/src/ADC002/ADC002.c **** 
 340:../Dave/Generated/src/ADC002/ADC002.c **** /* This function generates a trigger event.*/
 341:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_TriggerEvent(const ADC002_HandleType *HandlePtr)
 342:../Dave/Generated/src/ADC002/ADC002.c **** {
 543              		.loc 1 342 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 16
 546              		@ frame_needed = 1, uses_anonymous_args = 0
 547              		@ link register save eliminated.
 548 0000 80B4     		push	{r7}
 549              	.LCFI17:
 550              		.cfi_def_cfa_offset 4
 551              		.cfi_offset 7, -4
 552 0002 85B0     		sub	sp, sp, #20
 553              	.LCFI18:
 554              		.cfi_def_cfa_offset 24
 555 0004 00AF     		add	r7, sp, #0
 556              	.LCFI19:
 557              		.cfi_def_cfa_register 7
 558 0006 7860     		str	r0, [r7, #4]
 343:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 559              		.loc 1 343 0
 560 0008 4FF00103 		mov	r3, #1
 561 000c FB60     		str	r3, [r7, #12]
 344:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 345:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 562              		.loc 1 345 0
 563 000e 7B68     		ldr	r3, [r7, #4]
 564 0010 9B6D     		ldr	r3, [r3, #88]
 565 0012 BB60     		str	r3, [r7, #8]
 346:../Dave/Generated/src/ADC002/ADC002.c **** 
 347:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 348:../Dave/Generated/src/ADC002/ADC002.c **** 
 349:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 566              		.loc 1 349 0
 567 0014 7B68     		ldr	r3, [r7, #4]
 568 0016 9B6A     		ldr	r3, [r3, #40]
 569 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 570 001a 012B     		cmp	r3, #1
 571 001c 0AD1     		bne	.L21
 350:../Dave/Generated/src/ADC002/ADC002.c ****   {
 351:../Dave/Generated/src/ADC002/ADC002.c ****     /* Generate a trigger event */
 352:../Dave/Generated/src/ADC002/ADC002.c ****     SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_TREV_Pos);
 572              		.loc 1 352 0
 573 001e BB68     		ldr	r3, [r7, #8]
 574 0020 D3F80431 		ldr	r3, [r3, #260]
 575 0024 43F40072 		orr	r2, r3, #512
 576 0028 BB68     		ldr	r3, [r7, #8]
 577 002a C3F80421 		str	r2, [r3, #260]
 353:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 578              		.loc 1 353 0
 579 002e 4FF00003 		mov	r3, #0
 580 0032 FB60     		str	r3, [r7, #12]
 581              	.L21:
 354:../Dave/Generated/src/ADC002/ADC002.c ****   }
 355:../Dave/Generated/src/ADC002/ADC002.c ****   else    
 356:../Dave/Generated/src/ADC002/ADC002.c ****   {
 357:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 358:../Dave/Generated/src/ADC002/ADC002.c ****   }
 359:../Dave/Generated/src/ADC002/ADC002.c ****   
 360:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 361:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 582              		.loc 1 361 0
 583 0034 FB68     		ldr	r3, [r7, #12]
 362:../Dave/Generated/src/ADC002/ADC002.c **** }
 584              		.loc 1 362 0
 585 0036 1846     		mov	r0, r3
 586 0038 07F11407 		add	r7, r7, #20
 587 003c BD46     		mov	sp, r7
 588 003e 80BC     		pop	{r7}
 589 0040 7047     		bx	lr
 590              		.cfi_endproc
 591              	.LFE118:
 593 0042 00BF     		.section	.text.ADC002_ClearValidBit,"ax",%progbits
 594              		.align	2
 595              		.global	ADC002_ClearValidBit
 596              		.thumb
 597              		.thumb_func
 599              	ADC002_ClearValidBit:
 600              	.LFB119:
 363:../Dave/Generated/src/ADC002/ADC002.c **** 
 364:../Dave/Generated/src/ADC002/ADC002.c **** 
 365:../Dave/Generated/src/ADC002/ADC002.c **** /*
 366:../Dave/Generated/src/ADC002/ADC002.c ****  * This function clears the next pending valid queue entry in the
 367:../Dave/Generated/src/ADC002/ADC002.c ****  * sequence and the event flag EV.
 368:../Dave/Generated/src/ADC002/ADC002.c ****  */
 369:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_ClearValidBit(const ADC002_HandleType *HandlePtr)
 370:../Dave/Generated/src/ADC002/ADC002.c **** {
 601              		.loc 1 370 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 16
 604              		@ frame_needed = 1, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 606 0000 80B4     		push	{r7}
 607              	.LCFI20:
 608              		.cfi_def_cfa_offset 4
 609              		.cfi_offset 7, -4
 610 0002 85B0     		sub	sp, sp, #20
 611              	.LCFI21:
 612              		.cfi_def_cfa_offset 24
 613 0004 00AF     		add	r7, sp, #0
 614              	.LCFI22:
 615              		.cfi_def_cfa_register 7
 616 0006 7860     		str	r0, [r7, #4]
 371:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 617              		.loc 1 371 0
 618 0008 4FF00103 		mov	r3, #1
 619 000c FB60     		str	r3, [r7, #12]
 372:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 373:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 620              		.loc 1 373 0
 621 000e 7B68     		ldr	r3, [r7, #4]
 622 0010 9B6D     		ldr	r3, [r3, #88]
 623 0012 BB60     		str	r3, [r7, #8]
 374:../Dave/Generated/src/ADC002/ADC002.c **** 
 375:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 376:../Dave/Generated/src/ADC002/ADC002.c **** 
 377:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 624              		.loc 1 377 0
 625 0014 7B68     		ldr	r3, [r7, #4]
 626 0016 9B6A     		ldr	r3, [r3, #40]
 627 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 628 001a 012B     		cmp	r3, #1
 629 001c 0AD1     		bne	.L24
 378:../Dave/Generated/src/ADC002/ADC002.c ****   {
 379:../Dave/Generated/src/ADC002/ADC002.c ****     /* Generate a trigger event */
 380:../Dave/Generated/src/ADC002/ADC002.c ****     SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_CLRV_Pos);
 630              		.loc 1 380 0
 631 001e BB68     		ldr	r3, [r7, #8]
 632 0020 D3F80431 		ldr	r3, [r3, #260]
 633 0024 43F48072 		orr	r2, r3, #256
 634 0028 BB68     		ldr	r3, [r7, #8]
 635 002a C3F80421 		str	r2, [r3, #260]
 381:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 636              		.loc 1 381 0
 637 002e 4FF00003 		mov	r3, #0
 638 0032 FB60     		str	r3, [r7, #12]
 639              	.L24:
 382:../Dave/Generated/src/ADC002/ADC002.c ****   }
 383:../Dave/Generated/src/ADC002/ADC002.c ****   else    
 384:../Dave/Generated/src/ADC002/ADC002.c ****   {
 385:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 386:../Dave/Generated/src/ADC002/ADC002.c ****   }
 387:../Dave/Generated/src/ADC002/ADC002.c ****   
 388:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 389:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 640              		.loc 1 389 0
 641 0034 FB68     		ldr	r3, [r7, #12]
 390:../Dave/Generated/src/ADC002/ADC002.c **** }
 642              		.loc 1 390 0
 643 0036 1846     		mov	r0, r3
 644 0038 07F11407 		add	r7, r7, #20
 645 003c BD46     		mov	sp, r7
 646 003e 80BC     		pop	{r7}
 647 0040 7047     		bx	lr
 648              		.cfi_endproc
 649              	.LFE119:
 651 0042 00BF     		.section	.text.ADC002_EnableGate,"ax",%progbits
 652              		.align	2
 653              		.global	ADC002_EnableGate
 654              		.thumb
 655              		.thumb_func
 657              	ADC002_EnableGate:
 658              	.LFB120:
 391:../Dave/Generated/src/ADC002/ADC002.c **** 
 392:../Dave/Generated/src/ADC002/ADC002.c **** /*
 393:../Dave/Generated/src/ADC002/ADC002.c ****  * This function enables the gating.
 394:../Dave/Generated/src/ADC002/ADC002.c ****  */
 395:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_EnableGate(const ADC002_HandleType *HandlePtr, 
 396:../Dave/Generated/src/ADC002/ADC002.c ****                                               uint8_t GateSelectVal)
 397:../Dave/Generated/src/ADC002/ADC002.c **** {
 659              		.loc 1 397 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 16
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664 0000 80B4     		push	{r7}
 665              	.LCFI23:
 666              		.cfi_def_cfa_offset 4
 667              		.cfi_offset 7, -4
 668 0002 85B0     		sub	sp, sp, #20
 669              	.LCFI24:
 670              		.cfi_def_cfa_offset 24
 671 0004 00AF     		add	r7, sp, #0
 672              	.LCFI25:
 673              		.cfi_def_cfa_register 7
 674 0006 7860     		str	r0, [r7, #4]
 675 0008 0B46     		mov	r3, r1
 676 000a FB70     		strb	r3, [r7, #3]
 398:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 677              		.loc 1 398 0
 678 000c 4FF00103 		mov	r3, #1
 679 0010 FB60     		str	r3, [r7, #12]
 399:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 400:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 680              		.loc 1 400 0
 681 0012 7B68     		ldr	r3, [r7, #4]
 682 0014 9B6D     		ldr	r3, [r3, #88]
 683 0016 BB60     		str	r3, [r7, #8]
 401:../Dave/Generated/src/ADC002/ADC002.c **** 
 402:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 403:../Dave/Generated/src/ADC002/ADC002.c **** 
 404:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 684              		.loc 1 404 0
 685 0018 7B68     		ldr	r3, [r7, #4]
 686 001a 9B6A     		ldr	r3, [r3, #40]
 687 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 688 001e 012B     		cmp	r3, #1
 689 0020 15D1     		bne	.L27
 405:../Dave/Generated/src/ADC002/ADC002.c ****   {
 406:../Dave/Generated/src/ADC002/ADC002.c ****     if(GateSelectVal <= (uint8_t)3)
 690              		.loc 1 406 0
 691 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 692 0024 032B     		cmp	r3, #3
 693 0026 0FD8     		bhi	.L28
 407:../Dave/Generated/src/ADC002/ADC002.c ****     {
 408:../Dave/Generated/src/ADC002/ADC002.c ****       /* Selects the gating functionality */
 409:../Dave/Generated/src/ADC002/ADC002.c ****      WR_REG(VADCGroupPtr->QMR0, VADC_G_QMR0_ENGT_Msk, VADC_G_QMR0_ENGT_Pos,\
 694              		.loc 1 409 0
 695 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 696 002a 03F00302 		and	r2, r3, #3
 697 002e BB68     		ldr	r3, [r7, #8]
 698 0030 D3F80431 		ldr	r3, [r3, #260]
 699 0034 23F00303 		bic	r3, r3, #3
 700 0038 1A43     		orrs	r2, r2, r3
 701 003a BB68     		ldr	r3, [r7, #8]
 702 003c C3F80421 		str	r2, [r3, #260]
 410:../Dave/Generated/src/ADC002/ADC002.c ****                                                      (uint32_t)GateSelectVal);
 411:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 703              		.loc 1 411 0
 704 0040 4FF00003 		mov	r3, #0
 705 0044 FB60     		str	r3, [r7, #12]
 706 0046 02E0     		b	.L27
 707              	.L28:
 412:../Dave/Generated/src/ADC002/ADC002.c ****     }
 413:../Dave/Generated/src/ADC002/ADC002.c ****     else
 414:../Dave/Generated/src/ADC002/ADC002.c ****     {
 415:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 708              		.loc 1 415 0
 709 0048 4FF00203 		mov	r3, #2
 710 004c FB60     		str	r3, [r7, #12]
 711              	.L27:
 416:../Dave/Generated/src/ADC002/ADC002.c ****     }
 417:../Dave/Generated/src/ADC002/ADC002.c ****   }
 418:../Dave/Generated/src/ADC002/ADC002.c ****   else    
 419:../Dave/Generated/src/ADC002/ADC002.c ****   {
 420:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 421:../Dave/Generated/src/ADC002/ADC002.c ****   }
 422:../Dave/Generated/src/ADC002/ADC002.c **** 
 423:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 424:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 712              		.loc 1 424 0
 713 004e FB68     		ldr	r3, [r7, #12]
 425:../Dave/Generated/src/ADC002/ADC002.c **** }
 714              		.loc 1 425 0
 715 0050 1846     		mov	r0, r3
 716 0052 07F11407 		add	r7, r7, #20
 717 0056 BD46     		mov	sp, r7
 718 0058 80BC     		pop	{r7}
 719 005a 7047     		bx	lr
 720              		.cfi_endproc
 721              	.LFE120:
 723              		.section	.text.ADC002_EnableQueueArbitrationSlot,"ax",%progbits
 724              		.align	2
 725              		.global	ADC002_EnableQueueArbitrationSlot
 726              		.thumb
 727              		.thumb_func
 729              	ADC002_EnableQueueArbitrationSlot:
 730              	.LFB121:
 426:../Dave/Generated/src/ADC002/ADC002.c **** 
 427:../Dave/Generated/src/ADC002/ADC002.c **** /*
 428:../Dave/Generated/src/ADC002/ADC002.c ****  * This function enables queue arbitration slot.
 429:../Dave/Generated/src/ADC002/ADC002.c ****  */
 430:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_EnableQueueArbitrationSlot(const ADC002_HandleType *HandlePtr)
 431:../Dave/Generated/src/ADC002/ADC002.c **** {
 731              		.loc 1 431 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 16
 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735              		@ link register save eliminated.
 736 0000 80B4     		push	{r7}
 737              	.LCFI26:
 738              		.cfi_def_cfa_offset 4
 739              		.cfi_offset 7, -4
 740 0002 85B0     		sub	sp, sp, #20
 741              	.LCFI27:
 742              		.cfi_def_cfa_offset 24
 743 0004 00AF     		add	r7, sp, #0
 744              	.LCFI28:
 745              		.cfi_def_cfa_register 7
 746 0006 7860     		str	r0, [r7, #4]
 432:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 747              		.loc 1 432 0
 748 0008 4FF00103 		mov	r3, #1
 749 000c FB60     		str	r3, [r7, #12]
 433:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 434:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 750              		.loc 1 434 0
 751 000e 7B68     		ldr	r3, [r7, #4]
 752 0010 9B6D     		ldr	r3, [r3, #88]
 753 0012 BB60     		str	r3, [r7, #8]
 435:../Dave/Generated/src/ADC002/ADC002.c **** 
 436:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 437:../Dave/Generated/src/ADC002/ADC002.c **** 
 438:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 754              		.loc 1 438 0
 755 0014 7B68     		ldr	r3, [r7, #4]
 756 0016 9B6A     		ldr	r3, [r3, #40]
 757 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 758 001a 012B     		cmp	r3, #1
 759 001c 0AD1     		bne	.L31
 439:../Dave/Generated/src/ADC002/ADC002.c ****   {
 440:../Dave/Generated/src/ADC002/ADC002.c ****     /* Enables Queue Arbitration Slot */
 441:../Dave/Generated/src/ADC002/ADC002.c ****     SET_BIT(VADCGroupPtr->ARBPR,VADC_G_ARBPR_ASEN0_Pos);    
 760              		.loc 1 441 0
 761 001e BB68     		ldr	r3, [r7, #8]
 762 0020 D3F88430 		ldr	r3, [r3, #132]
 763 0024 43F08072 		orr	r2, r3, #16777216
 764 0028 BB68     		ldr	r3, [r7, #8]
 765 002a C3F88420 		str	r2, [r3, #132]
 442:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 766              		.loc 1 442 0
 767 002e 4FF00003 		mov	r3, #0
 768 0032 FB60     		str	r3, [r7, #12]
 769              	.L31:
 443:../Dave/Generated/src/ADC002/ADC002.c ****   }
 444:../Dave/Generated/src/ADC002/ADC002.c ****   else
 445:../Dave/Generated/src/ADC002/ADC002.c ****   {
 446:../Dave/Generated/src/ADC002/ADC002.c ****       ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 447:../Dave/Generated/src/ADC002/ADC002.c ****   }
 448:../Dave/Generated/src/ADC002/ADC002.c ****   
 449:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 450:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 770              		.loc 1 450 0
 771 0034 FB68     		ldr	r3, [r7, #12]
 451:../Dave/Generated/src/ADC002/ADC002.c **** }
 772              		.loc 1 451 0
 773 0036 1846     		mov	r0, r3
 774 0038 07F11407 		add	r7, r7, #20
 775 003c BD46     		mov	sp, r7
 776 003e 80BC     		pop	{r7}
 777 0040 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE121:
 781 0042 00BF     		.section	.text.ADC002_DisableQueueArbitrationSlot,"ax",%progbits
 782              		.align	2
 783              		.global	ADC002_DisableQueueArbitrationSlot
 784              		.thumb
 785              		.thumb_func
 787              	ADC002_DisableQueueArbitrationSlot:
 788              	.LFB122:
 452:../Dave/Generated/src/ADC002/ADC002.c **** 
 453:../Dave/Generated/src/ADC002/ADC002.c **** /*
 454:../Dave/Generated/src/ADC002/ADC002.c ****  * This function disables queue arbitration slot.
 455:../Dave/Generated/src/ADC002/ADC002.c ****  */
 456:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_DisableQueueArbitrationSlot(const ADC002_HandleType *HandlePtr)
 457:../Dave/Generated/src/ADC002/ADC002.c **** {
 789              		.loc 1 457 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 16
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794 0000 80B4     		push	{r7}
 795              	.LCFI29:
 796              		.cfi_def_cfa_offset 4
 797              		.cfi_offset 7, -4
 798 0002 85B0     		sub	sp, sp, #20
 799              	.LCFI30:
 800              		.cfi_def_cfa_offset 24
 801 0004 00AF     		add	r7, sp, #0
 802              	.LCFI31:
 803              		.cfi_def_cfa_register 7
 804 0006 7860     		str	r0, [r7, #4]
 458:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 805              		.loc 1 458 0
 806 0008 4FF00103 		mov	r3, #1
 807 000c FB60     		str	r3, [r7, #12]
 459:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 460:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 808              		.loc 1 460 0
 809 000e 7B68     		ldr	r3, [r7, #4]
 810 0010 9B6D     		ldr	r3, [r3, #88]
 811 0012 BB60     		str	r3, [r7, #8]
 461:../Dave/Generated/src/ADC002/ADC002.c **** 
 462:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 463:../Dave/Generated/src/ADC002/ADC002.c **** 
 464:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 812              		.loc 1 464 0
 813 0014 7B68     		ldr	r3, [r7, #4]
 814 0016 9B6A     		ldr	r3, [r3, #40]
 815 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 816 001a 012B     		cmp	r3, #1
 817 001c 0AD1     		bne	.L34
 465:../Dave/Generated/src/ADC002/ADC002.c ****   {
 466:../Dave/Generated/src/ADC002/ADC002.c ****     /* Disables Queue Arbitration Slot */
 467:../Dave/Generated/src/ADC002/ADC002.c ****     CLR_BIT(VADCGroupPtr->ARBPR,VADC_G_ARBPR_ASEN0_Pos);    
 818              		.loc 1 467 0
 819 001e BB68     		ldr	r3, [r7, #8]
 820 0020 D3F88430 		ldr	r3, [r3, #132]
 821 0024 23F08072 		bic	r2, r3, #16777216
 822 0028 BB68     		ldr	r3, [r7, #8]
 823 002a C3F88420 		str	r2, [r3, #132]
 468:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 824              		.loc 1 468 0
 825 002e 4FF00003 		mov	r3, #0
 826 0032 FB60     		str	r3, [r7, #12]
 827              	.L34:
 469:../Dave/Generated/src/ADC002/ADC002.c ****   }
 470:../Dave/Generated/src/ADC002/ADC002.c ****   else
 471:../Dave/Generated/src/ADC002/ADC002.c ****   {
 472:../Dave/Generated/src/ADC002/ADC002.c ****       ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 473:../Dave/Generated/src/ADC002/ADC002.c ****   }
 474:../Dave/Generated/src/ADC002/ADC002.c ****   
 475:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 476:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 828              		.loc 1 476 0
 829 0034 FB68     		ldr	r3, [r7, #12]
 477:../Dave/Generated/src/ADC002/ADC002.c **** }
 830              		.loc 1 477 0
 831 0036 1846     		mov	r0, r3
 832 0038 07F11407 		add	r7, r7, #20
 833 003c BD46     		mov	sp, r7
 834 003e 80BC     		pop	{r7}
 835 0040 7047     		bx	lr
 836              		.cfi_endproc
 837              	.LFE122:
 839 0042 00BF     		.section	.text.ADC002_SetExternalTriggerMode,"ax",%progbits
 840              		.align	2
 841              		.global	ADC002_SetExternalTriggerMode
 842              		.thumb
 843              		.thumb_func
 845              	ADC002_SetExternalTriggerMode:
 846              	.LFB123:
 478:../Dave/Generated/src/ADC002/ADC002.c **** /*
 479:../Dave/Generated/src/ADC002/ADC002.c ****  * This function selects the External trigger mode.
 480:../Dave/Generated/src/ADC002/ADC002.c ****  */
 481:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_SetExternalTriggerMode(const ADC002_HandleType *HandlePtr,
 482:../Dave/Generated/src/ADC002/ADC002.c ****                                                                    uint8_t Mode)
 483:../Dave/Generated/src/ADC002/ADC002.c **** {
 847              		.loc 1 483 0
 848              		.cfi_startproc
 849              		@ args = 0, pretend = 0, frame = 16
 850              		@ frame_needed = 1, uses_anonymous_args = 0
 851              		@ link register save eliminated.
 852 0000 80B4     		push	{r7}
 853              	.LCFI32:
 854              		.cfi_def_cfa_offset 4
 855              		.cfi_offset 7, -4
 856 0002 85B0     		sub	sp, sp, #20
 857              	.LCFI33:
 858              		.cfi_def_cfa_offset 24
 859 0004 00AF     		add	r7, sp, #0
 860              	.LCFI34:
 861              		.cfi_def_cfa_register 7
 862 0006 7860     		str	r0, [r7, #4]
 863 0008 0B46     		mov	r3, r1
 864 000a FB70     		strb	r3, [r7, #3]
 484:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 865              		.loc 1 484 0
 866 000c 4FF00103 		mov	r3, #1
 867 0010 FB60     		str	r3, [r7, #12]
 485:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 486:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 868              		.loc 1 486 0
 869 0012 7B68     		ldr	r3, [r7, #4]
 870 0014 9B6D     		ldr	r3, [r3, #88]
 871 0016 BB60     		str	r3, [r7, #8]
 487:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 488:../Dave/Generated/src/ADC002/ADC002.c **** 
 489:../Dave/Generated/src/ADC002/ADC002.c ****   if(HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 872              		.loc 1 489 0
 873 0018 7B68     		ldr	r3, [r7, #4]
 874 001a 9B6A     		ldr	r3, [r3, #40]
 875 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 876 001e 012B     		cmp	r3, #1
 877 0020 2DD1     		bne	.L37
 490:../Dave/Generated/src/ADC002/ADC002.c ****   {
 491:../Dave/Generated/src/ADC002/ADC002.c ****     if(Mode <= (uint8_t)ADC002_TRIGGER_UPON_BOTH_EDGE)
 878              		.loc 1 491 0
 879 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 880 0024 032B     		cmp	r3, #3
 881 0026 27D8     		bhi	.L38
 492:../Dave/Generated/src/ADC002/ADC002.c ****     {
 493:../Dave/Generated/src/ADC002/ADC002.c ****       if(Mode == (uint8_t)ADC002_NOTRIGGER)
 882              		.loc 1 493 0
 883 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 884 002a 002B     		cmp	r3, #0
 885 002c 08D1     		bne	.L39
 494:../Dave/Generated/src/ADC002/ADC002.c ****       {
 495:../Dave/Generated/src/ADC002/ADC002.c ****         /* Disables external trigger */
 496:../Dave/Generated/src/ADC002/ADC002.c ****         CLR_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_ENTR_Pos);
 886              		.loc 1 496 0
 887 002e BB68     		ldr	r3, [r7, #8]
 888 0030 D3F80431 		ldr	r3, [r3, #260]
 889 0034 23F00402 		bic	r2, r3, #4
 890 0038 BB68     		ldr	r3, [r7, #8]
 891 003a C3F80421 		str	r2, [r3, #260]
 892 003e 07E0     		b	.L40
 893              	.L39:
 497:../Dave/Generated/src/ADC002/ADC002.c ****       }
 498:../Dave/Generated/src/ADC002/ADC002.c ****       else
 499:../Dave/Generated/src/ADC002/ADC002.c ****       {
 500:../Dave/Generated/src/ADC002/ADC002.c ****         /* Enables external trigger */
 501:../Dave/Generated/src/ADC002/ADC002.c ****         SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_ENTR_Pos);      
 894              		.loc 1 501 0
 895 0040 BB68     		ldr	r3, [r7, #8]
 896 0042 D3F80431 		ldr	r3, [r3, #260]
 897 0046 43F00402 		orr	r2, r3, #4
 898 004a BB68     		ldr	r3, [r7, #8]
 899 004c C3F80421 		str	r2, [r3, #260]
 900              	.L40:
 502:../Dave/Generated/src/ADC002/ADC002.c ****       }   
 503:../Dave/Generated/src/ADC002/ADC002.c ****   /*
 504:../Dave/Generated/src/ADC002/ADC002.c ****    * Enable XTWC Bitfield so that XTMODE and XTSEL can be written
 505:../Dave/Generated/src/ADC002/ADC002.c ****    * Selects trigger mode .
 506:../Dave/Generated/src/ADC002/ADC002.c ****    */
 507:../Dave/Generated/src/ADC002/ADC002.c ****       VADCGroupPtr->QCTRL0 = (uint32_t)
 508:../Dave/Generated/src/ADC002/ADC002.c ****         ((((uint32_t)1 << VADC_G_QCTRL0_XTWC_Pos) & VADC_G_QCTRL0_XTWC_Msk)|\
 509:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)Mode<< VADC_G_QCTRL0_XTMODE_Pos) & VADC_G_QCTRL0_XTMODE_Msk)|\
 901              		.loc 1 509 0
 902 0050 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 903 0052 4FEA4333 		lsl	r3, r3, #13
 904 0056 03F4C042 		and	r2, r3, #24576
 510:../Dave/Generated/src/ADC002/ADC002.c ****         (VADCGroupPtr->QCTRL0 & (((uint32_t)0xF)<< VADC_G_QCTRL0_XTSEL_Pos)));
 905              		.loc 1 510 0
 906 005a BB68     		ldr	r3, [r7, #8]
 907 005c D3F80031 		ldr	r3, [r3, #256]
 908 0060 03F47063 		and	r3, r3, #3840
 507:../Dave/Generated/src/ADC002/ADC002.c ****       VADCGroupPtr->QCTRL0 = (uint32_t)
 909              		.loc 1 507 0
 910 0064 1343     		orrs	r3, r3, r2
 911 0066 43F40042 		orr	r2, r3, #32768
 912 006a BB68     		ldr	r3, [r7, #8]
 913 006c C3F80021 		str	r2, [r3, #256]
 511:../Dave/Generated/src/ADC002/ADC002.c **** 
 512:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 914              		.loc 1 512 0
 915 0070 4FF00003 		mov	r3, #0
 916 0074 FB60     		str	r3, [r7, #12]
 917 0076 02E0     		b	.L37
 918              	.L38:
 513:../Dave/Generated/src/ADC002/ADC002.c ****     }
 514:../Dave/Generated/src/ADC002/ADC002.c ****     else
 515:../Dave/Generated/src/ADC002/ADC002.c ****     {
 516:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 919              		.loc 1 516 0
 920 0078 4FF00203 		mov	r3, #2
 921 007c FB60     		str	r3, [r7, #12]
 922              	.L37:
 517:../Dave/Generated/src/ADC002/ADC002.c ****     }
 518:../Dave/Generated/src/ADC002/ADC002.c ****   }
 519:../Dave/Generated/src/ADC002/ADC002.c ****   else
 520:../Dave/Generated/src/ADC002/ADC002.c ****   {
 521:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 522:../Dave/Generated/src/ADC002/ADC002.c ****   }
 523:../Dave/Generated/src/ADC002/ADC002.c **** 
 524:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 525:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 923              		.loc 1 525 0
 924 007e FB68     		ldr	r3, [r7, #12]
 526:../Dave/Generated/src/ADC002/ADC002.c **** }
 925              		.loc 1 526 0
 926 0080 1846     		mov	r0, r3
 927 0082 07F11407 		add	r7, r7, #20
 928 0086 BD46     		mov	sp, r7
 929 0088 80BC     		pop	{r7}
 930 008a 7047     		bx	lr
 931              		.cfi_endproc
 932              	.LFE123:
 934              		.section	.text.ADC002_EnableExternalTrigger,"ax",%progbits
 935              		.align	2
 936              		.global	ADC002_EnableExternalTrigger
 937              		.thumb
 938              		.thumb_func
 940              	ADC002_EnableExternalTrigger:
 941              	.LFB124:
 527:../Dave/Generated/src/ADC002/ADC002.c **** 
 528:../Dave/Generated/src/ADC002/ADC002.c **** /*
 529:../Dave/Generated/src/ADC002/ADC002.c ****  * This function enables external trigger.
 530:../Dave/Generated/src/ADC002/ADC002.c ****  */
 531:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_EnableExternalTrigger(const ADC002_HandleType *HandlePtr)
 532:../Dave/Generated/src/ADC002/ADC002.c **** {
 942              		.loc 1 532 0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 16
 945              		@ frame_needed = 1, uses_anonymous_args = 0
 946              		@ link register save eliminated.
 947 0000 80B4     		push	{r7}
 948              	.LCFI35:
 949              		.cfi_def_cfa_offset 4
 950              		.cfi_offset 7, -4
 951 0002 85B0     		sub	sp, sp, #20
 952              	.LCFI36:
 953              		.cfi_def_cfa_offset 24
 954 0004 00AF     		add	r7, sp, #0
 955              	.LCFI37:
 956              		.cfi_def_cfa_register 7
 957 0006 7860     		str	r0, [r7, #4]
 533:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 958              		.loc 1 533 0
 959 0008 4FF00103 		mov	r3, #1
 960 000c FB60     		str	r3, [r7, #12]
 534:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 535:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 961              		.loc 1 535 0
 962 000e 7B68     		ldr	r3, [r7, #4]
 963 0010 9B6D     		ldr	r3, [r3, #88]
 964 0012 BB60     		str	r3, [r7, #8]
 536:../Dave/Generated/src/ADC002/ADC002.c **** 
 537:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 538:../Dave/Generated/src/ADC002/ADC002.c **** 
 539:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 965              		.loc 1 539 0
 966 0014 7B68     		ldr	r3, [r7, #4]
 967 0016 9B6A     		ldr	r3, [r3, #40]
 968 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 969 001a 012B     		cmp	r3, #1
 970 001c 0AD1     		bne	.L43
 540:../Dave/Generated/src/ADC002/ADC002.c ****   {
 541:../Dave/Generated/src/ADC002/ADC002.c ****     /* Enables external trigger */
 542:../Dave/Generated/src/ADC002/ADC002.c ****     SET_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_ENTR_Pos);
 971              		.loc 1 542 0
 972 001e BB68     		ldr	r3, [r7, #8]
 973 0020 D3F80431 		ldr	r3, [r3, #260]
 974 0024 43F00402 		orr	r2, r3, #4
 975 0028 BB68     		ldr	r3, [r7, #8]
 976 002a C3F80421 		str	r2, [r3, #260]
 543:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 977              		.loc 1 543 0
 978 002e 4FF00003 		mov	r3, #0
 979 0032 FB60     		str	r3, [r7, #12]
 980              	.L43:
 544:../Dave/Generated/src/ADC002/ADC002.c ****   }
 545:../Dave/Generated/src/ADC002/ADC002.c ****   else
 546:../Dave/Generated/src/ADC002/ADC002.c ****   {
 547:../Dave/Generated/src/ADC002/ADC002.c ****       ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 548:../Dave/Generated/src/ADC002/ADC002.c ****   }
 549:../Dave/Generated/src/ADC002/ADC002.c ****   
 550:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 551:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 981              		.loc 1 551 0
 982 0034 FB68     		ldr	r3, [r7, #12]
 552:../Dave/Generated/src/ADC002/ADC002.c **** }
 983              		.loc 1 552 0
 984 0036 1846     		mov	r0, r3
 985 0038 07F11407 		add	r7, r7, #20
 986 003c BD46     		mov	sp, r7
 987 003e 80BC     		pop	{r7}
 988 0040 7047     		bx	lr
 989              		.cfi_endproc
 990              	.LFE124:
 992 0042 00BF     		.section	.text.ADC002_DisableExternalTrigger,"ax",%progbits
 993              		.align	2
 994              		.global	ADC002_DisableExternalTrigger
 995              		.thumb
 996              		.thumb_func
 998              	ADC002_DisableExternalTrigger:
 999              	.LFB125:
 553:../Dave/Generated/src/ADC002/ADC002.c **** 
 554:../Dave/Generated/src/ADC002/ADC002.c **** /*
 555:../Dave/Generated/src/ADC002/ADC002.c ****  * This function disables external trigger.
 556:../Dave/Generated/src/ADC002/ADC002.c ****  */
 557:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_DisableExternalTrigger(const ADC002_HandleType *HandlePtr)
 558:../Dave/Generated/src/ADC002/ADC002.c **** {
 1000              		.loc 1 558 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 16
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004              		@ link register save eliminated.
 1005 0000 80B4     		push	{r7}
 1006              	.LCFI38:
 1007              		.cfi_def_cfa_offset 4
 1008              		.cfi_offset 7, -4
 1009 0002 85B0     		sub	sp, sp, #20
 1010              	.LCFI39:
 1011              		.cfi_def_cfa_offset 24
 1012 0004 00AF     		add	r7, sp, #0
 1013              	.LCFI40:
 1014              		.cfi_def_cfa_register 7
 1015 0006 7860     		str	r0, [r7, #4]
 559:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1016              		.loc 1 559 0
 1017 0008 4FF00103 		mov	r3, #1
 1018 000c FB60     		str	r3, [r7, #12]
 560:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 561:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1019              		.loc 1 561 0
 1020 000e 7B68     		ldr	r3, [r7, #4]
 1021 0010 9B6D     		ldr	r3, [r3, #88]
 1022 0012 BB60     		str	r3, [r7, #8]
 562:../Dave/Generated/src/ADC002/ADC002.c **** 
 563:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 564:../Dave/Generated/src/ADC002/ADC002.c **** 
 565:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1023              		.loc 1 565 0
 1024 0014 7B68     		ldr	r3, [r7, #4]
 1025 0016 9B6A     		ldr	r3, [r3, #40]
 1026 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1027 001a 012B     		cmp	r3, #1
 1028 001c 0AD1     		bne	.L46
 566:../Dave/Generated/src/ADC002/ADC002.c ****   {
 567:../Dave/Generated/src/ADC002/ADC002.c ****     /* Disables external trigger */
 568:../Dave/Generated/src/ADC002/ADC002.c ****     CLR_BIT(VADCGroupPtr->QMR0, VADC_G_QMR0_ENTR_Pos);
 1029              		.loc 1 568 0
 1030 001e BB68     		ldr	r3, [r7, #8]
 1031 0020 D3F80431 		ldr	r3, [r3, #260]
 1032 0024 23F00402 		bic	r2, r3, #4
 1033 0028 BB68     		ldr	r3, [r7, #8]
 1034 002a C3F80421 		str	r2, [r3, #260]
 569:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1035              		.loc 1 569 0
 1036 002e 4FF00003 		mov	r3, #0
 1037 0032 FB60     		str	r3, [r7, #12]
 1038              	.L46:
 570:../Dave/Generated/src/ADC002/ADC002.c ****   }
 571:../Dave/Generated/src/ADC002/ADC002.c ****   else
 572:../Dave/Generated/src/ADC002/ADC002.c ****   {
 573:../Dave/Generated/src/ADC002/ADC002.c ****       ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 574:../Dave/Generated/src/ADC002/ADC002.c ****   }
 575:../Dave/Generated/src/ADC002/ADC002.c ****   
 576:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 577:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1039              		.loc 1 577 0
 1040 0034 FB68     		ldr	r3, [r7, #12]
 578:../Dave/Generated/src/ADC002/ADC002.c **** }
 1041              		.loc 1 578 0
 1042 0036 1846     		mov	r0, r3
 1043 0038 07F11407 		add	r7, r7, #20
 1044 003c BD46     		mov	sp, r7
 1045 003e 80BC     		pop	{r7}
 1046 0040 7047     		bx	lr
 1047              		.cfi_endproc
 1048              	.LFE125:
 1050 0042 00BF     		.section	.text.ADC002_IsEmpty,"ax",%progbits
 1051              		.align	2
 1052              		.global	ADC002_IsEmpty
 1053              		.thumb
 1054              		.thumb_func
 1056              	ADC002_IsEmpty:
 1057              	.LFB126:
 579:../Dave/Generated/src/ADC002/ADC002.c **** 
 580:../Dave/Generated/src/ADC002/ADC002.c **** 
 581:../Dave/Generated/src/ADC002/ADC002.c **** /* This function checks if there is valid entry in the queue. */
 582:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_IsEmpty(const ADC002_HandleType *HandlePtr, 
 583:../Dave/Generated/src/ADC002/ADC002.c ****                                                     uint8_t *VailidEntryPtr)
 584:../Dave/Generated/src/ADC002/ADC002.c **** {
 1058              		.loc 1 584 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 16
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 1063 0000 80B4     		push	{r7}
 1064              	.LCFI41:
 1065              		.cfi_def_cfa_offset 4
 1066              		.cfi_offset 7, -4
 1067 0002 85B0     		sub	sp, sp, #20
 1068              	.LCFI42:
 1069              		.cfi_def_cfa_offset 24
 1070 0004 00AF     		add	r7, sp, #0
 1071              	.LCFI43:
 1072              		.cfi_def_cfa_register 7
 1073 0006 7860     		str	r0, [r7, #4]
 1074 0008 3960     		str	r1, [r7, #0]
 585:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1075              		.loc 1 585 0
 1076 000a 4FF00103 		mov	r3, #1
 1077 000e FB60     		str	r3, [r7, #12]
 586:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 587:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1078              		.loc 1 587 0
 1079 0010 7B68     		ldr	r3, [r7, #4]
 1080 0012 9B6D     		ldr	r3, [r3, #88]
 1081 0014 BB60     		str	r3, [r7, #8]
 588:../Dave/Generated/src/ADC002/ADC002.c **** 
 589:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 590:../Dave/Generated/src/ADC002/ADC002.c **** 
 591:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1082              		.loc 1 591 0
 1083 0016 7B68     		ldr	r3, [r7, #4]
 1084 0018 9B6A     		ldr	r3, [r3, #40]
 1085 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1086 001c 012B     		cmp	r3, #1
 1087 001e 13D1     		bne	.L49
 592:../Dave/Generated/src/ADC002/ADC002.c ****   {
 593:../Dave/Generated/src/ADC002/ADC002.c ****     /*Checks if there is valid entry in the queue*/
 594:../Dave/Generated/src/ADC002/ADC002.c ****     if(VailidEntryPtr != NULL)
 1088              		.loc 1 594 0
 1089 0020 3B68     		ldr	r3, [r7, #0]
 1090 0022 002B     		cmp	r3, #0
 1091 0024 0DD0     		beq	.L50
 595:../Dave/Generated/src/ADC002/ADC002.c ****     {
 596:../Dave/Generated/src/ADC002/ADC002.c ****         *VailidEntryPtr = (uint8_t)RD_REG( VADCGroupPtr->QSR0, 
 1092              		.loc 1 596 0
 1093 0026 BB68     		ldr	r3, [r7, #8]
 1094 0028 D3F80831 		ldr	r3, [r3, #264]
 1095 002c 03F02003 		and	r3, r3, #32
 1096 0030 4FEA5313 		lsr	r3, r3, #5
 1097 0034 DAB2     		uxtb	r2, r3
 1098 0036 3B68     		ldr	r3, [r7, #0]
 1099 0038 1A70     		strb	r2, [r3, #0]
 597:../Dave/Generated/src/ADC002/ADC002.c ****                           VADC_G_QSR0_EMPTY_Msk, VADC_G_QSR0_EMPTY_Pos);
 598:../Dave/Generated/src/ADC002/ADC002.c ****         Status = (uint32_t)DAVEApp_SUCCESS;                          
 1100              		.loc 1 598 0
 1101 003a 4FF00003 		mov	r3, #0
 1102 003e FB60     		str	r3, [r7, #12]
 1103 0040 02E0     		b	.L49
 1104              	.L50:
 599:../Dave/Generated/src/ADC002/ADC002.c ****     }
 600:../Dave/Generated/src/ADC002/ADC002.c ****     else
 601:../Dave/Generated/src/ADC002/ADC002.c ****     {
 602:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1105              		.loc 1 602 0
 1106 0042 4FF00203 		mov	r3, #2
 1107 0046 FB60     		str	r3, [r7, #12]
 1108              	.L49:
 603:../Dave/Generated/src/ADC002/ADC002.c ****     }
 604:../Dave/Generated/src/ADC002/ADC002.c ****   }
 605:../Dave/Generated/src/ADC002/ADC002.c ****   else
 606:../Dave/Generated/src/ADC002/ADC002.c ****   {
 607:../Dave/Generated/src/ADC002/ADC002.c ****       ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 608:../Dave/Generated/src/ADC002/ADC002.c ****   }
 609:../Dave/Generated/src/ADC002/ADC002.c **** 
 610:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 611:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1109              		.loc 1 611 0
 1110 0048 FB68     		ldr	r3, [r7, #12]
 612:../Dave/Generated/src/ADC002/ADC002.c **** }
 1111              		.loc 1 612 0
 1112 004a 1846     		mov	r0, r3
 1113 004c 07F11407 		add	r7, r7, #20
 1114 0050 BD46     		mov	sp, r7
 1115 0052 80BC     		pop	{r7}
 1116 0054 7047     		bx	lr
 1117              		.cfi_endproc
 1118              	.LFE126:
 1120 0056 00BF     		.section	.text.ADC002_GetFillingLevel,"ax",%progbits
 1121              		.align	2
 1122              		.global	ADC002_GetFillingLevel
 1123              		.thumb
 1124              		.thumb_func
 1126              	ADC002_GetFillingLevel:
 1127              	.LFB127:
 613:../Dave/Generated/src/ADC002/ADC002.c **** 
 614:../Dave/Generated/src/ADC002/ADC002.c **** /* This function indicates number of valid entries in the queue. */
 615:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_GetFillingLevel(const ADC002_HandleType *HandlePtr, 
 616:../Dave/Generated/src/ADC002/ADC002.c ****                                                     uint8_t *FillLevelPtr)
 617:../Dave/Generated/src/ADC002/ADC002.c **** {
 1128              		.loc 1 617 0
 1129              		.cfi_startproc
 1130              		@ args = 0, pretend = 0, frame = 24
 1131              		@ frame_needed = 1, uses_anonymous_args = 0
 1132 0000 80B5     		push	{r7, lr}
 1133              	.LCFI44:
 1134              		.cfi_def_cfa_offset 8
 1135              		.cfi_offset 7, -8
 1136              		.cfi_offset 14, -4
 1137 0002 86B0     		sub	sp, sp, #24
 1138              	.LCFI45:
 1139              		.cfi_def_cfa_offset 32
 1140 0004 00AF     		add	r7, sp, #0
 1141              	.LCFI46:
 1142              		.cfi_def_cfa_register 7
 1143 0006 7860     		str	r0, [r7, #4]
 1144 0008 3960     		str	r1, [r7, #0]
 618:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1145              		.loc 1 618 0
 1146 000a 4FF00103 		mov	r3, #1
 1147 000e 7B61     		str	r3, [r7, #20]
 619:../Dave/Generated/src/ADC002/ADC002.c ****   /* Pointer to the VADC Structure */
 620:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1148              		.loc 1 620 0
 1149 0010 7B68     		ldr	r3, [r7, #4]
 1150 0012 9B6D     		ldr	r3, [r3, #88]
 1151 0014 3B61     		str	r3, [r7, #16]
 621:../Dave/Generated/src/ADC002/ADC002.c ****   /* Status of valid entry in the queue */            
 622:../Dave/Generated/src/ADC002/ADC002.c ****   uint8_t VailidEntry; 
 623:../Dave/Generated/src/ADC002/ADC002.c ****   /* Fill level of queue */
 624:../Dave/Generated/src/ADC002/ADC002.c ****   uint8_t FillLevelValue = (uint8_t)0;
 1152              		.loc 1 624 0
 1153 0016 4FF00003 		mov	r3, #0
 1154 001a FB73     		strb	r3, [r7, #15]
 625:../Dave/Generated/src/ADC002/ADC002.c ****   
 626:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 627:../Dave/Generated/src/ADC002/ADC002.c **** 
 628:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1155              		.loc 1 628 0
 1156 001c 7B68     		ldr	r3, [r7, #4]
 1157 001e 9B6A     		ldr	r3, [r3, #40]
 1158 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1159 0022 012B     		cmp	r3, #1
 1160 0024 39D1     		bne	.L53
 629:../Dave/Generated/src/ADC002/ADC002.c ****   {
 630:../Dave/Generated/src/ADC002/ADC002.c ****     /*Checks if there is valid entry in the queue*/
 631:../Dave/Generated/src/ADC002/ADC002.c ****     if(FillLevelPtr != NULL)
 1161              		.loc 1 631 0
 1162 0026 3B68     		ldr	r3, [r7, #0]
 1163 0028 002B     		cmp	r3, #0
 1164 002a 33D0     		beq	.L54
 632:../Dave/Generated/src/ADC002/ADC002.c ****     {
 633:../Dave/Generated/src/ADC002/ADC002.c ****         FillLevelValue = (uint8_t)RD_REG( VADCGroupPtr->QSR0, 
 1165              		.loc 1 633 0
 1166 002c 3B69     		ldr	r3, [r7, #16]
 1167 002e D3F80831 		ldr	r3, [r3, #264]
 1168 0032 DBB2     		uxtb	r3, r3
 1169 0034 03F00F03 		and	r3, r3, #15
 1170 0038 FB73     		strb	r3, [r7, #15]
 634:../Dave/Generated/src/ADC002/ADC002.c ****                           VADC_G_QSR0_FILL_Msk, VADC_G_QSR0_FILL_Pos);
 635:../Dave/Generated/src/ADC002/ADC002.c ****                           
 636:../Dave/Generated/src/ADC002/ADC002.c ****         if(FillLevelValue == (uint8_t)0)
 1171              		.loc 1 636 0
 1172 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1173 003c 002B     		cmp	r3, #0
 1174 003e 1FD1     		bne	.L55
 637:../Dave/Generated/src/ADC002/ADC002.c ****         {
 638:../Dave/Generated/src/ADC002/ADC002.c ****           if(ADC002_IsEmpty(HandlePtr, &VailidEntry) == 
 1175              		.loc 1 638 0
 1176 0040 07F10E03 		add	r3, r7, #14
 1177 0044 7868     		ldr	r0, [r7, #4]
 1178 0046 1946     		mov	r1, r3
 1179 0048 FFF7FEFF 		bl	ADC002_IsEmpty
 1180 004c 0346     		mov	r3, r0
 1181 004e 002B     		cmp	r3, #0
 1182 0050 12D1     		bne	.L56
 639:../Dave/Generated/src/ADC002/ADC002.c ****                                                       (uint32_t)DAVEApp_SUCCESS)
 640:../Dave/Generated/src/ADC002/ADC002.c ****           {
 641:../Dave/Generated/src/ADC002/ADC002.c ****           
 642:../Dave/Generated/src/ADC002/ADC002.c ****             if(VailidEntry == (uint8_t)1)
 1183              		.loc 1 642 0
 1184 0052 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1185 0054 012B     		cmp	r3, #1
 1186 0056 07D1     		bne	.L57
 643:../Dave/Generated/src/ADC002/ADC002.c ****             {
 644:../Dave/Generated/src/ADC002/ADC002.c ****               /* If  VailidEntry==1 then queue is empty */
 645:../Dave/Generated/src/ADC002/ADC002.c ****               *FillLevelPtr = (uint8_t)0;
 1187              		.loc 1 645 0
 1188 0058 3B68     		ldr	r3, [r7, #0]
 1189 005a 4FF00002 		mov	r2, #0
 1190 005e 1A70     		strb	r2, [r3, #0]
 646:../Dave/Generated/src/ADC002/ADC002.c ****               Status = (uint32_t)DAVEApp_SUCCESS;
 1191              		.loc 1 646 0
 1192 0060 4FF00003 		mov	r3, #0
 1193 0064 7B61     		str	r3, [r7, #20]
 1194 0066 18E0     		b	.L53
 1195              	.L57:
 647:../Dave/Generated/src/ADC002/ADC002.c ****             }
 648:../Dave/Generated/src/ADC002/ADC002.c ****             else
 649:../Dave/Generated/src/ADC002/ADC002.c ****             {
 650:../Dave/Generated/src/ADC002/ADC002.c ****               /* If  VailidEntry==1 then queue has one valid entry */
 651:../Dave/Generated/src/ADC002/ADC002.c ****               *FillLevelPtr = (uint8_t)1;
 1196              		.loc 1 651 0
 1197 0068 3B68     		ldr	r3, [r7, #0]
 1198 006a 4FF00102 		mov	r2, #1
 1199 006e 1A70     		strb	r2, [r3, #0]
 652:../Dave/Generated/src/ADC002/ADC002.c ****               Status = (uint32_t)DAVEApp_SUCCESS;
 1200              		.loc 1 652 0
 1201 0070 4FF00003 		mov	r3, #0
 1202 0074 7B61     		str	r3, [r7, #20]
 1203 0076 10E0     		b	.L53
 1204              	.L56:
 653:../Dave/Generated/src/ADC002/ADC002.c ****             }
 654:../Dave/Generated/src/ADC002/ADC002.c ****           }
 655:../Dave/Generated/src/ADC002/ADC002.c ****           else
 656:../Dave/Generated/src/ADC002/ADC002.c ****           {
 657:../Dave/Generated/src/ADC002/ADC002.c ****             Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1205              		.loc 1 657 0
 1206 0078 4FF00203 		mov	r3, #2
 1207 007c 7B61     		str	r3, [r7, #20]
 1208 007e 0CE0     		b	.L53
 1209              	.L55:
 658:../Dave/Generated/src/ADC002/ADC002.c ****           }
 659:../Dave/Generated/src/ADC002/ADC002.c ****         
 660:../Dave/Generated/src/ADC002/ADC002.c ****         }
 661:../Dave/Generated/src/ADC002/ADC002.c ****         else
 662:../Dave/Generated/src/ADC002/ADC002.c ****         {
 663:../Dave/Generated/src/ADC002/ADC002.c ****           /* Entries in the queue will be register read value plus one */
 664:../Dave/Generated/src/ADC002/ADC002.c ****           *FillLevelPtr = FillLevelValue + (uint8_t)1;
 1210              		.loc 1 664 0
 1211 0080 FB7B     		ldrb	r3, [r7, #15]
 1212 0082 03F10103 		add	r3, r3, #1
 1213 0086 DAB2     		uxtb	r2, r3
 1214 0088 3B68     		ldr	r3, [r7, #0]
 1215 008a 1A70     		strb	r2, [r3, #0]
 665:../Dave/Generated/src/ADC002/ADC002.c ****           Status = (uint32_t)DAVEApp_SUCCESS;
 1216              		.loc 1 665 0
 1217 008c 4FF00003 		mov	r3, #0
 1218 0090 7B61     		str	r3, [r7, #20]
 1219 0092 02E0     		b	.L53
 1220              	.L54:
 666:../Dave/Generated/src/ADC002/ADC002.c ****         }
 667:../Dave/Generated/src/ADC002/ADC002.c ****         
 668:../Dave/Generated/src/ADC002/ADC002.c **** 
 669:../Dave/Generated/src/ADC002/ADC002.c ****     }
 670:../Dave/Generated/src/ADC002/ADC002.c ****     else
 671:../Dave/Generated/src/ADC002/ADC002.c ****     {
 672:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1221              		.loc 1 672 0
 1222 0094 4FF00203 		mov	r3, #2
 1223 0098 7B61     		str	r3, [r7, #20]
 1224              	.L53:
 673:../Dave/Generated/src/ADC002/ADC002.c ****     }
 674:../Dave/Generated/src/ADC002/ADC002.c ****   }
 675:../Dave/Generated/src/ADC002/ADC002.c ****   else
 676:../Dave/Generated/src/ADC002/ADC002.c ****   {
 677:../Dave/Generated/src/ADC002/ADC002.c ****       ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 678:../Dave/Generated/src/ADC002/ADC002.c ****   }
 679:../Dave/Generated/src/ADC002/ADC002.c ****     
 680:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 681:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1225              		.loc 1 681 0
 1226 009a 7B69     		ldr	r3, [r7, #20]
 682:../Dave/Generated/src/ADC002/ADC002.c **** }
 1227              		.loc 1 682 0
 1228 009c 1846     		mov	r0, r3
 1229 009e 07F11807 		add	r7, r7, #24
 1230 00a2 BD46     		mov	sp, r7
 1231 00a4 80BD     		pop	{r7, pc}
 1232              		.cfi_endproc
 1233              	.LFE127:
 1235 00a6 00BF     		.section	.text.ADC002_GetGateLevel,"ax",%progbits
 1236              		.align	2
 1237              		.global	ADC002_GetGateLevel
 1238              		.thumb
 1239              		.thumb_func
 1241              	ADC002_GetGateLevel:
 1242              	.LFB128:
 683:../Dave/Generated/src/ADC002/ADC002.c **** 
 684:../Dave/Generated/src/ADC002/ADC002.c **** /* This function gets the current level of the selected gate input */
 685:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_GetGateLevel(const ADC002_HandleType *HandlePtr, 
 686:../Dave/Generated/src/ADC002/ADC002.c ****                                                     uint8_t *GateLevelPtr)
 687:../Dave/Generated/src/ADC002/ADC002.c **** {
 1243              		.loc 1 687 0
 1244              		.cfi_startproc
 1245              		@ args = 0, pretend = 0, frame = 16
 1246              		@ frame_needed = 1, uses_anonymous_args = 0
 1247              		@ link register save eliminated.
 1248 0000 80B4     		push	{r7}
 1249              	.LCFI47:
 1250              		.cfi_def_cfa_offset 4
 1251              		.cfi_offset 7, -4
 1252 0002 85B0     		sub	sp, sp, #20
 1253              	.LCFI48:
 1254              		.cfi_def_cfa_offset 24
 1255 0004 00AF     		add	r7, sp, #0
 1256              	.LCFI49:
 1257              		.cfi_def_cfa_register 7
 1258 0006 7860     		str	r0, [r7, #4]
 1259 0008 3960     		str	r1, [r7, #0]
 688:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1260              		.loc 1 688 0
 1261 000a 4FF00103 		mov	r3, #1
 1262 000e FB60     		str	r3, [r7, #12]
 689:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 690:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1263              		.loc 1 690 0
 1264 0010 7B68     		ldr	r3, [r7, #4]
 1265 0012 9B6D     		ldr	r3, [r3, #88]
 1266 0014 BB60     		str	r3, [r7, #8]
 691:../Dave/Generated/src/ADC002/ADC002.c **** 
 692:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 693:../Dave/Generated/src/ADC002/ADC002.c **** 
 694:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1267              		.loc 1 694 0
 1268 0016 7B68     		ldr	r3, [r7, #4]
 1269 0018 9B6A     		ldr	r3, [r3, #40]
 1270 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1271 001c 012B     		cmp	r3, #1
 1272 001e 13D1     		bne	.L60
 695:../Dave/Generated/src/ADC002/ADC002.c ****   {
 696:../Dave/Generated/src/ADC002/ADC002.c ****     /* Get the input level of selected gate input */
 697:../Dave/Generated/src/ADC002/ADC002.c ****     if(GateLevelPtr != NULL)
 1273              		.loc 1 697 0
 1274 0020 3B68     		ldr	r3, [r7, #0]
 1275 0022 002B     		cmp	r3, #0
 1276 0024 0DD0     		beq	.L61
 698:../Dave/Generated/src/ADC002/ADC002.c ****     {
 699:../Dave/Generated/src/ADC002/ADC002.c ****       *GateLevelPtr = (uint8_t)RD_REG( VADCGroupPtr->QSR0, 
 1277              		.loc 1 699 0
 1278 0026 BB68     		ldr	r3, [r7, #8]
 1279 0028 D3F80831 		ldr	r3, [r3, #264]
 1280 002c 03F08003 		and	r3, r3, #128
 1281 0030 4FEAD313 		lsr	r3, r3, #7
 1282 0034 DAB2     		uxtb	r2, r3
 1283 0036 3B68     		ldr	r3, [r7, #0]
 1284 0038 1A70     		strb	r2, [r3, #0]
 700:../Dave/Generated/src/ADC002/ADC002.c ****                           VADC_G_QSR0_REQGT_Msk, VADC_G_QSR0_REQGT_Pos);
 701:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1285              		.loc 1 701 0
 1286 003a 4FF00003 		mov	r3, #0
 1287 003e FB60     		str	r3, [r7, #12]
 1288 0040 02E0     		b	.L60
 1289              	.L61:
 702:../Dave/Generated/src/ADC002/ADC002.c ****     }
 703:../Dave/Generated/src/ADC002/ADC002.c ****     else
 704:../Dave/Generated/src/ADC002/ADC002.c ****     {
 705:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1290              		.loc 1 705 0
 1291 0042 4FF00203 		mov	r3, #2
 1292 0046 FB60     		str	r3, [r7, #12]
 1293              	.L60:
 706:../Dave/Generated/src/ADC002/ADC002.c ****     }
 707:../Dave/Generated/src/ADC002/ADC002.c ****   }
 708:../Dave/Generated/src/ADC002/ADC002.c ****   else
 709:../Dave/Generated/src/ADC002/ADC002.c ****   {
 710:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 711:../Dave/Generated/src/ADC002/ADC002.c ****   }
 712:../Dave/Generated/src/ADC002/ADC002.c ****   
 713:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 714:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1294              		.loc 1 714 0
 1295 0048 FB68     		ldr	r3, [r7, #12]
 715:../Dave/Generated/src/ADC002/ADC002.c **** }
 1296              		.loc 1 715 0
 1297 004a 1846     		mov	r0, r3
 1298 004c 07F11407 		add	r7, r7, #20
 1299 0050 BD46     		mov	sp, r7
 1300 0052 80BC     		pop	{r7}
 1301 0054 7047     		bx	lr
 1302              		.cfi_endproc
 1303              	.LFE128:
 1305 0056 00BF     		.section	.text.ADC002_IsEventDetected,"ax",%progbits
 1306              		.align	2
 1307              		.global	ADC002_IsEventDetected
 1308              		.thumb
 1309              		.thumb_func
 1311              	ADC002_IsEventDetected:
 1312              	.LFB129:
 716:../Dave/Generated/src/ADC002/ADC002.c **** 
 717:../Dave/Generated/src/ADC002/ADC002.c **** /*
 718:../Dave/Generated/src/ADC002/ADC002.c ****  * This function indicates whether an event has been detected while at
 719:../Dave/Generated/src/ADC002/ADC002.c ****  * least one valid entry has been in the queue. 
 720:../Dave/Generated/src/ADC002/ADC002.c ****  */
 721:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_IsEventDetected(const ADC002_HandleType *HandlePtr, 
 722:../Dave/Generated/src/ADC002/ADC002.c ****                                                     uint8_t *EventPtr)
 723:../Dave/Generated/src/ADC002/ADC002.c **** {
 1313              		.loc 1 723 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 16
 1316              		@ frame_needed = 1, uses_anonymous_args = 0
 1317              		@ link register save eliminated.
 1318 0000 80B4     		push	{r7}
 1319              	.LCFI50:
 1320              		.cfi_def_cfa_offset 4
 1321              		.cfi_offset 7, -4
 1322 0002 85B0     		sub	sp, sp, #20
 1323              	.LCFI51:
 1324              		.cfi_def_cfa_offset 24
 1325 0004 00AF     		add	r7, sp, #0
 1326              	.LCFI52:
 1327              		.cfi_def_cfa_register 7
 1328 0006 7860     		str	r0, [r7, #4]
 1329 0008 3960     		str	r1, [r7, #0]
 724:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1330              		.loc 1 724 0
 1331 000a 4FF00103 		mov	r3, #1
 1332 000e FB60     		str	r3, [r7, #12]
 725:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 726:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1333              		.loc 1 726 0
 1334 0010 7B68     		ldr	r3, [r7, #4]
 1335 0012 9B6D     		ldr	r3, [r3, #88]
 1336 0014 BB60     		str	r3, [r7, #8]
 727:../Dave/Generated/src/ADC002/ADC002.c **** 
 728:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 729:../Dave/Generated/src/ADC002/ADC002.c **** 
 730:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1337              		.loc 1 730 0
 1338 0016 7B68     		ldr	r3, [r7, #4]
 1339 0018 9B6A     		ldr	r3, [r3, #40]
 1340 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1341 001c 012B     		cmp	r3, #1
 1342 001e 13D1     		bne	.L64
 731:../Dave/Generated/src/ADC002/ADC002.c ****   {
 732:../Dave/Generated/src/ADC002/ADC002.c ****     /* Get the event detection. */
 733:../Dave/Generated/src/ADC002/ADC002.c ****     if(EventPtr != NULL)
 1343              		.loc 1 733 0
 1344 0020 3B68     		ldr	r3, [r7, #0]
 1345 0022 002B     		cmp	r3, #0
 1346 0024 0DD0     		beq	.L65
 734:../Dave/Generated/src/ADC002/ADC002.c ****     {
 735:../Dave/Generated/src/ADC002/ADC002.c ****         *EventPtr = (uint8_t)RD_REG( VADCGroupPtr->QSR0, 
 1347              		.loc 1 735 0
 1348 0026 BB68     		ldr	r3, [r7, #8]
 1349 0028 D3F80831 		ldr	r3, [r3, #264]
 1350 002c 03F48073 		and	r3, r3, #256
 1351 0030 4FEA1323 		lsr	r3, r3, #8
 1352 0034 DAB2     		uxtb	r2, r3
 1353 0036 3B68     		ldr	r3, [r7, #0]
 1354 0038 1A70     		strb	r2, [r3, #0]
 736:../Dave/Generated/src/ADC002/ADC002.c ****                                     VADC_G_QSR0_EV_Msk, VADC_G_QSR0_EV_Pos);
 737:../Dave/Generated/src/ADC002/ADC002.c ****         Status = (uint32_t)DAVEApp_SUCCESS;                                    
 1355              		.loc 1 737 0
 1356 003a 4FF00003 		mov	r3, #0
 1357 003e FB60     		str	r3, [r7, #12]
 1358 0040 02E0     		b	.L64
 1359              	.L65:
 738:../Dave/Generated/src/ADC002/ADC002.c ****     }
 739:../Dave/Generated/src/ADC002/ADC002.c ****     else
 740:../Dave/Generated/src/ADC002/ADC002.c ****     {
 741:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1360              		.loc 1 741 0
 1361 0042 4FF00203 		mov	r3, #2
 1362 0046 FB60     		str	r3, [r7, #12]
 1363              	.L64:
 742:../Dave/Generated/src/ADC002/ADC002.c ****     }
 743:../Dave/Generated/src/ADC002/ADC002.c ****   }
 744:../Dave/Generated/src/ADC002/ADC002.c ****   else
 745:../Dave/Generated/src/ADC002/ADC002.c ****   {
 746:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 747:../Dave/Generated/src/ADC002/ADC002.c ****   }
 748:../Dave/Generated/src/ADC002/ADC002.c ****   
 749:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 750:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1364              		.loc 1 750 0
 1365 0048 FB68     		ldr	r3, [r7, #12]
 751:../Dave/Generated/src/ADC002/ADC002.c **** }
 1366              		.loc 1 751 0
 1367 004a 1846     		mov	r0, r3
 1368 004c 07F11407 		add	r7, r7, #20
 1369 0050 BD46     		mov	sp, r7
 1370 0052 80BC     		pop	{r7}
 1371 0054 7047     		bx	lr
 1372              		.cfi_endproc
 1373              	.LFE129:
 1375 0056 00BF     		.section	.text.ADC002_AddQueueEntry,"ax",%progbits
 1376              		.align	2
 1377              		.global	ADC002_AddQueueEntry
 1378              		.thumb
 1379              		.thumb_func
 1381              	ADC002_AddQueueEntry:
 1382              	.LFB130:
 752:../Dave/Generated/src/ADC002/ADC002.c **** 
 753:../Dave/Generated/src/ADC002/ADC002.c **** 
 754:../Dave/Generated/src/ADC002/ADC002.c **** /*
 755:../Dave/Generated/src/ADC002/ADC002.c ****  * This function makes the entry to the queue request
 756:../Dave/Generated/src/ADC002/ADC002.c ****  */
 757:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_AddQueueEntry(const ADC002_HandleType *HandlePtr, 
 758:../Dave/Generated/src/ADC002/ADC002.c ****                                const ADC002_QueueEntryHandleType *QueueEntryPtr)
 759:../Dave/Generated/src/ADC002/ADC002.c **** {
 1383              		.loc 1 759 0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 24
 1386              		@ frame_needed = 1, uses_anonymous_args = 0
 1387              		@ link register save eliminated.
 1388 0000 80B4     		push	{r7}
 1389              	.LCFI53:
 1390              		.cfi_def_cfa_offset 4
 1391              		.cfi_offset 7, -4
 1392 0002 87B0     		sub	sp, sp, #28
 1393              	.LCFI54:
 1394              		.cfi_def_cfa_offset 32
 1395 0004 00AF     		add	r7, sp, #0
 1396              	.LCFI55:
 1397              		.cfi_def_cfa_register 7
 1398 0006 7860     		str	r0, [r7, #4]
 1399 0008 3960     		str	r1, [r7, #0]
 760:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1400              		.loc 1 760 0
 1401 000a 4FF00103 		mov	r3, #1
 1402 000e 7B61     		str	r3, [r7, #20]
 761:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 762:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1403              		.loc 1 762 0
 1404 0010 7B68     		ldr	r3, [r7, #4]
 1405 0012 9B6D     		ldr	r3, [r3, #88]
 1406 0014 3B61     		str	r3, [r7, #16]
 763:../Dave/Generated/src/ADC002/ADC002.c ****   uint32_t QINR0Val;
 764:../Dave/Generated/src/ADC002/ADC002.c **** 
 765:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 766:../Dave/Generated/src/ADC002/ADC002.c **** 
 767:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1407              		.loc 1 767 0
 1408 0016 7B68     		ldr	r3, [r7, #4]
 1409 0018 9B6A     		ldr	r3, [r3, #40]
 1410 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1411 001c 012B     		cmp	r3, #1
 1412 001e 31D1     		bne	.L68
 768:../Dave/Generated/src/ADC002/ADC002.c ****   {
 769:../Dave/Generated/src/ADC002/ADC002.c ****     /* Register the queue entry */
 770:../Dave/Generated/src/ADC002/ADC002.c ****     if((QueueEntryPtr != NULL) && (QueueEntryPtr->ChannelNumber <= (uint8_t)7) &&\
 1413              		.loc 1 770 0
 1414 0020 3B68     		ldr	r3, [r7, #0]
 1415 0022 002B     		cmp	r3, #0
 1416 0024 2BD0     		beq	.L69
 1417              		.loc 1 770 0 is_stmt 0 discriminator 1
 1418 0026 3B68     		ldr	r3, [r7, #0]
 1419 0028 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1420 002a 072B     		cmp	r3, #7
 1421 002c 27D8     		bhi	.L69
 771:../Dave/Generated/src/ADC002/ADC002.c ****               (HandlePtr->kActiveChannels[QueueEntryPtr->ChannelNumber] == (uint8_t)1))
 1422              		.loc 1 771 0 is_stmt 1 discriminator 1
 1423 002e 3B68     		ldr	r3, [r7, #0]
 1424 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1425 0032 7A68     		ldr	r2, [r7, #4]
 1426 0034 D318     		adds	r3, r2, r3
 1427 0036 DB7B     		ldrb	r3, [r3, #15]	@ zero_extendqisi2
 770:../Dave/Generated/src/ADC002/ADC002.c ****     if((QueueEntryPtr != NULL) && (QueueEntryPtr->ChannelNumber <= (uint8_t)7) &&\
 1428              		.loc 1 770 0 discriminator 1
 1429 0038 012B     		cmp	r3, #1
 1430 003a 20D1     		bne	.L69
 772:../Dave/Generated/src/ADC002/ADC002.c ****     {
 773:../Dave/Generated/src/ADC002/ADC002.c ****       QINR0Val = (uint32_t)
 774:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)QueueEntryPtr->ChannelNumber << VADC_G_QINR0_REQCHNR_Pos) & VADC_G_QINR0_REQCHN
 1431              		.loc 1 774 0
 1432 003c 3B68     		ldr	r3, [r7, #0]
 1433 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 773:../Dave/Generated/src/ADC002/ADC002.c ****       QINR0Val = (uint32_t)
 1434              		.loc 1 773 0
 1435 0040 03F01F02 		and	r2, r3, #31
 775:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)QueueEntryPtr->Refill << VADC_G_QINR0_RF_Pos) & VADC_G_QINR0_RF_Msk)|\
 1436              		.loc 1 775 0
 1437 0044 3B68     		ldr	r3, [r7, #0]
 1438 0046 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1439 0048 4FEA4313 		lsl	r3, r3, #5
 1440 004c 03F02003 		and	r3, r3, #32
 774:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)QueueEntryPtr->ChannelNumber << VADC_G_QINR0_REQCHNR_Pos) & VADC_G_QINR0_REQCHN
 1441              		.loc 1 774 0
 1442 0050 1A43     		orrs	r2, r2, r3
 776:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)QueueEntryPtr->Interrupt << VADC_G_QINR0_ENSI_Pos)& VADC_G_QINR0_ENSI_Msk)|\
 1443              		.loc 1 776 0
 1444 0052 3B68     		ldr	r3, [r7, #0]
 1445 0054 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1446 0056 4FEA8313 		lsl	r3, r3, #6
 1447 005a 03F04003 		and	r3, r3, #64
 775:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)QueueEntryPtr->Refill << VADC_G_QINR0_RF_Pos) & VADC_G_QINR0_RF_Msk)|\
 1448              		.loc 1 775 0
 1449 005e 1A43     		orrs	r2, r2, r3
 777:../Dave/Generated/src/ADC002/ADC002.c ****         (((uint32_t)QueueEntryPtr->ExternalTrigger << VADC_G_QINR0_EXTR_Pos) & VADC_G_QINR0_EXTR_Ms
 1450              		.loc 1 777 0
 1451 0060 3B68     		ldr	r3, [r7, #0]
 1452 0062 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1453 0064 4FEAC313 		lsl	r3, r3, #7
 1454 0068 DBB2     		uxtb	r3, r3
 773:../Dave/Generated/src/ADC002/ADC002.c ****       QINR0Val = (uint32_t)
 1455              		.loc 1 773 0
 1456 006a 1343     		orrs	r3, r3, r2
 1457 006c FB60     		str	r3, [r7, #12]
 778:../Dave/Generated/src/ADC002/ADC002.c ****                   
 779:../Dave/Generated/src/ADC002/ADC002.c ****       VADCGroupPtr->QINR0 = QINR0Val;
 1458              		.loc 1 779 0
 1459 006e 3B69     		ldr	r3, [r7, #16]
 1460 0070 FA68     		ldr	r2, [r7, #12]
 1461 0072 C3F81021 		str	r2, [r3, #272]
 780:../Dave/Generated/src/ADC002/ADC002.c ****       
 781:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)DAVEApp_SUCCESS;               
 1462              		.loc 1 781 0
 1463 0076 4FF00003 		mov	r3, #0
 1464 007a 7B61     		str	r3, [r7, #20]
 1465 007c 02E0     		b	.L68
 1466              	.L69:
 782:../Dave/Generated/src/ADC002/ADC002.c ****     }
 783:../Dave/Generated/src/ADC002/ADC002.c ****     else
 784:../Dave/Generated/src/ADC002/ADC002.c ****     {
 785:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1467              		.loc 1 785 0
 1468 007e 4FF00203 		mov	r3, #2
 1469 0082 7B61     		str	r3, [r7, #20]
 1470              	.L68:
 786:../Dave/Generated/src/ADC002/ADC002.c ****     }
 787:../Dave/Generated/src/ADC002/ADC002.c ****   }
 788:../Dave/Generated/src/ADC002/ADC002.c ****   else
 789:../Dave/Generated/src/ADC002/ADC002.c ****   {
 790:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 791:../Dave/Generated/src/ADC002/ADC002.c ****   }
 792:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 793:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1471              		.loc 1 793 0
 1472 0084 7B69     		ldr	r3, [r7, #20]
 794:../Dave/Generated/src/ADC002/ADC002.c **** }
 1473              		.loc 1 794 0
 1474 0086 1846     		mov	r0, r3
 1475 0088 07F11C07 		add	r7, r7, #28
 1476 008c BD46     		mov	sp, r7
 1477 008e 80BC     		pop	{r7}
 1478 0090 7047     		bx	lr
 1479              		.cfi_endproc
 1480              	.LFE130:
 1482 0092 00BF     		.section	.text.ADC002_SetConversionMode,"ax",%progbits
 1483              		.align	2
 1484              		.global	ADC002_SetConversionMode
 1485              		.thumb
 1486              		.thumb_func
 1488              	ADC002_SetConversionMode:
 1489              	.LFB131:
 795:../Dave/Generated/src/ADC002/ADC002.c **** 
 796:../Dave/Generated/src/ADC002/ADC002.c **** /*
 797:../Dave/Generated/src/ADC002/ADC002.c ****  * This function sets standard conversion mode.
 798:../Dave/Generated/src/ADC002/ADC002.c ****  */
 799:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_SetConversionMode(const ADC002_HandleType *HandlePtr,
 800:../Dave/Generated/src/ADC002/ADC002.c ****                                                         uint8_t ConversionMode)
 801:../Dave/Generated/src/ADC002/ADC002.c **** {
 1490              		.loc 1 801 0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 16
 1493              		@ frame_needed = 1, uses_anonymous_args = 0
 1494 0000 80B5     		push	{r7, lr}
 1495              	.LCFI56:
 1496              		.cfi_def_cfa_offset 8
 1497              		.cfi_offset 7, -8
 1498              		.cfi_offset 14, -4
 1499 0002 84B0     		sub	sp, sp, #16
 1500              	.LCFI57:
 1501              		.cfi_def_cfa_offset 24
 1502 0004 00AF     		add	r7, sp, #0
 1503              	.LCFI58:
 1504              		.cfi_def_cfa_register 7
 1505 0006 7860     		str	r0, [r7, #4]
 1506 0008 0B46     		mov	r3, r1
 1507 000a FB70     		strb	r3, [r7, #3]
 802:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1508              		.loc 1 802 0
 1509 000c 4FF00103 		mov	r3, #1
 1510 0010 FB60     		str	r3, [r7, #12]
 803:../Dave/Generated/src/ADC002/ADC002.c **** 
 804:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 805:../Dave/Generated/src/ADC002/ADC002.c **** 
 806:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1511              		.loc 1 806 0
 1512 0012 7B68     		ldr	r3, [r7, #4]
 1513 0014 9B6A     		ldr	r3, [r3, #40]
 1514 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1515 0018 012B     		cmp	r3, #1
 1516 001a 0FD1     		bne	.L73
 807:../Dave/Generated/src/ADC002/ADC002.c ****   {
 808:../Dave/Generated/src/ADC002/ADC002.c ****     if(HandlePtr->kGroup_HandlePtr != NULL)
 1517              		.loc 1 808 0
 1518 001c 7B68     		ldr	r3, [r7, #4]
 1519 001e DB6A     		ldr	r3, [r3, #44]
 1520 0020 002B     		cmp	r3, #0
 1521 0022 08D0     		beq	.L74
 809:../Dave/Generated/src/ADC002/ADC002.c ****     {
 810:../Dave/Generated/src/ADC002/ADC002.c ****       /* Set standard conversion mode */
 811:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADCGROUP001_SetGroupClass0ConvMode(
 812:../Dave/Generated/src/ADC002/ADC002.c ****                            HandlePtr->kGroup_HandlePtr,ConversionMode);
 1522              		.loc 1 812 0
 1523 0024 7B68     		ldr	r3, [r7, #4]
 811:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADCGROUP001_SetGroupClass0ConvMode(
 1524              		.loc 1 811 0
 1525 0026 DA6A     		ldr	r2, [r3, #44]
 1526 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1527 002a 1046     		mov	r0, r2
 1528 002c 1946     		mov	r1, r3
 1529 002e FFF7FEFF 		bl	ADCGROUP001_SetGroupClass0ConvMode
 1530 0032 F860     		str	r0, [r7, #12]
 1531 0034 02E0     		b	.L73
 1532              	.L74:
 813:../Dave/Generated/src/ADC002/ADC002.c ****     }
 814:../Dave/Generated/src/ADC002/ADC002.c ****     else
 815:../Dave/Generated/src/ADC002/ADC002.c ****     {
 816:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1533              		.loc 1 816 0
 1534 0036 4FF00203 		mov	r3, #2
 1535 003a FB60     		str	r3, [r7, #12]
 1536              	.L73:
 817:../Dave/Generated/src/ADC002/ADC002.c ****     }
 818:../Dave/Generated/src/ADC002/ADC002.c ****   }
 819:../Dave/Generated/src/ADC002/ADC002.c ****   else
 820:../Dave/Generated/src/ADC002/ADC002.c ****   {
 821:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 822:../Dave/Generated/src/ADC002/ADC002.c ****   }
 823:../Dave/Generated/src/ADC002/ADC002.c ****   
 824:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 825:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1537              		.loc 1 825 0
 1538 003c FB68     		ldr	r3, [r7, #12]
 826:../Dave/Generated/src/ADC002/ADC002.c **** }
 1539              		.loc 1 826 0
 1540 003e 1846     		mov	r0, r3
 1541 0040 07F11007 		add	r7, r7, #16
 1542 0044 BD46     		mov	sp, r7
 1543 0046 80BD     		pop	{r7, pc}
 1544              		.cfi_endproc
 1545              	.LFE131:
 1547              		.section	.text.ADC002_SetSampleTime,"ax",%progbits
 1548              		.align	2
 1549              		.global	ADC002_SetSampleTime
 1550              		.thumb
 1551              		.thumb_func
 1553              	ADC002_SetSampleTime:
 1554              	.LFB132:
 827:../Dave/Generated/src/ADC002/ADC002.c **** 
 828:../Dave/Generated/src/ADC002/ADC002.c **** 
 829:../Dave/Generated/src/ADC002/ADC002.c **** /*
 830:../Dave/Generated/src/ADC002/ADC002.c ****  * This function sets sample time for standard conversion.
 831:../Dave/Generated/src/ADC002/ADC002.c ****  */
 832:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_SetSampleTime(const ADC002_HandleType *HandlePtr,
 833:../Dave/Generated/src/ADC002/ADC002.c ****                                                             uint8_t SampleTime)
 834:../Dave/Generated/src/ADC002/ADC002.c **** {
 1555              		.loc 1 834 0
 1556              		.cfi_startproc
 1557              		@ args = 0, pretend = 0, frame = 16
 1558              		@ frame_needed = 1, uses_anonymous_args = 0
 1559 0000 80B5     		push	{r7, lr}
 1560              	.LCFI59:
 1561              		.cfi_def_cfa_offset 8
 1562              		.cfi_offset 7, -8
 1563              		.cfi_offset 14, -4
 1564 0002 84B0     		sub	sp, sp, #16
 1565              	.LCFI60:
 1566              		.cfi_def_cfa_offset 24
 1567 0004 00AF     		add	r7, sp, #0
 1568              	.LCFI61:
 1569              		.cfi_def_cfa_register 7
 1570 0006 7860     		str	r0, [r7, #4]
 1571 0008 0B46     		mov	r3, r1
 1572 000a FB70     		strb	r3, [r7, #3]
 835:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1573              		.loc 1 835 0
 1574 000c 4FF00103 		mov	r3, #1
 1575 0010 FB60     		str	r3, [r7, #12]
 836:../Dave/Generated/src/ADC002/ADC002.c **** 
 837:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 838:../Dave/Generated/src/ADC002/ADC002.c **** 
 839:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1576              		.loc 1 839 0
 1577 0012 7B68     		ldr	r3, [r7, #4]
 1578 0014 9B6A     		ldr	r3, [r3, #40]
 1579 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1580 0018 012B     		cmp	r3, #1
 1581 001a 0FD1     		bne	.L77
 840:../Dave/Generated/src/ADC002/ADC002.c ****   {
 841:../Dave/Generated/src/ADC002/ADC002.c ****     if(HandlePtr->kGroup_HandlePtr != NULL)
 1582              		.loc 1 841 0
 1583 001c 7B68     		ldr	r3, [r7, #4]
 1584 001e DB6A     		ldr	r3, [r3, #44]
 1585 0020 002B     		cmp	r3, #0
 1586 0022 08D0     		beq	.L78
 842:../Dave/Generated/src/ADC002/ADC002.c ****     {
 843:../Dave/Generated/src/ADC002/ADC002.c ****       /* Set sample time for standard conversion. */
 844:../Dave/Generated/src/ADC002/ADC002.c ****       Status =(uint32_t)ADCGROUP001_SetGroupClass0SampleTime(
 845:../Dave/Generated/src/ADC002/ADC002.c ****                             HandlePtr->kGroup_HandlePtr,SampleTime);
 1587              		.loc 1 845 0
 1588 0024 7B68     		ldr	r3, [r7, #4]
 844:../Dave/Generated/src/ADC002/ADC002.c ****       Status =(uint32_t)ADCGROUP001_SetGroupClass0SampleTime(
 1589              		.loc 1 844 0
 1590 0026 DA6A     		ldr	r2, [r3, #44]
 1591 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1592 002a 1046     		mov	r0, r2
 1593 002c 1946     		mov	r1, r3
 1594 002e FFF7FEFF 		bl	ADCGROUP001_SetGroupClass0SampleTime
 1595 0032 F860     		str	r0, [r7, #12]
 1596 0034 02E0     		b	.L77
 1597              	.L78:
 846:../Dave/Generated/src/ADC002/ADC002.c ****     }
 847:../Dave/Generated/src/ADC002/ADC002.c ****     else
 848:../Dave/Generated/src/ADC002/ADC002.c ****     {
 849:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1598              		.loc 1 849 0
 1599 0036 4FF00203 		mov	r3, #2
 1600 003a FB60     		str	r3, [r7, #12]
 1601              	.L77:
 850:../Dave/Generated/src/ADC002/ADC002.c ****     }
 851:../Dave/Generated/src/ADC002/ADC002.c ****   }
 852:../Dave/Generated/src/ADC002/ADC002.c ****   else
 853:../Dave/Generated/src/ADC002/ADC002.c ****   {
 854:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 855:../Dave/Generated/src/ADC002/ADC002.c ****   }
 856:../Dave/Generated/src/ADC002/ADC002.c ****   
 857:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 858:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1602              		.loc 1 858 0
 1603 003c FB68     		ldr	r3, [r7, #12]
 859:../Dave/Generated/src/ADC002/ADC002.c **** }
 1604              		.loc 1 859 0
 1605 003e 1846     		mov	r0, r3
 1606 0040 07F11007 		add	r7, r7, #16
 1607 0044 BD46     		mov	sp, r7
 1608 0046 80BD     		pop	{r7, pc}
 1609              		.cfi_endproc
 1610              	.LFE132:
 1612              		.section	.text.ADC002_SetEMUXConversionMode,"ax",%progbits
 1613              		.align	2
 1614              		.global	ADC002_SetEMUXConversionMode
 1615              		.thumb
 1616              		.thumb_func
 1618              	ADC002_SetEMUXConversionMode:
 1619              	.LFB133:
 860:../Dave/Generated/src/ADC002/ADC002.c **** 
 861:../Dave/Generated/src/ADC002/ADC002.c **** 
 862:../Dave/Generated/src/ADC002/ADC002.c **** /*
 863:../Dave/Generated/src/ADC002/ADC002.c ****  * This function sets EMUX conversion mode.
 864:../Dave/Generated/src/ADC002/ADC002.c ****  */
 865:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_SetEMUXConversionMode(const ADC002_HandleType *HandlePtr,
 866:../Dave/Generated/src/ADC002/ADC002.c ****                                                       uint8_t ConversionMode)
 867:../Dave/Generated/src/ADC002/ADC002.c **** {
 1620              		.loc 1 867 0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 16
 1623              		@ frame_needed = 1, uses_anonymous_args = 0
 1624 0000 80B5     		push	{r7, lr}
 1625              	.LCFI62:
 1626              		.cfi_def_cfa_offset 8
 1627              		.cfi_offset 7, -8
 1628              		.cfi_offset 14, -4
 1629 0002 84B0     		sub	sp, sp, #16
 1630              	.LCFI63:
 1631              		.cfi_def_cfa_offset 24
 1632 0004 00AF     		add	r7, sp, #0
 1633              	.LCFI64:
 1634              		.cfi_def_cfa_register 7
 1635 0006 7860     		str	r0, [r7, #4]
 1636 0008 0B46     		mov	r3, r1
 1637 000a FB70     		strb	r3, [r7, #3]
 868:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1638              		.loc 1 868 0
 1639 000c 4FF00103 		mov	r3, #1
 1640 0010 FB60     		str	r3, [r7, #12]
 869:../Dave/Generated/src/ADC002/ADC002.c **** 
 870:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 871:../Dave/Generated/src/ADC002/ADC002.c **** 
 872:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1641              		.loc 1 872 0
 1642 0012 7B68     		ldr	r3, [r7, #4]
 1643 0014 9B6A     		ldr	r3, [r3, #40]
 1644 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1645 0018 012B     		cmp	r3, #1
 1646 001a 0FD1     		bne	.L81
 873:../Dave/Generated/src/ADC002/ADC002.c ****   {
 874:../Dave/Generated/src/ADC002/ADC002.c ****     if(HandlePtr->kGroup_HandlePtr != NULL)
 1647              		.loc 1 874 0
 1648 001c 7B68     		ldr	r3, [r7, #4]
 1649 001e DB6A     		ldr	r3, [r3, #44]
 1650 0020 002B     		cmp	r3, #0
 1651 0022 08D0     		beq	.L82
 875:../Dave/Generated/src/ADC002/ADC002.c ****     {
 876:../Dave/Generated/src/ADC002/ADC002.c ****       /* Set EMUX conversion mode */
 877:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADCGROUP001_SetGroupClass0EmuxConvMode(
 878:../Dave/Generated/src/ADC002/ADC002.c ****                         HandlePtr->kGroup_HandlePtr,ConversionMode);
 1652              		.loc 1 878 0
 1653 0024 7B68     		ldr	r3, [r7, #4]
 877:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADCGROUP001_SetGroupClass0EmuxConvMode(
 1654              		.loc 1 877 0
 1655 0026 DA6A     		ldr	r2, [r3, #44]
 1656 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1657 002a 1046     		mov	r0, r2
 1658 002c 1946     		mov	r1, r3
 1659 002e FFF7FEFF 		bl	ADCGROUP001_SetGroupClass0EmuxConvMode
 1660 0032 F860     		str	r0, [r7, #12]
 1661 0034 02E0     		b	.L81
 1662              	.L82:
 879:../Dave/Generated/src/ADC002/ADC002.c ****     }
 880:../Dave/Generated/src/ADC002/ADC002.c ****     else
 881:../Dave/Generated/src/ADC002/ADC002.c ****     {
 882:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1663              		.loc 1 882 0
 1664 0036 4FF00203 		mov	r3, #2
 1665 003a FB60     		str	r3, [r7, #12]
 1666              	.L81:
 883:../Dave/Generated/src/ADC002/ADC002.c ****     }
 884:../Dave/Generated/src/ADC002/ADC002.c ****   }
 885:../Dave/Generated/src/ADC002/ADC002.c ****   else
 886:../Dave/Generated/src/ADC002/ADC002.c ****   {
 887:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 888:../Dave/Generated/src/ADC002/ADC002.c ****   }
 889:../Dave/Generated/src/ADC002/ADC002.c **** 
 890:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 891:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1667              		.loc 1 891 0
 1668 003c FB68     		ldr	r3, [r7, #12]
 892:../Dave/Generated/src/ADC002/ADC002.c **** }
 1669              		.loc 1 892 0
 1670 003e 1846     		mov	r0, r3
 1671 0040 07F11007 		add	r7, r7, #16
 1672 0044 BD46     		mov	sp, r7
 1673 0046 80BD     		pop	{r7, pc}
 1674              		.cfi_endproc
 1675              	.LFE133:
 1677              		.section	.text.ADC002_EMUXSetSampleTime,"ax",%progbits
 1678              		.align	2
 1679              		.global	ADC002_EMUXSetSampleTime
 1680              		.thumb
 1681              		.thumb_func
 1683              	ADC002_EMUXSetSampleTime:
 1684              	.LFB134:
 893:../Dave/Generated/src/ADC002/ADC002.c **** 
 894:../Dave/Generated/src/ADC002/ADC002.c **** 
 895:../Dave/Generated/src/ADC002/ADC002.c **** /*
 896:../Dave/Generated/src/ADC002/ADC002.c ****  * This function sets sample time for EMUX conversion.
 897:../Dave/Generated/src/ADC002/ADC002.c ****  */
 898:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_EMUXSetSampleTime(const ADC002_HandleType *HandlePtr,
 899:../Dave/Generated/src/ADC002/ADC002.c ****                                                             uint8_t SampleTime)
 900:../Dave/Generated/src/ADC002/ADC002.c **** {
 1685              		.loc 1 900 0
 1686              		.cfi_startproc
 1687              		@ args = 0, pretend = 0, frame = 16
 1688              		@ frame_needed = 1, uses_anonymous_args = 0
 1689 0000 80B5     		push	{r7, lr}
 1690              	.LCFI65:
 1691              		.cfi_def_cfa_offset 8
 1692              		.cfi_offset 7, -8
 1693              		.cfi_offset 14, -4
 1694 0002 84B0     		sub	sp, sp, #16
 1695              	.LCFI66:
 1696              		.cfi_def_cfa_offset 24
 1697 0004 00AF     		add	r7, sp, #0
 1698              	.LCFI67:
 1699              		.cfi_def_cfa_register 7
 1700 0006 7860     		str	r0, [r7, #4]
 1701 0008 0B46     		mov	r3, r1
 1702 000a FB70     		strb	r3, [r7, #3]
 901:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1703              		.loc 1 901 0
 1704 000c 4FF00103 		mov	r3, #1
 1705 0010 FB60     		str	r3, [r7, #12]
 902:../Dave/Generated/src/ADC002/ADC002.c **** 
 903:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 904:../Dave/Generated/src/ADC002/ADC002.c **** 
 905:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1706              		.loc 1 905 0
 1707 0012 7B68     		ldr	r3, [r7, #4]
 1708 0014 9B6A     		ldr	r3, [r3, #40]
 1709 0016 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1710 0018 012B     		cmp	r3, #1
 1711 001a 0FD1     		bne	.L85
 906:../Dave/Generated/src/ADC002/ADC002.c ****   {
 907:../Dave/Generated/src/ADC002/ADC002.c ****     if(HandlePtr->kGroup_HandlePtr != NULL)
 1712              		.loc 1 907 0
 1713 001c 7B68     		ldr	r3, [r7, #4]
 1714 001e DB6A     		ldr	r3, [r3, #44]
 1715 0020 002B     		cmp	r3, #0
 1716 0022 08D0     		beq	.L86
 908:../Dave/Generated/src/ADC002/ADC002.c ****     {
 909:../Dave/Generated/src/ADC002/ADC002.c ****       /* Set sample time for EMUX conversion*/
 910:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADCGROUP001_SetGroupClass0EmuxSampleTime(
 911:../Dave/Generated/src/ADC002/ADC002.c ****                               HandlePtr->kGroup_HandlePtr,SampleTime);
 1717              		.loc 1 911 0
 1718 0024 7B68     		ldr	r3, [r7, #4]
 910:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADCGROUP001_SetGroupClass0EmuxSampleTime(
 1719              		.loc 1 910 0
 1720 0026 DA6A     		ldr	r2, [r3, #44]
 1721 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1722 002a 1046     		mov	r0, r2
 1723 002c 1946     		mov	r1, r3
 1724 002e FFF7FEFF 		bl	ADCGROUP001_SetGroupClass0EmuxSampleTime
 1725 0032 F860     		str	r0, [r7, #12]
 1726 0034 02E0     		b	.L85
 1727              	.L86:
 912:../Dave/Generated/src/ADC002/ADC002.c ****     }
 913:../Dave/Generated/src/ADC002/ADC002.c ****     else
 914:../Dave/Generated/src/ADC002/ADC002.c ****     {
 915:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1728              		.loc 1 915 0
 1729 0036 4FF00203 		mov	r3, #2
 1730 003a FB60     		str	r3, [r7, #12]
 1731              	.L85:
 916:../Dave/Generated/src/ADC002/ADC002.c ****     }
 917:../Dave/Generated/src/ADC002/ADC002.c ****   }
 918:../Dave/Generated/src/ADC002/ADC002.c ****   else
 919:../Dave/Generated/src/ADC002/ADC002.c ****   {
 920:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 921:../Dave/Generated/src/ADC002/ADC002.c ****   }
 922:../Dave/Generated/src/ADC002/ADC002.c **** 
 923:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 924:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1732              		.loc 1 924 0
 1733 003c FB68     		ldr	r3, [r7, #12]
 925:../Dave/Generated/src/ADC002/ADC002.c **** }
 1734              		.loc 1 925 0
 1735 003e 1846     		mov	r0, r3
 1736 0040 07F11007 		add	r7, r7, #16
 1737 0044 BD46     		mov	sp, r7
 1738 0046 80BD     		pop	{r7, pc}
 1739              		.cfi_endproc
 1740              	.LFE134:
 1742              		.section	.text.ADC002_GetQueueStage0Entry,"ax",%progbits
 1743              		.align	2
 1744              		.global	ADC002_GetQueueStage0Entry
 1745              		.thumb
 1746              		.thumb_func
 1748              	ADC002_GetQueueStage0Entry:
 1749              	.LFB135:
 926:../Dave/Generated/src/ADC002/ADC002.c **** 
 927:../Dave/Generated/src/ADC002/ADC002.c **** 
 928:../Dave/Generated/src/ADC002/ADC002.c **** /* This function gets the current level of the selected gate input */
 929:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_GetQueueStage0Entry(const ADC002_HandleType *HandlePtr, 
 930:../Dave/Generated/src/ADC002/ADC002.c ****                                                     uint32_t *EntryPtr)
 931:../Dave/Generated/src/ADC002/ADC002.c **** {
 1750              		.loc 1 931 0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 16
 1753              		@ frame_needed = 1, uses_anonymous_args = 0
 1754              		@ link register save eliminated.
 1755 0000 80B4     		push	{r7}
 1756              	.LCFI68:
 1757              		.cfi_def_cfa_offset 4
 1758              		.cfi_offset 7, -4
 1759 0002 85B0     		sub	sp, sp, #20
 1760              	.LCFI69:
 1761              		.cfi_def_cfa_offset 24
 1762 0004 00AF     		add	r7, sp, #0
 1763              	.LCFI70:
 1764              		.cfi_def_cfa_register 7
 1765 0006 7860     		str	r0, [r7, #4]
 1766 0008 3960     		str	r1, [r7, #0]
 932:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1767              		.loc 1 932 0
 1768 000a 4FF00103 		mov	r3, #1
 1769 000e FB60     		str	r3, [r7, #12]
 933:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 934:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1770              		.loc 1 934 0
 1771 0010 7B68     		ldr	r3, [r7, #4]
 1772 0012 9B6D     		ldr	r3, [r3, #88]
 1773 0014 BB60     		str	r3, [r7, #8]
 935:../Dave/Generated/src/ADC002/ADC002.c **** 
 936:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 937:../Dave/Generated/src/ADC002/ADC002.c **** 
 938:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1774              		.loc 1 938 0
 1775 0016 7B68     		ldr	r3, [r7, #4]
 1776 0018 9B6A     		ldr	r3, [r3, #40]
 1777 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1778 001c 012B     		cmp	r3, #1
 1779 001e 0ED1     		bne	.L89
 939:../Dave/Generated/src/ADC002/ADC002.c ****   {
 940:../Dave/Generated/src/ADC002/ADC002.c ****     /* Get the queue stage 0 entry 0 */
 941:../Dave/Generated/src/ADC002/ADC002.c ****     if(EntryPtr != NULL)
 1780              		.loc 1 941 0
 1781 0020 3B68     		ldr	r3, [r7, #0]
 1782 0022 002B     		cmp	r3, #0
 1783 0024 08D0     		beq	.L90
 942:../Dave/Generated/src/ADC002/ADC002.c ****     {
 943:../Dave/Generated/src/ADC002/ADC002.c ****         *EntryPtr = (uint32_t)VADCGroupPtr->Q0R0;
 1784              		.loc 1 943 0
 1785 0026 BB68     		ldr	r3, [r7, #8]
 1786 0028 D3F80C21 		ldr	r2, [r3, #268]
 1787 002c 3B68     		ldr	r3, [r7, #0]
 1788 002e 1A60     		str	r2, [r3, #0]
 944:../Dave/Generated/src/ADC002/ADC002.c ****         Status = (uint32_t)DAVEApp_SUCCESS;
 1789              		.loc 1 944 0
 1790 0030 4FF00003 		mov	r3, #0
 1791 0034 FB60     		str	r3, [r7, #12]
 1792 0036 02E0     		b	.L89
 1793              	.L90:
 945:../Dave/Generated/src/ADC002/ADC002.c ****     }
 946:../Dave/Generated/src/ADC002/ADC002.c ****     else
 947:../Dave/Generated/src/ADC002/ADC002.c ****     {
 948:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1794              		.loc 1 948 0
 1795 0038 4FF00203 		mov	r3, #2
 1796 003c FB60     		str	r3, [r7, #12]
 1797              	.L89:
 949:../Dave/Generated/src/ADC002/ADC002.c ****     }
 950:../Dave/Generated/src/ADC002/ADC002.c ****   }
 951:../Dave/Generated/src/ADC002/ADC002.c ****   else
 952:../Dave/Generated/src/ADC002/ADC002.c ****   {
 953:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 954:../Dave/Generated/src/ADC002/ADC002.c ****   }
 955:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 956:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1798              		.loc 1 956 0
 1799 003e FB68     		ldr	r3, [r7, #12]
 957:../Dave/Generated/src/ADC002/ADC002.c **** }
 1800              		.loc 1 957 0
 1801 0040 1846     		mov	r0, r3
 1802 0042 07F11407 		add	r7, r7, #20
 1803 0046 BD46     		mov	sp, r7
 1804 0048 80BC     		pop	{r7}
 1805 004a 7047     		bx	lr
 1806              		.cfi_endproc
 1807              	.LFE135:
 1809              		.section	.text.ADC002_GetQueueBackupStageEntry,"ax",%progbits
 1810              		.align	2
 1811              		.global	ADC002_GetQueueBackupStageEntry
 1812              		.thumb
 1813              		.thumb_func
 1815              	ADC002_GetQueueBackupStageEntry:
 1816              	.LFB136:
 958:../Dave/Generated/src/ADC002/ADC002.c **** 
 959:../Dave/Generated/src/ADC002/ADC002.c **** 
 960:../Dave/Generated/src/ADC002/ADC002.c **** /* This function gets the current level of the selected gate input */
 961:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_GetQueueBackupStageEntry(const ADC002_HandleType *HandlePtr, 
 962:../Dave/Generated/src/ADC002/ADC002.c ****                                                     uint32_t *EntryPtr)
 963:../Dave/Generated/src/ADC002/ADC002.c **** {
 1817              		.loc 1 963 0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 16
 1820              		@ frame_needed = 1, uses_anonymous_args = 0
 1821              		@ link register save eliminated.
 1822 0000 80B4     		push	{r7}
 1823              	.LCFI71:
 1824              		.cfi_def_cfa_offset 4
 1825              		.cfi_offset 7, -4
 1826 0002 85B0     		sub	sp, sp, #20
 1827              	.LCFI72:
 1828              		.cfi_def_cfa_offset 24
 1829 0004 00AF     		add	r7, sp, #0
 1830              	.LCFI73:
 1831              		.cfi_def_cfa_register 7
 1832 0006 7860     		str	r0, [r7, #4]
 1833 0008 3960     		str	r1, [r7, #0]
 964:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1834              		.loc 1 964 0
 1835 000a 4FF00103 		mov	r3, #1
 1836 000e FB60     		str	r3, [r7, #12]
 965:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 966:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1837              		.loc 1 966 0
 1838 0010 7B68     		ldr	r3, [r7, #4]
 1839 0012 9B6D     		ldr	r3, [r3, #88]
 1840 0014 BB60     		str	r3, [r7, #8]
 967:../Dave/Generated/src/ADC002/ADC002.c **** 
 968:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
 969:../Dave/Generated/src/ADC002/ADC002.c **** 
 970:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1841              		.loc 1 970 0
 1842 0016 7B68     		ldr	r3, [r7, #4]
 1843 0018 9B6A     		ldr	r3, [r3, #40]
 1844 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1845 001c 012B     		cmp	r3, #1
 1846 001e 0ED1     		bne	.L93
 971:../Dave/Generated/src/ADC002/ADC002.c ****   {
 972:../Dave/Generated/src/ADC002/ADC002.c ****     /* Get the queue backup stage entry */
 973:../Dave/Generated/src/ADC002/ADC002.c ****     if(EntryPtr != NULL)
 1847              		.loc 1 973 0
 1848 0020 3B68     		ldr	r3, [r7, #0]
 1849 0022 002B     		cmp	r3, #0
 1850 0024 08D0     		beq	.L94
 974:../Dave/Generated/src/ADC002/ADC002.c ****     {
 975:../Dave/Generated/src/ADC002/ADC002.c ****       *EntryPtr = (uint32_t)VADCGroupPtr->QBUR0;
 1851              		.loc 1 975 0
 1852 0026 BB68     		ldr	r3, [r7, #8]
 1853 0028 D3F81021 		ldr	r2, [r3, #272]
 1854 002c 3B68     		ldr	r3, [r7, #0]
 1855 002e 1A60     		str	r2, [r3, #0]
 976:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1856              		.loc 1 976 0
 1857 0030 4FF00003 		mov	r3, #0
 1858 0034 FB60     		str	r3, [r7, #12]
 1859 0036 02E0     		b	.L93
 1860              	.L94:
 977:../Dave/Generated/src/ADC002/ADC002.c ****     }
 978:../Dave/Generated/src/ADC002/ADC002.c ****     else
 979:../Dave/Generated/src/ADC002/ADC002.c ****     {
 980:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1861              		.loc 1 980 0
 1862 0038 4FF00203 		mov	r3, #2
 1863 003c FB60     		str	r3, [r7, #12]
 1864              	.L93:
 981:../Dave/Generated/src/ADC002/ADC002.c ****     }
 982:../Dave/Generated/src/ADC002/ADC002.c ****   }
 983:../Dave/Generated/src/ADC002/ADC002.c ****   else
 984:../Dave/Generated/src/ADC002/ADC002.c ****   {
 985:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
 986:../Dave/Generated/src/ADC002/ADC002.c ****   }
 987:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
 988:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1865              		.loc 1 988 0
 1866 003e FB68     		ldr	r3, [r7, #12]
 989:../Dave/Generated/src/ADC002/ADC002.c **** }
 1867              		.loc 1 989 0
 1868 0040 1846     		mov	r0, r3
 1869 0042 07F11407 		add	r7, r7, #20
 1870 0046 BD46     		mov	sp, r7
 1871 0048 80BC     		pop	{r7}
 1872 004a 7047     		bx	lr
 1873              		.cfi_endproc
 1874              	.LFE136:
 1876              		.section	.text.ADC002_GetSourceEventFlag,"ax",%progbits
 1877              		.align	2
 1878              		.global	ADC002_GetSourceEventFlag
 1879              		.thumb
 1880              		.thumb_func
 1882              	ADC002_GetSourceEventFlag:
 1883              	.LFB137:
 990:../Dave/Generated/src/ADC002/ADC002.c **** 
 991:../Dave/Generated/src/ADC002/ADC002.c **** 
 992:../Dave/Generated/src/ADC002/ADC002.c **** /* This function gets the Event flag. */
 993:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_GetSourceEventFlag(const ADC002_HandleType *HandlePtr, 
 994:../Dave/Generated/src/ADC002/ADC002.c ****                                                             uint8_t *Flagptr)
 995:../Dave/Generated/src/ADC002/ADC002.c **** {
 1884              		.loc 1 995 0
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 16
 1887              		@ frame_needed = 1, uses_anonymous_args = 0
 1888              		@ link register save eliminated.
 1889 0000 80B4     		push	{r7}
 1890              	.LCFI74:
 1891              		.cfi_def_cfa_offset 4
 1892              		.cfi_offset 7, -4
 1893 0002 85B0     		sub	sp, sp, #20
 1894              	.LCFI75:
 1895              		.cfi_def_cfa_offset 24
 1896 0004 00AF     		add	r7, sp, #0
 1897              	.LCFI76:
 1898              		.cfi_def_cfa_register 7
 1899 0006 7860     		str	r0, [r7, #4]
 1900 0008 3960     		str	r1, [r7, #0]
 996:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1901              		.loc 1 996 0
 1902 000a 4FF00103 		mov	r3, #1
 1903 000e FB60     		str	r3, [r7, #12]
 997:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
 998:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1904              		.loc 1 998 0
 1905 0010 7B68     		ldr	r3, [r7, #4]
 1906 0012 9B6D     		ldr	r3, [r3, #88]
 1907 0014 BB60     		str	r3, [r7, #8]
 999:../Dave/Generated/src/ADC002/ADC002.c **** 
1000:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
1001:../Dave/Generated/src/ADC002/ADC002.c **** 
1002:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1908              		.loc 1 1002 0
 1909 0016 7B68     		ldr	r3, [r7, #4]
 1910 0018 9B6A     		ldr	r3, [r3, #40]
 1911 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1912 001c 012B     		cmp	r3, #1
 1913 001e 12D1     		bne	.L97
1003:../Dave/Generated/src/ADC002/ADC002.c ****   {
1004:../Dave/Generated/src/ADC002/ADC002.c ****     if(Flagptr != NULL)
 1914              		.loc 1 1004 0
 1915 0020 3B68     		ldr	r3, [r7, #0]
 1916 0022 002B     		cmp	r3, #0
 1917 0024 0CD0     		beq	.L98
1005:../Dave/Generated/src/ADC002/ADC002.c ****     {
1006:../Dave/Generated/src/ADC002/ADC002.c ****       /* Gets event flag */
1007:../Dave/Generated/src/ADC002/ADC002.c ****       *Flagptr = (uint8_t)RD_REG( VADCGroupPtr->SEFLAG, 
 1918              		.loc 1 1007 0
 1919 0026 BB68     		ldr	r3, [r7, #8]
 1920 0028 D3F88831 		ldr	r3, [r3, #392]
 1921 002c DBB2     		uxtb	r3, r3
 1922 002e 03F00103 		and	r3, r3, #1
 1923 0032 DAB2     		uxtb	r2, r3
 1924 0034 3B68     		ldr	r3, [r7, #0]
 1925 0036 1A70     		strb	r2, [r3, #0]
1008:../Dave/Generated/src/ADC002/ADC002.c ****                                VADC_G_SEFLAG_SEV0_Msk, VADC_G_SEFLAG_SEV0_Pos);
1009:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1926              		.loc 1 1009 0
 1927 0038 4FF00003 		mov	r3, #0
 1928 003c FB60     		str	r3, [r7, #12]
 1929 003e 02E0     		b	.L97
 1930              	.L98:
1010:../Dave/Generated/src/ADC002/ADC002.c ****     }
1011:../Dave/Generated/src/ADC002/ADC002.c ****     else
1012:../Dave/Generated/src/ADC002/ADC002.c ****     {
1013:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)ADC002_INVALID_PARAM_ERROR;
 1931              		.loc 1 1013 0
 1932 0040 4FF00203 		mov	r3, #2
 1933 0044 FB60     		str	r3, [r7, #12]
 1934              	.L97:
1014:../Dave/Generated/src/ADC002/ADC002.c ****     }
1015:../Dave/Generated/src/ADC002/ADC002.c ****   }
1016:../Dave/Generated/src/ADC002/ADC002.c ****   else
1017:../Dave/Generated/src/ADC002/ADC002.c ****   {
1018:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
1019:../Dave/Generated/src/ADC002/ADC002.c ****   }
1020:../Dave/Generated/src/ADC002/ADC002.c ****   
1021:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
1022:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1935              		.loc 1 1022 0
 1936 0046 FB68     		ldr	r3, [r7, #12]
1023:../Dave/Generated/src/ADC002/ADC002.c **** }
 1937              		.loc 1 1023 0
 1938 0048 1846     		mov	r0, r3
 1939 004a 07F11407 		add	r7, r7, #20
 1940 004e BD46     		mov	sp, r7
 1941 0050 80BC     		pop	{r7}
 1942 0052 7047     		bx	lr
 1943              		.cfi_endproc
 1944              	.LFE137:
 1946              		.section	.text.ADC002_SetSourceEventFlag,"ax",%progbits
 1947              		.align	2
 1948              		.global	ADC002_SetSourceEventFlag
 1949              		.thumb
 1950              		.thumb_func
 1952              	ADC002_SetSourceEventFlag:
 1953              	.LFB138:
1024:../Dave/Generated/src/ADC002/ADC002.c **** 
1025:../Dave/Generated/src/ADC002/ADC002.c **** /* This function sets the Event flag. */
1026:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_SetSourceEventFlag(const ADC002_HandleType *HandlePtr)
1027:../Dave/Generated/src/ADC002/ADC002.c **** {
 1954              		.loc 1 1027 0
 1955              		.cfi_startproc
 1956              		@ args = 0, pretend = 0, frame = 16
 1957              		@ frame_needed = 1, uses_anonymous_args = 0
 1958              		@ link register save eliminated.
 1959 0000 80B4     		push	{r7}
 1960              	.LCFI77:
 1961              		.cfi_def_cfa_offset 4
 1962              		.cfi_offset 7, -4
 1963 0002 85B0     		sub	sp, sp, #20
 1964              	.LCFI78:
 1965              		.cfi_def_cfa_offset 24
 1966 0004 00AF     		add	r7, sp, #0
 1967              	.LCFI79:
 1968              		.cfi_def_cfa_register 7
 1969 0006 7860     		str	r0, [r7, #4]
1028:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 1970              		.loc 1 1028 0
 1971 0008 4FF00103 		mov	r3, #1
 1972 000c FB60     		str	r3, [r7, #12]
1029:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
1030:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1973              		.loc 1 1030 0
 1974 000e 7B68     		ldr	r3, [r7, #4]
 1975 0010 9B6D     		ldr	r3, [r3, #88]
 1976 0012 BB60     		str	r3, [r7, #8]
1031:../Dave/Generated/src/ADC002/ADC002.c **** 
1032:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
1033:../Dave/Generated/src/ADC002/ADC002.c **** 
1034:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 1977              		.loc 1 1034 0
 1978 0014 7B68     		ldr	r3, [r7, #4]
 1979 0016 9B6A     		ldr	r3, [r3, #40]
 1980 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1981 001a 012B     		cmp	r3, #1
 1982 001c 0AD1     		bne	.L101
1035:../Dave/Generated/src/ADC002/ADC002.c ****   {
1036:../Dave/Generated/src/ADC002/ADC002.c ****     /* Sets event flag */
1037:../Dave/Generated/src/ADC002/ADC002.c ****     SET_BIT(VADCGroupPtr->SEFLAG, VADC_G_SEFLAG_SEV0_Pos);
 1983              		.loc 1 1037 0
 1984 001e BB68     		ldr	r3, [r7, #8]
 1985 0020 D3F88831 		ldr	r3, [r3, #392]
 1986 0024 43F00102 		orr	r2, r3, #1
 1987 0028 BB68     		ldr	r3, [r7, #8]
 1988 002a C3F88821 		str	r2, [r3, #392]
1038:../Dave/Generated/src/ADC002/ADC002.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 1989              		.loc 1 1038 0
 1990 002e 4FF00003 		mov	r3, #0
 1991 0032 FB60     		str	r3, [r7, #12]
 1992              	.L101:
1039:../Dave/Generated/src/ADC002/ADC002.c ****   }
1040:../Dave/Generated/src/ADC002/ADC002.c ****   else
1041:../Dave/Generated/src/ADC002/ADC002.c ****   {
1042:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
1043:../Dave/Generated/src/ADC002/ADC002.c ****   }
1044:../Dave/Generated/src/ADC002/ADC002.c ****   
1045:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
1046:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 1993              		.loc 1 1046 0
 1994 0034 FB68     		ldr	r3, [r7, #12]
1047:../Dave/Generated/src/ADC002/ADC002.c **** }
 1995              		.loc 1 1047 0
 1996 0036 1846     		mov	r0, r3
 1997 0038 07F11407 		add	r7, r7, #20
 1998 003c BD46     		mov	sp, r7
 1999 003e 80BC     		pop	{r7}
 2000 0040 7047     		bx	lr
 2001              		.cfi_endproc
 2002              	.LFE138:
 2004 0042 00BF     		.section	.text.ADC002_ClearSourceEventFlag,"ax",%progbits
 2005              		.align	2
 2006              		.global	ADC002_ClearSourceEventFlag
 2007              		.thumb
 2008              		.thumb_func
 2010              	ADC002_ClearSourceEventFlag:
 2011              	.LFB139:
1048:../Dave/Generated/src/ADC002/ADC002.c **** 
1049:../Dave/Generated/src/ADC002/ADC002.c **** 
1050:../Dave/Generated/src/ADC002/ADC002.c **** /* This function clears the source Event flag. */
1051:../Dave/Generated/src/ADC002/ADC002.c **** status_t ADC002_ClearSourceEventFlag(const ADC002_HandleType *HandlePtr) 
1052:../Dave/Generated/src/ADC002/ADC002.c **** {
 2012              		.loc 1 1052 0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 16
 2015              		@ frame_needed = 1, uses_anonymous_args = 0
 2016              		@ link register save eliminated.
 2017 0000 80B4     		push	{r7}
 2018              	.LCFI80:
 2019              		.cfi_def_cfa_offset 4
 2020              		.cfi_offset 7, -4
 2021 0002 85B0     		sub	sp, sp, #20
 2022              	.LCFI81:
 2023              		.cfi_def_cfa_offset 24
 2024 0004 00AF     		add	r7, sp, #0
 2025              	.LCFI82:
 2026              		.cfi_def_cfa_register 7
 2027 0006 7860     		str	r0, [r7, #4]
1053:../Dave/Generated/src/ADC002/ADC002.c ****   status_t Status = (uint32_t)ADC002_OPER_NOT_ALLOWED_ERROR;
 2028              		.loc 1 1053 0
 2029 0008 4FF00103 		mov	r3, #1
 2030 000c FB60     		str	r3, [r7, #12]
1054:../Dave/Generated/src/ADC002/ADC002.c ****     /*Pointer to the VADC Group register structure */
1055:../Dave/Generated/src/ADC002/ADC002.c ****   VADC_G_TypeDef *VADCGroupPtr = HandlePtr->VADCGroupPtr;
 2031              		.loc 1 1055 0
 2032 000e 7B68     		ldr	r3, [r7, #4]
 2033 0010 9B6D     		ldr	r3, [r3, #88]
 2034 0012 BB60     		str	r3, [r7, #8]
1056:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_ENTRY(GID_ADC002, ADC002_FUNCTION_ENTRY);
1057:../Dave/Generated/src/ADC002/ADC002.c **** 
1058:../Dave/Generated/src/ADC002/ADC002.c ****   if (HandlePtr->DynamicHandlePtr->State == ADC002_INITIALIZED)
 2035              		.loc 1 1058 0
 2036 0014 7B68     		ldr	r3, [r7, #4]
 2037 0016 9B6A     		ldr	r3, [r3, #40]
 2038 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2039 001a 012B     		cmp	r3, #1
 2040 001c 0AD1     		bne	.L104
1059:../Dave/Generated/src/ADC002/ADC002.c ****   {
1060:../Dave/Generated/src/ADC002/ADC002.c ****       /* Sets event flag */
1061:../Dave/Generated/src/ADC002/ADC002.c ****       SET_BIT(VADCGroupPtr->SEFCLR, VADC_G_SEFCLR_SEV0_Pos);
 2041              		.loc 1 1061 0
 2042 001e BB68     		ldr	r3, [r7, #8]
 2043 0020 D3F89831 		ldr	r3, [r3, #408]
 2044 0024 43F00102 		orr	r2, r3, #1
 2045 0028 BB68     		ldr	r3, [r7, #8]
 2046 002a C3F89821 		str	r2, [r3, #408]
1062:../Dave/Generated/src/ADC002/ADC002.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 2047              		.loc 1 1062 0
 2048 002e 4FF00003 		mov	r3, #0
 2049 0032 FB60     		str	r3, [r7, #12]
 2050              	.L104:
1063:../Dave/Generated/src/ADC002/ADC002.c ****   }
1064:../Dave/Generated/src/ADC002/ADC002.c ****   else
1065:../Dave/Generated/src/ADC002/ADC002.c ****   {
1066:../Dave/Generated/src/ADC002/ADC002.c ****     ERROR(GID_ADC002, (uint8_t)Status, 0, (uint8_t*)NULL);
1067:../Dave/Generated/src/ADC002/ADC002.c ****   }
1068:../Dave/Generated/src/ADC002/ADC002.c ****   
1069:../Dave/Generated/src/ADC002/ADC002.c ****   FUNCTION_EXIT(GID_ADC002, ADC002_FUNCTION_EXIT);
1070:../Dave/Generated/src/ADC002/ADC002.c ****   return Status;
 2051              		.loc 1 1070 0
 2052 0034 FB68     		ldr	r3, [r7, #12]
1071:../Dave/Generated/src/ADC002/ADC002.c **** }
 2053              		.loc 1 1071 0
 2054 0036 1846     		mov	r0, r3
 2055 0038 07F11407 		add	r7, r7, #20
 2056 003c BD46     		mov	sp, r7
 2057 003e 80BC     		pop	{r7}
 2058 0040 7047     		bx	lr
 2059              		.cfi_endproc
 2060              	.LFE139:
 2062 0042 00BF     		.text
 2063              	.Letext0:
 2064              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 2065              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 2066              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\XMC4500_RK_HTTPserver\\XMC4500_RK_HTTPserver\\Dave\\Genera
 2067              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\XMC4500_RK_HTTPserver\\XMC4500_RK_HTTPserver\\Dave\\Genera
 2068              		.file 6 "C:\\DAVE3_workspace\\ws3.1.10\\XMC4500_RK_HTTPserver\\XMC4500_RK_HTTPserver\\Dave\\Genera
 2069              		.file 7 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 2070              		.file 8 "C:\\DAVE3_workspace\\ws3.1.10\\XMC4500_RK_HTTPserver\\XMC4500_RK_HTTPserver\\Dave\\Genera
DEFINED SYMBOLS
                            *ABS*:00000000 ADC002.c
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:20     .text.ADC002_Init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:25     .text.ADC002_Init:00000000 ADC002_Init
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:56     .text.ADC002_lInit:00000000 ADC002_lInit
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:52     .text.ADC002_lInit:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:175    .text.ADC002_InitializeQueue:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:180    .text.ADC002_InitializeQueue:00000000 ADC002_InitializeQueue
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:333    .text.ADC002_Deinit:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:338    .text.ADC002_Deinit:00000000 ADC002_Deinit
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:420    .text.ADC002_ClearEvent:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:425    .text.ADC002_ClearEvent:00000000 ADC002_ClearEvent
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:478    .text.ADC002_FlushQueue:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:483    .text.ADC002_FlushQueue:00000000 ADC002_FlushQueue
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:536    .text.ADC002_TriggerEvent:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:541    .text.ADC002_TriggerEvent:00000000 ADC002_TriggerEvent
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:594    .text.ADC002_ClearValidBit:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:599    .text.ADC002_ClearValidBit:00000000 ADC002_ClearValidBit
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:652    .text.ADC002_EnableGate:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:657    .text.ADC002_EnableGate:00000000 ADC002_EnableGate
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:724    .text.ADC002_EnableQueueArbitrationSlot:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:729    .text.ADC002_EnableQueueArbitrationSlot:00000000 ADC002_EnableQueueArbitrationSlot
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:782    .text.ADC002_DisableQueueArbitrationSlot:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:787    .text.ADC002_DisableQueueArbitrationSlot:00000000 ADC002_DisableQueueArbitrationSlot
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:840    .text.ADC002_SetExternalTriggerMode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:845    .text.ADC002_SetExternalTriggerMode:00000000 ADC002_SetExternalTriggerMode
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:935    .text.ADC002_EnableExternalTrigger:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:940    .text.ADC002_EnableExternalTrigger:00000000 ADC002_EnableExternalTrigger
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:993    .text.ADC002_DisableExternalTrigger:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:998    .text.ADC002_DisableExternalTrigger:00000000 ADC002_DisableExternalTrigger
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1051   .text.ADC002_IsEmpty:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1056   .text.ADC002_IsEmpty:00000000 ADC002_IsEmpty
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1121   .text.ADC002_GetFillingLevel:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1126   .text.ADC002_GetFillingLevel:00000000 ADC002_GetFillingLevel
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1236   .text.ADC002_GetGateLevel:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1241   .text.ADC002_GetGateLevel:00000000 ADC002_GetGateLevel
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1306   .text.ADC002_IsEventDetected:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1311   .text.ADC002_IsEventDetected:00000000 ADC002_IsEventDetected
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1376   .text.ADC002_AddQueueEntry:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1381   .text.ADC002_AddQueueEntry:00000000 ADC002_AddQueueEntry
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1483   .text.ADC002_SetConversionMode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1488   .text.ADC002_SetConversionMode:00000000 ADC002_SetConversionMode
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1548   .text.ADC002_SetSampleTime:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1553   .text.ADC002_SetSampleTime:00000000 ADC002_SetSampleTime
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1613   .text.ADC002_SetEMUXConversionMode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1618   .text.ADC002_SetEMUXConversionMode:00000000 ADC002_SetEMUXConversionMode
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1678   .text.ADC002_EMUXSetSampleTime:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1683   .text.ADC002_EMUXSetSampleTime:00000000 ADC002_EMUXSetSampleTime
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1743   .text.ADC002_GetQueueStage0Entry:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1748   .text.ADC002_GetQueueStage0Entry:00000000 ADC002_GetQueueStage0Entry
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1810   .text.ADC002_GetQueueBackupStageEntry:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1815   .text.ADC002_GetQueueBackupStageEntry:00000000 ADC002_GetQueueBackupStageEntry
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1877   .text.ADC002_GetSourceEventFlag:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1882   .text.ADC002_GetSourceEventFlag:00000000 ADC002_GetSourceEventFlag
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1947   .text.ADC002_SetSourceEventFlag:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:1952   .text.ADC002_SetSourceEventFlag:00000000 ADC002_SetSourceEventFlag
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:2005   .text.ADC002_ClearSourceEventFlag:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccksfvBy.s:2010   .text.ADC002_ClearSourceEventFlag:00000000 ADC002_ClearSourceEventFlag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1791a5ae2e936ca1033c1c44be394cc7
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.55.0006b5fda1d606516f2dcaf4aca92b11
                           .group:00000000 wm4.MULTIPLEXER.h.43.4aa654be3ec80895f631b5281bbb9105
                           .group:00000000 wm4.CCU8PWMLIB.h.70.a5d6a5267902b8b4aea2a0224518259a
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.SYSTM001.h.63.668098b2213d40a5bd0db5fbe813cf05
                           .group:00000000 wm4.ETH002_Conf.h.56.5bd2b085b66f43d51abd69396be7f35f
                           .group:00000000 wm4.EthernetPHY.h.54.7af1709186b21e62a5f1d4049da3988b
                           .group:00000000 wm4.ETH001_Conf.h.71.1e151af1ba54dd023e1f942bdf922819
                           .group:00000000 wm4.synopGMAC_plat.h.78.7a90e072b497857344aea4ba1e994097
                           .group:00000000 wm4.synopGMAC_stack_interface.h.73.6be6aaee0ac6637432f4d0589044479b
                           .group:00000000 wm4.SynopGMAC_Dev.h.72.7c89c07cf666d37f5c9b615720d5e111
                           .group:00000000 wm4.synopGMAC_network_interface.h.73.4dd08316a11bc43c8c4a9da15277fb0f
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.ETH004_Conf.h.56.564c3f309c32b3c742fc91049cf66940
                           .group:00000000 wm4.lwipopts.h.73.a7a63bda1e8216abd1d90275eaaa0027
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.b213c7fd77614ebc3691cef18ad2ff22
                           .group:00000000 wm4.cc.h.66.ec134211c658dcc89de4610e4e7bab46
                           .group:00000000 wm4.arch.h.47.5153c52bfb94ee3b37299920afab6afd
                           .group:00000000 wm4.debug.h.43.557ecd6c90cc70b375bb8a29118be47b
                           .group:00000000 wm4.opt.h.94.d36882acafebb8726bce646fc8b2397b
                           .group:00000000 wm4.err.h.52.37c5d17538f8e8347a9c84196701e92d
                           .group:00000000 wm4.pbuf.h.43.e9a1ad12b97478787a109e22d5306820
                           .group:00000000 wm4.inet.h.46.b516065779826845d16d49f513869a2b
                           .group:00000000 wm4.ip_addr.h.79.9a0ce887ca8c88c22ad7686bcb5105df
                           .group:00000000 wm4.sys.h.65.4a0cd87b9e0d8bb4cd6b30e939b2ca7e
                           .group:00000000 wm4.mem.h.96.20770766e6c9e6c42af6bfa95ef5c63f
                           .group:00000000 wm4.def.h.33.049f911dab26023a266ed46ced0ce4bc
                           .group:00000000 wm4.netif.h.53.c13431a64f0e73a26710e71455725e84
                           .group:00000000 wm4.ip.h.48.ad46847692d4d729760949b27e48a442
                           .group:00000000 wm4.icmp.h.44.450dbf91f594cc26ad19d086cdc83713
                           .group:00000000 wm4.tcp.h.55.5c30b9432fa60afaa85cbdd225b0c683
                           .group:00000000 wm4.udp.h.48.1a8dde095cd0a13580afaba1443e5a3f
                           .group:00000000 wm4.SDMMC003_Conf.h.50.e707c07613fb4e6f2eaec982a892429d
                           .group:00000000 wm4.SDMMC003.h.85.b66055f6032a052f5173e3d123f9c61e
                           .group:00000000 wm4.SDMMC001.h.50.3e2fedc7e5ace33db4121d5cc027e8a4
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.diskio.h.7.93a3c8131d08770c060b04d2180fd09a
                           .group:00000000 wm4.diskio.h.42.a863614abe78d56d18ed7cb292d0028d
                           .group:00000000 wm4.ffconf.h.57.4ab321a2116d35ff7f28236ac31fad7c
                           .group:00000000 wm4.ff.h.82.8f05a37d35a49dba2681a7f047fee4ee
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.LMM001.h.42.c21fe9cbedc336738c3dc89405cad216
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.100.69cb08672bc6ab3f052aa9d5bd6dc5ca
                           .group:00000000 wm4._default_fcntl.h.6.d036cf640d0f9a06bcff1be55acd66be
                           .group:00000000 wm4.stat.h.2.a761b02482a54847ff0d09dfcff24a5c
                           .group:00000000 wm4.fcntl.h.9.9336f33d7f5028f694c75e6e224e0cf7
                           .group:00000000 wm4.SLTHA001.h.97.d7e87c19a31e3244bdd5839e7cc42a61
                           .group:00000000 wm4.WEBSERVER001_Conf.h.54.cd6d29aaa96a848cbc5321bab5d6cd90
                           .group:00000000 wm4.ADCGROUP001.h.48.081c7f952eb4b6ea2df7d05180ee1663
                           .group:00000000 wm4.IO001.h.49.1da965fb490206cf7cde64a90f6912e1
                           .group:00000000 wm4.MOTORLIBS.h.59.b2e97de0df555dedfa51e24447b57ab8
                           .group:00000000 wm4.uc_id.h.35.a6c4837fad81477ba31967683332b8cc
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.c5c972f6f634bc5116c171852aaab668
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9

UNDEFINED SYMBOLS
ADCGLOB001_Init
ADC002_Handle0
ADCGROUP001_SetGroupClass0ConvMode
ADCGROUP001_SetGroupClass0SampleTime
ADCGROUP001_SetGroupClass0EmuxConvMode
ADCGROUP001_SetGroupClass0EmuxSampleTime
