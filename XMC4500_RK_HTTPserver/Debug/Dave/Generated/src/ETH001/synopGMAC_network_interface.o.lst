   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"synopGMAC_network_interface.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.synopGMAC_IsEtherAddrsValid,"ax",%progbits
  20              		.align	2
  21              		.global	synopGMAC_IsEtherAddrsValid
  22              		.thumb
  23              		.thumb_func
  25              	synopGMAC_IsEtherAddrsValid:
  26              	.LFB112:
  27              		.file 1 "../Dave/Generated/src/ETH001/synopGMAC_network_interface.c"
   1:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /* ===================================================================================
   2:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Copyright (c) <2009> Synopsys, Inc.
   3:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
   4:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of 
   5:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * this software annotated with this license and associated documentation files 
   6:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * (the "Software"), to deal in the Software without restriction, including without 
   7:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
   8:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * and/or sell copies of the Software, and to permit persons to whom the Software is 
   9:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * furnished to do so, subject to the following conditions:
  10:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
  11:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * The above copyright notice and this permission notice shall be included in all 
  12:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * copies or substantial portions of the Software.
  13:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
  14:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
  15:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  16:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
  17:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
  18:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
  19:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  20:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
  21:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * =================================================================================== */
  22:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /* =========================================================================== * 
  23:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Copyright (c) 2011, Infineon Technologies AG                                *
  24:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * All rights reserved.                                                        * 
  25:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *                                                                             *
  26:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Redistribution and use in source and binary forms, with or without          *
  27:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * modification, are permitted provided that the following conditions are met: *
  28:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Redistributions of source code must retain the above copyright notice, this *
  29:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * list of conditions and the following disclaimer. Redistributions in binary  *
  30:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * form must reproduce the above copyright notice, this list of conditions and *
  31:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * the following disclaimer in the documentation and/or other materials        *
  32:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * provided with the distribution. Neither the name of the copyright holders   * 
  33:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * nor the names of its contributors may be used to endorse or promote         *
  34:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * products derived from this software without specific prior written          * 
  35:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * permission.                                                                 *
  36:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *                                                                             *
  37:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" *
  38:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,       *
  39:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR      *
  40:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR           *
  41:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,       *
  42:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,         * 
  43:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; *
  44:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,    *
  45:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR     *
  46:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF      *
  47:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                  *
  48:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * To improve the quality of the software, users are encouraged to share       *
  49:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * modifications, enhancements or bug fixes with                               *
  50:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Infineon Technologies AG (dave@infineon.com).                               *
  51:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *                                                                             *
  52:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * ==========================================================================  *
  53:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ********************************************************************************
  54:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                                                                            **
  55:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                                                                            **
  56:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ** PLATFORM : Infineon XMC4000 Series                                         **
  57:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                                                                            **
  58:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ** COMPILER : Compiler Independent                                            **
  59:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                                                                            **
  60:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ** AUTHOR : DAVE App Developer                                                **
  61:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                                                                            **
  62:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
  63:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                                                                            **
  64:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ** MODIFICATION DATE : Dec 12, 2012                                           **
  65:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                                                                            **
  66:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** *******************************************************************************/
  67:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  
  68:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /*******************************************************************************
  69:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                       Author(s) Identity                                   **
  70:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ********************************************************************************
  71:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** **                                                                            **
  72:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ** Initials     Name                                                          **
  73:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ** ---------------------------------------------------------------------------**
  74:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** ** JRP         DAVE App Developer                                             **
  75:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** *******************************************************************************/
  76:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
  77:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /** \file
  78:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * This is the network dependent layer to handle network related functionality.
  79:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * This file is tightly coupled to neworking frame work of linux 2.6.xx kernel.
  80:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * The functionality carried out in this file should be treated as an example only
  81:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * if the underlying operating system is not Linux. 
  82:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * 
  83:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \note Many of the functions other than the device specific functions
  84:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *  changes for operating system other than Linux 2.6.xx
  85:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \internal 
  86:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *-----------------------------REVISION HISTORY-----------------------------------
  87:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Synopsys			01/Aug/2007				Created
  88:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
  89:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Infineon         12/Dec/2012             DBG002 related macros are used   
  90:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
  91:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
  92:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #include <DAVE3.h>
  93:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
  94:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @cond INTERNAL_DOCS
  95:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
  96:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
  97:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /*****************************************************************************
  98:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****               DUMMY DEFINTIONS OF DEBUG LOG MACROS
  99:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** *****************************************************************************/
 100:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /*These definitions are included here to avoid compilation errors,
 101:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  since the DBG002 app is not part of the project. All the macros are defined
 102:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  as empty*/ 
 103:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifndef _DBG002_H_
 104:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 105:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_RegisterCallBack(A,B,C)
 106:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_I(e) 
 107:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_IG(e,g) 
 108:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_IH(e,h) 
 109:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_IP(e,p) 
 110:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_IGH(e,g,h) 
 111:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_IGP(e,g,p) 
 112:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_IHP(e,h,p) 
 113:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_IGHP(e,g,h,p) 
 114:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_N(e) 
 115:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_NG(e,g) 
 116:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_NH(e,h) 
 117:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_NP(e,p) 
 118:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_NGH(e,g,h) 
 119:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_NGP(e,g,p) 
 120:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_NHP(e,h,p) 
 121:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_NGHP(e,g,h,p) 
 122:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_ID(e) 
 123:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_IS(e) 
 124:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_ISG(e,g) 
 125:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_SAFETY_CRITICAL(groupid,messageid,length,value)
 126:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_CRITICAL(groupid,messageid,length,value)
 127:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_ERROR(groupid,messageid,length,value)
 128:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_WARNING(groupid,messageid,length,value)
 129:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_INFO(groupid,messageid,length,value)
 130:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_TRACE(groupid,messageid,length,value)
 131:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_FUNCTION_ENTRY(GID, Status) 
 132:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define DBG002_FUNCTION_EXIT(GID, Status) 
 133:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 134:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif/* End of defintions of dummy Debug Log macros*/
 135:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 136:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @addtogoup Ethernet_privateparam
 137:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @ {
 138:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
 139:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 140:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /** Rx DMA Descriptot List */
 141:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** extern DmaDesc Eth_RxDMADescList[RECEIVE_DESC_SIZE];
 142:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 143:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /** Tx DMA Descriptot List */
 144:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** extern DmaDesc Eth_TxDMADescList[TRANSMIT_DESC_SIZE];
 145:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 146:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /* WIPRO: We do not need AV support in our driver */
 147:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 148:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define APP_GID            DBG002_GID_ETH001
 149:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 150:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef AVB_SUPPORT
 151:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //#define IOCTL_AVB_SET_CONFIG SIOCDEVPRIVATE+7
 152:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //#define IOCTL_AVB_RUN_TEST   SIOCDEVPRIVATE+8
 153:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //#define IOCTL_AVB_GET_RESULT SIOCDEVPRIVATE+9
 154:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 155:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static u32 global_avb_debug_enable;
 156:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static u32 global_avb_tx_count_debug[3];
 157:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 158:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define IOCTL_AVB_TEST     SIOCDEVPRIVATE+7
 159:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define AVB_SET_CONFIG     0x00000001
 160:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define AVB_CONFIG_HW      0x00000002
 161:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define AVB_RUN_TEST       0x00000003
 162:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define AVB_GET_RESULT     0x00000004
 163:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define AVB_DEBUG_ENABLE   0x00000005
 164:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define AVB_DEBUG_DISABLE  0x00000006
 165:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define AVB_TX_FRAMES      0x00000007
 166:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 167:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static struct timer_list synopGMAC_AVB_test_timer;
 168:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 169:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define FRAME_PATTERN_CH2   0xAAAAAAAA
 170:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define FRAME_PATTERN_CH1   0x55555555
 171:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #define FRAME_PATTERN_CH0   0x11223344
 172:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 173:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static int frame_header_ch2[] = {
 174:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x73560D00, //   DST: 00:0D:56:73:D0:F3
 175:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x5500F3D0, //   SRC: 00:55:7B:B5:7D:F7
 176:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0xF77DB57B,
 177:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 178:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x00A00081 //   Eth type: 0x8100 VID = 0x0000 CFI=0 PCP =5
 179:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                    //   AVTYPE is read from the #define and used while creating a frame 
 180:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         
 181:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** };
 182:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static int frame_header_ch1[] = {
 183:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x73560D00, //   DST: 00:0D:56:73:D0:F3
 184:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x5500F3D0, //   SRC: 00:55:7B:B5:7D:F7
 185:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0xF77DB57B,
 186:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 187:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x00800081  //   Eth type: 0x8100 VID = 0x0000 CFI=0 PCP =4
 188:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     //   AVTYPE is read from the #define and used while creating a frame 
 189:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** };
 190:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static int frame_header_ch0[] = { //BEST EFFORT ETHERNET HEADER
 191:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x73560D00, //   DST: 00:0D:56:73:D0:F3
 192:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x5500F3D0, //   SRC: 00:55:7B:B5:7D:F7
 193:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0xF77DB57B,
 194:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 195:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         0x00000008  //   Eth type: 0x0800        
 196:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** };
 197:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 198:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
 199:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 200:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /* These are the global pointers for their respective structures */
 201:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** extern synopGMACdevice	          *synopGMACdev;
 202:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 203:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef AVB_SUPPORT
 204:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** extern synopGMACavbStruct         *synopGMACavb;
 205:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
 206:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 207:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** extern u32 GMAC_Power_down;
 208:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 209:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static __INLINE int is_valid_ether_addr(const unsigned char *MacAddr);
 210:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 211:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @}
 212:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
 213:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 214:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 215:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @addtogroup Ethernet_privatefunc
 216:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @{
 217:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
 218:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 219:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** status_t synopGMAC_IsEtherAddrsValid(unsigned char* MacAddress)
 220:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
  28              		.loc 1 220 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 221:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    status_t Status = DAVEApp_SUCCESS;
  44              		.loc 1 221 0
  45 0008 4FF00003 		mov	r3, #0
  46 000c FB60     		str	r3, [r7, #12]
 222:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    
 223:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    if(!is_valid_ether_addr((unsigned char*)MacAddress))
  47              		.loc 1 223 0
  48 000e 7868     		ldr	r0, [r7, #4]
  49 0010 FFF7FEFF 		bl	is_valid_ether_addr
  50 0014 0346     		mov	r3, r0
  51 0016 002B     		cmp	r3, #0
  52 0018 02D1     		bne	.L2
 224:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    {
 225:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     Status = ETH_INVALID_MAC_ADDR;
  53              		.loc 1 225 0
  54 001a 4FF00803 		mov	r3, #8
  55 001e FB60     		str	r3, [r7, #12]
  56              	.L2:
 226:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    }
 227:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    return Status;
  57              		.loc 1 227 0
  58 0020 FB68     		ldr	r3, [r7, #12]
 228:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
  59              		.loc 1 228 0
  60 0022 1846     		mov	r0, r3
  61 0024 07F11007 		add	r7, r7, #16
  62 0028 BD46     		mov	sp, r7
  63 002a 80BD     		pop	{r7, pc}
  64              		.cfi_endproc
  65              	.LFE112:
  67              		.section	.text.synopGMAC_powerup_mac,"ax",%progbits
  68              		.align	2
  69              		.global	synopGMAC_powerup_mac
  70              		.thumb
  71              		.thumb_func
  73              	synopGMAC_powerup_mac:
  74              	.LFB113:
 229:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 230:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 231:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 232:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 233:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function used to power up the GMAC.
 234:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] gmacdev pointer to GMAC device structure.
 235:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
 236:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \return returns void.
 237:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
 238:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** void synopGMAC_powerup_mac (synopGMACdevice *gmacdev)
 239:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
  75              		.loc 1 239 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 8
  78              		@ frame_needed = 1, uses_anonymous_args = 0
  79 0000 80B5     		push	{r7, lr}
  80              	.LCFI3:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 7, -8
  83              		.cfi_offset 14, -4
  84 0002 82B0     		sub	sp, sp, #8
  85              	.LCFI4:
  86              		.cfi_def_cfa_offset 16
  87 0004 00AF     		add	r7, sp, #0
  88              	.LCFI5:
  89              		.cfi_def_cfa_register 7
  90 0006 7860     		str	r0, [r7, #4]
 240:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   GMAC_Power_down = 0;  // Let ISR know that MAC is out of power down now
  91              		.loc 1 240 0
  92 0008 40F20003 		movw	r3, #:lower16:GMAC_Power_down
  93 000c C0F20003 		movt	r3, #:upper16:GMAC_Power_down
  94 0010 4FF00002 		mov	r2, #0
  95 0014 1A60     		str	r2, [r3, #0]
 241:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 242:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if (synopGMAC_is_magic_packet_received(gmacdev))
  96              		.loc 1 242 0
  97 0016 7868     		ldr	r0, [r7, #4]
  98 0018 FFF7FEFF 		bl	synopGMAC_is_magic_packet_received
 243:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 244:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("GMAC wokeup due to Magic Pkt Received\n");
 245:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 246:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 247:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if (synopGMAC_is_wakeup_frame_received(gmacdev))
  99              		.loc 1 247 0
 100 001c 7868     		ldr	r0, [r7, #4]
 101 001e FFF7FEFF 		bl	synopGMAC_is_wakeup_frame_received
 248:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 249:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("GMAC wokeup due to Wakeup Frame Received\n");
 250:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 251:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 252:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* Disable the assertion of PMT interrupt */
 253:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_pmt_int_disable(gmacdev);
 102              		.loc 1 253 0
 103 0022 7868     		ldr	r0, [r7, #4]
 104 0024 FFF7FEFF 		bl	synopGMAC_pmt_int_disable
 254:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 255:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* Enable the mac and Dma rx and tx paths */
 256:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_rx_enable(gmacdev);
 105              		.loc 1 256 0
 106 0028 7868     		ldr	r0, [r7, #4]
 107 002a FFF7FEFF 		bl	synopGMAC_rx_enable
 257:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 258:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_enable_dma_rx(gmacdev);
 108              		.loc 1 258 0
 109 002e 7868     		ldr	r0, [r7, #4]
 110 0030 FFF7FEFF 		bl	synopGMAC_enable_dma_rx
 259:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 260:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_tx_enable(gmacdev);
 111              		.loc 1 260 0
 112 0034 7868     		ldr	r0, [r7, #4]
 113 0036 FFF7FEFF 		bl	synopGMAC_tx_enable
 261:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 262:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_enable_dma_tx(gmacdev);
 114              		.loc 1 262 0
 115 003a 7868     		ldr	r0, [r7, #4]
 116 003c FFF7FEFF 		bl	synopGMAC_enable_dma_tx
 263:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 264:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return;
 117              		.loc 1 264 0
 118 0040 00BF     		nop
 265:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 119              		.loc 1 265 0
 120 0042 07F10807 		add	r7, r7, #8
 121 0046 BD46     		mov	sp, r7
 122 0048 80BD     		pop	{r7, pc}
 123              		.cfi_endproc
 124              	.LFE113:
 126 004a 00BF     		.section	.text.synopGMAC_cable_unplug_function,"ax",%progbits
 127              		.align	2
 128              		.global	synopGMAC_cable_unplug_function
 129              		.thumb
 130              		.thumb_func
 132              	synopGMAC_cable_unplug_function:
 133              	.LFB114:
 266:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 267:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef LINUX_CODE
 268:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 269:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function used to power down the GMAC.
 270:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] pointer to GMAC device structure.
 271:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \return returns void.
 272:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \note This function is tightly coupled with IOCTL Calls.
 273:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \callgraph
 274:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
 275:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static void synopGMAC_powerdown_mac(synopGMACdevice *gmacdev)
 276:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 277:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR0("Put the GMAC to power down mode..\n");
 278:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 279:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   // Disable the Dma engines in tx path
 280:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   GMAC_Power_down = 1;  // Let ISR know that Mac is going to be in the power down mode
 281:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_disable_dma_tx(gmacdev);
 282:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 283:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   plat_delay(10000);    //allow any pending transmission to complete
 284:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 285:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   // Disable the Mac for both tx and rx
 286:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_tx_disable(gmacdev);
 287:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_rx_disable(gmacdev);
 288:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 289:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   plat_delay(10000);     //Allow any pending buffer to be read by host
 290:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 291:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //Disable the Dma in rx path
 292:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_disable_dma_rx(gmacdev);
 293:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 294:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //enable the power down mode
 295:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //synopGMAC_pmt_unicast_enable(gmacdev);
 296:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 297:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //prepare the gmac for magic packet reception and wake up frame reception
 298:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_magic_packet_enable(gmacdev);
 299:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_write_wakeup_frame_register(gmacdev, synopGMAC_wakeup_filter_config3);
 300:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 301:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_wakeup_frame_enable(gmacdev);
 302:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 303:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //gate the application and transmit clock inputs to the code. This is not done in this driver :).
 304:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 305:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //enable the Mac for reception
 306:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_rx_enable(gmacdev);
 307:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 308:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //Enable the assertion of PMT interrupt
 309:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_pmt_int_enable(gmacdev);
 310:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 311:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //enter the power down mode
 312:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_power_down_enable(gmacdev);
 313:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 314:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return;
 315:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 316:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
 317:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 318:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 319:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function used to detect the cable plugging and unplugging.
 320:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * This function gets scheduled once in every second and polls
 321:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * the PHY register for network cable plug/unplug. Once the
 322:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * connection is back the GMAC device is configured as per
 323:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * new Duplex mode and Speed of the connection.
 324:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
 325:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] synopGMACdev Pointer to device specific structure.
 326:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
 327:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @return void.
 328:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
 329:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
 330:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** void synopGMAC_cable_unplug_function (void *synopGMACdev)
 331:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 134              		.loc 1 331 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 16
 137              		@ frame_needed = 1, uses_anonymous_args = 0
 138 0000 80B5     		push	{r7, lr}
 139              	.LCFI6:
 140              		.cfi_def_cfa_offset 8
 141              		.cfi_offset 7, -8
 142              		.cfi_offset 14, -4
 143 0002 84B0     		sub	sp, sp, #16
 144              	.LCFI7:
 145              		.cfi_def_cfa_offset 24
 146 0004 00AF     		add	r7, sp, #0
 147              	.LCFI8:
 148              		.cfi_def_cfa_register 7
 149 0006 7860     		str	r0, [r7, #4]
 332:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* <<<DD_ETH_PORT_9>>> */
 333:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   status_t Status = DAVEApp_SUCCESS;
 150              		.loc 1 333 0
 151 0008 4FF00003 		mov	r3, #0
 152 000c FB60     		str	r3, [r7, #12]
 334:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 335:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice *GMACdev = (synopGMACdevice *)synopGMACdev;
 153              		.loc 1 335 0
 154 000e 7B68     		ldr	r3, [r7, #4]
 155 0010 BB60     		str	r3, [r7, #8]
 336:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 337:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* Check if PHY Link is up */
 338:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if( PHY_IsLinkUP() == FALSE)
 156              		.loc 1 338 0
 157 0012 FFF7FEFF 		bl	PHY_IsLinkUP
 158 0016 0346     		mov	r3, r0
 159 0018 002B     		cmp	r3, #0
 160 001a 14D1     		bne	.L7
 339:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 340:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("No Link: \n");
 341:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     GMACdev->LinkState = 0;
 161              		.loc 1 341 0
 162 001c BB68     		ldr	r3, [r7, #8]
 163 001e 4FF00002 		mov	r2, #0
 164 0022 C3F8A820 		str	r2, [r3, #168]
 342:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     GMACdev->DuplexMode = 0;
 165              		.loc 1 342 0
 166 0026 BB68     		ldr	r3, [r7, #8]
 167 0028 4FF00002 		mov	r2, #0
 168 002c C3F8AC20 		str	r2, [r3, #172]
 343:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     GMACdev->Speed = 0;
 169              		.loc 1 343 0
 170 0030 BB68     		ldr	r3, [r7, #8]
 171 0032 4FF00002 		mov	r2, #0
 172 0036 C3F8B020 		str	r2, [r3, #176]
 344:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     GMACdev->LoopBackMode = 0;
 173              		.loc 1 344 0
 174 003a BB68     		ldr	r3, [r7, #8]
 175 003c 4FF00002 		mov	r2, #0
 176 0040 C3F8B420 		str	r2, [r3, #180]
 177 0044 0DE0     		b	.L6
 178              	.L7:
 345:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 346:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 347:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 348:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Link UP: \n");
 349:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(!GMACdev->LinkState)
 179              		.loc 1 349 0
 180 0046 BB68     		ldr	r3, [r7, #8]
 181 0048 D3F8A830 		ldr	r3, [r3, #168]
 182 004c 002B     		cmp	r3, #0
 183 004e 08D1     		bne	.L6
 350:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 351:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       Status = PHY_InitializeDevice();
 184              		.loc 1 351 0
 185 0050 FFF7FEFF 		bl	PHY_InitializeDevice
 186 0054 F860     		str	r0, [r7, #12]
 352:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if (Status != DAVEApp_SUCCESS)
 353:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
 354:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     	  DBG002_WARNING(APP_GID, Status, 0, NULL);
 355:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
 356:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_mac_init(GMACdev);
 187              		.loc 1 356 0
 188 0056 B868     		ldr	r0, [r7, #8]
 189 0058 FFF7FEFF 		bl	synopGMAC_mac_init
 357:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_promisc_enable(GMACdev);
 190              		.loc 1 357 0
 191 005c B868     		ldr	r0, [r7, #8]
 192 005e FFF7FEFF 		bl	synopGMAC_promisc_enable
 193              	.L6:
 358:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 359:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 360:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 194              		.loc 1 360 0
 195 0062 07F11007 		add	r7, r7, #16
 196 0066 BD46     		mov	sp, r7
 197 0068 80BD     		pop	{r7, pc}
 198              		.cfi_endproc
 199              	.LFE114:
 201 006a 00BF     		.section	.text.synopGMAC_setup_rx_desc_queue,"ax",%progbits
 202              		.align	2
 203              		.global	synopGMAC_setup_rx_desc_queue
 204              		.thumb
 205              		.thumb_func
 207              	synopGMAC_setup_rx_desc_queue:
 208              	.LFB115:
 361:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 362:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 363:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 364:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This sets up the receive Descriptor queue in ring or chain mode.
 365:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function is tightly coupled to the platform and operating system
 366:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * Device is interested only after the descriptors are setup. Therefore this function
 367:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * is not included in the device driver API. This function should be treated as an
 368:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * example code to design the descriptor structures in ring mode or chain mode.
 369:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function depends on the pcidev structure for allocation of consistent dma-able memory in c
 370:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This limitation is due to the fact that linux uses pci structure to allocate a dmable memory
 371:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Allocates the memory for the descriptors.
 372:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Initialize the Busy and Next descriptors indices to 0(Indicating first descriptor).
 373:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Initialize the Busy and Next descriptors to first descriptor address.
 374:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *   - Initialize the last descriptor with the endof ring in case of ring mode.
 375:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Initialize the descriptors in chain mode.
 376:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 377:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] gmacdev pointer to synopGMACdevice.
 378:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] no_of_desc number of descriptor expected in rx descriptor queue.
 379:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] desc_mode whether descriptors to be created in RING mode or CHAIN mode.
 380:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 381:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @return 0 upon success. Error code upon failure.
 382:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 383:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * \note This function fails if allocation fails for required number of descriptors in Ring mode, 
 384:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  function returns -ESYNOPGMACNOMEM in the process of descriptor chain creation. once returned f
 385:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  user should for gmacdev->RxDescCount to see how many descriptors are there in the chain. Shoul
 386:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  only if the number of descriptors in the chain meets the requirements
 387:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   */
 388:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** s32 synopGMAC_setup_rx_desc_queue(synopGMACdevice * gmacdev, u32 no_of_desc, u32 desc_mode)
 389:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 209              		.loc 1 389 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 32
 212              		@ frame_needed = 1, uses_anonymous_args = 0
 213 0000 80B5     		push	{r7, lr}
 214              	.LCFI9:
 215              		.cfi_def_cfa_offset 8
 216              		.cfi_offset 7, -8
 217              		.cfi_offset 14, -4
 218 0002 88B0     		sub	sp, sp, #32
 219              	.LCFI10:
 220              		.cfi_def_cfa_offset 40
 221 0004 00AF     		add	r7, sp, #0
 222              	.LCFI11:
 223              		.cfi_def_cfa_register 7
 224 0006 F860     		str	r0, [r7, #12]
 225 0008 B960     		str	r1, [r7, #8]
 226 000a 7A60     		str	r2, [r7, #4]
 390:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* <<<DD_ETH_PORT_10>>> */
 391:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   s32 i;
 392:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   DmaDesc *first_desc = NULL;
 227              		.loc 1 392 0
 228 000c 4FF00003 		mov	r3, #0
 229 0010 BB61     		str	r3, [r7, #24]
 393:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   DmaDesc *second_desc = NULL;
 230              		.loc 1 393 0
 231 0012 4FF00003 		mov	r3, #0
 232 0016 7B61     		str	r3, [r7, #20]
 394:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   DmaDesc *temp_desc = NULL;
 233              		.loc 1 394 0
 234 0018 4FF00003 		mov	r3, #0
 235 001c 3B61     		str	r3, [r7, #16]
 395:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //dma_addr_t dma_addr;
 396:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 397:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->RxDescCount = 0;
 236              		.loc 1 397 0
 237 001e FB68     		ldr	r3, [r7, #12]
 238 0020 4FF00002 		mov	r2, #0
 239 0024 9A62     		str	r2, [r3, #40]
 398:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 399:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(desc_mode == RINGMODE)
 240              		.loc 1 399 0
 241 0026 7B68     		ldr	r3, [r7, #4]
 242 0028 012B     		cmp	r3, #1
 243 002a 34D1     		bne	.L10
 400:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 401:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->RxDescCount = no_of_desc;
 244              		.loc 1 401 0
 245 002c FB68     		ldr	r3, [r7, #12]
 246 002e BA68     		ldr	r2, [r7, #8]
 247 0030 9A62     		str	r2, [r3, #40]
 402:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->RxDesc      = Eth_RxDMADescList;
 248              		.loc 1 402 0
 249 0032 FA68     		ldr	r2, [r7, #12]
 250 0034 40F20003 		movw	r3, #:lower16:Eth_RxDMADescList
 251 0038 C0F20003 		movt	r3, #:upper16:Eth_RxDMADescList
 252 003c D361     		str	r3, [r2, #28]
 403:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->RxDescDma   = (dma_addr_t )Eth_RxDMADescList;
 253              		.loc 1 403 0
 254 003e 40F20003 		movw	r3, #:lower16:Eth_RxDMADescList
 255 0042 C0F20003 		movt	r3, #:upper16:Eth_RxDMADescList
 256 0046 FA68     		ldr	r2, [r7, #12]
 257 0048 5361     		str	r3, [r2, #20]
 404:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 405:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 258              		.loc 1 405 0
 259 004a 4FF00003 		mov	r3, #0
 260 004e FB61     		str	r3, [r7, #28]
 261 0050 1BE0     		b	.L11
 262              	.L12:
 406:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 407:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_rx_desc_init_ring(gmacdev->RxDesc + i, i == gmacdev->RxDescCount-1);
 263              		.loc 1 407 0 discriminator 2
 264 0052 FB68     		ldr	r3, [r7, #12]
 265 0054 D969     		ldr	r1, [r3, #28]
 266 0056 FA69     		ldr	r2, [r7, #28]
 267 0058 1346     		mov	r3, r2
 268 005a 4FEA8303 		lsl	r3, r3, #2
 269 005e 9B18     		adds	r3, r3, r2
 270 0060 4FEAC303 		lsl	r3, r3, #3
 271 0064 CA18     		adds	r2, r1, r3
 272 0066 F969     		ldr	r1, [r7, #28]
 273 0068 FB68     		ldr	r3, [r7, #12]
 274 006a 9B6A     		ldr	r3, [r3, #40]
 275 006c 03F1FF33 		add	r3, r3, #-1
 276 0070 9942     		cmp	r1, r3
 277 0072 14BF     		ite	ne
 278 0074 0023     		movne	r3, #0
 279 0076 0123     		moveq	r3, #1
 280 0078 DBB2     		uxtb	r3, r3
 281 007a 1046     		mov	r0, r2
 282 007c 1946     		mov	r1, r3
 283 007e FFF7FEFF 		bl	synopGMAC_rx_desc_init_ring
 405:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 284              		.loc 1 405 0 discriminator 2
 285 0082 FB69     		ldr	r3, [r7, #28]
 286 0084 03F10103 		add	r3, r3, #1
 287 0088 FB61     		str	r3, [r7, #28]
 288              	.L11:
 405:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 289              		.loc 1 405 0 is_stmt 0 discriminator 1
 290 008a FA69     		ldr	r2, [r7, #28]
 291 008c FB68     		ldr	r3, [r7, #12]
 292 008e 9B6A     		ldr	r3, [r3, #40]
 293 0090 9A42     		cmp	r2, r3
 294 0092 DED3     		bcc	.L12
 405:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 295              		.loc 1 405 0
 296 0094 51E0     		b	.L13
 297              	.L10:
 408:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 409:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 410:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 411:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 412:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->RxDesc       = Eth_RxDMADescList;
 298              		.loc 1 412 0 is_stmt 1
 299 0096 FA68     		ldr	r2, [r7, #12]
 300 0098 40F20003 		movw	r3, #:lower16:Eth_RxDMADescList
 301 009c C0F20003 		movt	r3, #:upper16:Eth_RxDMADescList
 302 00a0 D361     		str	r3, [r2, #28]
 413:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->RxDescDma    = (dma_addr_t)Eth_RxDMADescList;
 303              		.loc 1 413 0
 304 00a2 40F20003 		movw	r3, #:lower16:Eth_RxDMADescList
 305 00a6 C0F20003 		movt	r3, #:upper16:Eth_RxDMADescList
 306 00aa FA68     		ldr	r2, [r7, #12]
 307 00ac 5361     		str	r3, [r2, #20]
 414:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 415:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Rx===============================================================Rx\n");
 416:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 417:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     first_desc->buffer2   = gmacdev->RxDescDma;
 308              		.loc 1 417 0
 309 00ae FB68     		ldr	r3, [r7, #12]
 310 00b0 5A69     		ldr	r2, [r3, #20]
 311 00b2 BB69     		ldr	r3, [r7, #24]
 312 00b4 DA60     		str	r2, [r3, #12]
 418:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     first_desc->data2     = (u32) gmacdev->RxDesc;
 313              		.loc 1 418 0
 314 00b6 FB68     		ldr	r3, [r7, #12]
 315 00b8 DB69     		ldr	r3, [r3, #28]
 316 00ba 1A46     		mov	r2, r3
 317 00bc BB69     		ldr	r3, [r7, #24]
 318 00be 5A62     		str	r2, [r3, #36]
 419:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 420:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->RxDescCount = 1;
 319              		.loc 1 420 0
 320 00c0 FB68     		ldr	r3, [r7, #12]
 321 00c2 4FF00102 		mov	r2, #1
 322 00c6 9A62     		str	r2, [r3, #40]
 421:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 422:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     //dma_addr  =   (dma_addr_t)Eth_RxDMADescList;
 423:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     temp_desc = (DmaDesc *)Eth_RxDMADescList;
 323              		.loc 1 423 0
 324 00c8 40F20003 		movw	r3, #:lower16:Eth_RxDMADescList
 325 00cc C0F20003 		movt	r3, #:upper16:Eth_RxDMADescList
 326 00d0 3B61     		str	r3, [r7, #16]
 424:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 425:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < (no_of_desc-1); i++)
 327              		.loc 1 425 0
 328 00d2 4FF00003 		mov	r3, #0
 329 00d6 FB61     		str	r3, [r7, #28]
 330 00d8 26E0     		b	.L14
 331              	.L15:
 426:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 427:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       first_desc->buffer2  = (dma_addr_t) (temp_desc + i);
 332              		.loc 1 427 0 discriminator 2
 333 00da FA69     		ldr	r2, [r7, #28]
 334 00dc 1346     		mov	r3, r2
 335 00de 4FEA8303 		lsl	r3, r3, #2
 336 00e2 9B18     		adds	r3, r3, r2
 337 00e4 4FEAC303 		lsl	r3, r3, #3
 338 00e8 3A69     		ldr	r2, [r7, #16]
 339 00ea D318     		adds	r3, r2, r3
 340 00ec 1A46     		mov	r2, r3
 341 00ee BB69     		ldr	r3, [r7, #24]
 342 00f0 DA60     		str	r2, [r3, #12]
 428:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       first_desc->data2    = (u32)second_desc;
 343              		.loc 1 428 0 discriminator 2
 344 00f2 7A69     		ldr	r2, [r7, #20]
 345 00f4 BB69     		ldr	r3, [r7, #24]
 346 00f6 5A62     		str	r2, [r3, #36]
 429:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 430:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       second_desc->buffer2 = gmacdev->RxDescDma;
 347              		.loc 1 430 0 discriminator 2
 348 00f8 FB68     		ldr	r3, [r7, #12]
 349 00fa 5A69     		ldr	r2, [r3, #20]
 350 00fc 7B69     		ldr	r3, [r7, #20]
 351 00fe DA60     		str	r2, [r3, #12]
 431:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       second_desc->data2   = (u32)gmacdev->RxDesc;
 352              		.loc 1 431 0 discriminator 2
 353 0100 FB68     		ldr	r3, [r7, #12]
 354 0102 DB69     		ldr	r3, [r3, #28]
 355 0104 1A46     		mov	r2, r3
 356 0106 7B69     		ldr	r3, [r7, #20]
 357 0108 5A62     		str	r2, [r3, #36]
 432:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 433:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_rx_desc_init_chain(first_desc);
 358              		.loc 1 433 0 discriminator 2
 359 010a B869     		ldr	r0, [r7, #24]
 360 010c FFF7FEFF 		bl	synopGMAC_rx_desc_init_chain
 434:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       gmacdev->RxDescCount += 1;
 361              		.loc 1 434 0 discriminator 2
 362 0110 FB68     		ldr	r3, [r7, #12]
 363 0112 9B6A     		ldr	r3, [r3, #40]
 364 0114 03F10102 		add	r2, r3, #1
 365 0118 FB68     		ldr	r3, [r7, #12]
 366 011a 9A62     		str	r2, [r3, #40]
 435:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       first_desc = second_desc;
 367              		.loc 1 435 0 discriminator 2
 368 011c 7B69     		ldr	r3, [r7, #20]
 369 011e BB61     		str	r3, [r7, #24]
 425:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < (no_of_desc-1); i++)
 370              		.loc 1 425 0 discriminator 2
 371 0120 FB69     		ldr	r3, [r7, #28]
 372 0122 03F10103 		add	r3, r3, #1
 373 0126 FB61     		str	r3, [r7, #28]
 374              	.L14:
 425:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < (no_of_desc-1); i++)
 375              		.loc 1 425 0 is_stmt 0 discriminator 1
 376 0128 FA69     		ldr	r2, [r7, #28]
 377 012a BB68     		ldr	r3, [r7, #8]
 378 012c 03F1FF33 		add	r3, r3, #-1
 379 0130 9A42     		cmp	r2, r3
 380 0132 D2D3     		bcc	.L15
 436:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 437:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 438:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMAC_rx_desc_init_chain(first_desc);
 381              		.loc 1 438 0 is_stmt 1
 382 0134 B869     		ldr	r0, [r7, #24]
 383 0136 FFF7FEFF 		bl	synopGMAC_rx_desc_init_chain
 384              	.L13:
 439:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Rx===================================================================Rx\n");
 440:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 441:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 442:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->RxNext = 0;
 385              		.loc 1 442 0
 386 013a FB68     		ldr	r3, [r7, #12]
 387 013c 4FF00002 		mov	r2, #0
 388 0140 DA63     		str	r2, [r3, #60]
 443:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->RxBusy = 0;
 389              		.loc 1 443 0
 390 0142 FB68     		ldr	r3, [r7, #12]
 391 0144 4FF00002 		mov	r2, #0
 392 0148 9A63     		str	r2, [r3, #56]
 444:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->RxNextDesc = gmacdev->RxDesc;
 393              		.loc 1 444 0
 394 014a FB68     		ldr	r3, [r7, #12]
 395 014c DA69     		ldr	r2, [r3, #28]
 396 014e FB68     		ldr	r3, [r7, #12]
 397 0150 DA64     		str	r2, [r3, #76]
 445:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->RxBusyDesc = gmacdev->RxDesc;
 398              		.loc 1 445 0
 399 0152 FB68     		ldr	r3, [r7, #12]
 400 0154 DA69     		ldr	r2, [r3, #28]
 401 0156 FB68     		ldr	r3, [r7, #12]
 402 0158 9A64     		str	r2, [r3, #72]
 446:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 447:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->BusyRxDesc   = 0;
 403              		.loc 1 447 0
 404 015a FB68     		ldr	r3, [r7, #12]
 405 015c 4FF00002 		mov	r2, #0
 406 0160 5A62     		str	r2, [r3, #36]
 448:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 449:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return -ESYNOPGMACNOERR;
 407              		.loc 1 449 0
 408 0162 4FF00003 		mov	r3, #0
 450:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 409              		.loc 1 450 0
 410 0166 1846     		mov	r0, r3
 411 0168 07F12007 		add	r7, r7, #32
 412 016c BD46     		mov	sp, r7
 413 016e 80BD     		pop	{r7, pc}
 414              		.cfi_endproc
 415              	.LFE115:
 417              		.section	.text.synopGMAC_giveup_rx_desc_queue,"ax",%progbits
 418              		.align	2
 419              		.global	synopGMAC_giveup_rx_desc_queue
 420              		.thumb
 421              		.thumb_func
 423              	synopGMAC_giveup_rx_desc_queue:
 424              	.LFB116:
 451:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 452:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 453:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This gives up the receive Descriptor queue in ring or chain mode.
 454:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function is tightly coupled to the platform and operating system
 455:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * Once device's Dma is stopped the memory descriptor memory and the buffer memory deallocation,
 456:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * is completely handled by the operating system, this call is kept outside the device driver Api.
 457:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function should be treated as an example code to de-allocate the descriptor structures in 
 458:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * and network buffer deallocation.
 459:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function depends on the pcidev structure for dma-able memory deallocation for both descrip
 460:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * network buffer memory under linux.
 461:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * The responsibility of this function is to
 462:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *     - Free the network buffer memory if any.
 463:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Fee the memory allocated for the descriptors.
 464:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 465:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] gmacdev pointer to synopGMACdevice.
 466:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] desc_mode whether descriptors to be created in RING mode or CHAIN mode.
 467:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 468:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @return void.
 469:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * \note No referece should be made to descriptors once this function is called. This function is 
 470:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   */
 471:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** void synopGMAC_giveup_rx_desc_queue (synopGMACdevice * gmacdev, u32 desc_mode)
 472:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 425              		.loc 1 472 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 48
 428              		@ frame_needed = 1, uses_anonymous_args = 0
 429 0000 90B5     		push	{r4, r7, lr}
 430              	.LCFI12:
 431              		.cfi_def_cfa_offset 12
 432              		.cfi_offset 4, -12
 433              		.cfi_offset 7, -8
 434              		.cfi_offset 14, -4
 435 0002 91B0     		sub	sp, sp, #68
 436              	.LCFI13:
 437              		.cfi_def_cfa_offset 80
 438 0004 04AF     		add	r7, sp, #16
 439              	.LCFI14:
 440              		.cfi_def_cfa 7, 64
 441 0006 7860     		str	r0, [r7, #4]
 442 0008 3960     		str	r1, [r7, #0]
 473:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   s32 i;
 474:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 475:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   DmaDesc *first_desc = NULL;
 443              		.loc 1 475 0
 444 000a 4FF00003 		mov	r3, #0
 445 000e BB62     		str	r3, [r7, #40]
 476:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //dma_addr_t first_desc_dma_addr;
 477:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 status;
 478:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   dma_addr_t dma_addr1;
 479:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   dma_addr_t dma_addr2;
 480:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 length1;
 481:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 length2;
 482:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data1;
 483:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data2;
 484:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 485:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(desc_mode == RINGMODE)
 446              		.loc 1 485 0
 447 0010 3B68     		ldr	r3, [r7, #0]
 448 0012 012B     		cmp	r3, #1
 449 0014 2FD1     		bne	.L18
 486:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 487:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 450              		.loc 1 487 0
 451 0016 4FF00003 		mov	r3, #0
 452 001a FB62     		str	r3, [r7, #44]
 453 001c 25E0     		b	.L19
 454              	.L22:
 488:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 489:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_get_desc_data(gmacdev->RxDesc + i, &status, &dma_addr1, &length1, &data1, &dma_addr
 455              		.loc 1 489 0
 456 001e 7B68     		ldr	r3, [r7, #4]
 457 0020 D969     		ldr	r1, [r3, #28]
 458 0022 FA6A     		ldr	r2, [r7, #44]
 459 0024 1346     		mov	r3, r2
 460 0026 4FEA8303 		lsl	r3, r3, #2
 461 002a 9B18     		adds	r3, r3, r2
 462 002c 4FEAC303 		lsl	r3, r3, #3
 463 0030 C818     		adds	r0, r1, r3
 464 0032 07F12401 		add	r1, r7, #36
 465 0036 07F12002 		add	r2, r7, #32
 466 003a 07F11803 		add	r3, r7, #24
 467 003e 07F11004 		add	r4, r7, #16
 468 0042 0094     		str	r4, [sp, #0]
 469 0044 07F11C04 		add	r4, r7, #28
 470 0048 0194     		str	r4, [sp, #4]
 471 004a 07F11404 		add	r4, r7, #20
 472 004e 0294     		str	r4, [sp, #8]
 473 0050 07F10C04 		add	r4, r7, #12
 474 0054 0394     		str	r4, [sp, #12]
 475 0056 FFF7FEFF 		bl	synopGMAC_get_desc_data
 490:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 491:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if((length1 != 0) && (data1 != 0))
 476              		.loc 1 491 0
 477 005a BB69     		ldr	r3, [r7, #24]
 478 005c 002B     		cmp	r3, #0
 492:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
 493:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //TR("(Ring mode) rx buffer1 %08x of size %d from %d rx descriptor is given back\n",data1, 
 494:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
 495:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 496:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if((length2 != 0) && (data2 != 0))
 479              		.loc 1 496 0
 480 005e 7B69     		ldr	r3, [r7, #20]
 481 0060 002B     		cmp	r3, #0
 487:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 482              		.loc 1 487 0
 483 0062 FB6A     		ldr	r3, [r7, #44]
 484 0064 03F10103 		add	r3, r3, #1
 485 0068 FB62     		str	r3, [r7, #44]
 486              	.L19:
 487:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 487              		.loc 1 487 0 is_stmt 0 discriminator 1
 488 006a FA6A     		ldr	r2, [r7, #44]
 489 006c 7B68     		ldr	r3, [r7, #4]
 490 006e 9B6A     		ldr	r3, [r3, #40]
 491 0070 9A42     		cmp	r2, r3
 492 0072 D4D3     		bcc	.L22
 487:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 493              		.loc 1 487 0
 494 0074 28E0     		b	.L23
 495              	.L18:
 497:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
 498:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //TR("(Ring mode) rx buffer2 %08x of size %d from %d rx descriptor is given back\n",data2, 
 499:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
 500:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 501:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 502:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 503:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 504:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("rx-------------------------------------------------------------------rx\n");
 505:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 506:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     first_desc          = gmacdev->RxDesc;
 496              		.loc 1 506 0 is_stmt 1
 497 0076 7B68     		ldr	r3, [r7, #4]
 498 0078 DB69     		ldr	r3, [r3, #28]
 499 007a BB62     		str	r3, [r7, #40]
 507:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     //first_desc_dma_addr = gmacdev->RxDescDma;
 508:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 509:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 500              		.loc 1 509 0
 501 007c 4FF00003 		mov	r3, #0
 502 0080 FB62     		str	r3, [r7, #44]
 503 0082 1CE0     		b	.L24
 504              	.L26:
 510:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 511:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_get_desc_data(first_desc, &status, &dma_addr1, &length1, &data1, &dma_addr2, &lengt
 505              		.loc 1 511 0
 506 0084 07F12401 		add	r1, r7, #36
 507 0088 07F12002 		add	r2, r7, #32
 508 008c 07F11803 		add	r3, r7, #24
 509 0090 07F11000 		add	r0, r7, #16
 510 0094 0090     		str	r0, [sp, #0]
 511 0096 07F11C00 		add	r0, r7, #28
 512 009a 0190     		str	r0, [sp, #4]
 513 009c 07F11400 		add	r0, r7, #20
 514 00a0 0290     		str	r0, [sp, #8]
 515 00a2 07F10C00 		add	r0, r7, #12
 516 00a6 0390     		str	r0, [sp, #12]
 517 00a8 B86A     		ldr	r0, [r7, #40]
 518 00aa FFF7FEFF 		bl	synopGMAC_get_desc_data
 512:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       //TR("%02d %08x %08x %08x %08x %08x %08x %08x\n",i,(u32)first_desc,first_desc->status,first_d
 513:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 514:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if((length1 != 0) && (data1 != 0))
 519              		.loc 1 514 0
 520 00ae BB69     		ldr	r3, [r7, #24]
 521 00b0 002B     		cmp	r3, #0
 515:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
 516:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //TR("(Chain mode) rx buffer1 %08x of size %d from %d rx descriptor is given back\n",data1,
 517:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
 518:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 519:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       first_desc = (DmaDesc *)data2;
 522              		.loc 1 519 0
 523 00b2 FB68     		ldr	r3, [r7, #12]
 524 00b4 BB62     		str	r3, [r7, #40]
 509:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 525              		.loc 1 509 0
 526 00b6 FB6A     		ldr	r3, [r7, #44]
 527 00b8 03F10103 		add	r3, r3, #1
 528 00bc FB62     		str	r3, [r7, #44]
 529              	.L24:
 509:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->RxDescCount; i++)
 530              		.loc 1 509 0 is_stmt 0 discriminator 1
 531 00be FA6A     		ldr	r2, [r7, #44]
 532 00c0 7B68     		ldr	r3, [r7, #4]
 533 00c2 9B6A     		ldr	r3, [r3, #40]
 534 00c4 9A42     		cmp	r2, r3
 535 00c6 DDD3     		bcc	.L26
 536              	.L23:
 520:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       //first_desc_dma_addr = dma_addr2;
 521:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 522:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 523:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("rx-------------------------------------------------------------------rx\n");
 524:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 525:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 526:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->RxDesc    = NULL;
 537              		.loc 1 526 0 is_stmt 1
 538 00c8 7B68     		ldr	r3, [r7, #4]
 539 00ca 4FF00002 		mov	r2, #0
 540 00ce DA61     		str	r2, [r3, #28]
 527:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->RxDescDma = 0;
 541              		.loc 1 527 0
 542 00d0 7B68     		ldr	r3, [r7, #4]
 543 00d2 4FF00002 		mov	r2, #0
 544 00d6 5A61     		str	r2, [r3, #20]
 528:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return;
 529:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 545              		.loc 1 529 0
 546 00d8 07F13407 		add	r7, r7, #52
 547 00dc BD46     		mov	sp, r7
 548 00de 90BD     		pop	{r4, r7, pc}
 549              		.cfi_endproc
 550              	.LFE116:
 552              		.section	.text.synopGMAC_setup_tx_desc_queue,"ax",%progbits
 553              		.align	2
 554              		.global	synopGMAC_setup_tx_desc_queue
 555              		.thumb
 556              		.thumb_func
 558              	synopGMAC_setup_tx_desc_queue:
 559              	.LFB117:
 530:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 531:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 532:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This sets up the transmit Descriptor queue in ring or chain mode.
 533:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function is tightly coupled to the platform and operating system
 534:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * Device is interested only after the descriptors are setup. Therefore this function
 535:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * is not included in the device driver API. This function should be treated as an
 536:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * example code to design the descriptor structures for ring mode or chain mode.
 537:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function depends on the pcidev structure for allocation consistent dma-able memory in case
 538:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This limitation is due to the fact that linux uses pci structure to allocate a dmable memory
 539:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Allocates the memory for the descriptors.
 540:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Initialize the Busy and Next descriptors indices to 0(Indicating first descriptor).
 541:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Initialize the Busy and Next descriptors to first descriptor address.
 542:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *   - Initialize the last descriptor with the endof ring in case of ring mode.
 543:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Initialize the descriptors in chain mode.
 544:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 545:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] gmacdev pointer to synopGMACdevice.
 546:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] no_of_desc number of descriptor expected in tx descriptor queue.
 547:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] desc_mode whether descriptors to be created in RING mode or CHAIN mode.
 548:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 549:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @return 0 upon success. Error code upon failure.
 550:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * \note This function fails if allocation fails for required number of descriptors in Ring mode, 
 551:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  function returns -ESYNOPGMACNOMEM in the process of descriptor chain creation. once returned f
 552:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  user should for gmacdev->TxDescCount to see how many descriptors are there in the chain. Shoul
 553:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  only if the number of descriptors in the chain meets the requirements
 554:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   */
 555:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 556:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** s32 synopGMAC_setup_tx_desc_queue(synopGMACdevice *gmacdev, u32 no_of_desc, u32 desc_mode)
 557:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 560              		.loc 1 557 0
 561              		.cfi_startproc
 562              		@ args = 0, pretend = 0, frame = 32
 563              		@ frame_needed = 1, uses_anonymous_args = 0
 564 0000 80B5     		push	{r7, lr}
 565              	.LCFI15:
 566              		.cfi_def_cfa_offset 8
 567              		.cfi_offset 7, -8
 568              		.cfi_offset 14, -4
 569 0002 88B0     		sub	sp, sp, #32
 570              	.LCFI16:
 571              		.cfi_def_cfa_offset 40
 572 0004 00AF     		add	r7, sp, #0
 573              	.LCFI17:
 574              		.cfi_def_cfa_register 7
 575 0006 F860     		str	r0, [r7, #12]
 576 0008 B960     		str	r1, [r7, #8]
 577 000a 7A60     		str	r2, [r7, #4]
 558:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* <<<DD_ETH_PORT_11>>> */
 559:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   s32 i;
 560:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 561:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   DmaDesc *first_desc = NULL;
 578              		.loc 1 561 0
 579 000c 4FF00003 		mov	r3, #0
 580 0010 BB61     		str	r3, [r7, #24]
 562:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   DmaDesc *second_desc = NULL;
 581              		.loc 1 562 0
 582 0012 4FF00003 		mov	r3, #0
 583 0016 7B61     		str	r3, [r7, #20]
 563:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 564:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   DmaDesc *temp_desc = NULL;
 584              		.loc 1 564 0
 585 0018 4FF00003 		mov	r3, #0
 586 001c 3B61     		str	r3, [r7, #16]
 565:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //dma_addr_t dma_addr;
 566:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 567:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->TxDescCount = 0;
 587              		.loc 1 567 0
 588 001e FB68     		ldr	r3, [r7, #12]
 589 0020 4FF00002 		mov	r2, #0
 590 0024 DA62     		str	r2, [r3, #44]
 568:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 569:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(desc_mode == RINGMODE)
 591              		.loc 1 569 0
 592 0026 7B68     		ldr	r3, [r7, #4]
 593 0028 012B     		cmp	r3, #1
 594 002a 34D1     		bne	.L29
 570:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 571:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->TxDescCount = no_of_desc;
 595              		.loc 1 571 0
 596 002c FB68     		ldr	r3, [r7, #12]
 597 002e BA68     		ldr	r2, [r7, #8]
 598 0030 DA62     		str	r2, [r3, #44]
 572:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->TxDesc      = Eth_TxDMADescList;
 599              		.loc 1 572 0
 600 0032 FA68     		ldr	r2, [r7, #12]
 601 0034 40F20003 		movw	r3, #:lower16:Eth_TxDMADescList
 602 0038 C0F20003 		movt	r3, #:upper16:Eth_TxDMADescList
 603 003c 9361     		str	r3, [r2, #24]
 573:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->TxDescDma   = (unsigned long)Eth_TxDMADescList;
 604              		.loc 1 573 0
 605 003e 40F20003 		movw	r3, #:lower16:Eth_TxDMADescList
 606 0042 C0F20003 		movt	r3, #:upper16:Eth_TxDMADescList
 607 0046 FA68     		ldr	r2, [r7, #12]
 608 0048 1361     		str	r3, [r2, #16]
 574:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 575:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->TxDescCount; i++)
 609              		.loc 1 575 0
 610 004a 4FF00003 		mov	r3, #0
 611 004e FB61     		str	r3, [r7, #28]
 612 0050 1BE0     		b	.L30
 613              	.L31:
 576:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 577:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_tx_desc_init_ring(gmacdev->TxDesc + i, i == gmacdev->TxDescCount-1);
 614              		.loc 1 577 0 discriminator 2
 615 0052 FB68     		ldr	r3, [r7, #12]
 616 0054 9969     		ldr	r1, [r3, #24]
 617 0056 FA69     		ldr	r2, [r7, #28]
 618 0058 1346     		mov	r3, r2
 619 005a 4FEA8303 		lsl	r3, r3, #2
 620 005e 9B18     		adds	r3, r3, r2
 621 0060 4FEAC303 		lsl	r3, r3, #3
 622 0064 CA18     		adds	r2, r1, r3
 623 0066 F969     		ldr	r1, [r7, #28]
 624 0068 FB68     		ldr	r3, [r7, #12]
 625 006a DB6A     		ldr	r3, [r3, #44]
 626 006c 03F1FF33 		add	r3, r3, #-1
 627 0070 9942     		cmp	r1, r3
 628 0072 14BF     		ite	ne
 629 0074 0023     		movne	r3, #0
 630 0076 0123     		moveq	r3, #1
 631 0078 DBB2     		uxtb	r3, r3
 632 007a 1046     		mov	r0, r2
 633 007c 1946     		mov	r1, r3
 634 007e FFF7FEFF 		bl	synopGMAC_tx_desc_init_ring
 575:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->TxDescCount; i++)
 635              		.loc 1 575 0 discriminator 2
 636 0082 FB69     		ldr	r3, [r7, #28]
 637 0084 03F10103 		add	r3, r3, #1
 638 0088 FB61     		str	r3, [r7, #28]
 639              	.L30:
 575:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->TxDescCount; i++)
 640              		.loc 1 575 0 is_stmt 0 discriminator 1
 641 008a FA69     		ldr	r2, [r7, #28]
 642 008c FB68     		ldr	r3, [r7, #12]
 643 008e DB6A     		ldr	r3, [r3, #44]
 644 0090 9A42     		cmp	r2, r3
 645 0092 DED3     		bcc	.L31
 575:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < gmacdev->TxDescCount; i++)
 646              		.loc 1 575 0
 647 0094 51E0     		b	.L32
 648              	.L29:
 578:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 579:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 580:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 581:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 582:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->TxDesc       = Eth_TxDMADescList;
 649              		.loc 1 582 0 is_stmt 1
 650 0096 FA68     		ldr	r2, [r7, #12]
 651 0098 40F20003 		movw	r3, #:lower16:Eth_TxDMADescList
 652 009c C0F20003 		movt	r3, #:upper16:Eth_TxDMADescList
 653 00a0 9361     		str	r3, [r2, #24]
 583:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->TxDescDma    = (dma_addr_t)Eth_TxDMADescList;
 654              		.loc 1 583 0
 655 00a2 40F20003 		movw	r3, #:lower16:Eth_TxDMADescList
 656 00a6 C0F20003 		movt	r3, #:upper16:Eth_TxDMADescList
 657 00aa FA68     		ldr	r2, [r7, #12]
 658 00ac 1361     		str	r3, [r2, #16]
 584:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 585:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Tx===================================================================Tx\n");
 586:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 587:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     first_desc->buffer2   = gmacdev->TxDescDma;
 659              		.loc 1 587 0
 660 00ae FB68     		ldr	r3, [r7, #12]
 661 00b0 1A69     		ldr	r2, [r3, #16]
 662 00b2 BB69     		ldr	r3, [r7, #24]
 663 00b4 DA60     		str	r2, [r3, #12]
 588:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     first_desc->data2     = (u32)gmacdev->TxDesc;
 664              		.loc 1 588 0
 665 00b6 FB68     		ldr	r3, [r7, #12]
 666 00b8 9B69     		ldr	r3, [r3, #24]
 667 00ba 1A46     		mov	r2, r3
 668 00bc BB69     		ldr	r3, [r7, #24]
 669 00be 5A62     		str	r2, [r3, #36]
 589:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 590:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     gmacdev->TxDescCount = 1;
 670              		.loc 1 590 0
 671 00c0 FB68     		ldr	r3, [r7, #12]
 672 00c2 4FF00102 		mov	r2, #1
 673 00c6 DA62     		str	r2, [r3, #44]
 591:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 592:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     //dma_addr  = (dma_addr_t)Eth_TxDMADescList;
 593:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     temp_desc = (DmaDesc *)Eth_TxDMADescList;
 674              		.loc 1 593 0
 675 00c8 40F20003 		movw	r3, #:lower16:Eth_TxDMADescList
 676 00cc C0F20003 		movt	r3, #:upper16:Eth_TxDMADescList
 677 00d0 3B61     		str	r3, [r7, #16]
 594:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 595:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < (no_of_desc-1); i++)
 678              		.loc 1 595 0
 679 00d2 4FF00003 		mov	r3, #0
 680 00d6 FB61     		str	r3, [r7, #28]
 681 00d8 26E0     		b	.L33
 682              	.L34:
 596:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 597:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       first_desc->buffer2 =  (dma_addr_t) (temp_desc + i);
 683              		.loc 1 597 0 discriminator 2
 684 00da FA69     		ldr	r2, [r7, #28]
 685 00dc 1346     		mov	r3, r2
 686 00de 4FEA8303 		lsl	r3, r3, #2
 687 00e2 9B18     		adds	r3, r3, r2
 688 00e4 4FEAC303 		lsl	r3, r3, #3
 689 00e8 3A69     		ldr	r2, [r7, #16]
 690 00ea D318     		adds	r3, r2, r3
 691 00ec 1A46     		mov	r2, r3
 692 00ee BB69     		ldr	r3, [r7, #24]
 693 00f0 DA60     		str	r2, [r3, #12]
 598:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       first_desc->data2    = (u32)second_desc;
 694              		.loc 1 598 0 discriminator 2
 695 00f2 7A69     		ldr	r2, [r7, #20]
 696 00f4 BB69     		ldr	r3, [r7, #24]
 697 00f6 5A62     		str	r2, [r3, #36]
 599:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 600:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       second_desc->buffer2 = gmacdev->TxDescDma;
 698              		.loc 1 600 0 discriminator 2
 699 00f8 FB68     		ldr	r3, [r7, #12]
 700 00fa 1A69     		ldr	r2, [r3, #16]
 701 00fc 7B69     		ldr	r3, [r7, #20]
 702 00fe DA60     		str	r2, [r3, #12]
 601:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       second_desc->data2   = (u32)gmacdev->TxDesc;
 703              		.loc 1 601 0 discriminator 2
 704 0100 FB68     		ldr	r3, [r7, #12]
 705 0102 9B69     		ldr	r3, [r3, #24]
 706 0104 1A46     		mov	r2, r3
 707 0106 7B69     		ldr	r3, [r7, #20]
 708 0108 5A62     		str	r2, [r3, #36]
 602:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 603:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_tx_desc_init_chain(first_desc);
 709              		.loc 1 603 0 discriminator 2
 710 010a B869     		ldr	r0, [r7, #24]
 711 010c FFF7FEFF 		bl	synopGMAC_tx_desc_init_chain
 604:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 605:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       gmacdev->TxDescCount += 1;
 712              		.loc 1 605 0 discriminator 2
 713 0110 FB68     		ldr	r3, [r7, #12]
 714 0112 DB6A     		ldr	r3, [r3, #44]
 715 0114 03F10102 		add	r2, r3, #1
 716 0118 FB68     		ldr	r3, [r7, #12]
 717 011a DA62     		str	r2, [r3, #44]
 606:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       first_desc = second_desc;
 718              		.loc 1 606 0 discriminator 2
 719 011c 7B69     		ldr	r3, [r7, #20]
 720 011e BB61     		str	r3, [r7, #24]
 595:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < (no_of_desc-1); i++)
 721              		.loc 1 595 0 discriminator 2
 722 0120 FB69     		ldr	r3, [r7, #28]
 723 0122 03F10103 		add	r3, r3, #1
 724 0126 FB61     		str	r3, [r7, #28]
 725              	.L33:
 595:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i = 0; i < (no_of_desc-1); i++)
 726              		.loc 1 595 0 is_stmt 0 discriminator 1
 727 0128 FA69     		ldr	r2, [r7, #28]
 728 012a BB68     		ldr	r3, [r7, #8]
 729 012c 03F1FF33 		add	r3, r3, #-1
 730 0130 9A42     		cmp	r2, r3
 731 0132 D2D3     		bcc	.L34
 607:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 608:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 609:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMAC_tx_desc_init_chain(first_desc);
 732              		.loc 1 609 0 is_stmt 1
 733 0134 B869     		ldr	r0, [r7, #24]
 734 0136 FFF7FEFF 		bl	synopGMAC_tx_desc_init_chain
 735              	.L32:
 610:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Tx===================================================================Tx\n");
 611:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 612:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 613:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->TxNext = 0;
 736              		.loc 1 613 0
 737 013a FB68     		ldr	r3, [r7, #12]
 738 013c 4FF00002 		mov	r2, #0
 739 0140 5A63     		str	r2, [r3, #52]
 614:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->TxBusy = 0;
 740              		.loc 1 614 0
 741 0142 FB68     		ldr	r3, [r7, #12]
 742 0144 4FF00002 		mov	r2, #0
 743 0148 1A63     		str	r2, [r3, #48]
 615:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->TxNextDesc = gmacdev->TxDesc;
 744              		.loc 1 615 0
 745 014a FB68     		ldr	r3, [r7, #12]
 746 014c 9A69     		ldr	r2, [r3, #24]
 747 014e FB68     		ldr	r3, [r7, #12]
 748 0150 5A64     		str	r2, [r3, #68]
 616:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->TxBusyDesc = gmacdev->TxDesc;
 749              		.loc 1 616 0
 750 0152 FB68     		ldr	r3, [r7, #12]
 751 0154 9A69     		ldr	r2, [r3, #24]
 752 0156 FB68     		ldr	r3, [r7, #12]
 753 0158 1A64     		str	r2, [r3, #64]
 617:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->BusyTxDesc  = 0;
 754              		.loc 1 617 0
 755 015a FB68     		ldr	r3, [r7, #12]
 756 015c 4FF00002 		mov	r2, #0
 757 0160 1A62     		str	r2, [r3, #32]
 618:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 619:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return -ESYNOPGMACNOERR;
 758              		.loc 1 619 0
 759 0162 4FF00003 		mov	r3, #0
 620:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 760              		.loc 1 620 0
 761 0166 1846     		mov	r0, r3
 762 0168 07F12007 		add	r7, r7, #32
 763 016c BD46     		mov	sp, r7
 764 016e 80BD     		pop	{r7, pc}
 765              		.cfi_endproc
 766              	.LFE117:
 768              		.section	.text.synopGMAC_giveup_tx_desc_queue,"ax",%progbits
 769              		.align	2
 770              		.global	synopGMAC_giveup_tx_desc_queue
 771              		.thumb
 772              		.thumb_func
 774              	synopGMAC_giveup_tx_desc_queue:
 775              	.LFB118:
 621:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 622:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
 623:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This gives up the transmit Descriptor queue in ring or chain mode.
 624:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function is tightly coupled to the platform and operating system
 625:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * Once device's Dma is stopped the memory descriptor memory and the buffer memory deallocation,
 626:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * is completely handled by the operating system, this call is kept outside the device driver Api.
 627:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * This function should be treated as an example code to de-allocate the descriptor structures in 
 628:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * and network buffer deallocation.
 629:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * The responsibility of this function is to
 630:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Free the network buffer memory if any.
 631:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *  - Fee the memory allocated for the descriptors.
 632:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 633:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] gmacdev pointer to synopGMACdevice.
 634:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @param[in] desc_mode Descriptor mode.
 635:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   *
 636:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * @return void
 637:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   * \note No reference should be made to descriptors once this function is called. This function is
 638:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   */
 639:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** void synopGMAC_giveup_tx_desc_queue(synopGMACdevice *gmacdev, u32 desc_mode)
 640:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 776              		.loc 1 640 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 48
 779              		@ frame_needed = 1, uses_anonymous_args = 0
 780 0000 90B5     		push	{r4, r7, lr}
 781              	.LCFI18:
 782              		.cfi_def_cfa_offset 12
 783              		.cfi_offset 4, -12
 784              		.cfi_offset 7, -8
 785              		.cfi_offset 14, -4
 786 0002 91B0     		sub	sp, sp, #68
 787              	.LCFI19:
 788              		.cfi_def_cfa_offset 80
 789 0004 04AF     		add	r7, sp, #16
 790              	.LCFI20:
 791              		.cfi_def_cfa 7, 64
 792 0006 7860     		str	r0, [r7, #4]
 793 0008 3960     		str	r1, [r7, #0]
 641:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   s32 i;
 642:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 643:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   DmaDesc *first_desc = NULL;
 794              		.loc 1 643 0
 795 000a 4FF00003 		mov	r3, #0
 796 000e BB62     		str	r3, [r7, #40]
 644:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //dma_addr_t first_desc_dma_addr;
 645:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 status;
 646:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   dma_addr_t dma_addr1;
 647:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   dma_addr_t dma_addr2;
 648:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 length1;
 649:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 length2;
 650:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data1;
 651:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data2;
 652:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 653:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(desc_mode == RINGMODE)
 797              		.loc 1 653 0
 798 0010 3B68     		ldr	r3, [r7, #0]
 799 0012 012B     		cmp	r3, #1
 800 0014 2FD1     		bne	.L37
 654:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 655:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i =0; i < gmacdev -> TxDescCount; i++)
 801              		.loc 1 655 0
 802 0016 4FF00003 		mov	r3, #0
 803 001a FB62     		str	r3, [r7, #44]
 804 001c 25E0     		b	.L38
 805              	.L41:
 656:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 657:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_get_desc_data(gmacdev->TxDesc + i,&status, &dma_addr1, &length1, &data1, &dma_addr2
 806              		.loc 1 657 0
 807 001e 7B68     		ldr	r3, [r7, #4]
 808 0020 9969     		ldr	r1, [r3, #24]
 809 0022 FA6A     		ldr	r2, [r7, #44]
 810 0024 1346     		mov	r3, r2
 811 0026 4FEA8303 		lsl	r3, r3, #2
 812 002a 9B18     		adds	r3, r3, r2
 813 002c 4FEAC303 		lsl	r3, r3, #3
 814 0030 C818     		adds	r0, r1, r3
 815 0032 07F12401 		add	r1, r7, #36
 816 0036 07F12002 		add	r2, r7, #32
 817 003a 07F11803 		add	r3, r7, #24
 818 003e 07F11004 		add	r4, r7, #16
 819 0042 0094     		str	r4, [sp, #0]
 820 0044 07F11C04 		add	r4, r7, #28
 821 0048 0194     		str	r4, [sp, #4]
 822 004a 07F11404 		add	r4, r7, #20
 823 004e 0294     		str	r4, [sp, #8]
 824 0050 07F10C04 		add	r4, r7, #12
 825 0054 0394     		str	r4, [sp, #12]
 826 0056 FFF7FEFF 		bl	synopGMAC_get_desc_data
 658:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 659:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if((length1 != 0) && (data1 != 0))
 827              		.loc 1 659 0
 828 005a BB69     		ldr	r3, [r7, #24]
 829 005c 002B     		cmp	r3, #0
 660:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
 661:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //TR("(Ring mode) tx buffer1 %08x of size %d from %d rx descriptor is given back\n",data1, 
 662:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
 663:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 664:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if((length2 != 0) && (data2 != 0))
 830              		.loc 1 664 0
 831 005e 7B69     		ldr	r3, [r7, #20]
 832 0060 002B     		cmp	r3, #0
 655:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i =0; i < gmacdev -> TxDescCount; i++)
 833              		.loc 1 655 0
 834 0062 FB6A     		ldr	r3, [r7, #44]
 835 0064 03F10103 		add	r3, r3, #1
 836 0068 FB62     		str	r3, [r7, #44]
 837              	.L38:
 655:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i =0; i < gmacdev -> TxDescCount; i++)
 838              		.loc 1 655 0 is_stmt 0 discriminator 1
 839 006a FA6A     		ldr	r2, [r7, #44]
 840 006c 7B68     		ldr	r3, [r7, #4]
 841 006e DB6A     		ldr	r3, [r3, #44]
 842 0070 9A42     		cmp	r2, r3
 843 0072 D4D3     		bcc	.L41
 655:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i =0; i < gmacdev -> TxDescCount; i++)
 844              		.loc 1 655 0
 845 0074 28E0     		b	.L42
 846              	.L37:
 665:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
 666:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //TR("(Ring mode) tx buffer2 %08x of size %d from %d rx descriptor is given back\n",data2, 
 667:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
 668:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 669:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 670:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     //TR("Memory allocated %08x for Tx Desriptors (ring) is given back\n",(u32)gmacdev->TxDesc);
 671:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 672:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 673:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
 674:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("tx-------------------------------------------------------------------tx\n");
 675:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 676:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     first_desc          = gmacdev->TxDesc;
 847              		.loc 1 676 0 is_stmt 1
 848 0076 7B68     		ldr	r3, [r7, #4]
 849 0078 9B69     		ldr	r3, [r3, #24]
 850 007a BB62     		str	r3, [r7, #40]
 677:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     //first_desc_dma_addr = gmacdev->TxDescDma;
 678:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 679:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i =0; i < gmacdev -> TxDescCount; i++)
 851              		.loc 1 679 0
 852 007c 4FF00003 		mov	r3, #0
 853 0080 FB62     		str	r3, [r7, #44]
 854 0082 1CE0     		b	.L43
 855              	.L45:
 680:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
 681:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_get_desc_data(first_desc, &status, &dma_addr1, &length1, &data1, &dma_addr2, &lengt
 856              		.loc 1 681 0
 857 0084 07F12401 		add	r1, r7, #36
 858 0088 07F12002 		add	r2, r7, #32
 859 008c 07F11803 		add	r3, r7, #24
 860 0090 07F11000 		add	r0, r7, #16
 861 0094 0090     		str	r0, [sp, #0]
 862 0096 07F11C00 		add	r0, r7, #28
 863 009a 0190     		str	r0, [sp, #4]
 864 009c 07F11400 		add	r0, r7, #20
 865 00a0 0290     		str	r0, [sp, #8]
 866 00a2 07F10C00 		add	r0, r7, #12
 867 00a6 0390     		str	r0, [sp, #12]
 868 00a8 B86A     		ldr	r0, [r7, #40]
 869 00aa FFF7FEFF 		bl	synopGMAC_get_desc_data
 682:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       // TR("%02d %08x %08x %08x %08x %08x %08x %08x\n",i,(u32)first_desc,first_desc->status,first_
 683:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 684:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if((length1 != 0) && (data1 != 0))
 870              		.loc 1 684 0
 871 00ae BB69     		ldr	r3, [r7, #24]
 872 00b0 002B     		cmp	r3, #0
 685:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
 686:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         // TR("(Chain mode) tx buffer1 %08x of size %d from %d rx descriptor is given back\n",data1
 687:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
 688:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 689:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       // TR("Memory allocated %08x for Tx Descriptor (chain) at  %d is given back\n",data2,i);
 690:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 691:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       first_desc = (DmaDesc *)data2;
 873              		.loc 1 691 0
 874 00b2 FB68     		ldr	r3, [r7, #12]
 875 00b4 BB62     		str	r3, [r7, #40]
 679:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i =0; i < gmacdev -> TxDescCount; i++)
 876              		.loc 1 679 0
 877 00b6 FB6A     		ldr	r3, [r7, #44]
 878 00b8 03F10103 		add	r3, r3, #1
 879 00bc FB62     		str	r3, [r7, #44]
 880              	.L43:
 679:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(i =0; i < gmacdev -> TxDescCount; i++)
 881              		.loc 1 679 0 is_stmt 0 discriminator 1
 882 00be FA6A     		ldr	r2, [r7, #44]
 883 00c0 7B68     		ldr	r3, [r7, #4]
 884 00c2 DB6A     		ldr	r3, [r3, #44]
 885 00c4 9A42     		cmp	r2, r3
 886 00c6 DDD3     		bcc	.L45
 887              	.L42:
 692:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       //first_desc_dma_addr = dma_addr2;
 693:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 694:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("tx-------------------------------------------------------------------tx\n");
 695:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 696:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 697:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->TxDesc    = NULL;
 888              		.loc 1 697 0 is_stmt 1
 889 00c8 7B68     		ldr	r3, [r7, #4]
 890 00ca 4FF00002 		mov	r2, #0
 891 00ce 9A61     		str	r2, [r3, #24]
 698:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev->TxDescDma = 0;
 892              		.loc 1 698 0
 893 00d0 7B68     		ldr	r3, [r7, #4]
 894 00d2 4FF00002 		mov	r2, #0
 895 00d6 1A61     		str	r2, [r3, #16]
 699:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return;
 700:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 896              		.loc 1 700 0
 897 00d8 07F13407 		add	r7, r7, #52
 898 00dc BD46     		mov	sp, r7
 899 00de 90BD     		pop	{r4, r7, pc}
 900              		.cfi_endproc
 901              	.LFE118:
 903              		.section	.text.synop_handle_transmit_over,"ax",%progbits
 904              		.align	2
 905              		.global	synop_handle_transmit_over
 906              		.thumb
 907              		.thumb_func
 909              	synop_handle_transmit_over:
 910              	.LFB119:
 701:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 702:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef AVB_SUPPORT
 703:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static void populate_tx_avb_data (u32 dma_index, u32 avb_frame_size, u32 * skb_data, synopGMACavbSt
 704:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 705:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         u32 data_count;
 706:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 avtype;
 707:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 708:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(dma_index == 0){
 709:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch0[0];
 710:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch0[1];
 711:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch0[2];
 712:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch0[3]; //Ethernet header ends here
 713:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            for(data_count = 0; data_count < avb_frame_size;){
 714:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                * skb_data++ = FRAME_PATTERN_CH0;
 715:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                data_count += 4;// increment by 4 since we are writing one word at a time
 716:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            }
 717:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
 718:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 719:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(dma_index == 1){
 720:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch1[0];
 721:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch1[1];
 722:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch1[2];
 723:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch1[3];
 724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 725:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      avtype = gmacavb->AvType;
 726:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      avtype = ((avtype << 8) | (avtype >> 8)) & 0x0000FFFF;
 727:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = (FRAME_PATTERN_CH1 <<16) | avtype; //AVB header ends here
 728:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 729:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            for(data_count = 0; data_count < avb_frame_size;){
 730:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                * skb_data++ = FRAME_PATTERN_CH1;
 731:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                data_count += 4;// increment by 4 since we are writing one word at a time
 732:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            }
 733:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
 734:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(dma_index == 2){
 735:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch2[0];
 736:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch2[1];
 737:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch2[2];
 738:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = frame_header_ch2[3];
 739:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 740:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      avtype = gmacavb->AvType;
 741:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      avtype = ((avtype << 8) | (avtype >> 8)) & 0x0000FFFF;
 742:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            * skb_data++ = (FRAME_PATTERN_CH2 <<16) | avtype; //AVB header ends here
 743:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 744:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            for(data_count = 0; data_count < avb_frame_size;){
 745:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                * skb_data++ = FRAME_PATTERN_CH2;
 746:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                data_count += 4;// increment by 4 since we are writing one word at a time
 747:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            }
 748:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
 749:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 750:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 751:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static void synopGMAC_prepare_hw_for_avb_test (synopGMACNetworkAdapter *adapter)//synopGMACconfigur
 752:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 753:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice *gmacdev;
 754:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice * gmacdev_ch[3]; // [0] for Best Effor Ethernet, [1] For DMA CH 1, [2] For DMA CH
 755:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u8 ch_tx_desc_slot_no;
 756:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u8 ch_tx_desc_slot_no_skip;
 757:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 758:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACavbStruct    *gmacavb;
 759:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 avb_frame_size,dma_index,desc_count;
 760:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 status;
 761:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 dma_addr1, dma_addr2;
 762:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 length1, length2;
 763:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data1, data2;
 764:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 765:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   struct sk_buff *skb;
 766:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 767:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[0] = adapter->synopGMACdev;
 768:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[1] = adapter->synopGMACdev_ch1;
 769:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[2] = adapter->synopGMACdev_ch2;
 770:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 771:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacavb       = adapter->synopGMACavb;
 772:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 773:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 774:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev=gmacdev_ch[0];
 775:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetAvType(gmacdev,gmacavb->AvType);       //Set the AvType in Avmac register
 776:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetAvPrio(gmacdev,gmacavb->PrioTagForAV); //set the Avpriority tag
 777:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetAvCtrlCh(gmacdev,gmacavb->AvControlCh);//set the Av control Channel
 778:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetAvPTPCh(gmacdev,gmacavb->PTPCh);       //set the PTP Channel
 779:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 780:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //Channel 0 Specific Configuration
 781:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 782:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetChPrioWts(gmacdev,gmacavb->Ch0PrioWts);
 783:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrioPolicy(gmacdev,gmacavb->Ch0_tx_rx_prio_policy); //1=>RR 0=>Strict prioriyt
 784:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrio(gmacdev,gmacavb->Ch0_use_tx_high_prio);        //1 => tx has high prio over 
 785:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrioRatio(gmacdev,gmacavb->Ch0_tx_rx_prio_ratio);   //tx-rx priority weights
 786:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 787:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_TS_subsecond_init(gmacdev, 0x1E); //Because of 33MHz PCI clock
 788:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_TS_digital_rollover_enable(gmacdev);
 789:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_TS_enable(gmacdev);
 790:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_TS_timestamp_init(gmacdev, 0x00, 0x00);
 791:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 792:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //Channel 1 Specific Configuration
 793:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev=gmacdev_ch[1];
 794:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 795:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetChPrioWts(gmacdev,gmacavb->Ch1PrioWts);
 796:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 797:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(gmacavb->Ch1_EnableSlotCheck){
 798:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbEnSlot(gmacdev);
 799:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 800:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else {
 801:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisSlot(gmacdev);
 802:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisSlotInterrupt(gmacdev);
 803:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 804:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACAvbSetSlotCount(gmacdev,gmacavb->Ch1SlotCount);
 805:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //synopGMACAvbEnSlotInterrupt(gmacdev);
 806:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 807:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(gmacavb->Ch1_AdvSlotInterval)
 808:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbEnAdvSlotInt(gmacdev);
 809:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 810:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisAdvSlotInt(gmacdev);
 811:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 812:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(gmacavb->Ch1CrSh == 0){// when zero we need to disable creditshape algorithm
 813:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisableCrSh(gmacdev);
 814:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisableCrControl(gmacdev);
 815:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 816:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else{
 817:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACAvbEnableCrSh(gmacdev);
 818:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 819:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(gmacavb->Ch1CreditControl)
 820:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMACAvbEnableCrControl(gmacdev);
 821:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 822:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****          synopGMACAvbDisableCrControl(gmacdev);
 823:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 824:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACsetAvbSendSlope(gmacdev,gmacavb->Ch1SendSlope);
 825:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACsetAvbIdleSlope(gmacdev,gmacavb->Ch1IdleSlope);
 826:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACsetAvbHiCredit(gmacdev,gmacavb->Ch1HiCredit);
 827:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACsetAvbLoCredit(gmacdev,gmacavb->Ch1LoCredit);
 828:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 829:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 830:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrioPolicy(gmacdev,gmacavb->Ch1_tx_rx_prio_policy); //1=>RR 0=>Strict prioriyt
 831:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrio(gmacdev,gmacavb->Ch1_use_tx_high_prio); //1 => tx has high prio over rx
 832:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrioRatio(gmacdev,gmacavb->Ch1_tx_rx_prio_ratio);//tx-rx priority weights
 833:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 834:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //Channel 2 Specific Configuration
 835:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev=gmacdev_ch[2];
 836:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 837:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetChPrioWts(gmacdev,gmacavb->Ch2PrioWts);
 838:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 839:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(gmacavb->Ch2_EnableSlotCheck){
 840:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbEnSlot(gmacdev);
 841:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 842:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else {
 843:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisSlot(gmacdev);
 844:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisSlotInterrupt(gmacdev);
 845:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 846:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACAvbSetSlotCount(gmacdev,gmacavb->Ch2SlotCount);
 847:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //synopGMACAvbEnSlotInterrupt(gmacdev);
 848:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 849:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(gmacavb->Ch2_AdvSlotInterval)
 850:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbEnAdvSlotInt(gmacdev);
 851:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 852:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisAdvSlotInt(gmacdev);
 853:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 854:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(gmacavb->Ch2CrSh == 0){// when zero we need to disable creditshape algorithm
 855:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisableCrSh(gmacdev);
 856:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      synopGMACAvbDisableCrControl(gmacdev);
 857:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 858:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else{
 859:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACAvbEnableCrSh(gmacdev);
 860:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 861:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(gmacavb->Ch2CreditControl)
 862:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMACAvbEnableCrControl(gmacdev);
 863:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else
 864:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****          synopGMACAvbDisableCrControl(gmacdev);
 865:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 866:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACsetAvbSendSlope(gmacdev,gmacavb->Ch2SendSlope);
 867:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACsetAvbIdleSlope(gmacdev,gmacavb->Ch2IdleSlope);
 868:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACsetAvbHiCredit(gmacdev,gmacavb->Ch2HiCredit);
 869:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACsetAvbLoCredit(gmacdev,gmacavb->Ch2LoCredit);
 870:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 871:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 872:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 873:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrioPolicy(gmacdev,gmacavb->Ch2_tx_rx_prio_policy); //1=>RR 0=>Strict prioriyt
 874:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrio(gmacdev,gmacavb->Ch2_use_tx_high_prio);        //1 => tx has high prio over 
 875:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACsetTxRxPrioRatio(gmacdev,gmacavb->Ch2_tx_rx_prio_ratio);   //tx-rx priority weights
 876:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 877:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 878:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("ChSelMask = %02x\n",gmacavb->ChSelMask);
 879:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("DurationOfExp= %02x\n",gmacavb->DurationOfExp);
 880:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("AvControlCh= %02x\n",gmacavb->AvControlCh);
 881:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("PTPCh= %02x\n",gmacavb->PTPCh);
 882:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("PrioTagForAV= %02x\n",gmacavb->PrioTagForAV);
 883:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("AvType= %04x\n",gmacavb->AvType);
 884:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 885:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2PrioWts = %08x\n",gmacavb->Ch2PrioWts);
 886:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2Bw= %02x\n",gmacavb->Ch2Bw);
 887:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2_frame_size= %08x\n",gmacavb->Ch2_frame_size);
 888:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2_EnableSlotCheck= %02x\n",gmacavb->Ch2_EnableSlotCheck);
 889:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2_AdvSlotInterval= %02x\n",gmacavb->Ch2_AdvSlotInterval);
 890:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2CrSh= %02x\n",gmacavb->Ch2CrSh);
 891:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2SlotCount= %02x\n",gmacavb->Ch2SlotCount);
 892:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2AvgBitsPerSlot= %08x\n",gmacavb->Ch2AvgBitsPerSlot);
 893:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2AvgBitsPerSlotAccH= %08x\n",gmacavb->Ch2AvgBitsPerSlotAccH);
 894:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2AvgBitsPerSlotAccL= %08x\n",gmacavb->Ch2AvgBitsPerSlotAccL);
 895:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2CreditControl= %02x\n",gmacavb->Ch2CreditControl);
 896:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2_tx_rx_prio_policy= %02x\n",gmacavb->Ch2_tx_rx_prio_policy);
 897:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2_use_tx_high_prio= %02x\n",gmacavb->Ch2_use_tx_high_prio);
 898:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2_tx_rx_prio_ratio= %02x\n",gmacavb->Ch2_tx_rx_prio_ratio);
 899:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2SendSlope= %08x\n",gmacavb->Ch2SendSlope);
 900:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2IdleSlope= %08x\n",gmacavb->Ch2IdleSlope);
 901:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2HiCredit= %08x\n",gmacavb->Ch2HiCredit);
 902:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2LoCredit= %08x\n",gmacavb->Ch2LoCredit);
 903:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2FramecountTx= %08x\n",gmacavb->Ch2FramecountTx);
 904:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch2FramecountRx= %08x\n",gmacavb->Ch2FramecountRx);
 905:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 906:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1PrioWts = %08x\n",gmacavb->Ch1PrioWts);
 907:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1Bw= %02x\n",gmacavb->Ch1Bw);
 908:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1_frame_size= %08x\n",gmacavb->Ch1_frame_size);
 909:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1_EnableSlotCheck= %02x\n",gmacavb->Ch1_EnableSlotCheck);
 910:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1_AdvSlotInterval= %02x\n",gmacavb->Ch1_AdvSlotInterval);
 911:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1CrSh= %02x\n",gmacavb->Ch1CrSh);
 912:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1SlotCount= %02x\n",gmacavb->Ch1SlotCount);
 913:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1AvgBitsPerSlot= %08x\n",gmacavb->Ch1AvgBitsPerSlot);
 914:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1AvgBitsPerSlotAccH= %08x\n",gmacavb->Ch1AvgBitsPerSlotAccH);
 915:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1AvgBitsPerSlotAccL= %08x\n",gmacavb->Ch1AvgBitsPerSlotAccL);
 916:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1CreditControl= %02x\n",gmacavb->Ch1CreditControl);
 917:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1_tx_rx_prio_policy= %02x\n",gmacavb->Ch1_tx_rx_prio_policy);
 918:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1_use_tx_high_prio= %02x\n",gmacavb->Ch1_use_tx_high_prio);
 919:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1_tx_rx_prio_ratio= %02x\n",gmacavb->Ch1_tx_rx_prio_ratio);
 920:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1SendSlope= %08x\n",gmacavb->Ch1SendSlope);
 921:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1IdleSlope= %08x\n",gmacavb->Ch1IdleSlope);
 922:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1HiCredit= %08x\n",gmacavb->Ch1HiCredit);
 923:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1LoCredit= %08x\n",gmacavb->Ch1LoCredit);
 924:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1FramecountTx= %08x\n",gmacavb->Ch1FramecountTx);
 925:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch1FramecountRx= %08x\n",gmacavb->Ch1FramecountRx);
 926:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 927:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch0PrioWts = %08x\n",gmacavb->Ch0PrioWts);
 928:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch0_frame_size= %08x\n",gmacavb->Ch0_frame_size);
 929:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch0_tx_rx_prio_policy= %02x\n",gmacavb->Ch0_tx_rx_prio_policy);
 930:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch0_use_tx_high_prio= %02x\n",gmacavb->Ch0_use_tx_high_prio);
 931:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch0_tx_rx_prio_ratio= %02x\n",gmacavb->Ch0_tx_rx_prio_ratio);
 932:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch0FramecountTx= %08x\n",gmacavb->Ch0FramecountTx);
 933:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("Ch0FramecountRx= %08x\n",gmacavb->Ch0FramecountRx);
 934:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 935:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    //Descriptor Memory Allocation for Transmission.
 936:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   avb_frame_size = 0;//Initialized to remove compiler warning
 937:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   for(dma_index = 0; dma_index<3; dma_index++){
 938:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev = gmacdev_ch[dma_index];
 939:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(dma_index == 0)
 940:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     avb_frame_size = gmacavb->Ch0_frame_size;
 941:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else if (dma_index == 1)
 942:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     avb_frame_size = gmacavb->Ch1_frame_size;
 943:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   else if (dma_index == 2)
 944:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     avb_frame_size = gmacavb->Ch2_frame_size;
 945:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 946:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("avb_frame_size of %2d channel = %d\n",dma_index,avb_frame_size);
 947:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /*
 948:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    for(desc_count = 0; desc_count < gmacdev->TxDescCount; desc_count++  ){
 949:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("dma_index = %02d desc_count = %02d\n",dma_index,desc_count);
 950:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMAC_get_desc_data(gmacdev->TxDesc + desc_count, &status, &dma_addr1, &length1, &data1, &d
 951:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("status=%08x,dma_addr1 = %08x, length1 = %08x, data1 = %08x, dma_addr2 = %08x, length2 = %08
 952:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     status, dma_addr1,length1,data1,dma_addr2,length2,data2 );
 953:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     status = 0;
 954:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(((struct sk_buff *)data1) != NULL){
 955:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       TR("data1 is not NULL\n");
 956:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       skb = (struct sk_buff *) data1;
 957:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       populate_tx_avb_data (dma_index, avb_frame_size, (u32 *)skb->data, gmacavb);
 958:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_set_desc_data(gmacdev->TxDesc + desc_count, status, dma_addr1, avb_frame_size,data1
 959:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 960:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
 961:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 962:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** */
 963:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 964:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 965:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     ch_tx_desc_slot_no = 0;
 966:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     ch_tx_desc_slot_no_skip = 0;
 967:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(dma_index == 1){//For channel 1
 968:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     ch_tx_desc_slot_no       = gmacavb->Ch1_tx_desc_slot_no_start;
 969:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           ch_tx_desc_slot_no_skip  = gmacavb->Ch1_tx_desc_slot_no_skip;
 970:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 971:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(dma_index == 2){//For channel 2
 972:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     ch_tx_desc_slot_no       = gmacavb->Ch2_tx_desc_slot_no_start;
 973:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           ch_tx_desc_slot_no_skip  = gmacavb->Ch2_tx_desc_slot_no_skip;
 974:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
 975:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 976:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 977:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    for(desc_count = 0; desc_count < gmacdev->TxDescCount; desc_count++  ){
 978:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
 979:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("dma_index = %02d desc_count = %02d\n",dma_index,desc_count);
 980:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMAC_get_desc_data(gmacdev->TxDesc + desc_count, &status, &dma_addr1, &length1, &data1, &d
 981:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("status=%08x,dma_addr1 = %08x, length1 = %08x, data1 = %08x, dma_addr2 = %08x, length2 = %08
 982:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     status, dma_addr1,length1,data1,dma_addr2,length2,data2 );
 983:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     status = 0;
 984:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(((struct sk_buff *)data1) != NULL){
 985:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       TR("data1 is not NULL\n");
 986:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       skb = (struct sk_buff *) data1;
 987:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       printk(KERN_CRIT "dma_index = %02d desc_count=%03d ch_tx_desc_slot_no = %01x\n",dma_index,des
 988:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(dma_index !=0){
 989:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         status = (ch_tx_desc_slot_no << 3);
 990:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(ch_tx_desc_slot_no_skip != 0){
 991:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(((desc_count + 1) % ch_tx_desc_slot_no_skip) == 0){
 992:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                                  ch_tx_desc_slot_no ++;
 993:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             ch_tx_desc_slot_no = ch_tx_desc_slot_no & 0xF;
 994:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
 995:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
 996:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
 997:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       populate_tx_avb_data (dma_index, avb_frame_size, (u32 *)skb->data, gmacavb);
 998:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_set_desc_data(gmacdev->TxDesc + desc_count, status, dma_addr1, avb_frame_size,data1
 999:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1000:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1001:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1002:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1003:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1004:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
1005:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1006:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static void synopGMAC_AVB_timer_expired(u32 notused)
1007:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
1008:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 dma_index;
1009:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice       *gmacdev   ;
1010:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice * gmacdev_ch[3]; // [0] for Best Effor Ethernet, [1] For DMA CH 1, [2] For DMA CH
1011:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1012:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACNetworkAdapter *adapter = (synopGMACNetworkAdapter *)synopGMAC_AVB_test_timer.data;
1013:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1014:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[0] = adapter->synopGMACdev;
1015:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[1] = adapter->synopGMACdev_ch1;
1016:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[2] = adapter->synopGMACdev_ch2;
1017:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1018:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   for(dma_index=0;dma_index <3; dma_index ++){
1019:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacdev= gmacdev_ch[dma_index];
1020:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_disable_dma_tx(gmacdev);// Disable transmission
1021:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(dma_index !=0){
1022:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           synopGMACAvbDisSlotInterrupt(gmacdev);// Disable the Slot interrupt if enabled for channe
1023:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           synopGMACAvbDisSlotInterrupt(gmacdev);// Disable the Slot interrupt if enabled for channe
1024:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1025:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1026:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1027:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     plat_delay(10000);     //Allow any pending buffer to be read by host
1028:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     printk(KERN_CRIT "AVB Experiment is Complete... You can Retrieve the Report\n");
1029:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
1030:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1031:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static void synopGMAC_AVB_setup_timer(struct netif *netdev)
1032:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
1033:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMACNetworkAdapter *adapter = netdev->state;
1034:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMACavbStruct         *gmacavb = adapter->synopGMACavb;
1035:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1036:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Setting up the AVB Timer\n");
1037:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     RTOS001_Create_Timer(&synopGMAC_AVB_test_timer);
1038:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMAC_AVB_test_timer.function = (void *) synopGMAC_AVB_timer_expired;
1039:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMAC_AVB_test_timer.data     = (u32) adapter;
1040:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //    synopGMAC_AVB_test_timer.expires = (CHECK_TIME * 2) + jiffies;
1041:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMAC_AVB_test_timer.expires = (CHECK_TIME * (gmacavb->DurationOfExp)) + jiffies;
1042:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //    synopGMAC_AVB_test_timer.expires = (HZ * (gmacavb->DurationOfExp) * 60) + jiffies;
1043:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
1044:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1045:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1046:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1047:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static void synopGMAC_AVB_run_test(struct netif *netdev, u32 start_or_continue)
1048:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
1049:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 dma_index;
1050:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACNetworkAdapter * adapter;
1051:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACavbStruct         * gmacavb;
1052:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1053:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice       *gmacdev   ;
1054:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice       *gmacdev_ch[3]; // [0] for Best Effor Ethernet, [1] For DMA CH 1, [2] For D
1055:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1056:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   adapter =  (synopGMACNetworkAdapter *) netdev->state;
1057:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacavb =  (synopGMACavbStruct *)adapter->synopGMACavb;
1058:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1059:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[0] = adapter->synopGMACdev;
1060:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[1] = adapter->synopGMACdev_ch1;
1061:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev_ch[2] = adapter->synopGMACdev_ch2;
1062:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1063:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(start_or_continue) //If start then only start the timer, For continue test timer is not starte
1064:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     RTOS001_Start_Timer(&synopGMAC_AVB_test_timer);// Start the experiment timer before enabling th
1065:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1066:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     for(dma_index = 0; dma_index<3; dma_index++){
1067:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       gmacdev = gmacdev_ch[dma_index];
1068:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if((gmacavb->ChSelMask) & (1 << dma_index)){ // Enable only that channel for which Enable is set
1069:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Enabling the DMA Channel[%02d]\n",dma_index);
1070:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //  synopGMAC_clear_interrupt(gmacdev);      //Clear all pending interrupts
1071:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       synopGMACAvbEnSlotInterrupt(gmacdev);
1072:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMAC_enable_dma_tx(gmacdev);                 //Enable Dma Tx for all channels
1073:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1074:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1075:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1076:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
1077:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1078:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1079:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1080:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
1081:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function to handle housekeeping after a packet is transmitted over the wire.
1082:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * After the transmission of a packet DMA generates corresponding interrupt 
1083:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * (if it is enabled).
1084:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
1085:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] synopGMACdev pointer to synopGMACdevice structure.
1086:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
1087:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @return void.
1088:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \note This function runs in interrupt context
1089:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
1090:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1091:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** void synop_handle_transmit_over(synopGMACdevice * synopGMACdev)
1092:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 911              		.loc 1 1092 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 56
 914              		@ frame_needed = 1, uses_anonymous_args = 0
 915 0000 90B5     		push	{r4, r7, lr}
 916              	.LCFI21:
 917              		.cfi_def_cfa_offset 12
 918              		.cfi_offset 4, -12
 919              		.cfi_offset 7, -8
 920              		.cfi_offset 14, -4
 921 0002 97B0     		sub	sp, sp, #92
 922              	.LCFI22:
 923              		.cfi_def_cfa_offset 104
 924 0004 08AF     		add	r7, sp, #32
 925              	.LCFI23:
 926              		.cfi_def_cfa 7, 72
 927 0006 7860     		str	r0, [r7, #4]
1093:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* <<<DD_ETH_PORT_12>>> */
1094:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   s32 desc_index;
1095:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data1, data2;
1096:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 status;
1097:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 length1, length2;
1098:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 dma_addr1, dma_addr2;
1099:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1100:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef ENH_DESC_8W
1101:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 ext_status;
1102:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 time_stamp_high;
1103:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 time_stamp_low;
1104:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1105:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1106:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(synopGMACdev == NULL)
 928              		.loc 1 1106 0
 929 0008 7B68     		ldr	r3, [r7, #4]
 930 000a 002B     		cmp	r3, #0
 931 000c 63D0     		beq	.L47
 932              	.L51:
1107:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
1108:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("GMAC device structure is missing\n");
1109:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     return;
1110:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1111:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1112:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     /*Handle the transmit Descriptors*/
1113:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   do
1114:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
1115:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1116:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef ENH_DESC_8W
1117:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     desc_index = synopGMAC_get_tx_qptr(synopGMACdev, &status, &dma_addr1, &length1, &data1, &dma_ad
 933              		.loc 1 1117 0
 934 000e 07F12801 		add	r1, r7, #40
 935 0012 07F11C02 		add	r2, r7, #28
 936 0016 07F12403 		add	r3, r7, #36
 937 001a 07F13000 		add	r0, r7, #48
 938 001e 0090     		str	r0, [sp, #0]
 939 0020 07F11800 		add	r0, r7, #24
 940 0024 0190     		str	r0, [sp, #4]
 941 0026 07F12000 		add	r0, r7, #32
 942 002a 0290     		str	r0, [sp, #8]
 943 002c 07F12C00 		add	r0, r7, #44
 944 0030 0390     		str	r0, [sp, #12]
 945 0032 07F11400 		add	r0, r7, #20
 946 0036 0490     		str	r0, [sp, #16]
 947 0038 07F11000 		add	r0, r7, #16
 948 003c 0590     		str	r0, [sp, #20]
 949 003e 07F10C00 		add	r0, r7, #12
 950 0042 0690     		str	r0, [sp, #24]
 951 0044 7868     		ldr	r0, [r7, #4]
 952 0046 FFF7FEFF 		bl	synopGMAC_get_tx_qptr
 953 004a 7863     		str	r0, [r7, #52]
1118:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //synopGMAC_TS_read_timestamp_higher_val(synopGMACdev, &time_stamp_higher);
1119:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #else
1120:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     desc_index = synopGMAC_get_tx_qptr(synopGMACdev, &status, &dma_addr1, &length1, &data1, &dma_ad
1121:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1122:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     //desc_index = synopGMAC_get_tx_qptr(gmacdev, &status, &dma_addr, &length, &data1);
1123:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(desc_index >= 0 && data1 != 0)
 954              		.loc 1 1123 0
 955 004c 7B6B     		ldr	r3, [r7, #52]
 956 004e 002B     		cmp	r3, #0
 957 0050 34DB     		blt	.L49
 958              		.loc 1 1123 0 is_stmt 0 discriminator 1
 959 0052 3B6B     		ldr	r3, [r7, #48]
 960 0054 002B     		cmp	r3, #0
 961 0056 31D0     		beq	.L49
1124:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
1125:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       //TR("Finished Transmit at Tx Descriptor %d for skb 0x%08x and buffer = %08x whose status is 
1126:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1127:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef  IPC_OFFLOAD
1128:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1129:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(synopGMAC_is_tx_ipv4header_checksum_error(synopGMACdev, status))
1130:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
1131:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("Harware Failed to Insert IPV4 Header Checksum\n");
1132:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1133:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1134:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(synopGMAC_is_tx_payload_checksum_error(synopGMACdev, status))
1135:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
1136:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("Harware Failed to Insert Payload Checksum\n");
1137:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1138:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1139:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1140:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(synopGMAC_is_desc_valid(status))
 962              		.loc 1 1140 0 is_stmt 1
 963 0058 BB6A     		ldr	r3, [r7, #40]
 964 005a 1846     		mov	r0, r3
 965 005c FFF7FEFF 		bl	synopGMAC_is_desc_valid
 966 0060 0346     		mov	r3, r0
 967 0062 002B     		cmp	r3, #0
 968 0064 0CD0     		beq	.L50
1141:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
1142:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     	synopGMACdev->NetStatistics.TxBytes += length1;
 969              		.loc 1 1142 0
 970 0066 7B68     		ldr	r3, [r7, #4]
 971 0068 DA6D     		ldr	r2, [r3, #92]
 972 006a 7B6A     		ldr	r3, [r7, #36]
 973 006c D218     		adds	r2, r2, r3
 974 006e 7B68     		ldr	r3, [r7, #4]
 975 0070 DA65     		str	r2, [r3, #92]
1143:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     	synopGMACdev->NetStatistics.TxPackets++;
 976              		.loc 1 1143 0
 977 0072 7B68     		ldr	r3, [r7, #4]
 978 0074 5B6D     		ldr	r3, [r3, #84]
 979 0076 03F10102 		add	r2, r3, #1
 980 007a 7B68     		ldr	r3, [r7, #4]
 981 007c 5A65     		str	r2, [r3, #84]
 982 007e 1DE0     		b	.L49
 983              	.L50:
1144:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1145:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       else
1146:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       {
1147:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACdev->NetStatistics.TxErrors++;
 984              		.loc 1 1147 0
 985 0080 7B68     		ldr	r3, [r7, #4]
 986 0082 5B6E     		ldr	r3, [r3, #100]
 987 0084 03F10102 		add	r2, r3, #1
 988 0088 7B68     		ldr	r3, [r7, #4]
 989 008a 5A66     		str	r2, [r3, #100]
1148:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACdev->NetStatistics.TxAbortedErrors += synopGMAC_is_tx_aborted(status);
 990              		.loc 1 1148 0
 991 008c 7B68     		ldr	r3, [r7, #4]
 992 008e D3F89040 		ldr	r4, [r3, #144]
 993 0092 BB6A     		ldr	r3, [r7, #40]
 994 0094 1846     		mov	r0, r3
 995 0096 FFF7FEFF 		bl	synopGMAC_is_tx_aborted
 996 009a 0346     		mov	r3, r0
 997 009c E218     		adds	r2, r4, r3
 998 009e 7B68     		ldr	r3, [r7, #4]
 999 00a0 C3F89020 		str	r2, [r3, #144]
1149:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACdev->NetStatistics.TxCarrierErrors += synopGMAC_is_tx_carrier_error(status);
 1000              		.loc 1 1149 0
 1001 00a4 7B68     		ldr	r3, [r7, #4]
 1002 00a6 D3F89440 		ldr	r4, [r3, #148]
 1003 00aa BB6A     		ldr	r3, [r7, #40]
 1004 00ac 1846     		mov	r0, r3
 1005 00ae FFF7FEFF 		bl	synopGMAC_is_tx_carrier_error
 1006 00b2 0346     		mov	r3, r0
 1007 00b4 E218     		adds	r2, r4, r3
 1008 00b6 7B68     		ldr	r3, [r7, #4]
 1009 00b8 C3F89420 		str	r2, [r3, #148]
 1010              	.L49:
1150:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1151:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1152:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     synopGMACdev->NetStatistics.Collisions += synopGMAC_get_tx_collision_count(status);
 1011              		.loc 1 1152 0
 1012 00bc 7B68     		ldr	r3, [r7, #4]
 1013 00be 5C6F     		ldr	r4, [r3, #116]
 1014 00c0 BB6A     		ldr	r3, [r7, #40]
 1015 00c2 1846     		mov	r0, r3
 1016 00c4 FFF7FEFF 		bl	synopGMAC_get_tx_collision_count
 1017 00c8 0346     		mov	r3, r0
 1018 00ca E218     		adds	r2, r4, r3
 1019 00cc 7B68     		ldr	r3, [r7, #4]
 1020 00ce 5A67     		str	r2, [r3, #116]
1153:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   } while(desc_index >= 0);
 1021              		.loc 1 1153 0
 1022 00d0 7B6B     		ldr	r3, [r7, #52]
 1023 00d2 002B     		cmp	r3, #0
 1024 00d4 9BDA     		bge	.L51
 1025              	.L47:
1154:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 1026              		.loc 1 1154 0
 1027 00d6 07F13C07 		add	r7, r7, #60
 1028 00da BD46     		mov	sp, r7
 1029 00dc 90BD     		pop	{r4, r7, pc}
 1030              		.cfi_endproc
 1031              	.LFE119:
 1033 00de 00BF     		.section	.text.is_valid_ether_addr,"ax",%progbits
 1034              		.align	2
 1035              		.thumb
 1036              		.thumb_func
 1038              	is_valid_ether_addr:
 1039              	.LFB120:
1155:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1156:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1157:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef AVB_SUPPORT
1158:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1159:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
1160:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function to Receive a packet from the interface.
1161:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * After Receiving a packet, DMA transfers the received packet to the system memory
1162:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * and generates corresponding interrupt (if it is enabled). This function prepares
1163:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * the sk_buff for received packet after removing the ethernet CRC, and hands it over
1164:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * to linux networking stack.
1165:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *   - Updataes the networking interface statistics
1166:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *  - Keeps track of the rx descriptors
1167:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] pointer to netif structure.
1168:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \return void.
1169:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \note This function runs in interrupt context.
1170:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
1171:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1172:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** void synop_handle_received_data_avb(struct netif *netdev, u32 channel_index)
1173:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
1174:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACNetworkAdapter *adapter;
1175:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice * gmacdev;
1176:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   struct pci_dev *pcidev;
1177:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACavbStruct *gmacavb;
1178:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   s32 desc_index;
1179:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1180:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 frame_count;
1181:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1182:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data1;
1183:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data2;
1184:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 len;
1185:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 status;
1186:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 dma_addr1;
1187:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 dma_addr2;
1188:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef ENH_DESC_8W
1189:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 ext_status; 
1190:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 time_stamp_high;
1191:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 time_stamp_low;
1192:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1193:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //u32 length;
1194:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1195:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   struct sk_buff *skb; //This is the pointer to hold the received data
1196:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1197:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("%s\n",__FUNCTION__);
1198:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1199:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     adapter = (synopGMACNetworkAdapter *)netdev->state; /* WIPRO: */
1200:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   adapter = netdev->priv;
1201:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(adapter == NULL){
1202:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Unknown Device\n");
1203:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     return;
1204:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1205:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacavb = adapter->synopGMACavb;
1206:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev = adapter->synopGMACdev; //Initialized to avoid compiler warning
1207:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1208:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****      //Get the apporpriate handle for gmacdev for respective channel
1209:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(channel_index == 0){
1210:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       gmacdev = adapter->synopGMACdev;
1211:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(gmacdev == NULL){
1212:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("GMAC device structure is missing\n");
1213:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         return;
1214:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1215:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1216:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(channel_index == 1){
1217:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       gmacdev = adapter->synopGMACdev_ch1;
1218:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(gmacdev == NULL){
1219:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("GMAC device structure is missing\n");
1220:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         return;
1221:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1222:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1223:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(channel_index == 2){
1224:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       gmacdev = adapter->synopGMACdev_ch2;
1225:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(gmacdev == NULL){
1226:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("GMAC device structure is missing\n");
1227:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         return;
1228:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1229:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1230:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1231:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1232:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    pcidev  = (struct pci_dev *)adapter->synopGMACpcidev;
1233:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /*Handle the Receive Descriptors*/
1234:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   do{
1235:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef ENH_DESC_8W
1236:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   desc_index = synopGMAC_get_rx_qptr(gmacdev, &status,&dma_addr1,NULL, &data1,&dma_addr2,NULL,&data
1237:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(desc_index >0){
1238:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMAC_TS_read_timestamp_higher_val(gmacdev, &time_stamp_higher);
1239:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("S:%08x ES:%08x DA1:%08x d1:%08x DA2:%08x d2:%08x TSH:%08x TSL:%08x TSHW:%08x \n",status,ext_s
1240:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1241:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #else
1242:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   desc_index = synopGMAC_get_rx_qptr(gmacdev, &status,&dma_addr1,NULL, &data1,&dma_addr2,NULL,&data
1243:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1244:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1245:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(desc_index >= 0 && data1 != 0){
1246:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       TR("Received Data at Rx Descriptor %d for skb 0x%08x whose status is %08x\n",desc_index,data1
1247:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       /*At first step unmapped the dma address*/
1248:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(synopGMAC_is_rx_desc_valid(status)){
1249:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         len =  synopGMAC_get_rx_desc_frame_length(status) - 4; //Not interested in Ethernet CRC byt
1250:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       #ifdef IPC_OFFLOAD
1251:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         // Now lets check for the IPC offloading
1252:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         /*  Since we have enabled the checksum offloading in hardware, lets inform the kernel
1253:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             not to perform the checksum computation on the incoming packet. Note that ip header
1254:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****               checksum will be computed by the kernel immaterial of what we inform. Similary TCP/UD
1255:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             pseudo header checksum will be computed by the stack. What we can inform is not to perf
1256:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             payload checksum.
1257:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                When CHECKSUM_UNNECESSARY is set kernel bypasses the checksum computation.
1258:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         */
1259:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1260:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1261:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         #ifdef ENH_DESC_8W
1262:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(synopGMAC_is_ext_status(gmacdev, status)){ // extended status present indicates that the
1263:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("Extended Status present\n");
1264:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_ES_is_IP_header_error(gmacdev,ext_status)){       // IP header (IPV4) checks
1265:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           //Linux Kernel doesnot care for ipv4 header checksum. So we will simply proceed by printi
1266:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("(EXTSTS)Error in IP header error\n");
1267:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1268:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_ES_is_rx_checksum_bypassed(gmacdev,ext_status)){   // Hardware engine bypass
1269:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("(EXTSTS)Hardware bypassed checksum computation\n");
1270:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1271:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_ES_is_IP_payload_error(gmacdev,ext_status)){       // IP payload checksum is
1272:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("(EXTSTS) Error in EP payload\n");
1273:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1274:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1275:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         else{ // No extended status. So relevant information is available in the status itself
1276:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxNoChkError ){
1277:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("Ip header and TCP/UDP payload checksum Bypassed <Chk Status = 4>  \n");
1278:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1279:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxIpHdrChkError ){
1280:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           //Linux Kernel doesnot care for ipv4 header checksum. So we will simply proceed by printi
1281:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR(" Error in 16bit IPV4 Header Checksum <Chk Status = 6>  \n");
1282:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1283:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxLenLT600 ){
1284:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("IEEE 802.3 type frame with Length field Lesss than 0x0600 <Chk Status = 0> \n");
1285:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1286:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxIpHdrPayLoadChkBypass ){
1287:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("Ip header and TCP/UDP payload checksum Bypassed <Chk Status = 1>\n");
1288:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1289:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxChkBypass ){
1290:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("Ip header and TCP/UDP payload checksum Bypassed <Chk Status = 3>  \n");
1291:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1292:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxPayLoadChkError ){
1293:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR(" TCP/UDP payload checksum Error <Chk Status = 5>  \n");
1294:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1295:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxIpHdrChkError ){
1296:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           //Linux Kernel doesnot care for ipv4 header checksum. So we will simply proceed by printi
1297:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR(" Both IP header and Payload Checksum Error <Chk Status = 7>  \n");
1298:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1299:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1300:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         #else
1301:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxNoChkError ){
1302:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("Ip header and TCP/UDP payload checksum Bypassed <Chk Status = 4>  \n");
1303:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1304:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxIpHdrChkError ){
1305:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //Linux Kernel doesnot care for ipv4 header checksum. So we will simply proceed by printing
1306:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR(" Error in 16bit IPV4 Header Checksum <Chk Status = 6>  \n");
1307:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1308:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxLenLT600 ){
1309:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("IEEE 802.3 type frame with Length field Lesss than 0x0600 <Chk Status = 0> \n");
1310:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1311:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxIpHdrPayLoadChkBypass ){
1312:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("Ip header and TCP/UDP payload checksum Bypassed <Chk Status = 1>\n");
1313:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1314:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxChkBypass ){
1315:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("Ip header and TCP/UDP payload checksum Bypassed <Chk Status = 3>  \n");
1316:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1317:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxPayLoadChkError ){
1318:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR(" TCP/UDP payload checksum Error <Chk Status = 5>  \n");
1319:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1320:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(synopGMAC_is_rx_checksum_error(gmacdev, status) == RxIpHdrChkError ){
1321:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //Linux Kernel doesnot care for ipv4 header checksum. So we will simply proceed by printing
1322:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR(" Both IP header and Payload Checksum Error <Chk Status = 7>  \n");
1323:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1324:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1325:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         #endif
1326:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       #endif //IPC_OFFLOAD
1327:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1328:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     if(ext_status & DescRxAvTagPktRx){
1329:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         if (((ext_status & DescRxVlanPrioVal) >> DescRxVlanPrioShVal) >= gmacavb->P
1330:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                             gmacavb->Ch2FramecountRx++;
1331:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         else
1332:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                             gmacavb->Ch1FramecountRx++;
1333:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     }
1334:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     else{
1335:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                             gmacavb->Ch0FramecountRx++;
1336:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     }
1337:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1338:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         netdev->last_rx = jiffies;
1339:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.rx_packets++;
1340:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.rx_bytes += len;
1341:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1342:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       else{
1343:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         printk(KERN_CRIT "Packet Dropped here due to status = %08x\n",status);
1344:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.rx_errors++;
1345:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.collisions       += synopGMAC_is_rx_frame_collision(status);
1346:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.rx_crc_errors    += synopGMAC_is_rx_crc(status);
1347:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.rx_frame_errors  += synopGMAC_is_frame_dribbling_errors(status);
1348:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.rx_length_errors += synopGMAC_is_rx_frame_length_errors(status);
1349:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1350:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       //Now lets allocate the skb for the emptied descriptor
1351:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             skb = (struct sk_buff *)data1;
1352:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       for(frame_count = 0; frame_count<10; frame_count++)
1353:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("skb->data[%02d]= %08x\n",frame_count,* (u32 *)((skb->data)+(frame_count*4)));
1354:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       desc_index = synopGMAC_set_rx_qptr(gmacdev,dma_addr1, skb_tailroom(skb), (u32)skb,0,0,0);
1355:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1356:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(desc_index < 0){
1357:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("Cannot set Rx Descriptor for skb %08x\n",(u32)skb);
1358:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1359:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1360:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1361:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }while(desc_index >= 0);
1362:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
1363:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1364:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
1365:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function to handle housekeeping after a packet is transmitted over the wire.
1366:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * After the transmission of a packet DMA generates corresponding interrupt
1367:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * (if it is enabled). It takes care of returning the sk_buff to the linux
1368:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * kernel, updating the networking statistics and tracking the descriptors.
1369:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] pointer to netif structure.
1370:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \return void.
1371:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \note This function runs in interrupt context
1372:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
1373:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** void synop_handle_transmit_over_avb(struct netif *netdev, u32 channel_index)
1374:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
1375:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACNetworkAdapter *adapter;
1376:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACdevice * gmacdev;
1377:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   struct pci_dev *pcidev;
1378:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACavbStruct *gmacavb;
1379:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   s32 desc_index;
1380:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   s32 desc_status;
1381:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 data1, data2;
1382:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 status;
1383:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 length1, length2;
1384:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 dma_addr1, dma_addr2;
1385:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1386:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 avb_frame_size;
1387:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1388:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef ENH_DESC_8W
1389:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 ext_status;
1390:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u16 time_stamp_higher;
1391:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 time_stamp_high;
1392:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 time_stamp_low;
1393:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1394:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   adapter = (synopGMACNetworkAdapter *)netdev->state; /* WIPRO: */
1395:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   adapter = netdev->priv;
1396:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(adapter == NULL){
1397:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     TR("Unknown Device\n");
1398:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     return;
1399:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1400:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacavb = adapter -> synopGMACavb;
1401:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev = adapter->synopGMACdev;//Initialized to avaoid compiler warning
1402:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   avb_frame_size = 0;// Initialized to avoid compier warning
1403:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(channel_index == 0)
1404:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
1405:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacdev = adapter->synopGMACdev;
1406:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(gmacdev == NULL){
1407:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("GMAC device structure is missing for Best Effor Ethernet Channel\n");
1408:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         return;
1409:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1410:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   avb_frame_size = gmacavb->Ch0_frame_size;
1411:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1412:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(channel_index == 1)
1413:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
1414:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       gmacdev = adapter->synopGMACdev_ch1;
1415:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(gmacdev == NULL){
1416:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("GMAC device structure is missing for DMA Channel 1\n");
1417:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         return;
1418:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1419:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   avb_frame_size = gmacavb->Ch1_frame_size;
1420:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1421:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(channel_index == 2)
1422:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     {
1423:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       gmacdev = adapter->synopGMACdev_ch2;
1424:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(gmacdev == NULL){
1425:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("GMAC device structure is missing for DMA Channel 2\n");
1426:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         return;
1427:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1428:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   avb_frame_size = gmacavb->Ch2_frame_size;
1429:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }
1430:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1431:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****    pcidev  = (struct pci_dev *)adapter->synopGMACpcidev;
1432:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /*Handle the transmit Descriptors*/
1433:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   do {
1434:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef ENH_DESC_8W
1435:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   desc_index = synopGMAC_get_tx_qptr(gmacdev, &status, &dma_addr1, &length1, &data1, &dma_addr2, &l
1436:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //synopGMAC_TS_read_timestamp_higher_val(gmacdev, &time_stamp_higher);
1437:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #else
1438:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   desc_index = synopGMAC_get_tx_qptr(gmacdev, &status, &dma_addr1, &length1, &data1, &dma_addr2, &l
1439:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1440:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //desc_index = synopGMAC_get_tx_qptr(gmacdev, &status, &dma_addr, &length, &data1);
1441:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     if(desc_index >= 0 && data1 != 0){
1442:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       TR("Finished Transmit at Tx Descriptor %d for skb 0x%08x and buffer = %08x whose status is %0
1443:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       #ifdef  IPC_OFFLOAD
1444:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(synopGMAC_is_tx_ipv4header_checksum_error(gmacdev, status)){
1445:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       TR("Harware Failed to Insert IPV4 Header Checksum\n");
1446:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1447:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(synopGMAC_is_tx_payload_checksum_error(gmacdev, status)){
1448:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       TR("Harware Failed to Insert Payload Checksum\n");
1449:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1450:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       #endif
1451:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1452:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             if(channel_index == 2){
1453:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                    gmacavb->Ch2FramecountTx++;
1454:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                   }
1455:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                   else if(channel_index == 1){
1456:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     gmacavb->Ch1FramecountTx++;
1457:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                   }
1458:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                   else if(channel_index == 0){
1459:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     gmacavb->Ch0FramecountTx++;
1460:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                   }
1461:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1462:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(synopGMAC_is_desc_valid(status)){
1463:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.tx_bytes += length1;
1464:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.tx_packets++;
1465:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1466:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       else {
1467:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         TR("Error in Status %08x\n",status);
1468:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.tx_errors++;
1469:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.tx_aborted_errors += synopGMAC_is_tx_aborted(status);
1470:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter->synopGMACNetStats.tx_carrier_errors += synopGMAC_is_tx_carrier_error(status);
1471:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1472:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1473:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****               // Create the frame and assign it to the respective descriptor
1474:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if(global_avb_debug_enable){ // Only for Debugging
1475:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         global_avb_tx_count_debug[channel_index]--;
1476:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(global_avb_tx_count_debug[channel_index] == 0)
1477:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             synopGMACAvbDisSlotInterrupt(gmacdev);
1478:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     synopGMAC_disable_dma_tx(gmacdev);
1479:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1480:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1481:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                        desc_status = synopGMAC_set_tx_qptr(gmacdev,dma_addr1,length1, data1,0,0,0,0
1482:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                if(desc_status < 0){
1483:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                TR("No More free Descriptors??\n");
1484:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            }
1485:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1486:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1487:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     }  adapter->synopGMACNetStats.collisions += synopGMAC_get_tx_collision_count(status);
1488:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   } while(desc_index >= 0);
1489:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //  netif_wake_queue(netdev); //For AVB we dont use networking stack
1490:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
1491:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1492:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
1493:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Interrupt service routing.
1494:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * This is the function registered as ISR for device interrupts.
1495:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] interrupt number.
1496:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] void pointer to device unique structure (Required for shared interrupts in Linux).
1497:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] pointer to pt_regs (not used).
1498:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \return Returns IRQ_NONE if not device interrupts IRQ_HANDLED for device interrupts.
1499:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \note This function runs in interrupt context
1500:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
1501:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
1502:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** irqreturn_t synopGMAC_intr_handler_avb(s32 intr_num, void * dev_id, struct pt_regs *regs)
1503:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1504:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
1505:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /*Kernels passes the netdev structure in the dev_id. So grab it*/
1506:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         struct netif *netdev;
1507:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACNetworkAdapter *adapter;
1508:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1509:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMACavbStruct         *gmacavb;
1510:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1511:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACdevice * gmacdev;       // For Place Holder
1512:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMACdevice * gmacdev_ch[3]; // [0] for Best Effor Ethernet, [1] For DMA CH 1, [2] For 
1513:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1514:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1515:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****        struct pci_dev *pcidev;
1516:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1517:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         u32 dma_status_reg;     // For Place Holder
1518:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         u32 dma_status_reg_ch[3];  // [0]For Best Effort Ethernet, [1] for CH1, [2] for CH[2]
1519:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //        u32 temp_avg_bits = 0;
1520:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         u32 interrupt;
1521:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //  s32 status;
1522:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****        //u32 dma_addr;
1523:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   u32 dma_ch_index ;
1524:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1525:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         netdev  = (struct netif *) dev_id;
1526:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(netdev == NULL){
1527:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 TR("Unknown Device\n");
1528:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 return -1;
1529:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1530:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1531:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter = (synopGMACNetworkAdapter *)netdev->state; /* WIPRO: */
1532:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         adapter  = netdev->priv;
1533:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(adapter == NULL){
1534:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 TR("Adapter Structure Missing\n");
1535:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 return -1;
1536:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1537:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1538:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   gmacavb       = adapter->synopGMACavb;
1539:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1540:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacdev_ch[0] = adapter->synopGMACdev;                         // for Best Effort Ethernet
1541:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(gmacdev_ch[0] == NULL){
1542:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 TR("GMAC device structure Missing for CH0\n");
1543:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 return -1;
1544:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1545:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacdev_ch[1] = adapter->synopGMACdev_ch1;                        // for Prioritized DMA Ch
1546:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(gmacdev_ch[1] == NULL){
1547:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 TR("GMAC device structure Missing for CH1\n");
1548:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 return -1;
1549:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1550:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacdev_ch[2] = adapter->synopGMACdev_ch2;                        // for Prioritized DMA Ch
1551:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(gmacdev_ch[2] == NULL){
1552:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 TR("GMAC device structure Missing for CH2\n");
1553:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 return -1;
1554:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1555:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1556:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       pcidev  = (struct pci_dev *)adapter->synopGMACpcidev;
1557:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1558:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       /*Read the Dma interrupt status to know whether the interrupt got generated by our device or 
1559:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   dma_status_reg_ch[0] = synopGMACReadReg((u32 *)gmacdev_ch[0]->DmaBase, DmaStatus);
1560:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       dma_status_reg_ch[1] = synopGMACReadReg((u32 *)gmacdev_ch[1]->DmaBase, DmaStatus);
1561:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       dma_status_reg_ch[2] = synopGMACReadReg((u32 *)gmacdev_ch[2]->DmaBase, DmaStatus);
1562:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1563:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       if((dma_status_reg_ch[0] == 0) && (dma_status_reg_ch[1]== 0) && (dma_status_reg_ch[2] == 0)) 
1564:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                                                                                             // it i
1565:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         return IRQ_NONE;
1566:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1567:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1568:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         // Handle the interrupts one after the other starting with Channel 0, the reason is it cont
1569:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMAC_disable_interrupt_all(gmacdev_ch[0]);
1570:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMAC_disable_interrupt_all(gmacdev_ch[1]);
1571:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMAC_disable_interrupt_all(gmacdev_ch[2]);
1572:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1573:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacdev = gmacdev_ch[0];
1574:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         dma_status_reg = dma_status_reg_ch[0];
1575:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1576:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         //Handle the GMAC core interrupts first
1577:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(dma_status_reg & GmacPmtIntr){
1578:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            TR("%s:: Interrupt due to PMT module\n",__FUNCTION__);
1579:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****            synopGMAC_powerup_mac(gmacdev);
1580:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       }
1581:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1582:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(dma_status_reg & GmacMmcIntr){
1583:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("%s:: Interrupt due to MMC module\n",__FUNCTION__);
1584:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("%s:: synopGMAC_rx_int_status = %08x\n",__FUNCTION__,synopGMAC_read_mmc_rx_int_status(
1585:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1586:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1587:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         if(dma_status_reg & GmacLineIntfIntr){
1588:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           TR("%s:: Interrupt due to GMAC LINE module\n",__FUNCTION__);
1589:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1590:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1591:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         for(dma_ch_index = 0; dma_ch_index < 3; dma_ch_index++){
1592:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             dma_status_reg = dma_status_reg_ch[dma_ch_index];
1593:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             gmacdev        = gmacdev_ch[dma_ch_index];
1594:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1595:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             if(dma_status_reg != 0){   //Handle Channel 0 Interrupts
1596:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                  TR("%s:Dma Status Reg for ch[%01d]: 0x%08x\n",__FUNCTION__,dma_ch_index, dma_statu
1597:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1598:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****               /*Now lets handle the DMA interrupts*/
1599:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 interrupt = synopGMAC_get_interrupt_type(gmacdev);
1600:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                  TR("%s:Interrupts to be handled: 0x%08x\n",__FUNCTION__,interrupt);
1601:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1602:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 if(interrupt & synopGMADmaSlotCounter){
1603:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         if(dma_ch_index == 2){
1604:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacavb->Ch2AvgBitsNoOfInterrupts++;
1605:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                                 gmacavb->Ch2AvgBitsPerSlot = synopGMACReadReg ((u32 *)gmacdev->DmaB
1606:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //          printk(KERN_CRIT "CH2: %08x\n",gmacavb->Ch2AvgBitsPerSlot);
1607:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                           if( ((gmacavb->Ch2AvgBitsPerSlotAccL & 0x80000000) != 0) &&
1608:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             (((gmacavb->Ch2AvgBitsPerSlotAccL + gmacavb->Ch2AvgBitsPerSlot) & 0x80000000) == 0))
1609:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                                         gmacavb->Ch2AvgBitsPerSlotAccH++;
1610:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1611:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacavb->Ch2AvgBitsPerSlotAccL = gmacavb->Ch2AvgBitsPerSlotAccL + gmacavb->Ch2AvgBitsPerSlo
1612:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1613:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         }
1614:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         if(dma_ch_index == 1){
1615:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacavb->Ch1AvgBitsNoOfInterrupts++;
1616:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                                 gmacavb->Ch1AvgBitsPerSlot = synopGMACReadReg ((u32 *)gmacdev->DmaB
1617:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** //        printk(KERN_CRIT "CH1: %08x\n",gmacavb->Ch1AvgBitsPerSlot);
1618:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                                 if( ((gmacavb->Ch1AvgBitsPerSlotAccL & 0x80000000) != 0) &&
1619:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                                     (((gmacavb->Ch1AvgBitsPerSlotAccL + gmacavb->Ch1AvgBitsPerSlot)
1620:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                                         gmacavb->Ch1AvgBitsPerSlotAccH++;
1621:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1622:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         gmacavb->Ch1AvgBitsPerSlotAccL = gmacavb->Ch1AvgBitsPerSlotAccL + gmacavb->Ch1AvgBitsPerSlo
1623:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         }
1624:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 }
1625:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1626:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 if(interrupt & synopGMACDmaError){
1627:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 u8 mac_addr0[6] = DEFAULT_MAC_ADDRESS;//after soft reset, configure the MAC address
1628:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 TR("%s::Fatal Bus Error Inetrrupt Seen\n",__FUNCTION__);
1629:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_disable_dma_tx(gmacdev);
1630:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         synopGMAC_disable_dma_rx(gmacdev);
1631:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1632:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_take_desc_ownership_tx(gmacdev);
1633:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_take_desc_ownership_rx(gmacdev);
1634:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1635:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_init_tx_rx_desc_queue(gmacdev);
1636:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1637:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_reset(gmacdev);//reset the DMA engine and the GMAC ip
1638:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1639:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_set_mac_addr(gmacdev,GmacAddr0High,GmacAddr0Low, mac_addr0);
1640:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_dma_bus_mode_init(gmacdev,DmaFixedBurstEnable| DmaBurstLength8 | DmaDescr
1641:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                  synopGMAC_dma_control_init(gmacdev,DmaStoreAndForward);
1642:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_init_rx_desc_base(gmacdev);
1643:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_init_tx_desc_base(gmacdev);
1644:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_mac_init(gmacdev);
1645:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_enable_dma_rx(gmacdev);
1646:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 synopGMAC_enable_dma_tx(gmacdev);
1647:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 }
1648:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1649:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****               if(interrupt & synopGMACDmaRxNormal){ //Handle Receive Interrupt
1650:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 TR("%s:: Rx Normal \n", __FUNCTION__);
1651:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     synop_handle_received_data_avb(netdev,dma_ch_index);
1652:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****               }
1653:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1654:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 if(interrupt & synopGMACDmaRxAbnormal){ //Handle Receive Abnormal Interrupt
1655:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                   TR("%s::Abnormal Rx Interrupt Seen\n",__FUNCTION__);
1656:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 #if 1
1657:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     if(GMAC_Power_down == 0){  // If Mac is not in powerdown
1658:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                             adapter->synopGMACNetStats.rx_over_errors++;
1659:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         /*Now Descriptors have been created in synop_handle_received_data().
1660:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                              * Just issue a poll demand to resume DMA operation*/
1661:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         synopGMAC_resume_dma_rx(gmacdev);//To handle GBPS with 12 descriptors
1662:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                     }
1663:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 #endif
1664:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****               }
1665:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1666:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 if(interrupt & synopGMACDmaRxStopped){
1667:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                   TR("%s::Receiver stopped seeing Rx interrupts\n",__FUNCTION__); //Receiver gone i
1668:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****               }
1669:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1670:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           if(interrupt & synopGMACDmaTxNormal){
1671:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             //xmit function has done its job
1672:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             TR("%s::Finished Normal Transmission \n",__FUNCTION__);
1673:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             synop_handle_transmit_over_avb(netdev,dma_ch_index);//Do whatever you want after the tr
1674:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             }
1675:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1676:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             if(interrupt & synopGMACDmaTxAbnormal){
1677:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             TR("%s::Abnormal Tx Interrupt Seen\n",__FUNCTION__);
1678:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             #if 1
1679:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                  if(GMAC_Power_down == 0){  // If Mac is not in powerdown
1680:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                         synop_handle_transmit_over_avb(netdev,dma_ch_index);
1681:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****                 }
1682:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             #endif
1683:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }
1684:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1685:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             if(interrupt & synopGMACDmaTxStopped){
1686:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             TR("%s::Transmitter stopped sending the packets\n",__FUNCTION__);
1687:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****             }
1688:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           }// Per Channel interrupt handling is done
1689:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1690:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         }
1691:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****           /* Enable the interrrupt before returning from ISR*/
1692:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMAC_enable_interrupt(gmacdev_ch[0],DmaIntEnable);
1693:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMAC_enable_interrupt(gmacdev_ch[1],DmaIntEnable);
1694:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****         synopGMAC_enable_interrupt(gmacdev_ch[2],DmaIntEnable);
1695:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1696:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       return IRQ_HANDLED;
1697:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
1698:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1699:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1700:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1701:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #ifdef LINUX_CODE
1702:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
1703:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function to set multicast and promiscous mode.
1704:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] pointer to netif structure.
1705:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \return returns void.
1706:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
1707:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** void synopGMAC_linux_set_multicast_list(synopGMACdevice * synopGMACdev)
1708:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
1709:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   TR("%s called \n",__FUNCTION__);
1710:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return;
1711:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
1712:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** #endif
1713:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1714:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
1715:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * The function checks if the Given ethernet address is valid or not
1716:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
1717:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] MacAddr Mac address
1718:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  *
1719:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @return 1 if Ethernet MAC is valid, otherwise 0
1720:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
1721:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** static __INLINE int is_valid_ether_addr(const unsigned char *MacAddr)
1722:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 1040              		.loc 1 1722 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 8
 1043              		@ frame_needed = 1, uses_anonymous_args = 0
 1044              		@ link register save eliminated.
 1045 0000 80B4     		push	{r7}
 1046              	.LCFI24:
 1047              		.cfi_def_cfa_offset 4
 1048              		.cfi_offset 7, -4
 1049 0002 83B0     		sub	sp, sp, #12
 1050              	.LCFI25:
 1051              		.cfi_def_cfa_offset 16
 1052 0004 00AF     		add	r7, sp, #0
 1053              	.LCFI26:
 1054              		.cfi_def_cfa_register 7
 1055 0006 7860     		str	r0, [r7, #4]
1723:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* <<<DD_ETH_PORT_13>>> */
1724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return (! (0x01 & MacAddr[0]) &&
 1056              		.loc 1 1724 0
 1057 0008 7B68     		ldr	r3, [r7, #4]
 1058 000a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1059 000c 03F00103 		and	r3, r3, #1
 1060 0010 DBB2     		uxtb	r3, r3
 1061 0012 002B     		cmp	r3, #0
 1062 0014 24D1     		bne	.L54
1725:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 		   (MacAddr[0] | MacAddr[1] | MacAddr[2] | MacAddr[3] |
 1063              		.loc 1 1725 0 discriminator 1
 1064 0016 7B68     		ldr	r3, [r7, #4]
 1065 0018 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1066 001a 7B68     		ldr	r3, [r7, #4]
 1067 001c 03F10103 		add	r3, r3, #1
 1068 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return (! (0x01 & MacAddr[0]) &&
 1069              		.loc 1 1724 0 discriminator 1
 1070 0022 1343     		orrs	r3, r3, r2
 1071 0024 DAB2     		uxtb	r2, r3
 1072              		.loc 1 1725 0 discriminator 1
 1073 0026 7B68     		ldr	r3, [r7, #4]
 1074 0028 03F10203 		add	r3, r3, #2
 1075 002c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return (! (0x01 & MacAddr[0]) &&
 1076              		.loc 1 1724 0 discriminator 1
 1077 002e 1343     		orrs	r3, r3, r2
 1078 0030 DAB2     		uxtb	r2, r3
 1079              		.loc 1 1725 0 discriminator 1
 1080 0032 7B68     		ldr	r3, [r7, #4]
 1081 0034 03F10303 		add	r3, r3, #3
 1082 0038 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return (! (0x01 & MacAddr[0]) &&
 1083              		.loc 1 1724 0 discriminator 1
 1084 003a 1343     		orrs	r3, r3, r2
 1085 003c DAB2     		uxtb	r2, r3
1726:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 		    MacAddr[4] | MacAddr[5]));
 1086              		.loc 1 1726 0 discriminator 1
 1087 003e 7B68     		ldr	r3, [r7, #4]
 1088 0040 03F10403 		add	r3, r3, #4
 1089 0044 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return (! (0x01 & MacAddr[0]) &&
 1090              		.loc 1 1724 0 discriminator 1
 1091 0046 1343     		orrs	r3, r3, r2
 1092 0048 DAB2     		uxtb	r2, r3
 1093              		.loc 1 1726 0 discriminator 1
 1094 004a 7B68     		ldr	r3, [r7, #4]
 1095 004c 03F10503 		add	r3, r3, #5
 1096 0050 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
1724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return (! (0x01 & MacAddr[0]) &&
 1097              		.loc 1 1724 0 discriminator 1
 1098 0052 1343     		orrs	r3, r3, r2
 1099 0054 DBB2     		uxtb	r3, r3
 1100 0056 002B     		cmp	r3, #0
 1101 0058 02D0     		beq	.L54
1724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return (! (0x01 & MacAddr[0]) &&
 1102              		.loc 1 1724 0 is_stmt 0 discriminator 3
 1103 005a 4FF00103 		mov	r3, #1
 1104 005e 01E0     		b	.L55
 1105              	.L54:
1724:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return (! (0x01 & MacAddr[0]) &&
 1106              		.loc 1 1724 0 discriminator 2
 1107 0060 4FF00003 		mov	r3, #0
 1108              	.L55:
1727:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 1109              		.loc 1 1727 0 is_stmt 1 discriminator 4
 1110 0064 1846     		mov	r0, r3
 1111 0066 07F10C07 		add	r7, r7, #12
 1112 006a BD46     		mov	sp, r7
 1113 006c 80BC     		pop	{r7}
 1114 006e 7047     		bx	lr
 1115              		.cfi_endproc
 1116              	.LFE120:
 1118              		.section	.text.synopGMAC_set_mac_address,"ax",%progbits
 1119              		.align	2
 1120              		.global	synopGMAC_set_mac_address
 1121              		.thumb
 1122              		.thumb_func
 1124              	synopGMAC_set_mac_address:
 1125              	.LFB121:
1728:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1729:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1730:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
1731:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function to set Ethernet address of the NIC.
1732:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] synopGMACdev pointer to GMAC Device structure.
1733:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] macaddr pointer to an address structure.
1734:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \return Returns 0 on success Errorcode on failure.
1735:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
1736:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** s32 synopGMAC_set_mac_address(synopGMACdevice *synopGMACdev, void * macaddr)
1737:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 1126              		.loc 1 1737 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 8
 1129              		@ frame_needed = 1, uses_anonymous_args = 0
 1130 0000 80B5     		push	{r7, lr}
 1131              	.LCFI27:
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 7, -8
 1134              		.cfi_offset 14, -4
 1135 0002 82B0     		sub	sp, sp, #8
 1136              	.LCFI28:
 1137              		.cfi_def_cfa_offset 16
 1138 0004 00AF     		add	r7, sp, #0
 1139              	.LCFI29:
 1140              		.cfi_def_cfa_register 7
 1141 0006 7860     		str	r0, [r7, #4]
 1142 0008 3960     		str	r1, [r7, #0]
1738:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(synopGMACdev == NULL)
 1143              		.loc 1 1738 0
 1144 000a 7B68     		ldr	r3, [r7, #4]
 1145 000c 002B     		cmp	r3, #0
 1146 000e 02D1     		bne	.L58
1739:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
1740:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     DBG002_ERROR(APP_GID, ETH_NULL_PARAM, 0, NULL);
1741:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****     return ETH_NULL_PARAM;
 1147              		.loc 1 1741 0
 1148 0010 4FF00903 		mov	r3, #9
 1149 0014 1CE0     		b	.L59
 1150              	.L58:
1742:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1743:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1744:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   /* Check if the Ethernet Address is valid */
1745:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   if(!is_valid_ether_addr((unsigned char*)macaddr))
 1151              		.loc 1 1745 0
 1152 0016 3868     		ldr	r0, [r7, #0]
 1153 0018 FFF7FEFF 		bl	is_valid_ether_addr
 1154 001c 0346     		mov	r3, r0
 1155 001e 002B     		cmp	r3, #0
 1156 0020 02D1     		bne	.L60
1746:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   {
1747:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 	  DBG002_ERROR(APP_GID, ETH_INVALID_MAC_ADDR, 0, NULL);
1748:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****       return ETH_INVALID_MAC_ADDR;
 1157              		.loc 1 1748 0
 1158 0022 4FF00803 		mov	r3, #8
 1159 0026 13E0     		b	.L59
 1160              	.L60:
1749:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   }
1750:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1751:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_set_mac_addr(synopGMACdev, GmacAddr0High, GmacAddr0Low,
 1161              		.loc 1 1751 0
 1162 0028 7868     		ldr	r0, [r7, #4]
 1163 002a 4FF04001 		mov	r1, #64
 1164 002e 4FF04402 		mov	r2, #68
 1165 0032 3B68     		ldr	r3, [r7, #0]
 1166 0034 FFF7FEFF 		bl	synopGMAC_set_mac_addr
1752:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 		  (unsigned char *)macaddr);
1753:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1754:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_get_mac_addr(synopGMACdev, GmacAddr0High, GmacAddr0Low,
1755:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 		  (u8 *)(synopGMACdev->MacAddress));
 1167              		.loc 1 1755 0
 1168 0038 7B68     		ldr	r3, [r7, #4]
 1169 003a 03F1BC03 		add	r3, r3, #188
1754:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   synopGMAC_get_mac_addr(synopGMACdev, GmacAddr0High, GmacAddr0Low,
 1170              		.loc 1 1754 0
 1171 003e 7868     		ldr	r0, [r7, #4]
 1172 0040 4FF04001 		mov	r1, #64
 1173 0044 4FF04402 		mov	r2, #68
 1174 0048 FFF7FEFF 		bl	synopGMAC_get_mac_addr
1756:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1757:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return DAVEApp_SUCCESS;
 1175              		.loc 1 1757 0
 1176 004c 4FF00003 		mov	r3, #0
 1177              	.L59:
1758:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 1178              		.loc 1 1758 0
 1179 0050 1846     		mov	r0, r3
 1180 0052 07F10807 		add	r7, r7, #8
 1181 0056 BD46     		mov	sp, r7
 1182 0058 80BD     		pop	{r7, pc}
 1183              		.cfi_endproc
 1184              	.LFE121:
 1186 005a 00BF     		.section	.text.synopGMAC_change_mtu,"ax",%progbits
 1187              		.align	2
 1188              		.global	synopGMAC_change_mtu
 1189              		.thumb
 1190              		.thumb_func
 1192              	synopGMAC_change_mtu:
 1193              	.LFB122:
1759:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** 
1760:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** /**
1761:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * Function to change the Maximum Transfer Unit.
1762:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] pointer to synopGMACdevice structure.
1763:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * @param[in] New value for maximum frame size.
1764:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  * \return Returns 0 on success Errorcode on failure.
1765:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****  */
1766:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** s32 synopGMAC_change_mtu(synopGMACdevice * synopGMACdev, s32 newmtu)
1767:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** {
 1194              		.loc 1 1767 0
 1195              		.cfi_startproc
 1196              		@ args = 0, pretend = 0, frame = 8
 1197              		@ frame_needed = 1, uses_anonymous_args = 0
 1198              		@ link register save eliminated.
 1199 0000 80B4     		push	{r7}
 1200              	.LCFI30:
 1201              		.cfi_def_cfa_offset 4
 1202              		.cfi_offset 7, -4
 1203 0002 83B0     		sub	sp, sp, #12
 1204              	.LCFI31:
 1205              		.cfi_def_cfa_offset 16
 1206 0004 00AF     		add	r7, sp, #0
 1207              	.LCFI32:
 1208              		.cfi_def_cfa_register 7
 1209 0006 7860     		str	r0, [r7, #4]
 1210 0008 3960     		str	r1, [r7, #0]
1768:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   //Todo Function not yet implemented.
1769:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c ****   return 0;
 1211              		.loc 1 1769 0
 1212 000a 4FF00003 		mov	r3, #0
1770:../Dave/Generated/src/ETH001/synopGMAC_network_interface.c **** }
 1213              		.loc 1 1770 0
 1214 000e 1846     		mov	r0, r3
 1215 0010 07F10C07 		add	r7, r7, #12
 1216 0014 BD46     		mov	sp, r7
 1217 0016 80BC     		pop	{r7}
 1218 0018 7047     		bx	lr
 1219              		.cfi_endproc
 1220              	.LFE122:
 1222 001a 00BF     		.text
 1223              	.Letext0:
 1224              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1225              		.file 3 "C:\\DAVE3_workspace\\ws3.1.10\\XMC4500_RK_HTTPserver\\XMC4500_RK_HTTPserver\\Dave\\Genera
 1226              		.file 4 "C:\\DAVE3_workspace\\ws3.1.10\\XMC4500_RK_HTTPserver\\XMC4500_RK_HTTPserver\\Dave\\Genera
 1227              		.file 5 "C:\\DAVE3_workspace\\ws3.1.10\\XMC4500_RK_HTTPserver\\XMC4500_RK_HTTPserver\\Dave\\Genera
 1228              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 synopGMAC_network_interface.c
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:20     .text.synopGMAC_IsEtherAddrsValid:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:25     .text.synopGMAC_IsEtherAddrsValid:00000000 synopGMAC_IsEtherAddrsValid
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:1038   .text.is_valid_ether_addr:00000000 is_valid_ether_addr
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:68     .text.synopGMAC_powerup_mac:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:73     .text.synopGMAC_powerup_mac:00000000 synopGMAC_powerup_mac
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:127    .text.synopGMAC_cable_unplug_function:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:132    .text.synopGMAC_cable_unplug_function:00000000 synopGMAC_cable_unplug_function
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:202    .text.synopGMAC_setup_rx_desc_queue:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:207    .text.synopGMAC_setup_rx_desc_queue:00000000 synopGMAC_setup_rx_desc_queue
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:418    .text.synopGMAC_giveup_rx_desc_queue:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:423    .text.synopGMAC_giveup_rx_desc_queue:00000000 synopGMAC_giveup_rx_desc_queue
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:553    .text.synopGMAC_setup_tx_desc_queue:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:558    .text.synopGMAC_setup_tx_desc_queue:00000000 synopGMAC_setup_tx_desc_queue
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:769    .text.synopGMAC_giveup_tx_desc_queue:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:774    .text.synopGMAC_giveup_tx_desc_queue:00000000 synopGMAC_giveup_tx_desc_queue
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:904    .text.synop_handle_transmit_over:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:909    .text.synop_handle_transmit_over:00000000 synop_handle_transmit_over
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:1034   .text.is_valid_ether_addr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:1119   .text.synopGMAC_set_mac_address:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:1124   .text.synopGMAC_set_mac_address:00000000 synopGMAC_set_mac_address
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:1187   .text.synopGMAC_change_mtu:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\cc3skSnT.s:1192   .text.synopGMAC_change_mtu:00000000 synopGMAC_change_mtu
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1791a5ae2e936ca1033c1c44be394cc7
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.55.0006b5fda1d606516f2dcaf4aca92b11
                           .group:00000000 wm4.MULTIPLEXER.h.43.4aa654be3ec80895f631b5281bbb9105
                           .group:00000000 wm4.CCU8PWMLIB.h.70.a5d6a5267902b8b4aea2a0224518259a
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.SYSTM001.h.63.668098b2213d40a5bd0db5fbe813cf05
                           .group:00000000 wm4.ETH002_Conf.h.56.5bd2b085b66f43d51abd69396be7f35f
                           .group:00000000 wm4.EthernetPHY.h.54.7af1709186b21e62a5f1d4049da3988b
                           .group:00000000 wm4.ETH001_Conf.h.71.1e151af1ba54dd023e1f942bdf922819
                           .group:00000000 wm4.synopGMAC_plat.h.78.7a90e072b497857344aea4ba1e994097
                           .group:00000000 wm4.synopGMAC_stack_interface.h.73.6be6aaee0ac6637432f4d0589044479b
                           .group:00000000 wm4.SynopGMAC_Dev.h.72.7c89c07cf666d37f5c9b615720d5e111
                           .group:00000000 wm4.synopGMAC_network_interface.h.73.4dd08316a11bc43c8c4a9da15277fb0f
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.ETH004_Conf.h.56.564c3f309c32b3c742fc91049cf66940
                           .group:00000000 wm4.lwipopts.h.73.a7a63bda1e8216abd1d90275eaaa0027
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.b213c7fd77614ebc3691cef18ad2ff22
                           .group:00000000 wm4.cc.h.66.ec134211c658dcc89de4610e4e7bab46
                           .group:00000000 wm4.arch.h.47.5153c52bfb94ee3b37299920afab6afd
                           .group:00000000 wm4.debug.h.43.557ecd6c90cc70b375bb8a29118be47b
                           .group:00000000 wm4.opt.h.94.d36882acafebb8726bce646fc8b2397b
                           .group:00000000 wm4.err.h.52.37c5d17538f8e8347a9c84196701e92d
                           .group:00000000 wm4.pbuf.h.43.e9a1ad12b97478787a109e22d5306820
                           .group:00000000 wm4.inet.h.46.b516065779826845d16d49f513869a2b
                           .group:00000000 wm4.ip_addr.h.79.9a0ce887ca8c88c22ad7686bcb5105df
                           .group:00000000 wm4.sys.h.65.4a0cd87b9e0d8bb4cd6b30e939b2ca7e
                           .group:00000000 wm4.mem.h.96.20770766e6c9e6c42af6bfa95ef5c63f
                           .group:00000000 wm4.def.h.33.049f911dab26023a266ed46ced0ce4bc
                           .group:00000000 wm4.netif.h.53.c13431a64f0e73a26710e71455725e84
                           .group:00000000 wm4.ip.h.48.ad46847692d4d729760949b27e48a442
                           .group:00000000 wm4.icmp.h.44.450dbf91f594cc26ad19d086cdc83713
                           .group:00000000 wm4.tcp.h.55.5c30b9432fa60afaa85cbdd225b0c683
                           .group:00000000 wm4.udp.h.48.1a8dde095cd0a13580afaba1443e5a3f
                           .group:00000000 wm4.SDMMC003_Conf.h.50.e707c07613fb4e6f2eaec982a892429d
                           .group:00000000 wm4.SDMMC003.h.85.b66055f6032a052f5173e3d123f9c61e
                           .group:00000000 wm4.SDMMC001.h.50.3e2fedc7e5ace33db4121d5cc027e8a4
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.diskio.h.7.93a3c8131d08770c060b04d2180fd09a
                           .group:00000000 wm4.diskio.h.42.a863614abe78d56d18ed7cb292d0028d
                           .group:00000000 wm4.ffconf.h.57.4ab321a2116d35ff7f28236ac31fad7c
                           .group:00000000 wm4.ff.h.82.8f05a37d35a49dba2681a7f047fee4ee
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.LMM001.h.42.c21fe9cbedc336738c3dc89405cad216
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.100.69cb08672bc6ab3f052aa9d5bd6dc5ca
                           .group:00000000 wm4._default_fcntl.h.6.d036cf640d0f9a06bcff1be55acd66be
                           .group:00000000 wm4.stat.h.2.a761b02482a54847ff0d09dfcff24a5c
                           .group:00000000 wm4.fcntl.h.9.9336f33d7f5028f694c75e6e224e0cf7
                           .group:00000000 wm4.SLTHA001.h.97.d7e87c19a31e3244bdd5839e7cc42a61
                           .group:00000000 wm4.WEBSERVER001_Conf.h.54.cd6d29aaa96a848cbc5321bab5d6cd90
                           .group:00000000 wm4.ADCGROUP001.h.48.081c7f952eb4b6ea2df7d05180ee1663
                           .group:00000000 wm4.IO001.h.49.1da965fb490206cf7cde64a90f6912e1
                           .group:00000000 wm4.MOTORLIBS.h.59.b2e97de0df555dedfa51e24447b57ab8
                           .group:00000000 wm4.uc_id.h.35.a6c4837fad81477ba31967683332b8cc
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.c5c972f6f634bc5116c171852aaab668
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9

UNDEFINED SYMBOLS
GMAC_Power_down
synopGMAC_is_magic_packet_received
synopGMAC_is_wakeup_frame_received
synopGMAC_pmt_int_disable
synopGMAC_rx_enable
synopGMAC_enable_dma_rx
synopGMAC_tx_enable
synopGMAC_enable_dma_tx
PHY_IsLinkUP
PHY_InitializeDevice
synopGMAC_mac_init
synopGMAC_promisc_enable
Eth_RxDMADescList
synopGMAC_rx_desc_init_ring
synopGMAC_rx_desc_init_chain
synopGMAC_get_desc_data
Eth_TxDMADescList
synopGMAC_tx_desc_init_ring
synopGMAC_tx_desc_init_chain
synopGMAC_get_tx_qptr
synopGMAC_is_desc_valid
synopGMAC_is_tx_aborted
synopGMAC_is_tx_carrier_error
synopGMAC_get_tx_collision_count
synopGMAC_set_mac_addr
synopGMAC_get_mac_addr
