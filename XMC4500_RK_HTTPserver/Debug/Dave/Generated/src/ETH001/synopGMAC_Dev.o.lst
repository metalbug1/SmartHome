   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"synopGMAC_Dev.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              		.align	2
  21              	SynopGMACOneShotTimerCallback:
  22 0000 00000000 		.space	4
  23              		.section	.text.synopGMAC_set_tx_address,"ax",%progbits
  24              		.align	2
  25              		.global	synopGMAC_set_tx_address
  26              		.thumb
  27              		.thumb_func
  29              	synopGMAC_set_tx_address:
  30              	.LFB117:
  31              		.file 1 "../Dave/Generated/src/ETH001/synopGMAC_Dev.c"
   1:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /* ===================================================================================
   2:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Copyright (c) <2009> Synopsys, Inc.
   3:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  *
   4:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of 
   5:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * this software annotated with this license and associated documentation files 
   6:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * (the "Software"), to deal in the Software without restriction, including without 
   7:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
   8:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * and/or sell copies of the Software, and to permit persons to whom the Software is 
   9:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * furnished to do so, subject to the following conditions:
  10:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  *
  11:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * The above copyright notice and this permission notice shall be included in all 
  12:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * copies or substantial portions of the Software.
  13:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  *
  14:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
  15:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  16:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
  17:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
  18:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
  19:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  20:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  *
  21:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * =================================================================================== */
  22:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /* =========================================================================== * 
  23:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Copyright (c) 2011, Infineon Technologies AG                                *
  24:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * All rights reserved.                                                        * 
  25:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  *                                                                             *
  26:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Redistribution and use in source and binary forms, with or without          *
  27:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * modification, are permitted provided that the following conditions are met: *
  28:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Redistributions of source code must retain the above copyright notice, this *
  29:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * list of conditions and the following disclaimer. Redistributions in binary  *
  30:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * form must reproduce the above copyright notice, this list of conditions and *
  31:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * the following disclaimer in the documentation and/or other materials        *
  32:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * provided with the distribution. Neither the name of the copyright holders   * 
  33:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * nor the names of its contributors may be used to endorse or promote         *
  34:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * products derived from this software without specific prior written          * 
  35:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * permission.                                                                 *
  36:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  *                                                                             *
  37:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" *
  38:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,       *
  39:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR      *
  40:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR           *
  41:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,       *
  42:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,         * 
  43:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; *
  44:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,    *
  45:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR     *
  46:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF      *
  47:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                  *
  48:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * To improve the quality of the software, users are encouraged to share       *
  49:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * modifications, enhancements or bug fixes with                               *
  50:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Infineon Technologies AG (dave@infineon.com).                               *
  51:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  *                                                                             *
  52:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * ==========================================================================  *
  53:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ********************************************************************************
  54:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                                                                            **
  55:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                                                                            **
  56:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ** PLATFORM : Infineon XMC4000 Series                                         **
  57:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                                                                            **
  58:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ** COMPILER : Compiler Independent                                            **
  59:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                                                                            **
  60:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ** AUTHOR : DAVE App Developer                                                **
  61:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                                                                            **
  62:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
  63:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                                                                            **
  64:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ** MODIFICATION DATE : Dec 29, 2011                                           **
  65:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                                                                            **
  66:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** *******************************************************************************/
  67:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  
  68:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*******************************************************************************
  69:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                       Author(s) Identity                                   **
  70:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ********************************************************************************
  71:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** **                                                                            **
  72:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ** Initials     Name                                                          **
  73:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ** ---------------------------------------------------------------------------**
  74:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** ** JRP         DAVE App Developer                                             **
  75:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** *******************************************************************************/
  76:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** \file
  77:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * This file defines the synopsys GMAC device dependent functions.
  78:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Most of the operations on the GMAC device are available in this file.
  79:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Functions for initiliasing and accessing MAC/DMA/PHY registers and the DMA descriptors
  80:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * are encapsulated in this file. The functions are platform/host/OS independent.
  81:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * These functions in turn use the low level device dependent (HAL) functions to 
  82:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * access the register space.
  83:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * \internal
  84:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * ------------------------REVISION HISTORY---------------------------------
  85:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * Synopsys                 01/Aug/2007                              Created
  86:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  */
  87:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
  88:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #include <DAVE3.h>
  89:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
  90:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  * @cond INTERNAL_DOCS
  91:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  */
  92:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	 
  93:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** static SynopGMACTimerCallbackType SynopGMACOneShotTimerCallback;
  94:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
  95:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
  96:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
  97:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
  98:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_set_tx_address(synopGMACdevice * gmacdev,u32 count, u32 Buffer1)
  99:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
  32              		.loc 1 99 0
  33              		.cfi_startproc
  34              		@ args = 0, pretend = 0, frame = 24
  35              		@ frame_needed = 1, uses_anonymous_args = 0
  36              		@ link register save eliminated.
  37 0000 80B4     		push	{r7}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 4
  40              		.cfi_offset 7, -4
  41 0002 87B0     		sub	sp, sp, #28
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 32
  44 0004 00AF     		add	r7, sp, #0
  45              	.LCFI2:
  46              		.cfi_def_cfa_register 7
  47 0006 F860     		str	r0, [r7, #12]
  48 0008 B960     		str	r1, [r7, #8]
  49 000a 7A60     		str	r2, [r7, #4]
 100:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc*  txdesc = &(gmacdev->TxDesc[count]);
  50              		.loc 1 100 0
  51 000c FB68     		ldr	r3, [r7, #12]
  52 000e 9969     		ldr	r1, [r3, #24]
  53 0010 BA68     		ldr	r2, [r7, #8]
  54 0012 1346     		mov	r3, r2
  55 0014 4FEA8303 		lsl	r3, r3, #2
  56 0018 9B18     		adds	r3, r3, r2
  57 001a 4FEAC303 		lsl	r3, r3, #3
  58 001e CB18     		adds	r3, r1, r3
  59 0020 7B61     		str	r3, [r7, #20]
 101:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	txdesc->buffer1 = Buffer1;
  60              		.loc 1 101 0
  61 0022 7B69     		ldr	r3, [r7, #20]
  62 0024 7A68     		ldr	r2, [r7, #4]
  63 0026 9A60     		str	r2, [r3, #8]
 102:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	txdesc->data1 = Buffer1;
  64              		.loc 1 102 0
  65 0028 7B69     		ldr	r3, [r7, #20]
  66 002a 7A68     		ldr	r2, [r7, #4]
  67 002c 1A62     		str	r2, [r3, #32]
 103:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	txdesc->buffer2 = 0;
  68              		.loc 1 103 0
  69 002e 7B69     		ldr	r3, [r7, #20]
  70 0030 4FF00002 		mov	r2, #0
  71 0034 DA60     		str	r2, [r3, #12]
 104:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	txdesc->data2 = 0;
  72              		.loc 1 104 0
  73 0036 7B69     		ldr	r3, [r7, #20]
  74 0038 4FF00002 		mov	r2, #0
  75 003c 5A62     		str	r2, [r3, #36]
 105:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;
  76              		.loc 1 105 0
  77 003e 4FF00003 		mov	r3, #0
 106:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
  78              		.loc 1 106 0
  79 0042 1846     		mov	r0, r3
  80 0044 07F11C07 		add	r7, r7, #28
  81 0048 BD46     		mov	sp, r7
  82 004a 80BC     		pop	{r7}
  83 004c 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE117:
  87 004e 00BF     		.section	.text.synopGMAC_RegisterOneShotTimerCallback,"ax",%progbits
  88              		.align	2
  89              		.global	synopGMAC_RegisterOneShotTimerCallback
  90              		.thumb
  91              		.thumb_func
  93              	synopGMAC_RegisterOneShotTimerCallback:
  94              	.LFB118:
 107:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 108:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_RegisterOneShotTimerCallback(SynopGMACTimerCallbackType Callback)
 109:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
  95              		.loc 1 109 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 8
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 100 0000 80B4     		push	{r7}
 101              	.LCFI3:
 102              		.cfi_def_cfa_offset 4
 103              		.cfi_offset 7, -4
 104 0002 83B0     		sub	sp, sp, #12
 105              	.LCFI4:
 106              		.cfi_def_cfa_offset 16
 107 0004 00AF     		add	r7, sp, #0
 108              	.LCFI5:
 109              		.cfi_def_cfa_register 7
 110 0006 7860     		str	r0, [r7, #4]
 110:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	SynopGMACOneShotTimerCallback = Callback;
 111              		.loc 1 110 0
 112 0008 40F20003 		movw	r3, #:lower16:SynopGMACOneShotTimerCallback
 113 000c C0F20003 		movt	r3, #:upper16:SynopGMACOneShotTimerCallback
 114 0010 7A68     		ldr	r2, [r7, #4]
 115 0012 1A60     		str	r2, [r3, #0]
 111:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 116              		.loc 1 111 0
 117 0014 07F10C07 		add	r7, r7, #12
 118 0018 BD46     		mov	sp, r7
 119 001a 80BC     		pop	{r7}
 120 001c 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE118:
 124 001e 00BF     		.section	.text.synopGMAC_set_mdc_clk_div,"ax",%progbits
 125              		.align	2
 126              		.global	synopGMAC_set_mdc_clk_div
 127              		.thumb
 128              		.thumb_func
 130              	synopGMAC_set_mdc_clk_div:
 131              	.LFB119:
 112:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 113:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Function to set the MDC clock for mdio transactiona
 114:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *
 115:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to device structure.
 116:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] clk divider value.
 117:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return Reuturns 0 on success else return the error value.
 118:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 119:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_set_mdc_clk_div(synopGMACdevice *gmacdev,u32 clk_div_val)
 120:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 132              		.loc 1 120 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 16
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136 0000 80B5     		push	{r7, lr}
 137              	.LCFI6:
 138              		.cfi_def_cfa_offset 8
 139              		.cfi_offset 7, -8
 140              		.cfi_offset 14, -4
 141 0002 84B0     		sub	sp, sp, #16
 142              	.LCFI7:
 143              		.cfi_def_cfa_offset 24
 144 0004 00AF     		add	r7, sp, #0
 145              	.LCFI8:
 146              		.cfi_def_cfa_register 7
 147 0006 7860     		str	r0, [r7, #4]
 148 0008 3960     		str	r1, [r7, #0]
 121:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 orig_data;
 122:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	orig_data = synopGMACReadReg((u32 *)gmacdev->MacBase,GmacGmiiAddr); //set the mdc clock to the use
 149              		.loc 1 122 0
 150 000a 7B68     		ldr	r3, [r7, #4]
 151 000c 1B68     		ldr	r3, [r3, #0]
 152 000e 1846     		mov	r0, r3
 153 0010 4FF01001 		mov	r1, #16
 154 0014 FFF7FEFF 		bl	synopGMACReadReg
 155 0018 F860     		str	r0, [r7, #12]
 123:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	orig_data &= (~ GmiiCsrClkMask);	   
 156              		.loc 1 123 0
 157 001a FB68     		ldr	r3, [r7, #12]
 158 001c 23F03C03 		bic	r3, r3, #60
 159 0020 FB60     		str	r3, [r7, #12]
 124:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	orig_data |= clk_div_val;
 160              		.loc 1 124 0
 161 0022 FA68     		ldr	r2, [r7, #12]
 162 0024 3B68     		ldr	r3, [r7, #0]
 163 0026 1343     		orrs	r3, r3, r2
 164 0028 FB60     		str	r3, [r7, #12]
 125:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->MacBase, GmacGmiiAddr ,orig_data);
 165              		.loc 1 125 0
 166 002a 7B68     		ldr	r3, [r7, #4]
 167 002c 1B68     		ldr	r3, [r3, #0]
 168 002e 1846     		mov	r0, r3
 169 0030 4FF01001 		mov	r1, #16
 170 0034 FA68     		ldr	r2, [r7, #12]
 171 0036 FFF7FEFF 		bl	synopGMACWriteReg
 126:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;
 172              		.loc 1 126 0
 173 003a 4FF00003 		mov	r3, #0
 127:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 174              		.loc 1 127 0
 175 003e 1846     		mov	r0, r3
 176 0040 07F11007 		add	r7, r7, #16
 177 0044 BD46     		mov	sp, r7
 178 0046 80BD     		pop	{r7, pc}
 179              		.cfi_endproc
 180              	.LFE119:
 182              		.section	.text.synopGMAC_get_mdc_clk_div,"ax",%progbits
 183              		.align	2
 184              		.global	synopGMAC_get_mdc_clk_div
 185              		.thumb
 186              		.thumb_func
 188              	synopGMAC_get_mdc_clk_div:
 189              	.LFB120:
 128:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 129:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 130:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Returns the current MDC divider value programmed in the ip.
 131:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *
 132:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to device structure.
 133:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] clk divider value.
 134:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return Returns the MDC divider value read.
 135:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 136:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_get_mdc_clk_div(synopGMACdevice *gmacdev)
 137:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 190              		.loc 1 137 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 16
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194 0000 80B5     		push	{r7, lr}
 195              	.LCFI9:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 0002 84B0     		sub	sp, sp, #16
 200              	.LCFI10:
 201              		.cfi_def_cfa_offset 24
 202 0004 00AF     		add	r7, sp, #0
 203              	.LCFI11:
 204              		.cfi_def_cfa_register 7
 205 0006 7860     		str	r0, [r7, #4]
 138:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
 139:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->MacBase,GmacGmiiAddr);
 206              		.loc 1 139 0
 207 0008 7B68     		ldr	r3, [r7, #4]
 208 000a 1B68     		ldr	r3, [r3, #0]
 209 000c 1846     		mov	r0, r3
 210 000e 4FF01001 		mov	r1, #16
 211 0012 FFF7FEFF 		bl	synopGMACReadReg
 212 0016 F860     		str	r0, [r7, #12]
 140:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data &= GmiiCsrClkMask;
 213              		.loc 1 140 0
 214 0018 FB68     		ldr	r3, [r7, #12]
 215 001a 03F03C03 		and	r3, r3, #60
 216 001e FB60     		str	r3, [r7, #12]
 141:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return data;
 217              		.loc 1 141 0
 218 0020 FB68     		ldr	r3, [r7, #12]
 142:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 219              		.loc 1 142 0
 220 0022 1846     		mov	r0, r3
 221 0024 07F11007 		add	r7, r7, #16
 222 0028 BD46     		mov	sp, r7
 223 002a 80BD     		pop	{r7, pc}
 224              		.cfi_endproc
 225              	.LFE120:
 227              		.section	.text.synopGMAC_read_version,"ax",%progbits
 228              		.align	2
 229              		.global	synopGMAC_read_version
 230              		.thumb
 231              		.thumb_func
 233              	synopGMAC_read_version:
 234              	.LFB121:
 143:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 144:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef LINUX_CODE
 145:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 146:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Function to read the Phy register. The access to phy register
 147:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * is a slow process as the data is moved accross MDI/MDO interface
 148:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to Register Base (It is the mac base in our case) .
 149:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] PhyBase register is the index of one of supported 32 PHY devices.
 150:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Register offset is the index of one of the 32 phy register.
 151:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] u16 data read from the respective phy register (only valid iff return value is 0).
 152:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return Returns 0 on success else return the error status.
 153:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 154:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_read_phy_reg(u32 *RegBase,u32 PhyBase, u32 RegOffset, u16 * data)
 155:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 156:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 addr;
 157:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 loop_variable;
 158:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** addr = ((PhyBase << GmiiDevShift) & GmiiDevMask) | ((RegOffset << GmiiRegShift) & GmiiRegMask);
 159:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** addr = addr | GmiiBusy ; //Gmii busy bit
 160:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** synopGMACWriteReg(RegBase,GmacGmiiAddr,addr); //write the address from where the data to be read in
 161:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 162:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /* Find out the correct DEFAULT_LOOP_VARIABLE for IFX platform */
 163:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         for(loop_variable = 0; loop_variable < DEFAULT_LOOP_VARIABLE; loop_variable++){ //Wait till
 164:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                 if (!(synopGMACReadReg(RegBase,GmacGmiiAddr) & GmiiBusy)){
 165:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                 break;
 166:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                 }
 167:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/*Find out the correct DEFAULT_DELAY_VARIABLE for IFX platform */
 168:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         plat_delay(DEFAULT_DELAY_VARIABLE);
 169:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         }
 170:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/*Find out the correct DEFAULT_LOOP_VARIABLE for IFX platform */
 171:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         if(loop_variable < DEFAULT_LOOP_VARIABLE)
 172:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                * data = (u16)(synopGMACReadReg(RegBase,GmacGmiiData) & 0xFFFF);
 173:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         else{
 174:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         TR("Error::: PHY not responding Busy bit didnot get cleared !!!!!!\n");
 175:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return -ESYNOPGMACPHYERR;
 176:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         }
 177:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** return -ESYNOPGMACNOERR;
 178:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 179:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 180:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 181:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Function to write to the Phy register. The access to phy register
 182:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * is a slow process as the data is moved accross MDI/MDO interface
 183:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to Register Base (It is the mac base in our case) .
 184:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] PhyBase register is the index of one of supported 32 PHY devices.
 185:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Register offset is the index of one of the 32 phy register.
 186:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] data to be written to the respective phy register.
 187:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return Returns 0 on success else return the error status.
 188:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 189:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_write_phy_reg(u32 *RegBase, u32 PhyBase, u32 RegOffset, u16 data)
 190:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 191:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 addr;
 192:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 loop_variable;
 193:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 194:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** synopGMACWriteReg(RegBase,GmacGmiiData,data); // write the data in to GmacGmiiData register of syno
 195:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 196:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** addr = ((PhyBase << GmiiDevShift) & GmiiDevMask) | ((RegOffset << GmiiRegShift) & GmiiRegMask) | Gm
 197:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 198:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** addr = addr | GmiiBusy ; //set Gmii clk to 20-35 Mhz and Gmii busy bit
 199:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  
 200:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** synopGMACWriteReg(RegBase,GmacGmiiAddr,addr);
 201:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /* Find out the correct DEFAULT_LOOP_VARIABLE for IFX platform */
 202:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         for(loop_variable = 0; loop_variable < DEFAULT_LOOP_VARIABLE; loop_variable++){
 203:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                 if (!(synopGMACReadReg(RegBase,GmacGmiiAddr) & GmiiBusy)){
 204:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                 break;
 205:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                 }
 206:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/*Find out the correct DEFAULT_DELAY_VARIABLE for IFX platform */
 207:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         plat_delay(DEFAULT_DELAY_VARIABLE);
 208:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         }
 209:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 210:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/* Find out the correct DEFAULT_LOOP_VARIABLE for IFX platform */
 211:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         if(loop_variable < DEFAULT_LOOP_VARIABLE){
 212:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return -ESYNOPGMACNOERR;
 213:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
 214:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         else{
 215:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         TR("Error::: PHY not responding Busy bit didnot get cleared !!!!!!\n");
 216:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return -ESYNOPGMACPHYERR;
 217:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         }
 218:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 219:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 220:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 221:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Function to configure the phy in loopback mode. 
 222:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *
 223:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 224:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] enable or disable the loopback.
 225:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 on success else return the error status.
 226:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note Don't get confused with mac loop-back synopGMAC_loopback_on(synopGMACdevice *) 
 227:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * and synopGMAC_loopback_off(synopGMACdevice *) functions.
 228:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 229:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_phy_loopback(synopGMACdevice *gmacdev, bool loopback)
 230:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 231:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 status = -ESYNOPGMACNOERR;
 232:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** if(loopback)
 233:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	status = synopGMAC_write_phy_reg((u32 *)gmacdev->MacBase, gmacdev->PhyBase, PHY_CONTROL_REG, Mii_L
 234:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** else
 235:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	status = synopGMAC_write_phy_reg((u32 *)gmacdev->MacBase, gmacdev->PhyBase, PHY_CONTROL_REG, Mii_N
 236:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 237:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** return status;
 238:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 239:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
 240:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 241:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 242:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 243:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Function to read the GMAC IP Version and populates the same in device data structure.
 244:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 245:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return Always return 0.
 246:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 247:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 248:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_read_version (synopGMACdevice * gmacdev) 
 249:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {	
 235              		.loc 1 249 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 16
 238              		@ frame_needed = 1, uses_anonymous_args = 0
 239 0000 80B5     		push	{r7, lr}
 240              	.LCFI12:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 7, -8
 243              		.cfi_offset 14, -4
 244 0002 84B0     		sub	sp, sp, #16
 245              	.LCFI13:
 246              		.cfi_def_cfa_offset 24
 247 0004 00AF     		add	r7, sp, #0
 248              	.LCFI14:
 249              		.cfi_def_cfa_register 7
 250 0006 7860     		str	r0, [r7, #4]
 250:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data = 0;
 251              		.loc 1 250 0
 252 0008 4FF00003 		mov	r3, #0
 253 000c FB60     		str	r3, [r7, #12]
 251:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****  
 252:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->MacBase, GmacVersion );
 254              		.loc 1 252 0
 255 000e 7B68     		ldr	r3, [r7, #4]
 256 0010 1B68     		ldr	r3, [r3, #0]
 257 0012 1846     		mov	r0, r3
 258 0014 4FF02001 		mov	r1, #32
 259 0018 FFF7FEFF 		bl	synopGMACReadReg
 260 001c F860     		str	r0, [r7, #12]
 253:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->Version = data;
 261              		.loc 1 253 0
 262 001e 7B68     		ldr	r3, [r7, #4]
 263 0020 FA68     		ldr	r2, [r7, #12]
 264 0022 DA60     		str	r2, [r3, #12]
 254:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 255:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	// TR("The data read from %08x is %08x\n",(gmacdev->MacBase+GmacVersion),data);
 256:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;
 265              		.loc 1 256 0
 266 0024 4FF00003 		mov	r3, #0
 257:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 267              		.loc 1 257 0
 268 0028 1846     		mov	r0, r3
 269 002a 07F11007 		add	r7, r7, #16
 270 002e BD46     		mov	sp, r7
 271 0030 80BD     		pop	{r7, pc}
 272              		.cfi_endproc
 273              	.LFE121:
 275 0032 00BF     		.section	.text.synopGMAC_rmii_100mbps_enable,"ax",%progbits
 276              		.align	2
 277              		.global	synopGMAC_rmii_100mbps_enable
 278              		.thumb
 279              		.thumb_func
 281              	synopGMAC_rmii_100mbps_enable:
 282              	.LFB122:
 258:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 259:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the RMII 100Mbps mode. 
 260:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 261:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 262:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 263:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rmii_100mbps_enable(synopGMACdevice * gmacdev)
 264:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 283              		.loc 1 264 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 8
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287 0000 80B5     		push	{r7, lr}
 288              	.LCFI15:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 82B0     		sub	sp, sp, #8
 293              	.LCFI16:
 294              		.cfi_def_cfa_offset 16
 295 0004 00AF     		add	r7, sp, #0
 296              	.LCFI17:
 297              		.cfi_def_cfa_register 7
 298 0006 7860     		str	r0, [r7, #4]
 265:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacFESpeed100);
 299              		.loc 1 265 0
 300 0008 7B68     		ldr	r3, [r7, #4]
 301 000a 1B68     		ldr	r3, [r3, #0]
 302 000c 1846     		mov	r0, r3
 303 000e 4FF00001 		mov	r1, #0
 304 0012 4FF48042 		mov	r2, #16384
 305 0016 FFF7FEFF 		bl	synopGMACSetBits
 266:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 306              		.loc 1 266 0
 307 001a 00BF     		nop
 267:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 308              		.loc 1 267 0
 309 001c 07F10807 		add	r7, r7, #8
 310 0020 BD46     		mov	sp, r7
 311 0022 80BD     		pop	{r7, pc}
 312              		.cfi_endproc
 313              	.LFE122:
 315              		.section	.text.synopGMAC_reset,"ax",%progbits
 316              		.align	2
 317              		.global	synopGMAC_reset
 318              		.thumb
 319              		.thumb_func
 321              	synopGMAC_reset:
 322              	.LFB123:
 268:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 269:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 270:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Function to reset the GMAC core. 
 271:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This reests the DMA and GMAC core. After reset all the registers holds their respective reset v
 272:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 273:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 on success else return the error status.
 274:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 275:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_reset (synopGMACdevice * gmacdev ) 
 276:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {	
 323              		.loc 1 276 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 16
 326              		@ frame_needed = 1, uses_anonymous_args = 0
 327 0000 80B5     		push	{r7, lr}
 328              	.LCFI18:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 7, -8
 331              		.cfi_offset 14, -4
 332 0002 84B0     		sub	sp, sp, #16
 333              	.LCFI19:
 334              		.cfi_def_cfa_offset 24
 335 0004 00AF     		add	r7, sp, #0
 336              	.LCFI20:
 337              		.cfi_def_cfa_register 7
 338 0006 7860     		str	r0, [r7, #4]
 277:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data = 0;
 339              		.loc 1 277 0
 340 0008 4FF00003 		mov	r3, #0
 341 000c FB60     		str	r3, [r7, #12]
 278:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaBusMode ,DmaResetOn);
 342              		.loc 1 278 0
 343 000e 7B68     		ldr	r3, [r7, #4]
 344 0010 5B68     		ldr	r3, [r3, #4]
 345 0012 1846     		mov	r0, r3
 346 0014 4FF00001 		mov	r1, #0
 347 0018 4FF00102 		mov	r2, #1
 348 001c FFF7FEFF 		bl	synopGMACWriteReg
 279:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 280:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	/* Find out the correct DEFAULT_LOOP_VARIABLE for IFX platform */
 281:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 282:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****     //    synopGMAC_Wait(WAIT_TIME_TO_RESET);
 283:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(NULL != SynopGMACOneShotTimerCallback)
 349              		.loc 1 283 0
 350 0020 40F20003 		movw	r3, #:lower16:SynopGMACOneShotTimerCallback
 351 0024 C0F20003 		movt	r3, #:upper16:SynopGMACOneShotTimerCallback
 352 0028 1B68     		ldr	r3, [r3, #0]
 353 002a 002B     		cmp	r3, #0
 354 002c 09D0     		beq	.L13
 284:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		{
 285:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 				SynopGMACOneShotTimerCallback(WAIT_TIME_TO_RESET);
 355              		.loc 1 285 0
 356 002e 40F20003 		movw	r3, #:lower16:SynopGMACOneShotTimerCallback
 357 0032 C0F20003 		movt	r3, #:upper16:SynopGMACOneShotTimerCallback
 358 0036 1B68     		ldr	r3, [r3, #0]
 359 0038 4FF00100 		mov	r0, #1
 360 003c 9847     		blx	r3
 361 003e 00E0     		b	.L13
 362              	.L17:
 286:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
 287:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 288:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 289:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	while (1)
 290:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	{
 291:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		data = synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaBusMode);
 292:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//TR("DATA after Reset = %08x\n",data);
 293:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
 294:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if( (data & DmaResetOn) == DmaResetOff)
 295:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		{
 296:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			break;
 297:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
 298:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
 363              		.loc 1 298 0
 364 0040 00BF     		nop
 365              	.L13:
 291:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		data = synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaBusMode);
 366              		.loc 1 291 0
 367 0042 7B68     		ldr	r3, [r7, #4]
 368 0044 5B68     		ldr	r3, [r3, #4]
 369 0046 1846     		mov	r0, r3
 370 0048 4FF00001 		mov	r1, #0
 371 004c FFF7FEFF 		bl	synopGMACReadReg
 372 0050 F860     		str	r0, [r7, #12]
 294:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if( (data & DmaResetOn) == DmaResetOff)
 373              		.loc 1 294 0
 374 0052 FB68     		ldr	r3, [r7, #12]
 375 0054 03F00103 		and	r3, r3, #1
 376 0058 002B     		cmp	r3, #0
 377 005a F1D1     		bne	.L17
 296:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			break;
 378              		.loc 1 296 0
 379 005c 00BF     		nop
 299:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;	
 380              		.loc 1 299 0
 381 005e 4FF00003 		mov	r3, #0
 300:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 382              		.loc 1 300 0
 383 0062 1846     		mov	r0, r3
 384 0064 07F11007 		add	r7, r7, #16
 385 0068 BD46     		mov	sp, r7
 386 006a 80BD     		pop	{r7, pc}
 387              		.cfi_endproc
 388              	.LFE123:
 390              		.section	.text.synopGMAC_dma_bus_mode_init,"ax",%progbits
 391              		.align	2
 392              		.global	synopGMAC_dma_bus_mode_init
 393              		.thumb
 394              		.thumb_func
 396              	synopGMAC_dma_bus_mode_init:
 397              	.LFB124:
 301:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 302:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 303:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 304:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Function to program DMA bus mode register. 
 305:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 
 306:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The Bus Mode register is programmed with the value given. The bits to be set are
 307:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * bit wise or'ed and sent as the second argument to this function.
 308:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 309:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] the data to be programmed.
 310:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 on success else return the error status.
 311:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 312:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_dma_bus_mode_init(synopGMACdevice * gmacdev, u32 init_value )
 313:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 398              		.loc 1 313 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402 0000 80B5     		push	{r7, lr}
 403              	.LCFI21:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 7, -8
 406              		.cfi_offset 14, -4
 407 0002 82B0     		sub	sp, sp, #8
 408              	.LCFI22:
 409              		.cfi_def_cfa_offset 16
 410 0004 00AF     		add	r7, sp, #0
 411              	.LCFI23:
 412              		.cfi_def_cfa_register 7
 413 0006 7860     		str	r0, [r7, #4]
 414 0008 3960     		str	r1, [r7, #0]
 314:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaBusMode ,init_value);
 415              		.loc 1 314 0
 416 000a 7B68     		ldr	r3, [r7, #4]
 417 000c 5B68     		ldr	r3, [r3, #4]
 418 000e 1846     		mov	r0, r3
 419 0010 4FF00001 		mov	r1, #0
 420 0014 3A68     		ldr	r2, [r7, #0]
 421 0016 FFF7FEFF 		bl	synopGMACWriteReg
 315:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;
 422              		.loc 1 315 0
 423 001a 4FF00003 		mov	r3, #0
 316:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 317:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 424              		.loc 1 317 0
 425 001e 1846     		mov	r0, r3
 426 0020 07F10807 		add	r7, r7, #8
 427 0024 BD46     		mov	sp, r7
 428 0026 80BD     		pop	{r7, pc}
 429              		.cfi_endproc
 430              	.LFE124:
 432              		.section	.text.synopGMAC_dma_control_init,"ax",%progbits
 433              		.align	2
 434              		.global	synopGMAC_dma_control_init
 435              		.thumb
 436              		.thumb_func
 438              	synopGMAC_dma_control_init:
 439              	.LFB125:
 318:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 319:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 320:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Function to program DMA Control register. 
 321:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 
 322:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The Dma Control register is programmed with the value given. The bits to be set are
 323:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * bit wise or'ed and sent as the second argument to this function.
 324:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 325:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] the data to be programmed.
 326:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 on success else return the error status.
 327:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 328:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_dma_control_init(synopGMACdevice * gmacdev, u32 init_value)
 329:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 440              		.loc 1 329 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 8
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444 0000 80B5     		push	{r7, lr}
 445              	.LCFI24:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 82B0     		sub	sp, sp, #8
 450              	.LCFI25:
 451              		.cfi_def_cfa_offset 16
 452 0004 00AF     		add	r7, sp, #0
 453              	.LCFI26:
 454              		.cfi_def_cfa_register 7
 455 0006 7860     		str	r0, [r7, #4]
 456 0008 3960     		str	r1, [r7, #0]
 330:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaControl, init_value);
 457              		.loc 1 330 0
 458 000a 7B68     		ldr	r3, [r7, #4]
 459 000c 5B68     		ldr	r3, [r3, #4]
 460 000e 1846     		mov	r0, r3
 461 0010 4FF01801 		mov	r1, #24
 462 0014 3A68     		ldr	r2, [r7, #0]
 463 0016 FFF7FEFF 		bl	synopGMACWriteReg
 331:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;
 464              		.loc 1 331 0
 465 001a 4FF00003 		mov	r3, #0
 332:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 466              		.loc 1 332 0
 467 001e 1846     		mov	r0, r3
 468 0020 07F10807 		add	r7, r7, #8
 469 0024 BD46     		mov	sp, r7
 470 0026 80BD     		pop	{r7, pc}
 471              		.cfi_endproc
 472              	.LFE125:
 474              		.section	.text.synopGMAC_wd_enable,"ax",%progbits
 475              		.align	2
 476              		.global	synopGMAC_wd_enable
 477              		.thumb
 478              		.thumb_func
 480              	synopGMAC_wd_enable:
 481              	.LFB126:
 333:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 334:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 335:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*Gmac configuration functions*/
 336:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 337:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 338:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable the watchdog timer on the receiver. 
 339:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled, Gmac enables Watchdog timer, and GMAC allows no more than
 340:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 2048 bytes of data (10,240 if Jumbo frame enabled).
 341:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 342:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 343:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 344:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_wd_enable(synopGMACdevice * gmacdev)
 345:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 482              		.loc 1 345 0
 483              		.cfi_startproc
 484              		@ args = 0, pretend = 0, frame = 8
 485              		@ frame_needed = 1, uses_anonymous_args = 0
 486 0000 80B5     		push	{r7, lr}
 487              	.LCFI27:
 488              		.cfi_def_cfa_offset 8
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 82B0     		sub	sp, sp, #8
 492              	.LCFI28:
 493              		.cfi_def_cfa_offset 16
 494 0004 00AF     		add	r7, sp, #0
 495              	.LCFI29:
 496              		.cfi_def_cfa_register 7
 497 0006 7860     		str	r0, [r7, #4]
 346:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacWatchdog);
 498              		.loc 1 346 0
 499 0008 7B68     		ldr	r3, [r7, #4]
 500 000a 1B68     		ldr	r3, [r3, #0]
 501 000c 1846     		mov	r0, r3
 502 000e 4FF00001 		mov	r1, #0
 503 0012 4FF40002 		mov	r2, #8388608
 504 0016 FFF7FEFF 		bl	synopGMACClearBits
 347:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 505              		.loc 1 347 0
 506 001a 00BF     		nop
 348:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 507              		.loc 1 348 0
 508 001c 07F10807 		add	r7, r7, #8
 509 0020 BD46     		mov	sp, r7
 510 0022 80BD     		pop	{r7, pc}
 511              		.cfi_endproc
 512              	.LFE126:
 514              		.section	.text.synopGMAC_wd_disable,"ax",%progbits
 515              		.align	2
 516              		.global	synopGMAC_wd_disable
 517              		.thumb
 518              		.thumb_func
 520              	synopGMAC_wd_disable:
 521              	.LFB127:
 349:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 350:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the watchdog timer on the receiver. 
 351:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled, Gmac disabled watchdog timer, and can receive frames up to
 352:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 16,384 bytes.
 353:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 354:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 355:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 356:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_wd_disable(synopGMACdevice * gmacdev)
 357:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 522              		.loc 1 357 0
 523              		.cfi_startproc
 524              		@ args = 0, pretend = 0, frame = 8
 525              		@ frame_needed = 1, uses_anonymous_args = 0
 526 0000 80B5     		push	{r7, lr}
 527              	.LCFI30:
 528              		.cfi_def_cfa_offset 8
 529              		.cfi_offset 7, -8
 530              		.cfi_offset 14, -4
 531 0002 82B0     		sub	sp, sp, #8
 532              	.LCFI31:
 533              		.cfi_def_cfa_offset 16
 534 0004 00AF     		add	r7, sp, #0
 535              	.LCFI32:
 536              		.cfi_def_cfa_register 7
 537 0006 7860     		str	r0, [r7, #4]
 358:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacWatchdog);
 538              		.loc 1 358 0
 539 0008 7B68     		ldr	r3, [r7, #4]
 540 000a 1B68     		ldr	r3, [r3, #0]
 541 000c 1846     		mov	r0, r3
 542 000e 4FF00001 		mov	r1, #0
 543 0012 4FF40002 		mov	r2, #8388608
 544 0016 FFF7FEFF 		bl	synopGMACSetBits
 359:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 545              		.loc 1 359 0
 546 001a 00BF     		nop
 360:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 547              		.loc 1 360 0
 548 001c 07F10807 		add	r7, r7, #8
 549 0020 BD46     		mov	sp, r7
 550 0022 80BD     		pop	{r7, pc}
 551              		.cfi_endproc
 552              	.LFE127:
 554              		.section	.text.synopGMAC_jab_enable,"ax",%progbits
 555              		.align	2
 556              		.global	synopGMAC_jab_enable
 557              		.thumb
 558              		.thumb_func
 560              	synopGMAC_jab_enable:
 561              	.LFB128:
 361:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 362:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 363:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the Jabber frame support. 
 364:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled, GMAC disabled the jabber timer, and can transfer 16,384 byte frames.
 365:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 366:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 367:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 368:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_jab_enable(synopGMACdevice * gmacdev)
 369:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 562              		.loc 1 369 0
 563              		.cfi_startproc
 564              		@ args = 0, pretend = 0, frame = 8
 565              		@ frame_needed = 1, uses_anonymous_args = 0
 566 0000 80B5     		push	{r7, lr}
 567              	.LCFI33:
 568              		.cfi_def_cfa_offset 8
 569              		.cfi_offset 7, -8
 570              		.cfi_offset 14, -4
 571 0002 82B0     		sub	sp, sp, #8
 572              	.LCFI34:
 573              		.cfi_def_cfa_offset 16
 574 0004 00AF     		add	r7, sp, #0
 575              	.LCFI35:
 576              		.cfi_def_cfa_register 7
 577 0006 7860     		str	r0, [r7, #4]
 370:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacJabber);
 578              		.loc 1 370 0
 579 0008 7B68     		ldr	r3, [r7, #4]
 580 000a 1B68     		ldr	r3, [r3, #0]
 581 000c 1846     		mov	r0, r3
 582 000e 4FF00001 		mov	r1, #0
 583 0012 4FF48002 		mov	r2, #4194304
 584 0016 FFF7FEFF 		bl	synopGMACSetBits
 371:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 585              		.loc 1 371 0
 586 001a 00BF     		nop
 372:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 587              		.loc 1 372 0
 588 001c 07F10807 		add	r7, r7, #8
 589 0020 BD46     		mov	sp, r7
 590 0022 80BD     		pop	{r7, pc}
 591              		.cfi_endproc
 592              	.LFE128:
 594              		.section	.text.synopGMAC_jab_disable,"ax",%progbits
 595              		.align	2
 596              		.global	synopGMAC_jab_disable
 597              		.thumb
 598              		.thumb_func
 600              	synopGMAC_jab_disable:
 601              	.LFB129:
 373:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 374:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables the Jabber frame support. 
 375:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled, GMAC enables jabber timer. It cuts of transmitter if application 
 376:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * sends more than 2048 bytes of data (10240 if Jumbo frame enabled).
 377:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 378:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 379:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 380:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_jab_disable(synopGMACdevice * gmacdev)
 381:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 602              		.loc 1 381 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 8
 605              		@ frame_needed = 1, uses_anonymous_args = 0
 606 0000 80B5     		push	{r7, lr}
 607              	.LCFI36:
 608              		.cfi_def_cfa_offset 8
 609              		.cfi_offset 7, -8
 610              		.cfi_offset 14, -4
 611 0002 82B0     		sub	sp, sp, #8
 612              	.LCFI37:
 613              		.cfi_def_cfa_offset 16
 614 0004 00AF     		add	r7, sp, #0
 615              	.LCFI38:
 616              		.cfi_def_cfa_register 7
 617 0006 7860     		str	r0, [r7, #4]
 382:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacJabber);
 618              		.loc 1 382 0
 619 0008 7B68     		ldr	r3, [r7, #4]
 620 000a 1B68     		ldr	r3, [r3, #0]
 621 000c 1846     		mov	r0, r3
 622 000e 4FF00001 		mov	r1, #0
 623 0012 4FF48002 		mov	r2, #4194304
 624 0016 FFF7FEFF 		bl	synopGMACClearBits
 383:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 625              		.loc 1 383 0
 626 001a 00BF     		nop
 384:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 627              		.loc 1 384 0
 628 001c 07F10807 		add	r7, r7, #8
 629 0020 BD46     		mov	sp, r7
 630 0022 80BD     		pop	{r7, pc}
 631              		.cfi_endproc
 632              	.LFE129:
 634              		.section	.text.synopGMAC_frame_burst_enable,"ax",%progbits
 635              		.align	2
 636              		.global	synopGMAC_frame_burst_enable
 637              		.thumb
 638              		.thumb_func
 640              	synopGMAC_frame_burst_enable:
 641              	.LFB130:
 385:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 386:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 387:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables Frame bursting (Only in Half Duplex Mode). 
 388:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled, GMAC allows frame bursting in GMII Half Duplex mode.
 389:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Reserved in 10/100 and Full-Duplex configurations.
 390:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 391:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 392:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 393:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_frame_burst_enable(synopGMACdevice * gmacdev)
 394:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 642              		.loc 1 394 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 8
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646 0000 80B5     		push	{r7, lr}
 647              	.LCFI39:
 648              		.cfi_def_cfa_offset 8
 649              		.cfi_offset 7, -8
 650              		.cfi_offset 14, -4
 651 0002 82B0     		sub	sp, sp, #8
 652              	.LCFI40:
 653              		.cfi_def_cfa_offset 16
 654 0004 00AF     		add	r7, sp, #0
 655              	.LCFI41:
 656              		.cfi_def_cfa_register 7
 657 0006 7860     		str	r0, [r7, #4]
 395:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacFrameBurst);
 658              		.loc 1 395 0
 659 0008 7B68     		ldr	r3, [r7, #4]
 660 000a 1B68     		ldr	r3, [r3, #0]
 661 000c 1846     		mov	r0, r3
 662 000e 4FF00001 		mov	r1, #0
 663 0012 4FF40012 		mov	r2, #2097152
 664 0016 FFF7FEFF 		bl	synopGMACSetBits
 396:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 665              		.loc 1 396 0
 666 001a 00BF     		nop
 397:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 667              		.loc 1 397 0
 668 001c 07F10807 		add	r7, r7, #8
 669 0020 BD46     		mov	sp, r7
 670 0022 80BD     		pop	{r7, pc}
 671              		.cfi_endproc
 672              	.LFE130:
 674              		.section	.text.synopGMAC_frame_burst_disable,"ax",%progbits
 675              		.align	2
 676              		.global	synopGMAC_frame_burst_disable
 677              		.thumb
 678              		.thumb_func
 680              	synopGMAC_frame_burst_disable:
 681              	.LFB131:
 398:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 399:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables Frame bursting. 
 400:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When Disabled, frame bursting is not supported.
 401:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 402:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 403:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 404:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_frame_burst_disable(synopGMACdevice * gmacdev)
 405:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 682              		.loc 1 405 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 8
 685              		@ frame_needed = 1, uses_anonymous_args = 0
 686 0000 80B5     		push	{r7, lr}
 687              	.LCFI42:
 688              		.cfi_def_cfa_offset 8
 689              		.cfi_offset 7, -8
 690              		.cfi_offset 14, -4
 691 0002 82B0     		sub	sp, sp, #8
 692              	.LCFI43:
 693              		.cfi_def_cfa_offset 16
 694 0004 00AF     		add	r7, sp, #0
 695              	.LCFI44:
 696              		.cfi_def_cfa_register 7
 697 0006 7860     		str	r0, [r7, #4]
 406:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacFrameBurst);
 698              		.loc 1 406 0
 699 0008 7B68     		ldr	r3, [r7, #4]
 700 000a 1B68     		ldr	r3, [r3, #0]
 701 000c 1846     		mov	r0, r3
 702 000e 4FF00001 		mov	r1, #0
 703 0012 4FF40012 		mov	r2, #2097152
 704 0016 FFF7FEFF 		bl	synopGMACClearBits
 407:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 705              		.loc 1 407 0
 706 001a 00BF     		nop
 408:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 707              		.loc 1 408 0
 708 001c 07F10807 		add	r7, r7, #8
 709 0020 BD46     		mov	sp, r7
 710 0022 80BD     		pop	{r7, pc}
 711              		.cfi_endproc
 712              	.LFE131:
 714              		.section	.text.synopGMAC_jumbo_frame_enable,"ax",%progbits
 715              		.align	2
 716              		.global	synopGMAC_jumbo_frame_enable
 717              		.thumb
 718              		.thumb_func
 720              	synopGMAC_jumbo_frame_enable:
 721              	.LFB132:
 409:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 410:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 411:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable Jumbo frame support. 
 412:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When Enabled GMAC supports jumbo frames of 9018/9022(VLAN tagged).
 413:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Giant frame error is not reported in receive frame status.
 414:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 415:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 416:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 417:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_jumbo_frame_enable(synopGMACdevice * gmacdev)
 418:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 722              		.loc 1 418 0
 723              		.cfi_startproc
 724              		@ args = 0, pretend = 0, frame = 8
 725              		@ frame_needed = 1, uses_anonymous_args = 0
 726 0000 80B5     		push	{r7, lr}
 727              	.LCFI45:
 728              		.cfi_def_cfa_offset 8
 729              		.cfi_offset 7, -8
 730              		.cfi_offset 14, -4
 731 0002 82B0     		sub	sp, sp, #8
 732              	.LCFI46:
 733              		.cfi_def_cfa_offset 16
 734 0004 00AF     		add	r7, sp, #0
 735              	.LCFI47:
 736              		.cfi_def_cfa_register 7
 737 0006 7860     		str	r0, [r7, #4]
 419:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacJumboFrame);
 738              		.loc 1 419 0
 739 0008 7B68     		ldr	r3, [r7, #4]
 740 000a 1B68     		ldr	r3, [r3, #0]
 741 000c 1846     		mov	r0, r3
 742 000e 4FF00001 		mov	r1, #0
 743 0012 4FF48012 		mov	r2, #1048576
 744 0016 FFF7FEFF 		bl	synopGMACSetBits
 420:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 745              		.loc 1 420 0
 746 001a 00BF     		nop
 421:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 747              		.loc 1 421 0
 748 001c 07F10807 		add	r7, r7, #8
 749 0020 BD46     		mov	sp, r7
 750 0022 80BD     		pop	{r7, pc}
 751              		.cfi_endproc
 752              	.LFE132:
 754              		.section	.text.synopGMAC_jumbo_frame_disable,"ax",%progbits
 755              		.align	2
 756              		.global	synopGMAC_jumbo_frame_disable
 757              		.thumb
 758              		.thumb_func
 760              	synopGMAC_jumbo_frame_disable:
 761              	.LFB133:
 422:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 423:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable Jumbo frame support. 
 424:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When Disabled GMAC does not supports jumbo frames.
 425:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Giant frame error is reported in receive frame status.
 426:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 427:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 428:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 429:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_jumbo_frame_disable(synopGMACdevice * gmacdev)
 430:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 762              		.loc 1 430 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 8
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766 0000 80B5     		push	{r7, lr}
 767              	.LCFI48:
 768              		.cfi_def_cfa_offset 8
 769              		.cfi_offset 7, -8
 770              		.cfi_offset 14, -4
 771 0002 82B0     		sub	sp, sp, #8
 772              	.LCFI49:
 773              		.cfi_def_cfa_offset 16
 774 0004 00AF     		add	r7, sp, #0
 775              	.LCFI50:
 776              		.cfi_def_cfa_register 7
 777 0006 7860     		str	r0, [r7, #4]
 431:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacJumboFrame);
 778              		.loc 1 431 0
 779 0008 7B68     		ldr	r3, [r7, #4]
 780 000a 1B68     		ldr	r3, [r3, #0]
 781 000c 1846     		mov	r0, r3
 782 000e 4FF00001 		mov	r1, #0
 783 0012 4FF48012 		mov	r2, #1048576
 784 0016 FFF7FEFF 		bl	synopGMACClearBits
 432:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 785              		.loc 1 432 0
 786 001a 00BF     		nop
 433:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 787              		.loc 1 433 0
 788 001c 07F10807 		add	r7, r7, #8
 789 0020 BD46     		mov	sp, r7
 790 0022 80BD     		pop	{r7, pc}
 791              		.cfi_endproc
 792              	.LFE133:
 794              		.section	.text.synopGMAC_disable_crs,"ax",%progbits
 795              		.align	2
 796              		.global	synopGMAC_disable_crs
 797              		.thumb
 798              		.thumb_func
 800              	synopGMAC_disable_crs:
 801              	.LFB134:
 434:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 435:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 436:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable Carrier sense. 
 437:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When Disabled GMAC ignores CRS signal during frame transmission
 438:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * in half duplex mode.
 439:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 440:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 441:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 442:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 443:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_crs(synopGMACdevice * gmacdev)
 444:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 802              		.loc 1 444 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 8
 805              		@ frame_needed = 1, uses_anonymous_args = 0
 806 0000 80B5     		push	{r7, lr}
 807              	.LCFI51:
 808              		.cfi_def_cfa_offset 8
 809              		.cfi_offset 7, -8
 810              		.cfi_offset 14, -4
 811 0002 82B0     		sub	sp, sp, #8
 812              	.LCFI52:
 813              		.cfi_def_cfa_offset 16
 814 0004 00AF     		add	r7, sp, #0
 815              	.LCFI53:
 816              		.cfi_def_cfa_register 7
 817 0006 7860     		str	r0, [r7, #4]
 445:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacDisableCrs);
 818              		.loc 1 445 0
 819 0008 7B68     		ldr	r3, [r7, #4]
 820 000a 1B68     		ldr	r3, [r3, #0]
 821 000c 1846     		mov	r0, r3
 822 000e 4FF00001 		mov	r1, #0
 823 0012 4FF48032 		mov	r2, #65536
 824 0016 FFF7FEFF 		bl	synopGMACSetBits
 446:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 825              		.loc 1 446 0
 826 001a 00BF     		nop
 447:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 827              		.loc 1 447 0
 828 001c 07F10807 		add	r7, r7, #8
 829 0020 BD46     		mov	sp, r7
 830 0022 80BD     		pop	{r7, pc}
 831              		.cfi_endproc
 832              	.LFE134:
 834              		.section	.text.synopGMAC_select_gmii,"ax",%progbits
 835              		.align	2
 836              		.global	synopGMAC_select_gmii
 837              		.thumb
 838              		.thumb_func
 840              	synopGMAC_select_gmii:
 841              	.LFB135:
 448:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 449:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 450:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 451:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 452:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Selects the GMII port. 
 453:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When called GMII (1000Mbps) port is selected (programmable only in 10/100/1000 Mbps configurati
 454:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 455:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 456:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 457:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_select_gmii(synopGMACdevice * gmacdev)
 458:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 842              		.loc 1 458 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 8
 845              		@ frame_needed = 1, uses_anonymous_args = 0
 846 0000 80B5     		push	{r7, lr}
 847              	.LCFI54:
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 7, -8
 850              		.cfi_offset 14, -4
 851 0002 82B0     		sub	sp, sp, #8
 852              	.LCFI55:
 853              		.cfi_def_cfa_offset 16
 854 0004 00AF     		add	r7, sp, #0
 855              	.LCFI56:
 856              		.cfi_def_cfa_register 7
 857 0006 7860     		str	r0, [r7, #4]
 459:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacMiiGmii);
 858              		.loc 1 459 0
 859 0008 7B68     		ldr	r3, [r7, #4]
 860 000a 1B68     		ldr	r3, [r3, #0]
 861 000c 1846     		mov	r0, r3
 862 000e 4FF00001 		mov	r1, #0
 863 0012 4FF40042 		mov	r2, #32768
 864 0016 FFF7FEFF 		bl	synopGMACClearBits
 460:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 865              		.loc 1 460 0
 866 001a 00BF     		nop
 461:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 867              		.loc 1 461 0
 868 001c 07F10807 		add	r7, r7, #8
 869 0020 BD46     		mov	sp, r7
 870 0022 80BD     		pop	{r7, pc}
 871              		.cfi_endproc
 872              	.LFE135:
 874              		.section	.text.synopGMAC_select_mii,"ax",%progbits
 875              		.align	2
 876              		.global	synopGMAC_select_mii
 877              		.thumb
 878              		.thumb_func
 880              	synopGMAC_select_mii:
 881              	.LFB136:
 462:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 463:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Selects the MII port. 
 464:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When called MII (10/100Mbps) port is selected (programmable only in 10/100/1000 Mbps configurat
 465:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 466:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 467:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 468:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_select_mii(synopGMACdevice * gmacdev)
 469:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 882              		.loc 1 469 0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 8
 885              		@ frame_needed = 1, uses_anonymous_args = 0
 886 0000 80B5     		push	{r7, lr}
 887              	.LCFI57:
 888              		.cfi_def_cfa_offset 8
 889              		.cfi_offset 7, -8
 890              		.cfi_offset 14, -4
 891 0002 82B0     		sub	sp, sp, #8
 892              	.LCFI58:
 893              		.cfi_def_cfa_offset 16
 894 0004 00AF     		add	r7, sp, #0
 895              	.LCFI59:
 896              		.cfi_def_cfa_register 7
 897 0006 7860     		str	r0, [r7, #4]
 470:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacMiiGmii);
 898              		.loc 1 470 0
 899 0008 7B68     		ldr	r3, [r7, #4]
 900 000a 1B68     		ldr	r3, [r3, #0]
 901 000c 1846     		mov	r0, r3
 902 000e 4FF00001 		mov	r1, #0
 903 0012 4FF40042 		mov	r2, #32768
 904 0016 FFF7FEFF 		bl	synopGMACSetBits
 471:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 905              		.loc 1 471 0
 906 001a 00BF     		nop
 472:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 907              		.loc 1 472 0
 908 001c 07F10807 		add	r7, r7, #8
 909 0020 BD46     		mov	sp, r7
 910 0022 80BD     		pop	{r7, pc}
 911              		.cfi_endproc
 912              	.LFE136:
 914              		.section	.text.synopGMAC_rx_own_enable,"ax",%progbits
 915              		.align	2
 916              		.global	synopGMAC_rx_own_enable
 917              		.thumb
 918              		.thumb_func
 920              	synopGMAC_rx_own_enable:
 921              	.LFB137:
 473:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 474:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 475:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables Receive Own bit (Only in Half Duplex Mode). 
 476:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enaled GMAC receives all the packets given by phy while transmitting.
 477:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 478:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 479:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 480:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_own_enable(synopGMACdevice * gmacdev)
 481:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 922              		.loc 1 481 0
 923              		.cfi_startproc
 924              		@ args = 0, pretend = 0, frame = 8
 925              		@ frame_needed = 1, uses_anonymous_args = 0
 926 0000 80B5     		push	{r7, lr}
 927              	.LCFI60:
 928              		.cfi_def_cfa_offset 8
 929              		.cfi_offset 7, -8
 930              		.cfi_offset 14, -4
 931 0002 82B0     		sub	sp, sp, #8
 932              	.LCFI61:
 933              		.cfi_def_cfa_offset 16
 934 0004 00AF     		add	r7, sp, #0
 935              	.LCFI62:
 936              		.cfi_def_cfa_register 7
 937 0006 7860     		str	r0, [r7, #4]
 482:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacRxOwn);
 938              		.loc 1 482 0
 939 0008 7B68     		ldr	r3, [r7, #4]
 940 000a 1B68     		ldr	r3, [r3, #0]
 941 000c 1846     		mov	r0, r3
 942 000e 4FF00001 		mov	r1, #0
 943 0012 4FF40052 		mov	r2, #8192
 944 0016 FFF7FEFF 		bl	synopGMACClearBits
 483:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 945              		.loc 1 483 0
 946 001a 00BF     		nop
 484:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 947              		.loc 1 484 0
 948 001c 07F10807 		add	r7, r7, #8
 949 0020 BD46     		mov	sp, r7
 950 0022 80BD     		pop	{r7, pc}
 951              		.cfi_endproc
 952              	.LFE137:
 954              		.section	.text.synopGMAC_rx_own_disable,"ax",%progbits
 955              		.align	2
 956              		.global	synopGMAC_rx_own_disable
 957              		.thumb
 958              		.thumb_func
 960              	synopGMAC_rx_own_disable:
 961              	.LFB138:
 485:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 486:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables Receive Own bit (Only in Half Duplex Mode). 
 487:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enaled GMAC disables the reception of frames when gmii_txen_o is asserted.
 488:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 489:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 490:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 491:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_own_disable(synopGMACdevice * gmacdev)
 492:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 962              		.loc 1 492 0
 963              		.cfi_startproc
 964              		@ args = 0, pretend = 0, frame = 8
 965              		@ frame_needed = 1, uses_anonymous_args = 0
 966 0000 80B5     		push	{r7, lr}
 967              	.LCFI63:
 968              		.cfi_def_cfa_offset 8
 969              		.cfi_offset 7, -8
 970              		.cfi_offset 14, -4
 971 0002 82B0     		sub	sp, sp, #8
 972              	.LCFI64:
 973              		.cfi_def_cfa_offset 16
 974 0004 00AF     		add	r7, sp, #0
 975              	.LCFI65:
 976              		.cfi_def_cfa_register 7
 977 0006 7860     		str	r0, [r7, #4]
 493:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacRxOwn);
 978              		.loc 1 493 0
 979 0008 7B68     		ldr	r3, [r7, #4]
 980 000a 1B68     		ldr	r3, [r3, #0]
 981 000c 1846     		mov	r0, r3
 982 000e 4FF00001 		mov	r1, #0
 983 0012 4FF40052 		mov	r2, #8192
 984 0016 FFF7FEFF 		bl	synopGMACSetBits
 494:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 985              		.loc 1 494 0
 986 001a 00BF     		nop
 495:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 987              		.loc 1 495 0
 988 001c 07F10807 		add	r7, r7, #8
 989 0020 BD46     		mov	sp, r7
 990 0022 80BD     		pop	{r7, pc}
 991              		.cfi_endproc
 992              	.LFE138:
 994              		.section	.text.synopGMAC_loopback_on,"ax",%progbits
 995              		.align	2
 996              		.global	synopGMAC_loopback_on
 997              		.thumb
 998              		.thumb_func
 1000              	synopGMAC_loopback_on:
 1001              	.LFB139:
 496:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 497:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 498:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Sets the GMAC in loopback mode. 
 499:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When on GMAC operates in loop-back mode at GMII/MII.
 500:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 501:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 502:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note (G)MII Receive clock is required for loopback to work properly, as transmit clock is
 503:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * not looped back internally.
 504:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 505:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_loopback_on(synopGMACdevice * gmacdev)
 506:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1002              		.loc 1 506 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 8
 1005              		@ frame_needed = 1, uses_anonymous_args = 0
 1006 0000 80B5     		push	{r7, lr}
 1007              	.LCFI66:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 7, -8
 1010              		.cfi_offset 14, -4
 1011 0002 82B0     		sub	sp, sp, #8
 1012              	.LCFI67:
 1013              		.cfi_def_cfa_offset 16
 1014 0004 00AF     		add	r7, sp, #0
 1015              	.LCFI68:
 1016              		.cfi_def_cfa_register 7
 1017 0006 7860     		str	r0, [r7, #4]
 507:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacLoopback);
 1018              		.loc 1 507 0
 1019 0008 7B68     		ldr	r3, [r7, #4]
 1020 000a 1B68     		ldr	r3, [r3, #0]
 1021 000c 1846     		mov	r0, r3
 1022 000e 4FF00001 		mov	r1, #0
 1023 0012 4FF48052 		mov	r2, #4096
 1024 0016 FFF7FEFF 		bl	synopGMACSetBits
 508:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1025              		.loc 1 508 0
 1026 001a 00BF     		nop
 509:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1027              		.loc 1 509 0
 1028 001c 07F10807 		add	r7, r7, #8
 1029 0020 BD46     		mov	sp, r7
 1030 0022 80BD     		pop	{r7, pc}
 1031              		.cfi_endproc
 1032              	.LFE139:
 1034              		.section	.text.synopGMAC_loopback_off,"ax",%progbits
 1035              		.align	2
 1036              		.global	synopGMAC_loopback_off
 1037              		.thumb
 1038              		.thumb_func
 1040              	synopGMAC_loopback_off:
 1041              	.LFB140:
 510:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 511:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Sets the GMAC in Normal mode. 
 512:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 513:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 514:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 515:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_loopback_off(synopGMACdevice * gmacdev)
 516:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1042              		.loc 1 516 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 8
 1045              		@ frame_needed = 1, uses_anonymous_args = 0
 1046 0000 80B5     		push	{r7, lr}
 1047              	.LCFI69:
 1048              		.cfi_def_cfa_offset 8
 1049              		.cfi_offset 7, -8
 1050              		.cfi_offset 14, -4
 1051 0002 82B0     		sub	sp, sp, #8
 1052              	.LCFI70:
 1053              		.cfi_def_cfa_offset 16
 1054 0004 00AF     		add	r7, sp, #0
 1055              	.LCFI71:
 1056              		.cfi_def_cfa_register 7
 1057 0006 7860     		str	r0, [r7, #4]
 517:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacLoopback);
 1058              		.loc 1 517 0
 1059 0008 7B68     		ldr	r3, [r7, #4]
 1060 000a 1B68     		ldr	r3, [r3, #0]
 1061 000c 1846     		mov	r0, r3
 1062 000e 4FF00001 		mov	r1, #0
 1063 0012 4FF48052 		mov	r2, #4096
 1064 0016 FFF7FEFF 		bl	synopGMACClearBits
 518:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1065              		.loc 1 518 0
 1066 001a 00BF     		nop
 519:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1067              		.loc 1 519 0
 1068 001c 07F10807 		add	r7, r7, #8
 1069 0020 BD46     		mov	sp, r7
 1070 0022 80BD     		pop	{r7, pc}
 1071              		.cfi_endproc
 1072              	.LFE140:
 1074              		.section	.text.synopGMAC_set_full_duplex,"ax",%progbits
 1075              		.align	2
 1076              		.global	synopGMAC_set_full_duplex
 1077              		.thumb
 1078              		.thumb_func
 1080              	synopGMAC_set_full_duplex:
 1081              	.LFB141:
 520:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 521:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 522:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Sets the GMAC core in Full-Duplex mode. 
 523:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 524:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 525:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 526:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_set_full_duplex(synopGMACdevice * gmacdev)
 527:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1082              		.loc 1 527 0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 8
 1085              		@ frame_needed = 1, uses_anonymous_args = 0
 1086 0000 80B5     		push	{r7, lr}
 1087              	.LCFI72:
 1088              		.cfi_def_cfa_offset 8
 1089              		.cfi_offset 7, -8
 1090              		.cfi_offset 14, -4
 1091 0002 82B0     		sub	sp, sp, #8
 1092              	.LCFI73:
 1093              		.cfi_def_cfa_offset 16
 1094 0004 00AF     		add	r7, sp, #0
 1095              	.LCFI74:
 1096              		.cfi_def_cfa_register 7
 1097 0006 7860     		str	r0, [r7, #4]
 528:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacDuplex);
 1098              		.loc 1 528 0
 1099 0008 7B68     		ldr	r3, [r7, #4]
 1100 000a 1B68     		ldr	r3, [r3, #0]
 1101 000c 1846     		mov	r0, r3
 1102 000e 4FF00001 		mov	r1, #0
 1103 0012 4FF40062 		mov	r2, #2048
 1104 0016 FFF7FEFF 		bl	synopGMACSetBits
 529:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1105              		.loc 1 529 0
 1106 001a 00BF     		nop
 530:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1107              		.loc 1 530 0
 1108 001c 07F10807 		add	r7, r7, #8
 1109 0020 BD46     		mov	sp, r7
 1110 0022 80BD     		pop	{r7, pc}
 1111              		.cfi_endproc
 1112              	.LFE141:
 1114              		.section	.text.synopGMAC_set_half_duplex,"ax",%progbits
 1115              		.align	2
 1116              		.global	synopGMAC_set_half_duplex
 1117              		.thumb
 1118              		.thumb_func
 1120              	synopGMAC_set_half_duplex:
 1121              	.LFB142:
 531:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 532:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Sets the GMAC core in Half-Duplex mode. 
 533:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 534:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 535:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 536:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_set_half_duplex(synopGMACdevice * gmacdev)
 537:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1122              		.loc 1 537 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 8
 1125              		@ frame_needed = 1, uses_anonymous_args = 0
 1126 0000 80B5     		push	{r7, lr}
 1127              	.LCFI75:
 1128              		.cfi_def_cfa_offset 8
 1129              		.cfi_offset 7, -8
 1130              		.cfi_offset 14, -4
 1131 0002 82B0     		sub	sp, sp, #8
 1132              	.LCFI76:
 1133              		.cfi_def_cfa_offset 16
 1134 0004 00AF     		add	r7, sp, #0
 1135              	.LCFI77:
 1136              		.cfi_def_cfa_register 7
 1137 0006 7860     		str	r0, [r7, #4]
 538:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacDuplex);
 1138              		.loc 1 538 0
 1139 0008 7B68     		ldr	r3, [r7, #4]
 1140 000a 1B68     		ldr	r3, [r3, #0]
 1141 000c 1846     		mov	r0, r3
 1142 000e 4FF00001 		mov	r1, #0
 1143 0012 4FF40062 		mov	r2, #2048
 1144 0016 FFF7FEFF 		bl	synopGMACClearBits
 539:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1145              		.loc 1 539 0
 1146 001a 00BF     		nop
 540:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1147              		.loc 1 540 0
 1148 001c 07F10807 		add	r7, r7, #8
 1149 0020 BD46     		mov	sp, r7
 1150 0022 80BD     		pop	{r7, pc}
 1151              		.cfi_endproc
 1152              	.LFE142:
 1154              		.section	.text.synopGMAC_retry_enable,"ax",%progbits
 1155              		.align	2
 1156              		.global	synopGMAC_retry_enable
 1157              		.thumb
 1158              		.thumb_func
 1160              	synopGMAC_retry_enable:
 1161              	.LFB143:
 541:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 542:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 543:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC tries retransmission (Only in Half Duplex mode).
 544:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * If collision occurs on the GMII/MII, GMAC attempt retries based on the 
 545:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * back off limit configured. 
 546:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 547:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 548:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note This function is tightly coupled with synopGMAC_back_off_limit(synopGMACdev *, u32).
 549:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 550:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_retry_enable(synopGMACdevice * gmacdev)
 551:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1162              		.loc 1 551 0
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 8
 1165              		@ frame_needed = 1, uses_anonymous_args = 0
 1166 0000 80B5     		push	{r7, lr}
 1167              	.LCFI78:
 1168              		.cfi_def_cfa_offset 8
 1169              		.cfi_offset 7, -8
 1170              		.cfi_offset 14, -4
 1171 0002 82B0     		sub	sp, sp, #8
 1172              	.LCFI79:
 1173              		.cfi_def_cfa_offset 16
 1174 0004 00AF     		add	r7, sp, #0
 1175              	.LCFI80:
 1176              		.cfi_def_cfa_register 7
 1177 0006 7860     		str	r0, [r7, #4]
 552:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacRetry);
 1178              		.loc 1 552 0
 1179 0008 7B68     		ldr	r3, [r7, #4]
 1180 000a 1B68     		ldr	r3, [r3, #0]
 1181 000c 1846     		mov	r0, r3
 1182 000e 4FF00001 		mov	r1, #0
 1183 0012 4FF40072 		mov	r2, #512
 1184 0016 FFF7FEFF 		bl	synopGMACClearBits
 553:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1185              		.loc 1 553 0
 1186 001a 00BF     		nop
 554:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1187              		.loc 1 554 0
 1188 001c 07F10807 		add	r7, r7, #8
 1189 0020 BD46     		mov	sp, r7
 1190 0022 80BD     		pop	{r7, pc}
 1191              		.cfi_endproc
 1192              	.LFE143:
 1194              		.section	.text.synopGMAC_retry_disable,"ax",%progbits
 1195              		.align	2
 1196              		.global	synopGMAC_retry_disable
 1197              		.thumb
 1198              		.thumb_func
 1200              	synopGMAC_retry_disable:
 1201              	.LFB144:
 555:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 556:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC tries only one transmission (Only in Half Duplex mode).
 557:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * If collision occurs on the GMII/MII, GMAC will ignore the current frami
 558:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * transmission and report a frame abort with excessive collision in tranmit frame status. 
 559:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 560:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 561:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 562:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_retry_disable(synopGMACdevice * gmacdev)
 563:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1202              		.loc 1 563 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 8
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206 0000 80B5     		push	{r7, lr}
 1207              	.LCFI81:
 1208              		.cfi_def_cfa_offset 8
 1209              		.cfi_offset 7, -8
 1210              		.cfi_offset 14, -4
 1211 0002 82B0     		sub	sp, sp, #8
 1212              	.LCFI82:
 1213              		.cfi_def_cfa_offset 16
 1214 0004 00AF     		add	r7, sp, #0
 1215              	.LCFI83:
 1216              		.cfi_def_cfa_register 7
 1217 0006 7860     		str	r0, [r7, #4]
 564:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacRetry);
 1218              		.loc 1 564 0
 1219 0008 7B68     		ldr	r3, [r7, #4]
 1220 000a 1B68     		ldr	r3, [r3, #0]
 1221 000c 1846     		mov	r0, r3
 1222 000e 4FF00001 		mov	r1, #0
 1223 0012 4FF40072 		mov	r2, #512
 1224 0016 FFF7FEFF 		bl	synopGMACSetBits
 565:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1225              		.loc 1 565 0
 1226 001a 00BF     		nop
 566:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1227              		.loc 1 566 0
 1228 001c 07F10807 		add	r7, r7, #8
 1229 0020 BD46     		mov	sp, r7
 1230 0022 80BD     		pop	{r7, pc}
 1231              		.cfi_endproc
 1232              	.LFE144:
 1234              		.section	.text.synopGMAC_pad_crc_strip_enable,"ax",%progbits
 1235              		.align	2
 1236              		.global	synopGMAC_pad_crc_strip_enable
 1237              		.thumb
 1238              		.thumb_func
 1240              	synopGMAC_pad_crc_strip_enable:
 1241              	.LFB145:
 567:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 568:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 569:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC strips the Pad/FCS field of incoming frames.
 570:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This is true only if the length field value is less than or equal to
 571:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 1500 bytes. All received frames with length field greater than or equal to
 572:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 1501 bytes are passed to the application without stripping the Pad/FCS field. 
 573:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 574:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 575:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 576:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_pad_crc_strip_enable(synopGMACdevice * gmacdev)
 577:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1242              		.loc 1 577 0
 1243              		.cfi_startproc
 1244              		@ args = 0, pretend = 0, frame = 8
 1245              		@ frame_needed = 1, uses_anonymous_args = 0
 1246 0000 80B5     		push	{r7, lr}
 1247              	.LCFI84:
 1248              		.cfi_def_cfa_offset 8
 1249              		.cfi_offset 7, -8
 1250              		.cfi_offset 14, -4
 1251 0002 82B0     		sub	sp, sp, #8
 1252              	.LCFI85:
 1253              		.cfi_def_cfa_offset 16
 1254 0004 00AF     		add	r7, sp, #0
 1255              	.LCFI86:
 1256              		.cfi_def_cfa_register 7
 1257 0006 7860     		str	r0, [r7, #4]
 578:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacPadCrcStrip);
 1258              		.loc 1 578 0
 1259 0008 7B68     		ldr	r3, [r7, #4]
 1260 000a 1B68     		ldr	r3, [r3, #0]
 1261 000c 1846     		mov	r0, r3
 1262 000e 4FF00001 		mov	r1, #0
 1263 0012 4FF08002 		mov	r2, #128
 1264 0016 FFF7FEFF 		bl	synopGMACSetBits
 579:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1265              		.loc 1 579 0
 1266 001a 00BF     		nop
 580:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1267              		.loc 1 580 0
 1268 001c 07F10807 		add	r7, r7, #8
 1269 0020 BD46     		mov	sp, r7
 1270 0022 80BD     		pop	{r7, pc}
 1271              		.cfi_endproc
 1272              	.LFE145:
 1274              		.section	.text.synopGMAC_pad_crc_strip_disable,"ax",%progbits
 1275              		.align	2
 1276              		.global	synopGMAC_pad_crc_strip_disable
 1277              		.thumb
 1278              		.thumb_func
 1280              	synopGMAC_pad_crc_strip_disable:
 1281              	.LFB146:
 581:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 582:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC doesnot strips the Pad/FCS field of incoming frames.
 583:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC will pass all the incoming frames to Host unmodified. 
 584:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 585:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 586:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 587:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_pad_crc_strip_disable(synopGMACdevice * gmacdev)
 588:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1282              		.loc 1 588 0
 1283              		.cfi_startproc
 1284              		@ args = 0, pretend = 0, frame = 8
 1285              		@ frame_needed = 1, uses_anonymous_args = 0
 1286 0000 80B5     		push	{r7, lr}
 1287              	.LCFI87:
 1288              		.cfi_def_cfa_offset 8
 1289              		.cfi_offset 7, -8
 1290              		.cfi_offset 14, -4
 1291 0002 82B0     		sub	sp, sp, #8
 1292              	.LCFI88:
 1293              		.cfi_def_cfa_offset 16
 1294 0004 00AF     		add	r7, sp, #0
 1295              	.LCFI89:
 1296              		.cfi_def_cfa_register 7
 1297 0006 7860     		str	r0, [r7, #4]
 589:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacPadCrcStrip);
 1298              		.loc 1 589 0
 1299 0008 7B68     		ldr	r3, [r7, #4]
 1300 000a 1B68     		ldr	r3, [r3, #0]
 1301 000c 1846     		mov	r0, r3
 1302 000e 4FF00001 		mov	r1, #0
 1303 0012 4FF08002 		mov	r2, #128
 1304 0016 FFF7FEFF 		bl	synopGMACClearBits
 590:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1305              		.loc 1 590 0
 1306 001a 00BF     		nop
 591:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1307              		.loc 1 591 0
 1308 001c 07F10807 		add	r7, r7, #8
 1309 0020 BD46     		mov	sp, r7
 1310 0022 80BD     		pop	{r7, pc}
 1311              		.cfi_endproc
 1312              	.LFE146:
 1314              		.section	.text.synopGMAC_back_off_limit,"ax",%progbits
 1315              		.align	2
 1316              		.global	synopGMAC_back_off_limit
 1317              		.thumb
 1318              		.thumb_func
 1320              	synopGMAC_back_off_limit:
 1321              	.LFB147:
 592:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 593:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC programmed with the back off limit value.
 594:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 595:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 596:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note This function is tightly coupled with synopGMAC_retry_enable(synopGMACdevice * gmacdev)
 597:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 598:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_back_off_limit(synopGMACdevice * gmacdev, u32 value)
 599:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1322              		.loc 1 599 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 16
 1325              		@ frame_needed = 1, uses_anonymous_args = 0
 1326 0000 80B5     		push	{r7, lr}
 1327              	.LCFI90:
 1328              		.cfi_def_cfa_offset 8
 1329              		.cfi_offset 7, -8
 1330              		.cfi_offset 14, -4
 1331 0002 84B0     		sub	sp, sp, #16
 1332              	.LCFI91:
 1333              		.cfi_def_cfa_offset 24
 1334 0004 00AF     		add	r7, sp, #0
 1335              	.LCFI92:
 1336              		.cfi_def_cfa_register 7
 1337 0006 7860     		str	r0, [r7, #4]
 1338 0008 3960     		str	r1, [r7, #0]
 600:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
 601:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->MacBase, GmacConfig);
 1339              		.loc 1 601 0
 1340 000a 7B68     		ldr	r3, [r7, #4]
 1341 000c 1B68     		ldr	r3, [r3, #0]
 1342 000e 1846     		mov	r0, r3
 1343 0010 4FF00001 		mov	r1, #0
 1344 0014 FFF7FEFF 		bl	synopGMACReadReg
 1345 0018 F860     		str	r0, [r7, #12]
 602:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data &= (~GmacBackoffLimit);
 1346              		.loc 1 602 0
 1347 001a FB68     		ldr	r3, [r7, #12]
 1348 001c 23F06003 		bic	r3, r3, #96
 1349 0020 FB60     		str	r3, [r7, #12]
 603:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data |= value;
 1350              		.loc 1 603 0
 1351 0022 FA68     		ldr	r2, [r7, #12]
 1352 0024 3B68     		ldr	r3, [r7, #0]
 1353 0026 1343     		orrs	r3, r3, r2
 1354 0028 FB60     		str	r3, [r7, #12]
 604:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->MacBase, GmacConfig,data);
 1355              		.loc 1 604 0
 1356 002a 7B68     		ldr	r3, [r7, #4]
 1357 002c 1B68     		ldr	r3, [r3, #0]
 1358 002e 1846     		mov	r0, r3
 1359 0030 4FF00001 		mov	r1, #0
 1360 0034 FA68     		ldr	r2, [r7, #12]
 1361 0036 FFF7FEFF 		bl	synopGMACWriteReg
 605:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1362              		.loc 1 605 0
 1363 003a 00BF     		nop
 606:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1364              		.loc 1 606 0
 1365 003c 07F11007 		add	r7, r7, #16
 1366 0040 BD46     		mov	sp, r7
 1367 0042 80BD     		pop	{r7, pc}
 1368              		.cfi_endproc
 1369              	.LFE147:
 1371              		.section	.text.synopGMAC_deferral_check_enable,"ax",%progbits
 1372              		.align	2
 1373              		.global	synopGMAC_deferral_check_enable
 1374              		.thumb
 1375              		.thumb_func
 1377              	synopGMAC_deferral_check_enable:
 1378              	.LFB148:
 607:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 608:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 609:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the Deferral check in GMAC (Only in Half Duplex mode)
 610:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC issues a Frame Abort Status, along with the excessive deferral error bit set in the 
 611:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * transmit frame status when transmit state machine is deferred for more than
 612:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- 24,288 bit times in 10/100Mbps mode
 613:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- 155,680 bit times in 1000Mbps mode or Jumbo frame mode in 10/100Mbps operation. 
 614:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 615:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 616:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note Deferral begins when transmitter is ready to transmit, but is prevented because  of
 617:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * an active CRS (carrier sense) 
 618:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 619:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_deferral_check_enable(synopGMACdevice * gmacdev)
 620:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1379              		.loc 1 620 0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 8
 1382              		@ frame_needed = 1, uses_anonymous_args = 0
 1383 0000 80B5     		push	{r7, lr}
 1384              	.LCFI93:
 1385              		.cfi_def_cfa_offset 8
 1386              		.cfi_offset 7, -8
 1387              		.cfi_offset 14, -4
 1388 0002 82B0     		sub	sp, sp, #8
 1389              	.LCFI94:
 1390              		.cfi_def_cfa_offset 16
 1391 0004 00AF     		add	r7, sp, #0
 1392              	.LCFI95:
 1393              		.cfi_def_cfa_register 7
 1394 0006 7860     		str	r0, [r7, #4]
 621:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacDeferralCheck);
 1395              		.loc 1 621 0
 1396 0008 7B68     		ldr	r3, [r7, #4]
 1397 000a 1B68     		ldr	r3, [r3, #0]
 1398 000c 1846     		mov	r0, r3
 1399 000e 4FF00001 		mov	r1, #0
 1400 0012 4FF01002 		mov	r2, #16
 1401 0016 FFF7FEFF 		bl	synopGMACSetBits
 622:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1402              		.loc 1 622 0
 1403 001a 00BF     		nop
 623:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1404              		.loc 1 623 0
 1405 001c 07F10807 		add	r7, r7, #8
 1406 0020 BD46     		mov	sp, r7
 1407 0022 80BD     		pop	{r7, pc}
 1408              		.cfi_endproc
 1409              	.LFE148:
 1411              		.section	.text.synopGMAC_deferral_check_disable,"ax",%progbits
 1412              		.align	2
 1413              		.global	synopGMAC_deferral_check_disable
 1414              		.thumb
 1415              		.thumb_func
 1417              	synopGMAC_deferral_check_disable:
 1418              	.LFB149:
 624:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 625:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables the Deferral check in GMAC (Only in Half Duplex mode).
 626:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC defers until the CRS signal goes inactive.
 627:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 628:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 629:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 630:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_deferral_check_disable(synopGMACdevice * gmacdev)
 631:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1419              		.loc 1 631 0
 1420              		.cfi_startproc
 1421              		@ args = 0, pretend = 0, frame = 8
 1422              		@ frame_needed = 1, uses_anonymous_args = 0
 1423 0000 80B5     		push	{r7, lr}
 1424              	.LCFI96:
 1425              		.cfi_def_cfa_offset 8
 1426              		.cfi_offset 7, -8
 1427              		.cfi_offset 14, -4
 1428 0002 82B0     		sub	sp, sp, #8
 1429              	.LCFI97:
 1430              		.cfi_def_cfa_offset 16
 1431 0004 00AF     		add	r7, sp, #0
 1432              	.LCFI98:
 1433              		.cfi_def_cfa_register 7
 1434 0006 7860     		str	r0, [r7, #4]
 632:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacDeferralCheck);
 1435              		.loc 1 632 0
 1436 0008 7B68     		ldr	r3, [r7, #4]
 1437 000a 1B68     		ldr	r3, [r3, #0]
 1438 000c 1846     		mov	r0, r3
 1439 000e 4FF00001 		mov	r1, #0
 1440 0012 4FF01002 		mov	r2, #16
 1441 0016 FFF7FEFF 		bl	synopGMACClearBits
 633:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1442              		.loc 1 633 0
 1443 001a 00BF     		nop
 634:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1444              		.loc 1 634 0
 1445 001c 07F10807 		add	r7, r7, #8
 1446 0020 BD46     		mov	sp, r7
 1447 0022 80BD     		pop	{r7, pc}
 1448              		.cfi_endproc
 1449              	.LFE149:
 1451              		.section	.text.synopGMAC_rx_enable,"ax",%progbits
 1452              		.align	2
 1453              		.global	synopGMAC_rx_enable
 1454              		.thumb
 1455              		.thumb_func
 1457              	synopGMAC_rx_enable:
 1458              	.LFB150:
 635:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 636:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable the reception of frames on GMII/MII.
 637:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 638:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 639:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 640:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_enable(synopGMACdevice * gmacdev)
 641:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1459              		.loc 1 641 0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 8
 1462              		@ frame_needed = 1, uses_anonymous_args = 0
 1463 0000 80B5     		push	{r7, lr}
 1464              	.LCFI99:
 1465              		.cfi_def_cfa_offset 8
 1466              		.cfi_offset 7, -8
 1467              		.cfi_offset 14, -4
 1468 0002 82B0     		sub	sp, sp, #8
 1469              	.LCFI100:
 1470              		.cfi_def_cfa_offset 16
 1471 0004 00AF     		add	r7, sp, #0
 1472              	.LCFI101:
 1473              		.cfi_def_cfa_register 7
 1474 0006 7860     		str	r0, [r7, #4]
 642:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacRx);
 1475              		.loc 1 642 0
 1476 0008 7B68     		ldr	r3, [r7, #4]
 1477 000a 1B68     		ldr	r3, [r3, #0]
 1478 000c 1846     		mov	r0, r3
 1479 000e 4FF00001 		mov	r1, #0
 1480 0012 4FF00402 		mov	r2, #4
 1481 0016 FFF7FEFF 		bl	synopGMACSetBits
 643:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1482              		.loc 1 643 0
 1483 001a 00BF     		nop
 644:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1484              		.loc 1 644 0
 1485 001c 07F10807 		add	r7, r7, #8
 1486 0020 BD46     		mov	sp, r7
 1487 0022 80BD     		pop	{r7, pc}
 1488              		.cfi_endproc
 1489              	.LFE150:
 1491              		.section	.text.synopGMAC_rx_disable,"ax",%progbits
 1492              		.align	2
 1493              		.global	synopGMAC_rx_disable
 1494              		.thumb
 1495              		.thumb_func
 1497              	synopGMAC_rx_disable:
 1498              	.LFB151:
 645:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 646:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the reception of frames on GMII/MII.
 647:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC receive state machine is disabled after completion of reception of current frame.
 648:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 649:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 650:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 651:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_disable(synopGMACdevice * gmacdev)
 652:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1499              		.loc 1 652 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 8
 1502              		@ frame_needed = 1, uses_anonymous_args = 0
 1503 0000 80B5     		push	{r7, lr}
 1504              	.LCFI102:
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 7, -8
 1507              		.cfi_offset 14, -4
 1508 0002 82B0     		sub	sp, sp, #8
 1509              	.LCFI103:
 1510              		.cfi_def_cfa_offset 16
 1511 0004 00AF     		add	r7, sp, #0
 1512              	.LCFI104:
 1513              		.cfi_def_cfa_register 7
 1514 0006 7860     		str	r0, [r7, #4]
 653:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacRx);
 1515              		.loc 1 653 0
 1516 0008 7B68     		ldr	r3, [r7, #4]
 1517 000a 1B68     		ldr	r3, [r3, #0]
 1518 000c 1846     		mov	r0, r3
 1519 000e 4FF00001 		mov	r1, #0
 1520 0012 4FF00402 		mov	r2, #4
 1521 0016 FFF7FEFF 		bl	synopGMACClearBits
 654:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1522              		.loc 1 654 0
 1523 001a 00BF     		nop
 655:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1524              		.loc 1 655 0
 1525 001c 07F10807 		add	r7, r7, #8
 1526 0020 BD46     		mov	sp, r7
 1527 0022 80BD     		pop	{r7, pc}
 1528              		.cfi_endproc
 1529              	.LFE151:
 1531              		.section	.text.synopGMAC_tx_enable,"ax",%progbits
 1532              		.align	2
 1533              		.global	synopGMAC_tx_enable
 1534              		.thumb
 1535              		.thumb_func
 1537              	synopGMAC_tx_enable:
 1538              	.LFB152:
 656:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 657:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable the transmission of frames on GMII/MII.
 658:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 659:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 660:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 661:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_enable(synopGMACdevice * gmacdev)
 662:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1539              		.loc 1 662 0
 1540              		.cfi_startproc
 1541              		@ args = 0, pretend = 0, frame = 8
 1542              		@ frame_needed = 1, uses_anonymous_args = 0
 1543 0000 80B5     		push	{r7, lr}
 1544              	.LCFI105:
 1545              		.cfi_def_cfa_offset 8
 1546              		.cfi_offset 7, -8
 1547              		.cfi_offset 14, -4
 1548 0002 82B0     		sub	sp, sp, #8
 1549              	.LCFI106:
 1550              		.cfi_def_cfa_offset 16
 1551 0004 00AF     		add	r7, sp, #0
 1552              	.LCFI107:
 1553              		.cfi_def_cfa_register 7
 1554 0006 7860     		str	r0, [r7, #4]
 663:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacConfig, GmacTx);
 1555              		.loc 1 663 0
 1556 0008 7B68     		ldr	r3, [r7, #4]
 1557 000a 1B68     		ldr	r3, [r3, #0]
 1558 000c 1846     		mov	r0, r3
 1559 000e 4FF00001 		mov	r1, #0
 1560 0012 4FF00802 		mov	r2, #8
 1561 0016 FFF7FEFF 		bl	synopGMACSetBits
 664:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1562              		.loc 1 664 0
 1563 001a 00BF     		nop
 665:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1564              		.loc 1 665 0
 1565 001c 07F10807 		add	r7, r7, #8
 1566 0020 BD46     		mov	sp, r7
 1567 0022 80BD     		pop	{r7, pc}
 1568              		.cfi_endproc
 1569              	.LFE152:
 1571              		.section	.text.synopGMAC_tx_disable,"ax",%progbits
 1572              		.align	2
 1573              		.global	synopGMAC_tx_disable
 1574              		.thumb
 1575              		.thumb_func
 1577              	synopGMAC_tx_disable:
 1578              	.LFB153:
 666:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 667:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the transmission of frames on GMII/MII.
 668:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC transmit state machine is disabled after completion of transmission of current frame.
 669:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 670:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 671:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 672:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_disable(synopGMACdevice * gmacdev)
 673:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1579              		.loc 1 673 0
 1580              		.cfi_startproc
 1581              		@ args = 0, pretend = 0, frame = 8
 1582              		@ frame_needed = 1, uses_anonymous_args = 0
 1583 0000 80B5     		push	{r7, lr}
 1584              	.LCFI108:
 1585              		.cfi_def_cfa_offset 8
 1586              		.cfi_offset 7, -8
 1587              		.cfi_offset 14, -4
 1588 0002 82B0     		sub	sp, sp, #8
 1589              	.LCFI109:
 1590              		.cfi_def_cfa_offset 16
 1591 0004 00AF     		add	r7, sp, #0
 1592              	.LCFI110:
 1593              		.cfi_def_cfa_register 7
 1594 0006 7860     		str	r0, [r7, #4]
 674:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacConfig, GmacTx);
 1595              		.loc 1 674 0
 1596 0008 7B68     		ldr	r3, [r7, #4]
 1597 000a 1B68     		ldr	r3, [r3, #0]
 1598 000c 1846     		mov	r0, r3
 1599 000e 4FF00001 		mov	r1, #0
 1600 0012 4FF00802 		mov	r2, #8
 1601 0016 FFF7FEFF 		bl	synopGMACClearBits
 675:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1602              		.loc 1 675 0
 1603 001a 00BF     		nop
 676:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1604              		.loc 1 676 0
 1605 001c 07F10807 		add	r7, r7, #8
 1606 0020 BD46     		mov	sp, r7
 1607 0022 80BD     		pop	{r7, pc}
 1608              		.cfi_endproc
 1609              	.LFE153:
 1611              		.section	.text.synopGMAC_frame_filter_enable,"ax",%progbits
 1612              		.align	2
 1613              		.global	synopGMAC_frame_filter_enable
 1614              		.thumb
 1615              		.thumb_func
 1617              	synopGMAC_frame_filter_enable:
 1618              	.LFB154:
 677:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 678:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 679:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*Receive frame filter configuration functions*/
 680:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 681:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 682:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables reception of all the frames to application.
 683:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC passes all the frames received to application irrespective of whether they
 684:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * pass SA/DA address filtering or not.
 685:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 686:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
 687:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 688:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_frame_filter_enable(synopGMACdevice * gmacdev)
 689:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1619              		.loc 1 689 0
 1620              		.cfi_startproc
 1621              		@ args = 0, pretend = 0, frame = 8
 1622              		@ frame_needed = 1, uses_anonymous_args = 0
 1623 0000 80B5     		push	{r7, lr}
 1624              	.LCFI111:
 1625              		.cfi_def_cfa_offset 8
 1626              		.cfi_offset 7, -8
 1627              		.cfi_offset 14, -4
 1628 0002 82B0     		sub	sp, sp, #8
 1629              	.LCFI112:
 1630              		.cfi_def_cfa_offset 16
 1631 0004 00AF     		add	r7, sp, #0
 1632              	.LCFI113:
 1633              		.cfi_def_cfa_register 7
 1634 0006 7860     		str	r0, [r7, #4]
 690:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacFilter);
 1635              		.loc 1 690 0
 1636 0008 7B68     		ldr	r3, [r7, #4]
 1637 000a 1B68     		ldr	r3, [r3, #0]
 1638 000c 1846     		mov	r0, r3
 1639 000e 4FF00401 		mov	r1, #4
 1640 0012 4FF00042 		mov	r2, #-2147483648
 1641 0016 FFF7FEFF 		bl	synopGMACClearBits
 691:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1642              		.loc 1 691 0
 1643 001a 00BF     		nop
 692:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1644              		.loc 1 692 0
 1645 001c 07F10807 		add	r7, r7, #8
 1646 0020 BD46     		mov	sp, r7
 1647 0022 80BD     		pop	{r7, pc}
 1648              		.cfi_endproc
 1649              	.LFE154:
 1651              		.section	.text.synopGMAC_frame_filter_disable,"ax",%progbits
 1652              		.align	2
 1653              		.global	synopGMAC_frame_filter_disable
 1654              		.thumb
 1655              		.thumb_func
 1657              	synopGMAC_frame_filter_disable:
 1658              	.LFB155:
 693:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 694:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables reception of all the frames to application.
 695:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * GMAC passes only those received frames to application which 
 696:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * pass SA/DA address filtering.
 697:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 698:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void. 
 699:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 700:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_frame_filter_disable(synopGMACdevice * gmacdev)
 701:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1659              		.loc 1 701 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 8
 1662              		@ frame_needed = 1, uses_anonymous_args = 0
 1663 0000 80B5     		push	{r7, lr}
 1664              	.LCFI114:
 1665              		.cfi_def_cfa_offset 8
 1666              		.cfi_offset 7, -8
 1667              		.cfi_offset 14, -4
 1668 0002 82B0     		sub	sp, sp, #8
 1669              	.LCFI115:
 1670              		.cfi_def_cfa_offset 16
 1671 0004 00AF     		add	r7, sp, #0
 1672              	.LCFI116:
 1673              		.cfi_def_cfa_register 7
 1674 0006 7860     		str	r0, [r7, #4]
 702:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacFilter);
 1675              		.loc 1 702 0
 1676 0008 7B68     		ldr	r3, [r7, #4]
 1677 000a 1B68     		ldr	r3, [r3, #0]
 1678 000c 1846     		mov	r0, r3
 1679 000e 4FF00401 		mov	r1, #4
 1680 0012 4FF00042 		mov	r2, #-2147483648
 1681 0016 FFF7FEFF 		bl	synopGMACSetBits
 703:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1682              		.loc 1 703 0
 1683 001a 00BF     		nop
 704:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1684              		.loc 1 704 0
 1685 001c 07F10807 		add	r7, r7, #8
 1686 0020 BD46     		mov	sp, r7
 1687 0022 80BD     		pop	{r7, pc}
 1688              		.cfi_endproc
 1689              	.LFE155:
 1691              		.section	.text.synopGMAC_write_hash_table_high,"ax",%progbits
 1692              		.align	2
 1693              		.global	synopGMAC_write_hash_table_high
 1694              		.thumb
 1695              		.thumb_func
 1697              	synopGMAC_write_hash_table_high:
 1698              	.LFB156:
 705:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 706:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 707:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Populates the Hash High register with the data supplied.
 708:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function is called when the Hash filtering is to be enabled.
 709:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 710:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] data to be written to hash table high register.
 711:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void. 
 712:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 713:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_write_hash_table_high(synopGMACdevice * gmacdev, u32 data)
 714:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1699              		.loc 1 714 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 8
 1702              		@ frame_needed = 1, uses_anonymous_args = 0
 1703 0000 80B5     		push	{r7, lr}
 1704              	.LCFI117:
 1705              		.cfi_def_cfa_offset 8
 1706              		.cfi_offset 7, -8
 1707              		.cfi_offset 14, -4
 1708 0002 82B0     		sub	sp, sp, #8
 1709              	.LCFI118:
 1710              		.cfi_def_cfa_offset 16
 1711 0004 00AF     		add	r7, sp, #0
 1712              	.LCFI119:
 1713              		.cfi_def_cfa_register 7
 1714 0006 7860     		str	r0, [r7, #4]
 1715 0008 3960     		str	r1, [r7, #0]
 715:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->MacBase,GmacHashHigh,data);
 1716              		.loc 1 715 0
 1717 000a 7B68     		ldr	r3, [r7, #4]
 1718 000c 1B68     		ldr	r3, [r3, #0]
 1719 000e 1846     		mov	r0, r3
 1720 0010 4FF00801 		mov	r1, #8
 1721 0014 3A68     		ldr	r2, [r7, #0]
 1722 0016 FFF7FEFF 		bl	synopGMACWriteReg
 716:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1723              		.loc 1 716 0
 1724 001a 00BF     		nop
 717:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1725              		.loc 1 717 0
 1726 001c 07F10807 		add	r7, r7, #8
 1727 0020 BD46     		mov	sp, r7
 1728 0022 80BD     		pop	{r7, pc}
 1729              		.cfi_endproc
 1730              	.LFE156:
 1732              		.section	.text.synopGMAC_write_hash_table_low,"ax",%progbits
 1733              		.align	2
 1734              		.global	synopGMAC_write_hash_table_low
 1735              		.thumb
 1736              		.thumb_func
 1738              	synopGMAC_write_hash_table_low:
 1739              	.LFB157:
 718:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 719:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 720:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Populates the Hash Low register with the data supplied.
 721:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function is called when the Hash filtering is to be enabled.
 722:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 723:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] data to be written to hash table low register.
 724:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void. 
 725:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 726:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_write_hash_table_low(synopGMACdevice * gmacdev, u32 data)
 727:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1740              		.loc 1 727 0
 1741              		.cfi_startproc
 1742              		@ args = 0, pretend = 0, frame = 8
 1743              		@ frame_needed = 1, uses_anonymous_args = 0
 1744 0000 80B5     		push	{r7, lr}
 1745              	.LCFI120:
 1746              		.cfi_def_cfa_offset 8
 1747              		.cfi_offset 7, -8
 1748              		.cfi_offset 14, -4
 1749 0002 82B0     		sub	sp, sp, #8
 1750              	.LCFI121:
 1751              		.cfi_def_cfa_offset 16
 1752 0004 00AF     		add	r7, sp, #0
 1753              	.LCFI122:
 1754              		.cfi_def_cfa_register 7
 1755 0006 7860     		str	r0, [r7, #4]
 1756 0008 3960     		str	r1, [r7, #0]
 728:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->MacBase,GmacHashLow,data);
 1757              		.loc 1 728 0
 1758 000a 7B68     		ldr	r3, [r7, #4]
 1759 000c 1B68     		ldr	r3, [r3, #0]
 1760 000e 1846     		mov	r0, r3
 1761 0010 4FF00C01 		mov	r1, #12
 1762 0014 3A68     		ldr	r2, [r7, #0]
 1763 0016 FFF7FEFF 		bl	synopGMACWriteReg
 729:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1764              		.loc 1 729 0
 1765 001a 00BF     		nop
 730:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1766              		.loc 1 730 0
 1767 001c 07F10807 		add	r7, r7, #8
 1768 0020 BD46     		mov	sp, r7
 1769 0022 80BD     		pop	{r7, pc}
 1770              		.cfi_endproc
 1771              	.LFE157:
 1773              		.section	.text.synopGMAC_hash_perfect_filter_enable,"ax",%progbits
 1774              		.align	2
 1775              		.global	synopGMAC_hash_perfect_filter_enable
 1776              		.thumb
 1777              		.thumb_func
 1779              	synopGMAC_hash_perfect_filter_enable:
 1780              	.LFB158:
 731:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 732:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 733:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables Hash or Perfect filter (only if Hash filter is enabled in H/W).
 734:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Only frames matching either perfect filtering or Hash Filtering as per HMC and HUC 
 735:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * configuration are sent to application.
 736:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 737:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void. 
 738:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 739:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_hash_perfect_filter_enable(synopGMACdevice * gmacdev)
 740:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1781              		.loc 1 740 0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 8
 1784              		@ frame_needed = 1, uses_anonymous_args = 0
 1785 0000 80B5     		push	{r7, lr}
 1786              	.LCFI123:
 1787              		.cfi_def_cfa_offset 8
 1788              		.cfi_offset 7, -8
 1789              		.cfi_offset 14, -4
 1790 0002 82B0     		sub	sp, sp, #8
 1791              	.LCFI124:
 1792              		.cfi_def_cfa_offset 16
 1793 0004 00AF     		add	r7, sp, #0
 1794              	.LCFI125:
 1795              		.cfi_def_cfa_register 7
 1796 0006 7860     		str	r0, [r7, #4]
 741:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacHashPerfectFilter);
 1797              		.loc 1 741 0
 1798 0008 7B68     		ldr	r3, [r7, #4]
 1799 000a 1B68     		ldr	r3, [r3, #0]
 1800 000c 1846     		mov	r0, r3
 1801 000e 4FF00401 		mov	r1, #4
 1802 0012 4FF48062 		mov	r2, #1024
 1803 0016 FFF7FEFF 		bl	synopGMACSetBits
 742:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1804              		.loc 1 742 0
 1805 001a 00BF     		nop
 743:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1806              		.loc 1 743 0
 1807 001c 07F10807 		add	r7, r7, #8
 1808 0020 BD46     		mov	sp, r7
 1809 0022 80BD     		pop	{r7, pc}
 1810              		.cfi_endproc
 1811              	.LFE158:
 1813              		.section	.text.synopGMAC_Hash_filter_only_enable,"ax",%progbits
 1814              		.align	2
 1815              		.global	synopGMAC_Hash_filter_only_enable
 1816              		.thumb
 1817              		.thumb_func
 1819              	synopGMAC_Hash_filter_only_enable:
 1820              	.LFB159:
 744:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 745:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 746:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables only Hash(only if Hash filter is enabled in H/W).
 747:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Only frames matching Hash Filtering as per HMC and HUC 
 748:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * configuration are sent to application.
 749:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 750:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void. 
 751:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 752:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_Hash_filter_only_enable(synopGMACdevice * gmacdev)
 753:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1821              		.loc 1 753 0
 1822              		.cfi_startproc
 1823              		@ args = 0, pretend = 0, frame = 8
 1824              		@ frame_needed = 1, uses_anonymous_args = 0
 1825 0000 80B5     		push	{r7, lr}
 1826              	.LCFI126:
 1827              		.cfi_def_cfa_offset 8
 1828              		.cfi_offset 7, -8
 1829              		.cfi_offset 14, -4
 1830 0002 82B0     		sub	sp, sp, #8
 1831              	.LCFI127:
 1832              		.cfi_def_cfa_offset 16
 1833 0004 00AF     		add	r7, sp, #0
 1834              	.LCFI128:
 1835              		.cfi_def_cfa_register 7
 1836 0006 7860     		str	r0, [r7, #4]
 754:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacHashPerfectFilter);
 1837              		.loc 1 754 0
 1838 0008 7B68     		ldr	r3, [r7, #4]
 1839 000a 1B68     		ldr	r3, [r3, #0]
 1840 000c 1846     		mov	r0, r3
 1841 000e 4FF00401 		mov	r1, #4
 1842 0012 4FF48062 		mov	r2, #1024
 1843 0016 FFF7FEFF 		bl	synopGMACSetBits
 755:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1844              		.loc 1 755 0
 1845 001a 00BF     		nop
 756:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1846              		.loc 1 756 0
 1847 001c 07F10807 		add	r7, r7, #8
 1848 0020 BD46     		mov	sp, r7
 1849 0022 80BD     		pop	{r7, pc}
 1850              		.cfi_endproc
 1851              	.LFE159:
 1853              		.section	.text.synopGMAC_src_addr_filter_enable,"ax",%progbits
 1854              		.align	2
 1855              		.global	synopGMAC_src_addr_filter_enable
 1856              		.thumb
 1857              		.thumb_func
 1859              	synopGMAC_src_addr_filter_enable:
 1860              	.LFB160:
 757:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 758:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 759:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables Source address filtering.
 760:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled source address filtering is performed. Only frames matching SA filtering are passe
 761:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * SAMatch bit of RxStatus is set. GMAC drops failed frames. 
 762:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 763:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 764:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note This function is overriden by synopGMAC_frame_filter_disable(synopGMACdevice *) 
 765:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 766:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_src_addr_filter_enable(synopGMACdevice * gmacdev)
 767:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1861              		.loc 1 767 0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 8
 1864              		@ frame_needed = 1, uses_anonymous_args = 0
 1865 0000 80B5     		push	{r7, lr}
 1866              	.LCFI129:
 1867              		.cfi_def_cfa_offset 8
 1868              		.cfi_offset 7, -8
 1869              		.cfi_offset 14, -4
 1870 0002 82B0     		sub	sp, sp, #8
 1871              	.LCFI130:
 1872              		.cfi_def_cfa_offset 16
 1873 0004 00AF     		add	r7, sp, #0
 1874              	.LCFI131:
 1875              		.cfi_def_cfa_register 7
 1876 0006 7860     		str	r0, [r7, #4]
 768:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacSrcAddrFilter);
 1877              		.loc 1 768 0
 1878 0008 7B68     		ldr	r3, [r7, #4]
 1879 000a 1B68     		ldr	r3, [r3, #0]
 1880 000c 1846     		mov	r0, r3
 1881 000e 4FF00401 		mov	r1, #4
 1882 0012 4FF40072 		mov	r2, #512
 1883 0016 FFF7FEFF 		bl	synopGMACSetBits
 769:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1884              		.loc 1 769 0
 1885 001a 00BF     		nop
 770:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1886              		.loc 1 770 0
 1887 001c 07F10807 		add	r7, r7, #8
 1888 0020 BD46     		mov	sp, r7
 1889 0022 80BD     		pop	{r7, pc}
 1890              		.cfi_endproc
 1891              	.LFE160:
 1893              		.section	.text.synopGMAC_src_addr_filter_disable,"ax",%progbits
 1894              		.align	2
 1895              		.global	synopGMAC_src_addr_filter_disable
 1896              		.thumb
 1897              		.thumb_func
 1899              	synopGMAC_src_addr_filter_disable:
 1900              	.LFB161:
 771:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 772:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables Source address filtering.
 773:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled GMAC forwards the received frames with updated SAMatch bit in RxStatus. 
 774:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 775:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 776:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 777:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_src_addr_filter_disable(synopGMACdevice * gmacdev)
 778:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1901              		.loc 1 778 0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 8
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905 0000 80B5     		push	{r7, lr}
 1906              	.LCFI132:
 1907              		.cfi_def_cfa_offset 8
 1908              		.cfi_offset 7, -8
 1909              		.cfi_offset 14, -4
 1910 0002 82B0     		sub	sp, sp, #8
 1911              	.LCFI133:
 1912              		.cfi_def_cfa_offset 16
 1913 0004 00AF     		add	r7, sp, #0
 1914              	.LCFI134:
 1915              		.cfi_def_cfa_register 7
 1916 0006 7860     		str	r0, [r7, #4]
 779:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacSrcAddrFilter);
 1917              		.loc 1 779 0
 1918 0008 7B68     		ldr	r3, [r7, #4]
 1919 000a 1B68     		ldr	r3, [r3, #0]
 1920 000c 1846     		mov	r0, r3
 1921 000e 4FF00401 		mov	r1, #4
 1922 0012 4FF40072 		mov	r2, #512
 1923 0016 FFF7FEFF 		bl	synopGMACClearBits
 780:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1924              		.loc 1 780 0
 1925 001a 00BF     		nop
 781:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1926              		.loc 1 781 0
 1927 001c 07F10807 		add	r7, r7, #8
 1928 0020 BD46     		mov	sp, r7
 1929 0022 80BD     		pop	{r7, pc}
 1930              		.cfi_endproc
 1931              	.LFE161:
 1933              		.section	.text.synopGMAC_dst_addr_filter_inverse,"ax",%progbits
 1934              		.align	2
 1935              		.global	synopGMAC_dst_addr_filter_inverse
 1936              		.thumb
 1937              		.thumb_func
 1939              	synopGMAC_dst_addr_filter_inverse:
 1940              	.LFB162:
 782:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 783:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables Inverse Destination address filtering.
 784:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 785:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 786:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 787:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_dst_addr_filter_inverse(synopGMACdevice * gmacdev)
 788:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1941              		.loc 1 788 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 8
 1944              		@ frame_needed = 1, uses_anonymous_args = 0
 1945 0000 80B5     		push	{r7, lr}
 1946              	.LCFI135:
 1947              		.cfi_def_cfa_offset 8
 1948              		.cfi_offset 7, -8
 1949              		.cfi_offset 14, -4
 1950 0002 82B0     		sub	sp, sp, #8
 1951              	.LCFI136:
 1952              		.cfi_def_cfa_offset 16
 1953 0004 00AF     		add	r7, sp, #0
 1954              	.LCFI137:
 1955              		.cfi_def_cfa_register 7
 1956 0006 7860     		str	r0, [r7, #4]
 789:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacDestAddrFilterNor);
 1957              		.loc 1 789 0
 1958 0008 7B68     		ldr	r3, [r7, #4]
 1959 000a 1B68     		ldr	r3, [r3, #0]
 1960 000c 1846     		mov	r0, r3
 1961 000e 4FF00401 		mov	r1, #4
 1962 0012 4FF00002 		mov	r2, #0
 1963 0016 FFF7FEFF 		bl	synopGMACSetBits
 790:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 1964              		.loc 1 790 0
 1965 001a 00BF     		nop
 791:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 1966              		.loc 1 791 0
 1967 001c 07F10807 		add	r7, r7, #8
 1968 0020 BD46     		mov	sp, r7
 1969 0022 80BD     		pop	{r7, pc}
 1970              		.cfi_endproc
 1971              	.LFE162:
 1973              		.section	.text.synopGMAC_dst_addr_filter_normal,"ax",%progbits
 1974              		.align	2
 1975              		.global	synopGMAC_dst_addr_filter_normal
 1976              		.thumb
 1977              		.thumb_func
 1979              	synopGMAC_dst_addr_filter_normal:
 1980              	.LFB163:
 792:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 793:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the normal Destination address filtering.
 794:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 795:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 796:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 797:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_dst_addr_filter_normal(synopGMACdevice * gmacdev)
 798:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 1981              		.loc 1 798 0
 1982              		.cfi_startproc
 1983              		@ args = 0, pretend = 0, frame = 8
 1984              		@ frame_needed = 1, uses_anonymous_args = 0
 1985 0000 80B5     		push	{r7, lr}
 1986              	.LCFI138:
 1987              		.cfi_def_cfa_offset 8
 1988              		.cfi_offset 7, -8
 1989              		.cfi_offset 14, -4
 1990 0002 82B0     		sub	sp, sp, #8
 1991              	.LCFI139:
 1992              		.cfi_def_cfa_offset 16
 1993 0004 00AF     		add	r7, sp, #0
 1994              	.LCFI140:
 1995              		.cfi_def_cfa_register 7
 1996 0006 7860     		str	r0, [r7, #4]
 799:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacDestAddrFilterNor);
 1997              		.loc 1 799 0
 1998 0008 7B68     		ldr	r3, [r7, #4]
 1999 000a 1B68     		ldr	r3, [r3, #0]
 2000 000c 1846     		mov	r0, r3
 2001 000e 4FF00401 		mov	r1, #4
 2002 0012 4FF00002 		mov	r2, #0
 2003 0016 FFF7FEFF 		bl	synopGMACClearBits
 800:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2004              		.loc 1 800 0
 2005 001a 00BF     		nop
 801:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2006              		.loc 1 801 0
 2007 001c 07F10807 		add	r7, r7, #8
 2008 0020 BD46     		mov	sp, r7
 2009 0022 80BD     		pop	{r7, pc}
 2010              		.cfi_endproc
 2011              	.LFE163:
 2013              		.section	.text.synopGMAC_set_pass_control,"ax",%progbits
 2014              		.align	2
 2015              		.global	synopGMAC_set_pass_control
 2016              		.thumb
 2017              		.thumb_func
 2019              	synopGMAC_set_pass_control:
 2020              	.LFB164:
 802:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 803:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 804:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables forwarding of control frames.
 805:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When set forwards all the control frames (incl. unicast and multicast PAUSE frames).
 806:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 807:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 808:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note Depends on RFE of FlowControlRegister[2]
 809:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 810:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_set_pass_control(synopGMACdevice * gmacdev,u32 passcontrol)
 811:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {	
 2021              		.loc 1 811 0
 2022              		.cfi_startproc
 2023              		@ args = 0, pretend = 0, frame = 16
 2024              		@ frame_needed = 1, uses_anonymous_args = 0
 2025 0000 80B5     		push	{r7, lr}
 2026              	.LCFI141:
 2027              		.cfi_def_cfa_offset 8
 2028              		.cfi_offset 7, -8
 2029              		.cfi_offset 14, -4
 2030 0002 84B0     		sub	sp, sp, #16
 2031              	.LCFI142:
 2032              		.cfi_def_cfa_offset 24
 2033 0004 00AF     		add	r7, sp, #0
 2034              	.LCFI143:
 2035              		.cfi_def_cfa_register 7
 2036 0006 7860     		str	r0, [r7, #4]
 2037 0008 3960     		str	r1, [r7, #0]
 812:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
 813:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->MacBase, GmacFrameFilter);
 2038              		.loc 1 813 0
 2039 000a 7B68     		ldr	r3, [r7, #4]
 2040 000c 1B68     		ldr	r3, [r3, #0]
 2041 000e 1846     		mov	r0, r3
 2042 0010 4FF00401 		mov	r1, #4
 2043 0014 FFF7FEFF 		bl	synopGMACReadReg
 2044 0018 F860     		str	r0, [r7, #12]
 814:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data &= (~GmacPassControl);
 2045              		.loc 1 814 0
 2046 001a FB68     		ldr	r3, [r7, #12]
 2047 001c 23F0C003 		bic	r3, r3, #192
 2048 0020 FB60     		str	r3, [r7, #12]
 815:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data |= passcontrol;
 2049              		.loc 1 815 0
 2050 0022 FA68     		ldr	r2, [r7, #12]
 2051 0024 3B68     		ldr	r3, [r7, #0]
 2052 0026 1343     		orrs	r3, r3, r2
 2053 0028 FB60     		str	r3, [r7, #12]
 816:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->MacBase,GmacFrameFilter,data);
 2054              		.loc 1 816 0
 2055 002a 7B68     		ldr	r3, [r7, #4]
 2056 002c 1B68     		ldr	r3, [r3, #0]
 2057 002e 1846     		mov	r0, r3
 2058 0030 4FF00401 		mov	r1, #4
 2059 0034 FA68     		ldr	r2, [r7, #12]
 2060 0036 FFF7FEFF 		bl	synopGMACWriteReg
 817:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2061              		.loc 1 817 0
 2062 003a 00BF     		nop
 818:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2063              		.loc 1 818 0
 2064 003c 07F11007 		add	r7, r7, #16
 2065 0040 BD46     		mov	sp, r7
 2066 0042 80BD     		pop	{r7, pc}
 2067              		.cfi_endproc
 2068              	.LFE164:
 2070              		.section	.text.synopGMAC_broadcast_enable,"ax",%progbits
 2071              		.align	2
 2072              		.global	synopGMAC_broadcast_enable
 2073              		.thumb
 2074              		.thumb_func
 2076              	synopGMAC_broadcast_enable:
 2077              	.LFB165:
 819:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 820:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 821:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables Broadcast frames.
 822:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled Address filtering module passes all incoming broadcast frames.
 823:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 824:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 825:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 826:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_broadcast_enable(synopGMACdevice * gmacdev)
 827:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2078              		.loc 1 827 0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 8
 2081              		@ frame_needed = 1, uses_anonymous_args = 0
 2082 0000 80B5     		push	{r7, lr}
 2083              	.LCFI144:
 2084              		.cfi_def_cfa_offset 8
 2085              		.cfi_offset 7, -8
 2086              		.cfi_offset 14, -4
 2087 0002 82B0     		sub	sp, sp, #8
 2088              	.LCFI145:
 2089              		.cfi_def_cfa_offset 16
 2090 0004 00AF     		add	r7, sp, #0
 2091              	.LCFI146:
 2092              		.cfi_def_cfa_register 7
 2093 0006 7860     		str	r0, [r7, #4]
 828:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacBroadcast);
 2094              		.loc 1 828 0
 2095 0008 7B68     		ldr	r3, [r7, #4]
 2096 000a 1B68     		ldr	r3, [r3, #0]
 2097 000c 1846     		mov	r0, r3
 2098 000e 4FF00401 		mov	r1, #4
 2099 0012 4FF02002 		mov	r2, #32
 2100 0016 FFF7FEFF 		bl	synopGMACClearBits
 829:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2101              		.loc 1 829 0
 2102 001a 00BF     		nop
 830:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2103              		.loc 1 830 0
 2104 001c 07F10807 		add	r7, r7, #8
 2105 0020 BD46     		mov	sp, r7
 2106 0022 80BD     		pop	{r7, pc}
 2107              		.cfi_endproc
 2108              	.LFE165:
 2110              		.section	.text.synopGMAC_broadcast_disable,"ax",%progbits
 2111              		.align	2
 2112              		.global	synopGMAC_broadcast_disable
 2113              		.thumb
 2114              		.thumb_func
 2116              	synopGMAC_broadcast_disable:
 2117              	.LFB166:
 831:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 832:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable Broadcast frames.
 833:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled Address filtering module filters all incoming broadcast frames.
 834:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 835:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 836:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 837:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_broadcast_disable(synopGMACdevice * gmacdev)
 838:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2118              		.loc 1 838 0
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 8
 2121              		@ frame_needed = 1, uses_anonymous_args = 0
 2122 0000 80B5     		push	{r7, lr}
 2123              	.LCFI147:
 2124              		.cfi_def_cfa_offset 8
 2125              		.cfi_offset 7, -8
 2126              		.cfi_offset 14, -4
 2127 0002 82B0     		sub	sp, sp, #8
 2128              	.LCFI148:
 2129              		.cfi_def_cfa_offset 16
 2130 0004 00AF     		add	r7, sp, #0
 2131              	.LCFI149:
 2132              		.cfi_def_cfa_register 7
 2133 0006 7860     		str	r0, [r7, #4]
 839:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacBroadcast);
 2134              		.loc 1 839 0
 2135 0008 7B68     		ldr	r3, [r7, #4]
 2136 000a 1B68     		ldr	r3, [r3, #0]
 2137 000c 1846     		mov	r0, r3
 2138 000e 4FF00401 		mov	r1, #4
 2139 0012 4FF02002 		mov	r2, #32
 2140 0016 FFF7FEFF 		bl	synopGMACSetBits
 840:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2141              		.loc 1 840 0
 2142 001a 00BF     		nop
 841:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2143              		.loc 1 841 0
 2144 001c 07F10807 		add	r7, r7, #8
 2145 0020 BD46     		mov	sp, r7
 2146 0022 80BD     		pop	{r7, pc}
 2147              		.cfi_endproc
 2148              	.LFE166:
 2150              		.section	.text.synopGMAC_multicast_enable,"ax",%progbits
 2151              		.align	2
 2152              		.global	synopGMAC_multicast_enable
 2153              		.thumb
 2154              		.thumb_func
 2156              	synopGMAC_multicast_enable:
 2157              	.LFB167:
 842:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 843:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 844:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables Multicast frames.
 845:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled all multicast frames are passed.
 846:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 847:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 848:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 849:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_multicast_enable(synopGMACdevice * gmacdev)
 850:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2158              		.loc 1 850 0
 2159              		.cfi_startproc
 2160              		@ args = 0, pretend = 0, frame = 8
 2161              		@ frame_needed = 1, uses_anonymous_args = 0
 2162 0000 80B5     		push	{r7, lr}
 2163              	.LCFI150:
 2164              		.cfi_def_cfa_offset 8
 2165              		.cfi_offset 7, -8
 2166              		.cfi_offset 14, -4
 2167 0002 82B0     		sub	sp, sp, #8
 2168              	.LCFI151:
 2169              		.cfi_def_cfa_offset 16
 2170 0004 00AF     		add	r7, sp, #0
 2171              	.LCFI152:
 2172              		.cfi_def_cfa_register 7
 2173 0006 7860     		str	r0, [r7, #4]
 851:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacMulticastFilter);
 2174              		.loc 1 851 0
 2175 0008 7B68     		ldr	r3, [r7, #4]
 2176 000a 1B68     		ldr	r3, [r3, #0]
 2177 000c 1846     		mov	r0, r3
 2178 000e 4FF00401 		mov	r1, #4
 2179 0012 4FF01002 		mov	r2, #16
 2180 0016 FFF7FEFF 		bl	synopGMACSetBits
 852:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2181              		.loc 1 852 0
 2182 001a 00BF     		nop
 853:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2183              		.loc 1 853 0
 2184 001c 07F10807 		add	r7, r7, #8
 2185 0020 BD46     		mov	sp, r7
 2186 0022 80BD     		pop	{r7, pc}
 2187              		.cfi_endproc
 2188              	.LFE167:
 2190              		.section	.text.synopGMAC_multicast_disable,"ax",%progbits
 2191              		.align	2
 2192              		.global	synopGMAC_multicast_disable
 2193              		.thumb
 2194              		.thumb_func
 2196              	synopGMAC_multicast_disable:
 2197              	.LFB168:
 854:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 855:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable Multicast frames.
 856:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled multicast frame filtering depends on HMC bit.
 857:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 858:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 859:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 860:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_multicast_disable(synopGMACdevice * gmacdev)
 861:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2198              		.loc 1 861 0
 2199              		.cfi_startproc
 2200              		@ args = 0, pretend = 0, frame = 8
 2201              		@ frame_needed = 1, uses_anonymous_args = 0
 2202 0000 80B5     		push	{r7, lr}
 2203              	.LCFI153:
 2204              		.cfi_def_cfa_offset 8
 2205              		.cfi_offset 7, -8
 2206              		.cfi_offset 14, -4
 2207 0002 82B0     		sub	sp, sp, #8
 2208              	.LCFI154:
 2209              		.cfi_def_cfa_offset 16
 2210 0004 00AF     		add	r7, sp, #0
 2211              	.LCFI155:
 2212              		.cfi_def_cfa_register 7
 2213 0006 7860     		str	r0, [r7, #4]
 862:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacMulticastFilter);
 2214              		.loc 1 862 0
 2215 0008 7B68     		ldr	r3, [r7, #4]
 2216 000a 1B68     		ldr	r3, [r3, #0]
 2217 000c 1846     		mov	r0, r3
 2218 000e 4FF00401 		mov	r1, #4
 2219 0012 4FF01002 		mov	r2, #16
 2220 0016 FFF7FEFF 		bl	synopGMACClearBits
 863:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2221              		.loc 1 863 0
 2222 001a 00BF     		nop
 864:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2223              		.loc 1 864 0
 2224 001c 07F10807 		add	r7, r7, #8
 2225 0020 BD46     		mov	sp, r7
 2226 0022 80BD     		pop	{r7, pc}
 2227              		.cfi_endproc
 2228              	.LFE168:
 2230              		.section	.text.synopGMAC_multicast_hash_filter_enable,"ax",%progbits
 2231              		.align	2
 2232              		.global	synopGMAC_multicast_hash_filter_enable
 2233              		.thumb
 2234              		.thumb_func
 2236              	synopGMAC_multicast_hash_filter_enable:
 2237              	.LFB169:
 865:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 866:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 867:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables multicast hash filtering.
 868:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled GMAC performs teh destination address filtering according to the hash table.
 869:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 870:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 871:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 872:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_multicast_hash_filter_enable(synopGMACdevice * gmacdev)
 873:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2238              		.loc 1 873 0
 2239              		.cfi_startproc
 2240              		@ args = 0, pretend = 0, frame = 8
 2241              		@ frame_needed = 1, uses_anonymous_args = 0
 2242 0000 80B5     		push	{r7, lr}
 2243              	.LCFI156:
 2244              		.cfi_def_cfa_offset 8
 2245              		.cfi_offset 7, -8
 2246              		.cfi_offset 14, -4
 2247 0002 82B0     		sub	sp, sp, #8
 2248              	.LCFI157:
 2249              		.cfi_def_cfa_offset 16
 2250 0004 00AF     		add	r7, sp, #0
 2251              	.LCFI158:
 2252              		.cfi_def_cfa_register 7
 2253 0006 7860     		str	r0, [r7, #4]
 874:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacMcastHashFilter);
 2254              		.loc 1 874 0
 2255 0008 7B68     		ldr	r3, [r7, #4]
 2256 000a 1B68     		ldr	r3, [r3, #0]
 2257 000c 1846     		mov	r0, r3
 2258 000e 4FF00401 		mov	r1, #4
 2259 0012 4FF00402 		mov	r2, #4
 2260 0016 FFF7FEFF 		bl	synopGMACSetBits
 875:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2261              		.loc 1 875 0
 2262 001a 00BF     		nop
 876:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2263              		.loc 1 876 0
 2264 001c 07F10807 		add	r7, r7, #8
 2265 0020 BD46     		mov	sp, r7
 2266 0022 80BD     		pop	{r7, pc}
 2267              		.cfi_endproc
 2268              	.LFE169:
 2270              		.section	.text.synopGMAC_multicast_hash_filter_disable,"ax",%progbits
 2271              		.align	2
 2272              		.global	synopGMAC_multicast_hash_filter_disable
 2273              		.thumb
 2274              		.thumb_func
 2276              	synopGMAC_multicast_hash_filter_disable:
 2277              	.LFB170:
 877:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 878:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables multicast hash filtering.
 879:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled GMAC performs perfect destination address filtering for multicast frames, it comp
 880:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * DA field with the value programmed in DA register.
 881:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 882:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 883:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 884:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_multicast_hash_filter_disable(synopGMACdevice * gmacdev)
 885:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2278              		.loc 1 885 0
 2279              		.cfi_startproc
 2280              		@ args = 0, pretend = 0, frame = 8
 2281              		@ frame_needed = 1, uses_anonymous_args = 0
 2282 0000 80B5     		push	{r7, lr}
 2283              	.LCFI159:
 2284              		.cfi_def_cfa_offset 8
 2285              		.cfi_offset 7, -8
 2286              		.cfi_offset 14, -4
 2287 0002 82B0     		sub	sp, sp, #8
 2288              	.LCFI160:
 2289              		.cfi_def_cfa_offset 16
 2290 0004 00AF     		add	r7, sp, #0
 2291              	.LCFI161:
 2292              		.cfi_def_cfa_register 7
 2293 0006 7860     		str	r0, [r7, #4]
 886:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacMcastHashFilter);
 2294              		.loc 1 886 0
 2295 0008 7B68     		ldr	r3, [r7, #4]
 2296 000a 1B68     		ldr	r3, [r3, #0]
 2297 000c 1846     		mov	r0, r3
 2298 000e 4FF00401 		mov	r1, #4
 2299 0012 4FF00402 		mov	r2, #4
 2300 0016 FFF7FEFF 		bl	synopGMACClearBits
 887:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2301              		.loc 1 887 0
 2302 001a 00BF     		nop
 888:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2303              		.loc 1 888 0
 2304 001c 07F10807 		add	r7, r7, #8
 2305 0020 BD46     		mov	sp, r7
 2306 0022 80BD     		pop	{r7, pc}
 2307              		.cfi_endproc
 2308              	.LFE170:
 2310              		.section	.text.synopGMAC_promisc_enable,"ax",%progbits
 2311              		.align	2
 2312              		.global	synopGMAC_promisc_enable
 2313              		.thumb
 2314              		.thumb_func
 2316              	synopGMAC_promisc_enable:
 2317              	.LFB171:
 889:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 890:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 891:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables promiscous mode.
 892:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled Address filter modules pass all incoming frames regardless of their Destination
 893:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * and source addresses.
 894:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 895:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 896:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 897:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_promisc_enable(synopGMACdevice * gmacdev)
 898:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2318              		.loc 1 898 0
 2319              		.cfi_startproc
 2320              		@ args = 0, pretend = 0, frame = 8
 2321              		@ frame_needed = 1, uses_anonymous_args = 0
 2322 0000 80B5     		push	{r7, lr}
 2323              	.LCFI162:
 2324              		.cfi_def_cfa_offset 8
 2325              		.cfi_offset 7, -8
 2326              		.cfi_offset 14, -4
 2327 0002 82B0     		sub	sp, sp, #8
 2328              	.LCFI163:
 2329              		.cfi_def_cfa_offset 16
 2330 0004 00AF     		add	r7, sp, #0
 2331              	.LCFI164:
 2332              		.cfi_def_cfa_register 7
 2333 0006 7860     		str	r0, [r7, #4]
 899:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacPromiscuousMode);
 2334              		.loc 1 899 0
 2335 0008 7B68     		ldr	r3, [r7, #4]
 2336 000a 1B68     		ldr	r3, [r3, #0]
 2337 000c 1846     		mov	r0, r3
 2338 000e 4FF00401 		mov	r1, #4
 2339 0012 4FF00102 		mov	r2, #1
 2340 0016 FFF7FEFF 		bl	synopGMACSetBits
 900:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2341              		.loc 1 900 0
 2342 001a 00BF     		nop
 901:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2343              		.loc 1 901 0
 2344 001c 07F10807 		add	r7, r7, #8
 2345 0020 BD46     		mov	sp, r7
 2346 0022 80BD     		pop	{r7, pc}
 2347              		.cfi_endproc
 2348              	.LFE171:
 2350              		.section	.text.synopGMAC_promisc_disable,"ax",%progbits
 2351              		.align	2
 2352              		.global	synopGMAC_promisc_disable
 2353              		.thumb
 2354              		.thumb_func
 2356              	synopGMAC_promisc_disable:
 2357              	.LFB172:
 902:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 903:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Clears promiscous mode.
 904:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When called the GMAC falls back to normal operation from promiscous mode.
 905:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 906:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 907:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 908:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_promisc_disable(synopGMACdevice * gmacdev)
 909:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2358              		.loc 1 909 0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 8
 2361              		@ frame_needed = 1, uses_anonymous_args = 0
 2362 0000 80B5     		push	{r7, lr}
 2363              	.LCFI165:
 2364              		.cfi_def_cfa_offset 8
 2365              		.cfi_offset 7, -8
 2366              		.cfi_offset 14, -4
 2367 0002 82B0     		sub	sp, sp, #8
 2368              	.LCFI166:
 2369              		.cfi_def_cfa_offset 16
 2370 0004 00AF     		add	r7, sp, #0
 2371              	.LCFI167:
 2372              		.cfi_def_cfa_register 7
 2373 0006 7860     		str	r0, [r7, #4]
 910:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacPromiscuousMode);
 2374              		.loc 1 910 0
 2375 0008 7B68     		ldr	r3, [r7, #4]
 2376 000a 1B68     		ldr	r3, [r3, #0]
 2377 000c 1846     		mov	r0, r3
 2378 000e 4FF00401 		mov	r1, #4
 2379 0012 4FF00102 		mov	r2, #1
 2380 0016 FFF7FEFF 		bl	synopGMACClearBits
 911:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2381              		.loc 1 911 0
 2382 001a 00BF     		nop
 912:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2383              		.loc 1 912 0
 2384 001c 07F10807 		add	r7, r7, #8
 2385 0020 BD46     		mov	sp, r7
 2386 0022 80BD     		pop	{r7, pc}
 2387              		.cfi_endproc
 2388              	.LFE172:
 2390              		.section	.text.synopGMAC_unicast_hash_filter_enable,"ax",%progbits
 2391              		.align	2
 2392              		.global	synopGMAC_unicast_hash_filter_enable
 2393              		.thumb
 2394              		.thumb_func
 2396              	synopGMAC_unicast_hash_filter_enable:
 2397              	.LFB173:
 913:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 914:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 915:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 916:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables unicast hash filtering.
 917:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled GMAC performs the destination address filtering of unicast frames according to the
 918:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 919:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 920:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 921:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_unicast_hash_filter_enable(synopGMACdevice * gmacdev)
 922:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2398              		.loc 1 922 0
 2399              		.cfi_startproc
 2400              		@ args = 0, pretend = 0, frame = 8
 2401              		@ frame_needed = 1, uses_anonymous_args = 0
 2402 0000 80B5     		push	{r7, lr}
 2403              	.LCFI168:
 2404              		.cfi_def_cfa_offset 8
 2405              		.cfi_offset 7, -8
 2406              		.cfi_offset 14, -4
 2407 0002 82B0     		sub	sp, sp, #8
 2408              	.LCFI169:
 2409              		.cfi_def_cfa_offset 16
 2410 0004 00AF     		add	r7, sp, #0
 2411              	.LCFI170:
 2412              		.cfi_def_cfa_register 7
 2413 0006 7860     		str	r0, [r7, #4]
 923:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacUcastHashFilter);
 2414              		.loc 1 923 0
 2415 0008 7B68     		ldr	r3, [r7, #4]
 2416 000a 1B68     		ldr	r3, [r3, #0]
 2417 000c 1846     		mov	r0, r3
 2418 000e 4FF00401 		mov	r1, #4
 2419 0012 4FF00202 		mov	r2, #2
 2420 0016 FFF7FEFF 		bl	synopGMACSetBits
 924:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2421              		.loc 1 924 0
 2422 001a 00BF     		nop
 925:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2423              		.loc 1 925 0
 2424 001c 07F10807 		add	r7, r7, #8
 2425 0020 BD46     		mov	sp, r7
 2426 0022 80BD     		pop	{r7, pc}
 2427              		.cfi_endproc
 2428              	.LFE173:
 2430              		.section	.text.synopGMAC_unicast_hash_filter_disable,"ax",%progbits
 2431              		.align	2
 2432              		.global	synopGMAC_unicast_hash_filter_disable
 2433              		.thumb
 2434              		.thumb_func
 2436              	synopGMAC_unicast_hash_filter_disable:
 2437              	.LFB174:
 926:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 927:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables multicast hash filtering.
 928:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled GMAC performs perfect destination address filtering for unicast frames, it compar
 929:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * DA field with the value programmed in DA register.
 930:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 931:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 932:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 933:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_unicast_hash_filter_disable(synopGMACdevice * gmacdev)
 934:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2438              		.loc 1 934 0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 8
 2441              		@ frame_needed = 1, uses_anonymous_args = 0
 2442 0000 80B5     		push	{r7, lr}
 2443              	.LCFI171:
 2444              		.cfi_def_cfa_offset 8
 2445              		.cfi_offset 7, -8
 2446              		.cfi_offset 14, -4
 2447 0002 82B0     		sub	sp, sp, #8
 2448              	.LCFI172:
 2449              		.cfi_def_cfa_offset 16
 2450 0004 00AF     		add	r7, sp, #0
 2451              	.LCFI173:
 2452              		.cfi_def_cfa_register 7
 2453 0006 7860     		str	r0, [r7, #4]
 935:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFrameFilter, GmacUcastHashFilter);
 2454              		.loc 1 935 0
 2455 0008 7B68     		ldr	r3, [r7, #4]
 2456 000a 1B68     		ldr	r3, [r3, #0]
 2457 000c 1846     		mov	r0, r3
 2458 000e 4FF00401 		mov	r1, #4
 2459 0012 4FF00202 		mov	r2, #2
 2460 0016 FFF7FEFF 		bl	synopGMACClearBits
 936:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2461              		.loc 1 936 0
 2462 001a 00BF     		nop
 937:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2463              		.loc 1 937 0
 2464 001c 07F10807 		add	r7, r7, #8
 2465 0020 BD46     		mov	sp, r7
 2466 0022 80BD     		pop	{r7, pc}
 2467              		.cfi_endproc
 2468              	.LFE174:
 2470              		.section	.text.synopGMAC_unicast_pause_frame_detect_enable,"ax",%progbits
 2471              		.align	2
 2472              		.global	synopGMAC_unicast_pause_frame_detect_enable
 2473              		.thumb
 2474              		.thumb_func
 2476              	synopGMAC_unicast_pause_frame_detect_enable:
 2477              	.LFB175:
 938:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
 939:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*Flow control configuration functions*/
 940:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
 941:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 942:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables detection of pause frames with stations unicast address.
 943:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When enabled GMAC detects the pause frames with stations unicast address in addition to the
 944:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * detection of pause frames with unique multicast address.
 945:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 946:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 947:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 948:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_unicast_pause_frame_detect_enable(synopGMACdevice * gmacdev)
 949:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2478              		.loc 1 949 0
 2479              		.cfi_startproc
 2480              		@ args = 0, pretend = 0, frame = 8
 2481              		@ frame_needed = 1, uses_anonymous_args = 0
 2482 0000 80B5     		push	{r7, lr}
 2483              	.LCFI174:
 2484              		.cfi_def_cfa_offset 8
 2485              		.cfi_offset 7, -8
 2486              		.cfi_offset 14, -4
 2487 0002 82B0     		sub	sp, sp, #8
 2488              	.LCFI175:
 2489              		.cfi_def_cfa_offset 16
 2490 0004 00AF     		add	r7, sp, #0
 2491              	.LCFI176:
 2492              		.cfi_def_cfa_register 7
 2493 0006 7860     		str	r0, [r7, #4]
 950:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacUnicastPauseFrame);
 2494              		.loc 1 950 0
 2495 0008 7B68     		ldr	r3, [r7, #4]
 2496 000a 1B68     		ldr	r3, [r3, #0]
 2497 000c 1846     		mov	r0, r3
 2498 000e 4FF01801 		mov	r1, #24
 2499 0012 4FF00802 		mov	r2, #8
 2500 0016 FFF7FEFF 		bl	synopGMACSetBits
 951:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2501              		.loc 1 951 0
 2502 001a 00BF     		nop
 952:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2503              		.loc 1 952 0
 2504 001c 07F10807 		add	r7, r7, #8
 2505 0020 BD46     		mov	sp, r7
 2506 0022 80BD     		pop	{r7, pc}
 2507              		.cfi_endproc
 2508              	.LFE175:
 2510              		.section	.text.synopGMAC_unicast_pause_frame_detect_disable,"ax",%progbits
 2511              		.align	2
 2512              		.global	synopGMAC_unicast_pause_frame_detect_disable
 2513              		.thumb
 2514              		.thumb_func
 2516              	synopGMAC_unicast_pause_frame_detect_disable:
 2517              	.LFB176:
 953:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 954:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables detection of pause frames with stations unicast address.
 955:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled GMAC only detects with the unique multicast address (802.3x).
 956:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 957:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 958:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 959:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_unicast_pause_frame_detect_disable(synopGMACdevice * gmacdev)
 960:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2518              		.loc 1 960 0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 8
 2521              		@ frame_needed = 1, uses_anonymous_args = 0
 2522 0000 80B5     		push	{r7, lr}
 2523              	.LCFI177:
 2524              		.cfi_def_cfa_offset 8
 2525              		.cfi_offset 7, -8
 2526              		.cfi_offset 14, -4
 2527 0002 82B0     		sub	sp, sp, #8
 2528              	.LCFI178:
 2529              		.cfi_def_cfa_offset 16
 2530 0004 00AF     		add	r7, sp, #0
 2531              	.LCFI179:
 2532              		.cfi_def_cfa_register 7
 2533 0006 7860     		str	r0, [r7, #4]
 961:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacUnicastPauseFrame);
 2534              		.loc 1 961 0
 2535 0008 7B68     		ldr	r3, [r7, #4]
 2536 000a 1B68     		ldr	r3, [r3, #0]
 2537 000c 1846     		mov	r0, r3
 2538 000e 4FF01801 		mov	r1, #24
 2539 0012 4FF00802 		mov	r2, #8
 2540 0016 FFF7FEFF 		bl	synopGMACClearBits
 962:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2541              		.loc 1 962 0
 2542 001a 00BF     		nop
 963:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2543              		.loc 1 963 0
 2544 001c 07F10807 		add	r7, r7, #8
 2545 0020 BD46     		mov	sp, r7
 2546 0022 80BD     		pop	{r7, pc}
 2547              		.cfi_endproc
 2548              	.LFE176:
 2550              		.section	.text.synopGMAC_rx_flow_control_enable,"ax",%progbits
 2551              		.align	2
 2552              		.global	synopGMAC_rx_flow_control_enable
 2553              		.thumb
 2554              		.thumb_func
 2556              	synopGMAC_rx_flow_control_enable:
 2557              	.LFB177:
 964:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 965:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Rx flow control enable.
 966:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When Enabled GMAC will decode the rx pause frame and disable the tx for a specified time.
 967:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 968:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 969:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 970:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_flow_control_enable(synopGMACdevice * gmacdev)
 971:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2558              		.loc 1 971 0
 2559              		.cfi_startproc
 2560              		@ args = 0, pretend = 0, frame = 8
 2561              		@ frame_needed = 1, uses_anonymous_args = 0
 2562 0000 80B5     		push	{r7, lr}
 2563              	.LCFI180:
 2564              		.cfi_def_cfa_offset 8
 2565              		.cfi_offset 7, -8
 2566              		.cfi_offset 14, -4
 2567 0002 82B0     		sub	sp, sp, #8
 2568              	.LCFI181:
 2569              		.cfi_def_cfa_offset 16
 2570 0004 00AF     		add	r7, sp, #0
 2571              	.LCFI182:
 2572              		.cfi_def_cfa_register 7
 2573 0006 7860     		str	r0, [r7, #4]
 972:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacRxFlowControl);
 2574              		.loc 1 972 0
 2575 0008 7B68     		ldr	r3, [r7, #4]
 2576 000a 1B68     		ldr	r3, [r3, #0]
 2577 000c 1846     		mov	r0, r3
 2578 000e 4FF01801 		mov	r1, #24
 2579 0012 4FF00402 		mov	r2, #4
 2580 0016 FFF7FEFF 		bl	synopGMACSetBits
 973:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2581              		.loc 1 973 0
 2582 001a 00BF     		nop
 974:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2583              		.loc 1 974 0
 2584 001c 07F10807 		add	r7, r7, #8
 2585 0020 BD46     		mov	sp, r7
 2586 0022 80BD     		pop	{r7, pc}
 2587              		.cfi_endproc
 2588              	.LFE177:
 2590              		.section	.text.synopGMAC_rx_flow_control_disable,"ax",%progbits
 2591              		.align	2
 2592              		.global	synopGMAC_rx_flow_control_disable
 2593              		.thumb
 2594              		.thumb_func
 2596              	synopGMAC_rx_flow_control_disable:
 2597              	.LFB178:
 975:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 976:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Rx flow control disable.
 977:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When disabled GMAC will not decode pause frame.
 978:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 979:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 980:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 981:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_flow_control_disable(synopGMACdevice * gmacdev)
 982:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2598              		.loc 1 982 0
 2599              		.cfi_startproc
 2600              		@ args = 0, pretend = 0, frame = 8
 2601              		@ frame_needed = 1, uses_anonymous_args = 0
 2602 0000 80B5     		push	{r7, lr}
 2603              	.LCFI183:
 2604              		.cfi_def_cfa_offset 8
 2605              		.cfi_offset 7, -8
 2606              		.cfi_offset 14, -4
 2607 0002 82B0     		sub	sp, sp, #8
 2608              	.LCFI184:
 2609              		.cfi_def_cfa_offset 16
 2610 0004 00AF     		add	r7, sp, #0
 2611              	.LCFI185:
 2612              		.cfi_def_cfa_register 7
 2613 0006 7860     		str	r0, [r7, #4]
 983:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacRxFlowControl);
 2614              		.loc 1 983 0
 2615 0008 7B68     		ldr	r3, [r7, #4]
 2616 000a 1B68     		ldr	r3, [r3, #0]
 2617 000c 1846     		mov	r0, r3
 2618 000e 4FF01801 		mov	r1, #24
 2619 0012 4FF00402 		mov	r2, #4
 2620 0016 FFF7FEFF 		bl	synopGMACClearBits
 984:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2621              		.loc 1 984 0
 2622 001a 00BF     		nop
 985:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2623              		.loc 1 985 0
 2624 001c 07F10807 		add	r7, r7, #8
 2625 0020 BD46     		mov	sp, r7
 2626 0022 80BD     		pop	{r7, pc}
 2627              		.cfi_endproc
 2628              	.LFE178:
 2630              		.section	.text.synopGMAC_tx_flow_control_enable,"ax",%progbits
 2631              		.align	2
 2632              		.global	synopGMAC_tx_flow_control_enable
 2633              		.thumb
 2634              		.thumb_func
 2636              	synopGMAC_tx_flow_control_enable:
 2637              	.LFB179:
 986:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
 987:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Tx flow control enable.
 988:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When Enabled 
 989:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- In full duplex GMAC enables flow control operation to transmit pause frames.
 990:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- In Half duplex GMAC enables the back pressure operation
 991:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
 992:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
 993:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
 994:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_flow_control_enable(synopGMACdevice * gmacdev)
 995:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2638              		.loc 1 995 0
 2639              		.cfi_startproc
 2640              		@ args = 0, pretend = 0, frame = 8
 2641              		@ frame_needed = 1, uses_anonymous_args = 0
 2642 0000 80B5     		push	{r7, lr}
 2643              	.LCFI186:
 2644              		.cfi_def_cfa_offset 8
 2645              		.cfi_offset 7, -8
 2646              		.cfi_offset 14, -4
 2647 0002 82B0     		sub	sp, sp, #8
 2648              	.LCFI187:
 2649              		.cfi_def_cfa_offset 16
 2650 0004 00AF     		add	r7, sp, #0
 2651              	.LCFI188:
 2652              		.cfi_def_cfa_register 7
 2653 0006 7860     		str	r0, [r7, #4]
 996:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacTxFlowControl);
 2654              		.loc 1 996 0
 2655 0008 7B68     		ldr	r3, [r7, #4]
 2656 000a 1B68     		ldr	r3, [r3, #0]
 2657 000c 1846     		mov	r0, r3
 2658 000e 4FF01801 		mov	r1, #24
 2659 0012 4FF00202 		mov	r2, #2
 2660 0016 FFF7FEFF 		bl	synopGMACSetBits
 997:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2661              		.loc 1 997 0
 2662 001a 00BF     		nop
 998:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2663              		.loc 1 998 0
 2664 001c 07F10807 		add	r7, r7, #8
 2665 0020 BD46     		mov	sp, r7
 2666 0022 80BD     		pop	{r7, pc}
 2667              		.cfi_endproc
 2668              	.LFE179:
 2670              		.section	.text.synopGMAC_tx_flow_control_disable,"ax",%progbits
 2671              		.align	2
 2672              		.global	synopGMAC_tx_flow_control_disable
 2673              		.thumb
 2674              		.thumb_func
 2676              	synopGMAC_tx_flow_control_disable:
 2677              	.LFB180:
 999:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1000:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1001:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Tx flow control disable.
1002:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When Disabled 
1003:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- In full duplex GMAC will not transmit any pause frames.
1004:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- In Half duplex GMAC disables the back pressure feature.
1005:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1006:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
1007:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1008:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_flow_control_disable(synopGMACdevice * gmacdev)
1009:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2678              		.loc 1 1009 0
 2679              		.cfi_startproc
 2680              		@ args = 0, pretend = 0, frame = 8
 2681              		@ frame_needed = 1, uses_anonymous_args = 0
 2682 0000 80B5     		push	{r7, lr}
 2683              	.LCFI189:
 2684              		.cfi_def_cfa_offset 8
 2685              		.cfi_offset 7, -8
 2686              		.cfi_offset 14, -4
 2687 0002 82B0     		sub	sp, sp, #8
 2688              	.LCFI190:
 2689              		.cfi_def_cfa_offset 16
 2690 0004 00AF     		add	r7, sp, #0
 2691              	.LCFI191:
 2692              		.cfi_def_cfa_register 7
 2693 0006 7860     		str	r0, [r7, #4]
1010:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacTxFlowControl);
 2694              		.loc 1 1010 0
 2695 0008 7B68     		ldr	r3, [r7, #4]
 2696 000a 1B68     		ldr	r3, [r3, #0]
 2697 000c 1846     		mov	r0, r3
 2698 000e 4FF01801 		mov	r1, #24
 2699 0012 4FF00202 		mov	r2, #2
 2700 0016 FFF7FEFF 		bl	synopGMACClearBits
1011:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2701              		.loc 1 1011 0
 2702 001a 00BF     		nop
1012:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2703              		.loc 1 1012 0
 2704 001c 07F10807 		add	r7, r7, #8
 2705 0020 BD46     		mov	sp, r7
 2706 0022 80BD     		pop	{r7, pc}
 2707              		.cfi_endproc
 2708              	.LFE180:
 2710              		.section	.text.synopGMAC_tx_activate_flow_control,"ax",%progbits
 2711              		.align	2
 2712              		.global	synopGMAC_tx_activate_flow_control
 2713              		.thumb
 2714              		.thumb_func
 2716              	synopGMAC_tx_activate_flow_control:
 2717              	.LFB181:
1013:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1014:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1015:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Initiate Flowcontrol operation.
1016:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When Set
1017:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- In full duplex GMAC initiates pause control frame.
1018:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- In Half duplex GMAC initiates back pressure function.
1019:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1020:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
1021:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1022:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_activate_flow_control(synopGMACdevice * gmacdev)
1023:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2718              		.loc 1 1023 0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 8
 2721              		@ frame_needed = 1, uses_anonymous_args = 0
 2722 0000 80B5     		push	{r7, lr}
 2723              	.LCFI192:
 2724              		.cfi_def_cfa_offset 8
 2725              		.cfi_offset 7, -8
 2726              		.cfi_offset 14, -4
 2727 0002 82B0     		sub	sp, sp, #8
 2728              	.LCFI193:
 2729              		.cfi_def_cfa_offset 16
 2730 0004 00AF     		add	r7, sp, #0
 2731              	.LCFI194:
 2732              		.cfi_def_cfa_register 7
 2733 0006 7860     		str	r0, [r7, #4]
1024:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	//In case of full duplex check for this bit to b'0. if it is read as b'1 indicates that
1025:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         //control frame transmission is in progress.
1026:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(gmacdev->Speed == FULLDUPLEX){
 2734              		.loc 1 1026 0
 2735 0008 7B68     		ldr	r3, [r7, #4]
 2736 000a D3F8B030 		ldr	r3, [r3, #176]
 2737 000e 022B     		cmp	r3, #2
 2738 0010 15D1     		bne	.L133
1027:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(!synopGMACCheckBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacFlowControlBackPressure))
 2739              		.loc 1 1027 0
 2740 0012 7B68     		ldr	r3, [r7, #4]
 2741 0014 1B68     		ldr	r3, [r3, #0]
 2742 0016 1846     		mov	r0, r3
 2743 0018 4FF01801 		mov	r1, #24
 2744 001c 4FF00102 		mov	r2, #1
 2745 0020 FFF7FEFF 		bl	synopGMACCheckBits
 2746 0024 0346     		mov	r3, r0
 2747 0026 002B     		cmp	r3, #0
 2748 0028 12D1     		bne	.L136
1028:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacFlowControlBackPressure);
 2749              		.loc 1 1028 0
 2750 002a 7B68     		ldr	r3, [r7, #4]
 2751 002c 1B68     		ldr	r3, [r3, #0]
 2752 002e 1846     		mov	r0, r3
 2753 0030 4FF01801 		mov	r1, #24
 2754 0034 4FF00102 		mov	r2, #1
 2755 0038 FFF7FEFF 		bl	synopGMACSetBits
1029:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1030:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else{ //if half duplex mode
1031:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		
1032:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacFlowControlBackPressure);
1033:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1034:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1035:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2756              		.loc 1 1035 0
 2757 003c 08E0     		b	.L136
 2758              	.L133:
1032:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacFlowControlBackPressure);
 2759              		.loc 1 1032 0
 2760 003e 7B68     		ldr	r3, [r7, #4]
 2761 0040 1B68     		ldr	r3, [r3, #0]
 2762 0042 1846     		mov	r0, r3
 2763 0044 4FF01801 		mov	r1, #24
 2764 0048 4FF00102 		mov	r2, #1
 2765 004c FFF7FEFF 		bl	synopGMACSetBits
 2766              	.L136:
 2767              		.loc 1 1035 0
 2768 0050 00BF     		nop
 2769              	.L132:
1036:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2770              		.loc 1 1036 0
 2771 0052 07F10807 		add	r7, r7, #8
 2772 0056 BD46     		mov	sp, r7
 2773 0058 80BD     		pop	{r7, pc}
 2774              		.cfi_endproc
 2775              	.LFE181:
 2777 005a 00BF     		.section	.text.synopGMAC_tx_deactivate_flow_control,"ax",%progbits
 2778              		.align	2
 2779              		.global	synopGMAC_tx_deactivate_flow_control
 2780              		.thumb
 2781              		.thumb_func
 2783              	synopGMAC_tx_deactivate_flow_control:
 2784              	.LFB182:
1037:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1038:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1039:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * stops Flowcontrol operation.
1040:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1041:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
1042:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1043:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_deactivate_flow_control(synopGMACdevice * gmacdev)
1044:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2785              		.loc 1 1044 0
 2786              		.cfi_startproc
 2787              		@ args = 0, pretend = 0, frame = 8
 2788              		@ frame_needed = 1, uses_anonymous_args = 0
 2789 0000 80B5     		push	{r7, lr}
 2790              	.LCFI195:
 2791              		.cfi_def_cfa_offset 8
 2792              		.cfi_offset 7, -8
 2793              		.cfi_offset 14, -4
 2794 0002 82B0     		sub	sp, sp, #8
 2795              	.LCFI196:
 2796              		.cfi_def_cfa_offset 16
 2797 0004 00AF     		add	r7, sp, #0
 2798              	.LCFI197:
 2799              		.cfi_def_cfa_register 7
 2800 0006 7860     		str	r0, [r7, #4]
1045:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	//In full duplex this bit is automatically cleared after transmitting a pause control frame.
1046:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(gmacdev->Speed == HALFDUPLEX){
 2801              		.loc 1 1046 0
 2802 0008 7B68     		ldr	r3, [r7, #4]
 2803 000a D3F8B030 		ldr	r3, [r3, #176]
 2804 000e 012B     		cmp	r3, #1
 2805 0010 08D1     		bne	.L140
1047:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase, GmacFlowControl, GmacFlowControlBackPressure);
 2806              		.loc 1 1047 0
 2807 0012 7B68     		ldr	r3, [r7, #4]
 2808 0014 1B68     		ldr	r3, [r3, #0]
 2809 0016 1846     		mov	r0, r3
 2810 0018 4FF01801 		mov	r1, #24
 2811 001c 4FF00102 		mov	r2, #1
 2812 0020 FFF7FEFF 		bl	synopGMACSetBits
 2813              	.L140:
1048:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1049:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2814              		.loc 1 1049 0
 2815 0024 00BF     		nop
 2816              	.L137:
1050:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2817              		.loc 1 1050 0
 2818 0026 07F10807 		add	r7, r7, #8
 2819 002a BD46     		mov	sp, r7
 2820 002c 80BD     		pop	{r7, pc}
 2821              		.cfi_endproc
 2822              	.LFE182:
 2824 002e 00BF     		.section	.text.synopGMAC_pause_control,"ax",%progbits
 2825              		.align	2
 2826              		.global	synopGMAC_pause_control
 2827              		.thumb
 2828              		.thumb_func
 2830              	synopGMAC_pause_control:
 2831              	.LFB183:
1051:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1052:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1053:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This enables the pause frame generation after programming the appropriate registers.
1054:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * presently activation is set at 3k and deactivation set at 4k. These may have to tweaked
1055:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * if found any issues
1056:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1057:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
1058:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1059:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_pause_control(synopGMACdevice *gmacdev)
1060:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2832              		.loc 1 1060 0
 2833              		.cfi_startproc
 2834              		@ args = 0, pretend = 0, frame = 16
 2835              		@ frame_needed = 1, uses_anonymous_args = 0
 2836 0000 80B5     		push	{r7, lr}
 2837              	.LCFI198:
 2838              		.cfi_def_cfa_offset 8
 2839              		.cfi_offset 7, -8
 2840              		.cfi_offset 14, -4
 2841 0002 84B0     		sub	sp, sp, #16
 2842              	.LCFI199:
 2843              		.cfi_def_cfa_offset 24
 2844 0004 00AF     		add	r7, sp, #0
 2845              	.LCFI200:
 2846              		.cfi_def_cfa_register 7
 2847 0006 7860     		str	r0, [r7, #4]
1061:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 omr_reg;
1062:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 mac_flow_control_reg;
1063:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	omr_reg = synopGMACReadReg((u32 *)gmacdev->DmaBase,DmaControl);
 2848              		.loc 1 1063 0
 2849 0008 7B68     		ldr	r3, [r7, #4]
 2850 000a 5B68     		ldr	r3, [r3, #4]
 2851 000c 1846     		mov	r0, r3
 2852 000e 4FF01801 		mov	r1, #24
 2853 0012 FFF7FEFF 		bl	synopGMACReadReg
 2854 0016 F860     		str	r0, [r7, #12]
1064:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	omr_reg |= DmaRxFlowCtrlAct4K | DmaRxFlowCtrlDeact5K |DmaEnHwFlowCtrl;
 2855              		.loc 1 1064 0
 2856 0018 FB68     		ldr	r3, [r7, #12]
 2857 001a 43F48003 		orr	r3, r3, #4194304
 2858 001e 43F44073 		orr	r3, r3, #768
 2859 0022 FB60     		str	r3, [r7, #12]
1065:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaControl, omr_reg);
 2860              		.loc 1 1065 0
 2861 0024 7B68     		ldr	r3, [r7, #4]
 2862 0026 5B68     		ldr	r3, [r3, #4]
 2863 0028 1846     		mov	r0, r3
 2864 002a 4FF01801 		mov	r1, #24
 2865 002e FA68     		ldr	r2, [r7, #12]
 2866 0030 FFF7FEFF 		bl	synopGMACWriteReg
1066:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1067:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	mac_flow_control_reg = synopGMACReadReg((u32 *)gmacdev->MacBase,GmacFlowControl);
 2867              		.loc 1 1067 0
 2868 0034 7B68     		ldr	r3, [r7, #4]
 2869 0036 1B68     		ldr	r3, [r3, #0]
 2870 0038 1846     		mov	r0, r3
 2871 003a 4FF01801 		mov	r1, #24
 2872 003e FFF7FEFF 		bl	synopGMACReadReg
 2873 0042 B860     		str	r0, [r7, #8]
1068:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	mac_flow_control_reg |= GmacRxFlowControl | GmacTxFlowControl | 0xFFFF0000;
 2874              		.loc 1 1068 0
 2875 0044 BA68     		ldr	r2, [r7, #8]
 2876 0046 4FF00603 		mov	r3, #6
 2877 004a CFF6FF73 		movt	r3, 65535
 2878 004e 1343     		orrs	r3, r3, r2
 2879 0050 BB60     		str	r3, [r7, #8]
1069:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->MacBase,GmacFlowControl,mac_flow_control_reg);
 2880              		.loc 1 1069 0
 2881 0052 7B68     		ldr	r3, [r7, #4]
 2882 0054 1B68     		ldr	r3, [r3, #0]
 2883 0056 1846     		mov	r0, r3
 2884 0058 4FF01801 		mov	r1, #24
 2885 005c BA68     		ldr	r2, [r7, #8]
 2886 005e FFF7FEFF 		bl	synopGMACWriteReg
1070:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1071:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 2887              		.loc 1 1071 0
 2888 0062 00BF     		nop
1072:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1073:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 2889              		.loc 1 1073 0
 2890 0064 07F11007 		add	r7, r7, #16
 2891 0068 BD46     		mov	sp, r7
 2892 006a 80BD     		pop	{r7, pc}
 2893              		.cfi_endproc
 2894              	.LFE183:
 2896              		.section	.text.synopGMAC_mac_init,"ax",%progbits
 2897              		.align	2
 2898              		.global	synopGMAC_mac_init
 2899              		.thumb
 2900              		.thumb_func
 2902              	synopGMAC_mac_init:
 2903              	.LFB184:
1074:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1075:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1076:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Example mac initialization sequence.
1077:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function calls the initialization routines to initialize the GMAC register.
1078:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * One can change the functions invoked here to have different configuration as per the requiremen
1079:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1080:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return Returns 0 on success.
1081:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1082:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_mac_init(synopGMACdevice * gmacdev)
1083:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 2904              		.loc 1 1083 0
 2905              		.cfi_startproc
 2906              		@ args = 0, pretend = 0, frame = 8
 2907              		@ frame_needed = 1, uses_anonymous_args = 0
 2908 0000 80B5     		push	{r7, lr}
 2909              	.LCFI201:
 2910              		.cfi_def_cfa_offset 8
 2911              		.cfi_offset 7, -8
 2912              		.cfi_offset 14, -4
 2913 0002 82B0     		sub	sp, sp, #8
 2914              	.LCFI202:
 2915              		.cfi_def_cfa_offset 16
 2916 0004 00AF     		add	r7, sp, #0
 2917              	.LCFI203:
 2918              		.cfi_def_cfa_register 7
 2919 0006 7860     		str	r0, [r7, #4]
1084:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1085:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(gmacdev->DuplexMode == FULLDUPLEX){
 2920              		.loc 1 1085 0
 2921 0008 7B68     		ldr	r3, [r7, #4]
 2922 000a D3F8AC30 		ldr	r3, [r3, #172]
 2923 000e 022B     		cmp	r3, #2
 2924 0010 52D1     		bne	.L144
1086:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_wd_enable(gmacdev);
 2925              		.loc 1 1086 0
 2926 0012 7868     		ldr	r0, [r7, #4]
 2927 0014 FFF7FEFF 		bl	synopGMAC_wd_enable
1087:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_jab_enable(gmacdev);
 2928              		.loc 1 1087 0
 2929 0018 7868     		ldr	r0, [r7, #4]
 2930 001a FFF7FEFF 		bl	synopGMAC_jab_enable
1088:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_frame_burst_enable(gmacdev);
 2931              		.loc 1 1088 0
 2932 001e 7868     		ldr	r0, [r7, #4]
 2933 0020 FFF7FEFF 		bl	synopGMAC_frame_burst_enable
1089:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_jumbo_frame_disable(gmacdev);
 2934              		.loc 1 1089 0
 2935 0024 7868     		ldr	r0, [r7, #4]
 2936 0026 FFF7FEFF 		bl	synopGMAC_jumbo_frame_disable
1090:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_rx_own_enable(gmacdev);
 2937              		.loc 1 1090 0
 2938 002a 7868     		ldr	r0, [r7, #4]
 2939 002c FFF7FEFF 		bl	synopGMAC_rx_own_enable
1091:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_loopback_off(gmacdev);
 2940              		.loc 1 1091 0
 2941 0030 7868     		ldr	r0, [r7, #4]
 2942 0032 FFF7FEFF 		bl	synopGMAC_loopback_off
1092:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_set_full_duplex(gmacdev);
 2943              		.loc 1 1092 0
 2944 0036 7868     		ldr	r0, [r7, #4]
 2945 0038 FFF7FEFF 		bl	synopGMAC_set_full_duplex
1093:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_retry_enable(gmacdev);
 2946              		.loc 1 1093 0
 2947 003c 7868     		ldr	r0, [r7, #4]
 2948 003e FFF7FEFF 		bl	synopGMAC_retry_enable
1094:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_pad_crc_strip_disable(gmacdev);
 2949              		.loc 1 1094 0
 2950 0042 7868     		ldr	r0, [r7, #4]
 2951 0044 FFF7FEFF 		bl	synopGMAC_pad_crc_strip_disable
1095:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_back_off_limit(gmacdev,GmacBackoffLimit0);
 2952              		.loc 1 1095 0
 2953 0048 7868     		ldr	r0, [r7, #4]
 2954 004a 4FF00001 		mov	r1, #0
 2955 004e FFF7FEFF 		bl	synopGMAC_back_off_limit
1096:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_deferral_check_disable(gmacdev);
 2956              		.loc 1 1096 0
 2957 0052 7868     		ldr	r0, [r7, #4]
 2958 0054 FFF7FEFF 		bl	synopGMAC_deferral_check_disable
1097:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_tx_enable(gmacdev);	
 2959              		.loc 1 1097 0
 2960 0058 7868     		ldr	r0, [r7, #4]
 2961 005a FFF7FEFF 		bl	synopGMAC_tx_enable
1098:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_rx_enable(gmacdev);
 2962              		.loc 1 1098 0
 2963 005e 7868     		ldr	r0, [r7, #4]
 2964 0060 FFF7FEFF 		bl	synopGMAC_rx_enable
1099:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1100:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_select_mii(gmacdev);
 2965              		.loc 1 1100 0
 2966 0064 7868     		ldr	r0, [r7, #4]
 2967 0066 FFF7FEFF 		bl	synopGMAC_select_mii
1101:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1102:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/*Frame Filter Configuration*/
1103:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	 	synopGMAC_frame_filter_enable(gmacdev);
 2968              		.loc 1 1103 0
 2969 006a 7868     		ldr	r0, [r7, #4]
 2970 006c FFF7FEFF 		bl	synopGMAC_frame_filter_enable
1104:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_set_pass_control(gmacdev,GmacPassControl0);
 2971              		.loc 1 1104 0
 2972 0070 7868     		ldr	r0, [r7, #4]
 2973 0072 4FF00001 		mov	r1, #0
 2974 0076 FFF7FEFF 		bl	synopGMAC_set_pass_control
1105:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_broadcast_enable(gmacdev);
 2975              		.loc 1 1105 0
 2976 007a 7868     		ldr	r0, [r7, #4]
 2977 007c FFF7FEFF 		bl	synopGMAC_broadcast_enable
1106:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_src_addr_filter_disable(gmacdev);
 2978              		.loc 1 1106 0
 2979 0080 7868     		ldr	r0, [r7, #4]
 2980 0082 FFF7FEFF 		bl	synopGMAC_src_addr_filter_disable
1107:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_multicast_disable(gmacdev);
 2981              		.loc 1 1107 0
 2982 0086 7868     		ldr	r0, [r7, #4]
 2983 0088 FFF7FEFF 		bl	synopGMAC_multicast_disable
1108:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_dst_addr_filter_normal(gmacdev);
 2984              		.loc 1 1108 0
 2985 008c 7868     		ldr	r0, [r7, #4]
 2986 008e FFF7FEFF 		bl	synopGMAC_dst_addr_filter_normal
1109:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_multicast_hash_filter_disable(gmacdev);
 2987              		.loc 1 1109 0
 2988 0092 7868     		ldr	r0, [r7, #4]
 2989 0094 FFF7FEFF 		bl	synopGMAC_multicast_hash_filter_disable
1110:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_promisc_disable(gmacdev);	
 2990              		.loc 1 1110 0
 2991 0098 7868     		ldr	r0, [r7, #4]
 2992 009a FFF7FEFF 		bl	synopGMAC_promisc_disable
1111:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//synopGMAC_promisc_enable(gmacdev);
1112:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_unicast_hash_filter_disable(gmacdev);
 2993              		.loc 1 1112 0
 2994 009e 7868     		ldr	r0, [r7, #4]
 2995 00a0 FFF7FEFF 		bl	synopGMAC_unicast_hash_filter_disable
1113:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1114:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/*Flow Control Configuration*/
1115:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_unicast_pause_frame_detect_disable(gmacdev);
 2996              		.loc 1 1115 0
 2997 00a4 7868     		ldr	r0, [r7, #4]
 2998 00a6 FFF7FEFF 		bl	synopGMAC_unicast_pause_frame_detect_disable
1116:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_rx_flow_control_enable(gmacdev);
 2999              		.loc 1 1116 0
 3000 00aa 7868     		ldr	r0, [r7, #4]
 3001 00ac FFF7FEFF 		bl	synopGMAC_rx_flow_control_enable
1117:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_tx_flow_control_enable(gmacdev);
 3002              		.loc 1 1117 0
 3003 00b0 7868     		ldr	r0, [r7, #4]
 3004 00b2 FFF7FEFF 		bl	synopGMAC_tx_flow_control_enable
 3005 00b6 51E0     		b	.L145
 3006              	.L144:
1118:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1119:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else{//for Half Duplex configuration
1120:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		
1121:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_wd_enable(gmacdev);
 3007              		.loc 1 1121 0
 3008 00b8 7868     		ldr	r0, [r7, #4]
 3009 00ba FFF7FEFF 		bl	synopGMAC_wd_enable
1122:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_jab_enable(gmacdev);
 3010              		.loc 1 1122 0
 3011 00be 7868     		ldr	r0, [r7, #4]
 3012 00c0 FFF7FEFF 		bl	synopGMAC_jab_enable
1123:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_frame_burst_enable(gmacdev);
 3013              		.loc 1 1123 0
 3014 00c4 7868     		ldr	r0, [r7, #4]
 3015 00c6 FFF7FEFF 		bl	synopGMAC_frame_burst_enable
1124:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_jumbo_frame_disable(gmacdev);
 3016              		.loc 1 1124 0
 3017 00ca 7868     		ldr	r0, [r7, #4]
 3018 00cc FFF7FEFF 		bl	synopGMAC_jumbo_frame_disable
1125:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_rx_own_enable(gmacdev);
 3019              		.loc 1 1125 0
 3020 00d0 7868     		ldr	r0, [r7, #4]
 3021 00d2 FFF7FEFF 		bl	synopGMAC_rx_own_enable
1126:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_loopback_off(gmacdev);
 3022              		.loc 1 1126 0
 3023 00d6 7868     		ldr	r0, [r7, #4]
 3024 00d8 FFF7FEFF 		bl	synopGMAC_loopback_off
1127:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_set_half_duplex(gmacdev);
 3025              		.loc 1 1127 0
 3026 00dc 7868     		ldr	r0, [r7, #4]
 3027 00de FFF7FEFF 		bl	synopGMAC_set_half_duplex
1128:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_retry_enable(gmacdev);
 3028              		.loc 1 1128 0
 3029 00e2 7868     		ldr	r0, [r7, #4]
 3030 00e4 FFF7FEFF 		bl	synopGMAC_retry_enable
1129:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_pad_crc_strip_disable(gmacdev);
 3031              		.loc 1 1129 0
 3032 00e8 7868     		ldr	r0, [r7, #4]
 3033 00ea FFF7FEFF 		bl	synopGMAC_pad_crc_strip_disable
1130:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_back_off_limit(gmacdev,GmacBackoffLimit0);
 3034              		.loc 1 1130 0
 3035 00ee 7868     		ldr	r0, [r7, #4]
 3036 00f0 4FF00001 		mov	r1, #0
 3037 00f4 FFF7FEFF 		bl	synopGMAC_back_off_limit
1131:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_deferral_check_disable(gmacdev);
 3038              		.loc 1 1131 0
 3039 00f8 7868     		ldr	r0, [r7, #4]
 3040 00fa FFF7FEFF 		bl	synopGMAC_deferral_check_disable
1132:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_tx_enable(gmacdev);	
 3041              		.loc 1 1132 0
 3042 00fe 7868     		ldr	r0, [r7, #4]
 3043 0100 FFF7FEFF 		bl	synopGMAC_tx_enable
1133:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_rx_enable(gmacdev);
 3044              		.loc 1 1133 0
 3045 0104 7868     		ldr	r0, [r7, #4]
 3046 0106 FFF7FEFF 		bl	synopGMAC_rx_enable
1134:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1135:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_select_mii(gmacdev);
 3047              		.loc 1 1135 0
 3048 010a 7868     		ldr	r0, [r7, #4]
 3049 010c FFF7FEFF 		bl	synopGMAC_select_mii
1136:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1137:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/*Frame Filter Configuration*/
1138:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	 	//synopGMAC_frame_filter_enable(gmacdev); 
1139:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_frame_filter_disable(gmacdev);
 3050              		.loc 1 1139 0
 3051 0110 7868     		ldr	r0, [r7, #4]
 3052 0112 FFF7FEFF 		bl	synopGMAC_frame_filter_disable
1140:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_set_pass_control(gmacdev,GmacPassControl0);
 3053              		.loc 1 1140 0
 3054 0116 7868     		ldr	r0, [r7, #4]
 3055 0118 4FF00001 		mov	r1, #0
 3056 011c FFF7FEFF 		bl	synopGMAC_set_pass_control
1141:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_broadcast_enable(gmacdev);
 3057              		.loc 1 1141 0
 3058 0120 7868     		ldr	r0, [r7, #4]
 3059 0122 FFF7FEFF 		bl	synopGMAC_broadcast_enable
1142:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_src_addr_filter_disable(gmacdev);
 3060              		.loc 1 1142 0
 3061 0126 7868     		ldr	r0, [r7, #4]
 3062 0128 FFF7FEFF 		bl	synopGMAC_src_addr_filter_disable
1143:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_multicast_disable(gmacdev);
 3063              		.loc 1 1143 0
 3064 012c 7868     		ldr	r0, [r7, #4]
 3065 012e FFF7FEFF 		bl	synopGMAC_multicast_disable
1144:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_dst_addr_filter_normal(gmacdev);
 3066              		.loc 1 1144 0
 3067 0132 7868     		ldr	r0, [r7, #4]
 3068 0134 FFF7FEFF 		bl	synopGMAC_dst_addr_filter_normal
1145:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_multicast_hash_filter_disable(gmacdev);
 3069              		.loc 1 1145 0
 3070 0138 7868     		ldr	r0, [r7, #4]
 3071 013a FFF7FEFF 		bl	synopGMAC_multicast_hash_filter_disable
1146:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_promisc_disable(gmacdev);
 3072              		.loc 1 1146 0
 3073 013e 7868     		ldr	r0, [r7, #4]
 3074 0140 FFF7FEFF 		bl	synopGMAC_promisc_disable
1147:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_unicast_hash_filter_disable(gmacdev);
 3075              		.loc 1 1147 0
 3076 0144 7868     		ldr	r0, [r7, #4]
 3077 0146 FFF7FEFF 		bl	synopGMAC_unicast_hash_filter_disable
1148:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		
1149:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/*Flow Control Configuration*/
1150:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_unicast_pause_frame_detect_disable(gmacdev);
 3078              		.loc 1 1150 0
 3079 014a 7868     		ldr	r0, [r7, #4]
 3080 014c FFF7FEFF 		bl	synopGMAC_unicast_pause_frame_detect_disable
1151:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_rx_flow_control_disable(gmacdev);
 3081              		.loc 1 1151 0
 3082 0150 7868     		ldr	r0, [r7, #4]
 3083 0152 FFF7FEFF 		bl	synopGMAC_rx_flow_control_disable
1152:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_tx_flow_control_disable(gmacdev);
 3084              		.loc 1 1152 0
 3085 0156 7868     		ldr	r0, [r7, #4]
 3086 0158 FFF7FEFF 		bl	synopGMAC_tx_flow_control_disable
 3087              	.L145:
1153:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1154:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		/*To set PHY register to enable CRS on Transmit*/
1155:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #if 0  /* This operation changes the MDIO clock should be removed*/
1156:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMACWriteReg((u32 *)gmacdev->MacBase, GmacGmiiAddr, GmiiBusy | 0x00000408);
1157:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		PHYreg = synopGMACReadReg((u32 *)gmacdev->MacBase,GmacGmiiData);
1158:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMACWriteReg((u32 *)gmacdev->MacBase, GmacGmiiData, PHYreg   | 0x00000800);
1159:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMACWriteReg((u32 *)gmacdev->MacBase, GmacGmiiAddr, GmiiBusy | 0x0000040a);
1160:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
1161:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1162:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;
 3088              		.loc 1 1162 0
 3089 015c 4FF00003 		mov	r3, #0
1163:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3090              		.loc 1 1163 0
 3091 0160 1846     		mov	r0, r3
 3092 0162 07F10807 		add	r7, r7, #8
 3093 0166 BD46     		mov	sp, r7
 3094 0168 80BD     		pop	{r7, pc}
 3095              		.cfi_endproc
 3096              	.LFE184:
 3098 016a 00BF     		.section	.text.synopGMAC_set_mac_addr,"ax",%progbits
 3099              		.align	2
 3100              		.global	synopGMAC_set_mac_addr
 3101              		.thumb
 3102              		.thumb_func
 3104              	synopGMAC_set_mac_addr:
 3105              	.LFB185:
1164:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1165:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef LINUX_CODE
1166:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1167:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks and initialze phy.
1168:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function checks whether the phy initialization is complete. 
1169:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1170:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 if success else returns the error number.
1171:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1172:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1173:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_check_phy_init (synopGMACdevice * gmacdev) 
1174:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {	
1175:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	//u32 addr;  
1176:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u16 data;
1177:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	s32 status = -ESYNOPGMACNOERR;		
1178:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	s32 loop_count;
1179:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1180:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	/* Find out the correct DEFAULT_LOOP_VARIABLE for IFX platform */
1181:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	loop_count = DEFAULT_LOOP_VARIABLE;
1182:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	while(loop_count-- > 0)
1183:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	{
1184:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1185:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		status = synopGMAC_read_phy_reg((u32 *)gmacdev->MacBase,gmacdev->PhyBase,PHY_STATUS_REG, &data);
1186:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(status)	
1187:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			return status;
1188:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1189:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	        if((data & Mii_AutoNegCmplt) != 0){
1190:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			TR("Autonegotiation Complete\n");
1191:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			break;
1192:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
1193:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1194:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1195:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	status = synopGMAC_read_phy_reg((u32 *)gmacdev->MacBase,gmacdev->PhyBase,PHY_SPECIFIC_STATUS_REG, 
1196:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(status)
1197:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return status;
1198:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1199:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         if((data & Mii_phy_status_link_up) == 0){
1200:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		TR("No Link\n");
1201:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->LinkState = LINKDOWN; 
1202:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -ESYNOPGMACPHYERR;
1203:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1204:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else{
1205:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->LinkState = LINKUP; 
1206:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		TR("Link UP\n");
1207:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1208:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1209:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	status = synopGMAC_read_phy_reg((u32 *)gmacdev->MacBase,gmacdev->PhyBase,PHY_SPECIFIC_STATUS_REG, 
1210:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(status)
1211:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return status;
1212:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1213:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1214:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1215:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->DuplexMode = (data & Mii_phy_status_full_duplex)  ? FULLDUPLEX: HALFDUPLEX ;
1216:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	TR("Link is up in %s mode\n",(gmacdev->DuplexMode == FULLDUPLEX) ? "FULL DUPLEX": "HALF DUPLEX");
1217:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1218:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	/*if not set to Master configuration in case of Half duplex mode set it manually as Master*/
1219:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(gmacdev->DuplexMode == HALFDUPLEX){
1220:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		status = synopGMAC_read_phy_reg((u32 *)gmacdev->MacBase,gmacdev->PhyBase,PHY_CONTROL_REG, &data);
1221:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(status)
1222:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			return status;
1223:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		
1224:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		status = synopGMAC_write_phy_reg((u32 *)gmacdev->MacBase,gmacdev->PhyBase,PHY_CONTROL_REG, data |
1225:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(status)
1226:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			return status;		
1227:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1228:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1229:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	status = synopGMAC_read_phy_reg((u32 *)gmacdev->MacBase,gmacdev->PhyBase,PHY_SPECIFIC_STATUS_REG, 
1230:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(status)
1231:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return status;
1232:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(data & Mii_phy_status_speed_1000)
1233:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	        gmacdev->Speed      =   SPEED1000;
1234:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else if(data & Mii_phy_status_speed_100)
1235:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->Speed      =   SPEED100;
1236:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else
1237:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->Speed      =   SPEED10;
1238:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1239:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(gmacdev->Speed == SPEED1000)	
1240:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		TR("Link is with 1000M Speed \n");
1241:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(gmacdev->Speed == SPEED100)	
1242:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		TR("Link is with 100M Speed \n");
1243:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(gmacdev->Speed == SPEED10)	
1244:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		TR("Link is with 10M Speed \n");
1245:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1246:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return -ESYNOPGMACNOERR;
1247:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
1248:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
1249:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1250:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Sets the Mac address in to GMAC register.
1251:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function sets the MAC address to the MAC register in question.
1252:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice to populate mac dma and phy addresses.
1253:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Register offset for Mac address high
1254:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Register offset for Mac address low
1255:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] buffer containing mac address to be programmed.
1256:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 upon success. Error code upon failure.
1257:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1258:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_set_mac_addr(synopGMACdevice *gmacdev, u32 MacHigh, u32 MacLow, u8 *MacAddr)
1259:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3106              		.loc 1 1259 0
 3107              		.cfi_startproc
 3108              		@ args = 0, pretend = 0, frame = 24
 3109              		@ frame_needed = 1, uses_anonymous_args = 0
 3110 0000 80B5     		push	{r7, lr}
 3111              	.LCFI204:
 3112              		.cfi_def_cfa_offset 8
 3113              		.cfi_offset 7, -8
 3114              		.cfi_offset 14, -4
 3115 0002 86B0     		sub	sp, sp, #24
 3116              	.LCFI205:
 3117              		.cfi_def_cfa_offset 32
 3118 0004 00AF     		add	r7, sp, #0
 3119              	.LCFI206:
 3120              		.cfi_def_cfa_register 7
 3121 0006 F860     		str	r0, [r7, #12]
 3122 0008 B960     		str	r1, [r7, #8]
 3123 000a 7A60     		str	r2, [r7, #4]
 3124 000c 3B60     		str	r3, [r7, #0]
1260:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
1261:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1262:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = (MacAddr[5] << 8) | MacAddr[4];
 3125              		.loc 1 1262 0
 3126 000e 3B68     		ldr	r3, [r7, #0]
 3127 0010 03F10503 		add	r3, r3, #5
 3128 0014 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3129 0016 4FEA0322 		lsl	r2, r3, #8
 3130 001a 3B68     		ldr	r3, [r7, #0]
 3131 001c 03F10403 		add	r3, r3, #4
 3132 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3133 0022 1343     		orrs	r3, r3, r2
 3134 0024 7B61     		str	r3, [r7, #20]
1263:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->MacBase,MacHigh,data);
 3135              		.loc 1 1263 0
 3136 0026 FB68     		ldr	r3, [r7, #12]
 3137 0028 1B68     		ldr	r3, [r3, #0]
 3138 002a 1846     		mov	r0, r3
 3139 002c B968     		ldr	r1, [r7, #8]
 3140 002e 7A69     		ldr	r2, [r7, #20]
 3141 0030 FFF7FEFF 		bl	synopGMACWriteReg
1264:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = (MacAddr[3] << 24) | (MacAddr[2] << 16) | (MacAddr[1] << 8) | MacAddr[0] ;
 3142              		.loc 1 1264 0
 3143 0034 3B68     		ldr	r3, [r7, #0]
 3144 0036 03F10303 		add	r3, r3, #3
 3145 003a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3146 003c 4FEA0362 		lsl	r2, r3, #24
 3147 0040 3B68     		ldr	r3, [r7, #0]
 3148 0042 03F10203 		add	r3, r3, #2
 3149 0046 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3150 0048 4FEA0343 		lsl	r3, r3, #16
 3151 004c 1A43     		orrs	r2, r2, r3
 3152 004e 3B68     		ldr	r3, [r7, #0]
 3153 0050 03F10103 		add	r3, r3, #1
 3154 0054 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3155 0056 4FEA0323 		lsl	r3, r3, #8
 3156 005a 1A43     		orrs	r2, r2, r3
 3157 005c 3B68     		ldr	r3, [r7, #0]
 3158 005e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3159 0060 1343     		orrs	r3, r3, r2
 3160 0062 7B61     		str	r3, [r7, #20]
1265:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->MacBase,MacLow,data);
 3161              		.loc 1 1265 0
 3162 0064 FB68     		ldr	r3, [r7, #12]
 3163 0066 1B68     		ldr	r3, [r3, #0]
 3164 0068 1846     		mov	r0, r3
 3165 006a 7968     		ldr	r1, [r7, #4]
 3166 006c 7A69     		ldr	r2, [r7, #20]
 3167 006e FFF7FEFF 		bl	synopGMACWriteReg
1266:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;
 3168              		.loc 1 1266 0
 3169 0072 4FF00003 		mov	r3, #0
1267:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3170              		.loc 1 1267 0
 3171 0076 1846     		mov	r0, r3
 3172 0078 07F11807 		add	r7, r7, #24
 3173 007c BD46     		mov	sp, r7
 3174 007e 80BD     		pop	{r7, pc}
 3175              		.cfi_endproc
 3176              	.LFE185:
 3178              		.section	.text.synopGMAC_get_mac_addr,"ax",%progbits
 3179              		.align	2
 3180              		.global	synopGMAC_get_mac_addr
 3181              		.thumb
 3182              		.thumb_func
 3184              	synopGMAC_get_mac_addr:
 3185              	.LFB186:
1268:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1269:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1270:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1271:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Get the Mac address in to the address specified.
1272:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The mac register contents are read and written to buffer passed.
1273:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice to populate mac dma and phy addresses.
1274:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Register offset for Mac address high
1275:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Register offset for Mac address low
1276:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] buffer containing the device mac address.
1277:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 upon success. Error code upon failure.
1278:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1279:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_get_mac_addr(synopGMACdevice *gmacdev, u32 MacHigh, u32 MacLow, u8 *MacAddr)
1280:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3186              		.loc 1 1280 0
 3187              		.cfi_startproc
 3188              		@ args = 0, pretend = 0, frame = 24
 3189              		@ frame_needed = 1, uses_anonymous_args = 0
 3190 0000 80B5     		push	{r7, lr}
 3191              	.LCFI207:
 3192              		.cfi_def_cfa_offset 8
 3193              		.cfi_offset 7, -8
 3194              		.cfi_offset 14, -4
 3195 0002 86B0     		sub	sp, sp, #24
 3196              	.LCFI208:
 3197              		.cfi_def_cfa_offset 32
 3198 0004 00AF     		add	r7, sp, #0
 3199              	.LCFI209:
 3200              		.cfi_def_cfa_register 7
 3201 0006 F860     		str	r0, [r7, #12]
 3202 0008 B960     		str	r1, [r7, #8]
 3203 000a 7A60     		str	r2, [r7, #4]
 3204 000c 3B60     		str	r3, [r7, #0]
1281:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
1282:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		
1283:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->MacBase,MacHigh);
 3205              		.loc 1 1283 0
 3206 000e FB68     		ldr	r3, [r7, #12]
 3207 0010 1B68     		ldr	r3, [r3, #0]
 3208 0012 1846     		mov	r0, r3
 3209 0014 B968     		ldr	r1, [r7, #8]
 3210 0016 FFF7FEFF 		bl	synopGMACReadReg
 3211 001a 7861     		str	r0, [r7, #20]
1284:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	MacAddr[5] = (data >> 8) & 0xff;
 3212              		.loc 1 1284 0
 3213 001c 3B68     		ldr	r3, [r7, #0]
 3214 001e 03F10503 		add	r3, r3, #5
 3215 0022 7A69     		ldr	r2, [r7, #20]
 3216 0024 4FEA1222 		lsr	r2, r2, #8
 3217 0028 D2B2     		uxtb	r2, r2
 3218 002a 1A70     		strb	r2, [r3, #0]
1285:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	MacAddr[4] = (data)        & 0xff;
 3219              		.loc 1 1285 0
 3220 002c 3B68     		ldr	r3, [r7, #0]
 3221 002e 03F10403 		add	r3, r3, #4
 3222 0032 7A69     		ldr	r2, [r7, #20]
 3223 0034 D2B2     		uxtb	r2, r2
 3224 0036 1A70     		strb	r2, [r3, #0]
1286:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1287:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->MacBase,MacLow);
 3225              		.loc 1 1287 0
 3226 0038 FB68     		ldr	r3, [r7, #12]
 3227 003a 1B68     		ldr	r3, [r3, #0]
 3228 003c 1846     		mov	r0, r3
 3229 003e 7968     		ldr	r1, [r7, #4]
 3230 0040 FFF7FEFF 		bl	synopGMACReadReg
 3231 0044 7861     		str	r0, [r7, #20]
1288:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	MacAddr[3] = (data >> 24) & 0xff;
 3232              		.loc 1 1288 0
 3233 0046 3B68     		ldr	r3, [r7, #0]
 3234 0048 03F10303 		add	r3, r3, #3
 3235 004c 7A69     		ldr	r2, [r7, #20]
 3236 004e 4FEA1262 		lsr	r2, r2, #24
 3237 0052 D2B2     		uxtb	r2, r2
 3238 0054 1A70     		strb	r2, [r3, #0]
1289:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	MacAddr[2] = (data >> 16) & 0xff;
 3239              		.loc 1 1289 0
 3240 0056 3B68     		ldr	r3, [r7, #0]
 3241 0058 03F10203 		add	r3, r3, #2
 3242 005c 7A69     		ldr	r2, [r7, #20]
 3243 005e 4FEA1242 		lsr	r2, r2, #16
 3244 0062 D2B2     		uxtb	r2, r2
 3245 0064 1A70     		strb	r2, [r3, #0]
1290:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	MacAddr[1] = (data >> 8 ) & 0xff;
 3246              		.loc 1 1290 0
 3247 0066 3B68     		ldr	r3, [r7, #0]
 3248 0068 03F10103 		add	r3, r3, #1
 3249 006c 7A69     		ldr	r2, [r7, #20]
 3250 006e 4FEA1222 		lsr	r2, r2, #8
 3251 0072 D2B2     		uxtb	r2, r2
 3252 0074 1A70     		strb	r2, [r3, #0]
1291:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	MacAddr[0] = (data )      & 0xff;
 3253              		.loc 1 1291 0
 3254 0076 7B69     		ldr	r3, [r7, #20]
 3255 0078 DAB2     		uxtb	r2, r3
 3256 007a 3B68     		ldr	r3, [r7, #0]
 3257 007c 1A70     		strb	r2, [r3, #0]
1292:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1293:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;
 3258              		.loc 1 1293 0
 3259 007e 4FF00003 		mov	r3, #0
1294:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3260              		.loc 1 1294 0
 3261 0082 1846     		mov	r0, r3
 3262 0084 07F11807 		add	r7, r7, #24
 3263 0088 BD46     		mov	sp, r7
 3264 008a 80BD     		pop	{r7, pc}
 3265              		.cfi_endproc
 3266              	.LFE186:
 3268              		.section	.rodata
 3269              		.align	2
 3270              	.LC0:
 3271 0000 00       		.byte	0
 3272 0001 03       		.byte	3
 3273 0002 19       		.byte	25
 3274 0003 45       		.byte	69
 3275 0004 00       		.byte	0
 3276 0005 00       		.byte	0
 3277 0006 0000     		.section	.text.synopGMAC_attach,"ax",%progbits
 3278              		.align	2
 3279              		.global	synopGMAC_attach
 3280              		.thumb
 3281              		.thumb_func
 3283              	synopGMAC_attach:
 3284              	.LFB187:
1295:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1296:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1297:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1298:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Attaches the synopGMAC device structure to the hardware.
1299:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Device structure is populated with MAC/DMA and PHY base addresses.
1300:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] gmacdev pointer to synopGMACdevice to populate mac dma and phy addresses.
1301:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] macBase GMAC IP mac base address.
1302:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] dmaBase GMAC IP dma base address.
1303:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] phyBase GMAC IP phy base address.
1304:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 upon success. Error code upon failure.
1305:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note This is important function. No kernel api provided by Synopsys 
1306:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1307:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1308:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_attach (synopGMACdevice * gmacdev, u32 macBase, u32 dmaBase, u32 phyBase) 
1309:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3285              		.loc 1 1309 0
 3286              		.cfi_startproc
 3287              		@ args = 0, pretend = 0, frame = 24
 3288              		@ frame_needed = 1, uses_anonymous_args = 0
 3289 0000 80B5     		push	{r7, lr}
 3290              	.LCFI210:
 3291              		.cfi_def_cfa_offset 8
 3292              		.cfi_offset 7, -8
 3293              		.cfi_offset 14, -4
 3294 0002 86B0     		sub	sp, sp, #24
 3295              	.LCFI211:
 3296              		.cfi_def_cfa_offset 32
 3297 0004 00AF     		add	r7, sp, #0
 3298              	.LCFI212:
 3299              		.cfi_def_cfa_register 7
 3300 0006 F860     		str	r0, [r7, #12]
 3301 0008 B960     		str	r1, [r7, #8]
 3302 000a 7A60     		str	r2, [r7, #4]
 3303 000c 3B60     		str	r3, [r7, #0]
1310:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u8 mac_addr0[6] = DEFAULT_MAC_ADDRESS;
 3304              		.loc 1 1310 0
 3305 000e 40F20003 		movw	r3, #:lower16:.LC0
 3306 0012 C0F20003 		movt	r3, #:upper16:.LC0
 3307 0016 07F11002 		add	r2, r7, #16
 3308 001a 1868     		ldr	r0, [r3, #0]	@ unaligned
 3309 001c 1060     		str	r0, [r2, #0]	@ unaligned
 3310 001e 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 3311 0020 9380     		strh	r3, [r2, #4]	@ unaligned
1311:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	/*Make sure the Device data strucure is cleared before we proceed further*/
1312:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1313:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	memset((void *) gmacdev,0,sizeof(synopGMACdevice));
 3312              		.loc 1 1313 0
 3313 0022 F868     		ldr	r0, [r7, #12]
 3314 0024 4FF00001 		mov	r1, #0
 3315 0028 4FF0C402 		mov	r2, #196
 3316 002c FFF7FEFF 		bl	memset
1314:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	/*Populate the mac and dma base addresses*/
1315:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->MacBase = macBase;
 3317              		.loc 1 1315 0
 3318 0030 FB68     		ldr	r3, [r7, #12]
 3319 0032 BA68     		ldr	r2, [r7, #8]
 3320 0034 1A60     		str	r2, [r3, #0]
1316:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->DmaBase = dmaBase;
 3321              		.loc 1 1316 0
 3322 0036 FB68     		ldr	r3, [r7, #12]
 3323 0038 7A68     		ldr	r2, [r7, #4]
 3324 003a 5A60     		str	r2, [r3, #4]
1317:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->PhyBase = phyBase;
 3325              		.loc 1 1317 0
 3326 003c FB68     		ldr	r3, [r7, #12]
 3327 003e 3A68     		ldr	r2, [r7, #0]
 3328 0040 9A60     		str	r2, [r3, #8]
1318:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1319:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	/* Program/flash in the station/IP's Mac address */
1320:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMAC_set_mac_addr(gmacdev,GmacAddr0High,GmacAddr0Low, mac_addr0); 
 3329              		.loc 1 1320 0
 3330 0042 07F11003 		add	r3, r7, #16
 3331 0046 F868     		ldr	r0, [r7, #12]
 3332 0048 4FF04001 		mov	r1, #64
 3333 004c 4FF04402 		mov	r2, #68
 3334 0050 FFF7FEFF 		bl	synopGMAC_set_mac_addr
1321:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1322:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return 0;	
 3335              		.loc 1 1322 0
 3336 0054 4FF00003 		mov	r3, #0
1323:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3337              		.loc 1 1323 0
 3338 0058 1846     		mov	r0, r3
 3339 005a 07F11807 		add	r7, r7, #24
 3340 005e BD46     		mov	sp, r7
 3341 0060 80BD     		pop	{r7, pc}
 3342              		.cfi_endproc
 3343              	.LFE187:
 3345 0062 00BF     		.section	.text.synopGMAC_rx_desc_init_ring,"ax",%progbits
 3346              		.align	2
 3347              		.global	synopGMAC_rx_desc_init_ring
 3348              		.thumb
 3349              		.thumb_func
 3351              	synopGMAC_rx_desc_init_ring:
 3352              	.LFB188:
1324:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1325:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1326:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1327:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1328:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Initialize the rx descriptors for ring or chain mode operation.
1329:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- Status field is initialized to 0.
1330:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- EndOfRing set for the last descriptor.
1331:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- buffer1 and buffer2 set to 0 for ring mode of operation. (note)
1332:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- data1 and data2 set to 0. (note)
1333:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1334:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] whether end of ring
1335:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
1336:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note Initialization of the buffer1, buffer2, data1,data2 and status are not done here. This on
1337:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * in chain mode or ring mode. For chain mode of operation the buffer2 and data2 are programmed be
1338:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1339:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_desc_init_ring(DmaDesc *desc, bool last_ring_desc)
1340:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3353              		.loc 1 1340 0
 3354              		.cfi_startproc
 3355              		@ args = 0, pretend = 0, frame = 8
 3356              		@ frame_needed = 1, uses_anonymous_args = 0
 3357              		@ link register save eliminated.
 3358 0000 80B4     		push	{r7}
 3359              	.LCFI213:
 3360              		.cfi_def_cfa_offset 4
 3361              		.cfi_offset 7, -4
 3362 0002 83B0     		sub	sp, sp, #12
 3363              	.LCFI214:
 3364              		.cfi_def_cfa_offset 16
 3365 0004 00AF     		add	r7, sp, #0
 3366              	.LCFI215:
 3367              		.cfi_def_cfa_register 7
 3368 0006 7860     		str	r0, [r7, #4]
 3369 0008 0B46     		mov	r3, r1
 3370 000a FB70     		strb	r3, [r7, #3]
1341:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->status = 0;
 3371              		.loc 1 1341 0
 3372 000c 7B68     		ldr	r3, [r7, #4]
 3373 000e 4FF00002 		mov	r2, #0
 3374 0012 1A60     		str	r2, [r3, #0]
1342:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = last_ring_desc ? RxDescEndOfRing : 0;
 3375              		.loc 1 1342 0
 3376 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3377 0016 002B     		cmp	r3, #0
 3378 0018 02D0     		beq	.L154
 3379              		.loc 1 1342 0 is_stmt 0 discriminator 1
 3380 001a 4FF40043 		mov	r3, #32768
 3381 001e 01E0     		b	.L155
 3382              	.L154:
 3383              		.loc 1 1342 0 discriminator 2
 3384 0020 4FF00003 		mov	r3, #0
 3385              	.L155:
 3386              		.loc 1 1342 0 discriminator 3
 3387 0024 7A68     		ldr	r2, [r7, #4]
 3388 0026 5360     		str	r3, [r2, #4]
1343:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->buffer1 = 0;
 3389              		.loc 1 1343 0 is_stmt 1 discriminator 3
 3390 0028 7B68     		ldr	r3, [r7, #4]
 3391 002a 4FF00002 		mov	r2, #0
 3392 002e 9A60     		str	r2, [r3, #8]
1344:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->buffer2 = 0;
 3393              		.loc 1 1344 0 discriminator 3
 3394 0030 7B68     		ldr	r3, [r7, #4]
 3395 0032 4FF00002 		mov	r2, #0
 3396 0036 DA60     		str	r2, [r3, #12]
1345:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->data1 = 0;
 3397              		.loc 1 1345 0 discriminator 3
 3398 0038 7B68     		ldr	r3, [r7, #4]
 3399 003a 4FF00002 		mov	r2, #0
 3400 003e 1A62     		str	r2, [r3, #32]
1346:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->data2 = 0;
 3401              		.loc 1 1346 0 discriminator 3
 3402 0040 7B68     		ldr	r3, [r7, #4]
 3403 0042 4FF00002 		mov	r2, #0
 3404 0046 5A62     		str	r2, [r3, #36]
1347:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 3405              		.loc 1 1347 0 discriminator 3
 3406 0048 00BF     		nop
1348:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3407              		.loc 1 1348 0 discriminator 3
 3408 004a 07F10C07 		add	r7, r7, #12
 3409 004e BD46     		mov	sp, r7
 3410 0050 80BC     		pop	{r7}
 3411 0052 7047     		bx	lr
 3412              		.cfi_endproc
 3413              	.LFE188:
 3415              		.section	.text.synopGMAC_tx_desc_init_ring,"ax",%progbits
 3416              		.align	2
 3417              		.global	synopGMAC_tx_desc_init_ring
 3418              		.thumb
 3419              		.thumb_func
 3421              	synopGMAC_tx_desc_init_ring:
 3422              	.LFB189:
1349:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1350:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Initialize the tx descriptors for ring or chain mode operation.
1351:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- Status field is initialized to 0.
1352:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- EndOfRing set for the last descriptor.
1353:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- buffer1 and buffer2 set to 0 for ring mode of operation. (note)
1354:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- data1 and data2 set to 0. (note)
1355:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1356:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] whether end of ring
1357:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
1358:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note Initialization of the buffer1, buffer2, data1,data2 and status are not done here. This on
1359:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * in chain mode or ring mode. For chain mode of operation the buffer2 and data2 are programmed be
1360:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1361:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_desc_init_ring(DmaDesc *desc, bool last_ring_desc)
1362:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3423              		.loc 1 1362 0
 3424              		.cfi_startproc
 3425              		@ args = 0, pretend = 0, frame = 8
 3426              		@ frame_needed = 1, uses_anonymous_args = 0
 3427              		@ link register save eliminated.
 3428 0000 80B4     		push	{r7}
 3429              	.LCFI216:
 3430              		.cfi_def_cfa_offset 4
 3431              		.cfi_offset 7, -4
 3432 0002 83B0     		sub	sp, sp, #12
 3433              	.LCFI217:
 3434              		.cfi_def_cfa_offset 16
 3435 0004 00AF     		add	r7, sp, #0
 3436              	.LCFI218:
 3437              		.cfi_def_cfa_register 7
 3438 0006 7860     		str	r0, [r7, #4]
 3439 0008 0B46     		mov	r3, r1
 3440 000a FB70     		strb	r3, [r7, #3]
1363:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#ifdef ENH_DESC
1364:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->status = last_ring_desc? TxDescEndOfRing : 0;
 3441              		.loc 1 1364 0
 3442 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3443 000e 002B     		cmp	r3, #0
 3444 0010 02D0     		beq	.L158
 3445              		.loc 1 1364 0 is_stmt 0 discriminator 1
 3446 0012 4FF40013 		mov	r3, #2097152
 3447 0016 01E0     		b	.L159
 3448              	.L158:
 3449              		.loc 1 1364 0 discriminator 2
 3450 0018 4FF00003 		mov	r3, #0
 3451              	.L159:
 3452              		.loc 1 1364 0 discriminator 3
 3453 001c 7A68     		ldr	r2, [r7, #4]
 3454 001e 1360     		str	r3, [r2, #0]
1365:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = 0; 
 3455              		.loc 1 1365 0 is_stmt 1 discriminator 3
 3456 0020 7B68     		ldr	r3, [r7, #4]
 3457 0022 4FF00002 		mov	r2, #0
 3458 0026 5A60     		str	r2, [r3, #4]
1366:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#else
1367:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = last_ring_desc? TxDescEndOfRing : 0;
1368:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#endif
1369:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	/*
1370:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->buffer1 = 0;
1371:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->buffer2 = 0;
1372:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->data1 = 0;
1373:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->data2 = 0;
1374:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	*/
1375:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 3459              		.loc 1 1375 0 discriminator 3
 3460 0028 00BF     		nop
1376:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3461              		.loc 1 1376 0 discriminator 3
 3462 002a 07F10C07 		add	r7, r7, #12
 3463 002e BD46     		mov	sp, r7
 3464 0030 80BC     		pop	{r7}
 3465 0032 7047     		bx	lr
 3466              		.cfi_endproc
 3467              	.LFE189:
 3469              		.section	.text.synopGMAC_rx_desc_init_chain,"ax",%progbits
 3470              		.align	2
 3471              		.global	synopGMAC_rx_desc_init_chain
 3472              		.thumb
 3473              		.thumb_func
 3475              	synopGMAC_rx_desc_init_chain:
 3476              	.LFB190:
1377:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1378:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1379:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1380:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1381:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Initialize the rx descriptors for chain mode of operation.
1382:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- Status field is initialized to 0.
1383:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- EndOfRing set for the last descriptor.
1384:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- buffer1 and buffer2 set to 0.
1385:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- data1 and data2 set to 0.
1386:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1387:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] whether end of ring
1388:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
1389:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1390:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1391:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_desc_init_chain(DmaDesc * desc)
1392:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3477              		.loc 1 1392 0
 3478              		.cfi_startproc
 3479              		@ args = 0, pretend = 0, frame = 8
 3480              		@ frame_needed = 1, uses_anonymous_args = 0
 3481              		@ link register save eliminated.
 3482 0000 80B4     		push	{r7}
 3483              	.LCFI219:
 3484              		.cfi_def_cfa_offset 4
 3485              		.cfi_offset 7, -4
 3486 0002 83B0     		sub	sp, sp, #12
 3487              	.LCFI220:
 3488              		.cfi_def_cfa_offset 16
 3489 0004 00AF     		add	r7, sp, #0
 3490              	.LCFI221:
 3491              		.cfi_def_cfa_register 7
 3492 0006 7860     		str	r0, [r7, #4]
1393:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->status = 0;
 3493              		.loc 1 1393 0
 3494 0008 7B68     		ldr	r3, [r7, #4]
 3495 000a 4FF00002 		mov	r2, #0
 3496 000e 1A60     		str	r2, [r3, #0]
1394:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = RxDescChain;
 3497              		.loc 1 1394 0
 3498 0010 7B68     		ldr	r3, [r7, #4]
 3499 0012 4FF48042 		mov	r2, #16384
 3500 0016 5A60     		str	r2, [r3, #4]
1395:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->buffer1 = 0;
 3501              		.loc 1 1395 0
 3502 0018 7B68     		ldr	r3, [r7, #4]
 3503 001a 4FF00002 		mov	r2, #0
 3504 001e 9A60     		str	r2, [r3, #8]
1396:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->data1 = 0;
 3505              		.loc 1 1396 0
 3506 0020 7B68     		ldr	r3, [r7, #4]
 3507 0022 4FF00002 		mov	r2, #0
 3508 0026 1A62     		str	r2, [r3, #32]
1397:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 3509              		.loc 1 1397 0
 3510 0028 00BF     		nop
1398:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3511              		.loc 1 1398 0
 3512 002a 07F10C07 		add	r7, r7, #12
 3513 002e BD46     		mov	sp, r7
 3514 0030 80BC     		pop	{r7}
 3515 0032 7047     		bx	lr
 3516              		.cfi_endproc
 3517              	.LFE190:
 3519              		.section	.text.synopGMAC_tx_desc_init_chain,"ax",%progbits
 3520              		.align	2
 3521              		.global	synopGMAC_tx_desc_init_chain
 3522              		.thumb
 3523              		.thumb_func
 3525              	synopGMAC_tx_desc_init_chain:
 3526              	.LFB191:
1399:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1400:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Initialize the rx descriptors for chain mode of operation.
1401:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * 	- Status field is initialized to 0.
1402:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- EndOfRing set for the last descriptor.
1403:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- buffer1 and buffer2 set to 0.
1404:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *	- data1 and data2 set to 0.
1405:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1406:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] whether end of ring
1407:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return void.
1408:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1409:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_desc_init_chain(DmaDesc * desc)
1410:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3527              		.loc 1 1410 0
 3528              		.cfi_startproc
 3529              		@ args = 0, pretend = 0, frame = 8
 3530              		@ frame_needed = 1, uses_anonymous_args = 0
 3531              		@ link register save eliminated.
 3532 0000 80B4     		push	{r7}
 3533              	.LCFI222:
 3534              		.cfi_def_cfa_offset 4
 3535              		.cfi_offset 7, -4
 3536 0002 83B0     		sub	sp, sp, #12
 3537              	.LCFI223:
 3538              		.cfi_def_cfa_offset 16
 3539 0004 00AF     		add	r7, sp, #0
 3540              	.LCFI224:
 3541              		.cfi_def_cfa_register 7
 3542 0006 7860     		str	r0, [r7, #4]
1411:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#ifdef ENH_DESC
1412:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->status = TxDescChain;
 3543              		.loc 1 1412 0
 3544 0008 7B68     		ldr	r3, [r7, #4]
 3545 000a 4FF48012 		mov	r2, #1048576
 3546 000e 1A60     		str	r2, [r3, #0]
1413:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = 0;
 3547              		.loc 1 1413 0
 3548 0010 7B68     		ldr	r3, [r7, #4]
 3549 0012 4FF00002 		mov	r2, #0
 3550 0016 5A60     		str	r2, [r3, #4]
1414:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#else
1415:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = TxDescChain;
1416:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#endif
1417:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 3551              		.loc 1 1417 0
 3552 0018 00BF     		nop
1418:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1419:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3553              		.loc 1 1419 0
 3554 001a 07F10C07 		add	r7, r7, #12
 3555 001e BD46     		mov	sp, r7
 3556 0020 80BC     		pop	{r7}
 3557 0022 7047     		bx	lr
 3558              		.cfi_endproc
 3559              	.LFE191:
 3561              		.section	.text.synopGMAC_init_tx_rx_desc_queue,"ax",%progbits
 3562              		.align	2
 3563              		.global	synopGMAC_init_tx_rx_desc_queue
 3564              		.thumb
 3565              		.thumb_func
 3567              	synopGMAC_init_tx_rx_desc_queue:
 3568              	.LFB192:
1420:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1421:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1422:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_init_tx_rx_desc_queue(synopGMACdevice *gmacdev)
1423:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3569              		.loc 1 1423 0
 3570              		.cfi_startproc
 3571              		@ args = 0, pretend = 0, frame = 16
 3572              		@ frame_needed = 1, uses_anonymous_args = 0
 3573 0000 80B5     		push	{r7, lr}
 3574              	.LCFI225:
 3575              		.cfi_def_cfa_offset 8
 3576              		.cfi_offset 7, -8
 3577              		.cfi_offset 14, -4
 3578 0002 84B0     		sub	sp, sp, #16
 3579              	.LCFI226:
 3580              		.cfi_def_cfa_offset 24
 3581 0004 00AF     		add	r7, sp, #0
 3582              	.LCFI227:
 3583              		.cfi_def_cfa_register 7
 3584 0006 7860     		str	r0, [r7, #4]
1424:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	s32 i;
1425:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i < gmacdev -> TxDescCount; i++){
 3585              		.loc 1 1425 0
 3586 0008 4FF00003 		mov	r3, #0
 3587 000c FB60     		str	r3, [r7, #12]
 3588 000e 1BE0     		b	.L166
 3589              	.L167:
1426:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMAC_tx_desc_init_ring(gmacdev->TxDesc + i, i == gmacdev->TxDescCount-1);
 3590              		.loc 1 1426 0 discriminator 2
 3591 0010 7B68     		ldr	r3, [r7, #4]
 3592 0012 9969     		ldr	r1, [r3, #24]
 3593 0014 FA68     		ldr	r2, [r7, #12]
 3594 0016 1346     		mov	r3, r2
 3595 0018 4FEA8303 		lsl	r3, r3, #2
 3596 001c 9B18     		adds	r3, r3, r2
 3597 001e 4FEAC303 		lsl	r3, r3, #3
 3598 0022 CA18     		adds	r2, r1, r3
 3599 0024 F968     		ldr	r1, [r7, #12]
 3600 0026 7B68     		ldr	r3, [r7, #4]
 3601 0028 DB6A     		ldr	r3, [r3, #44]
 3602 002a 03F1FF33 		add	r3, r3, #-1
 3603 002e 9942     		cmp	r1, r3
 3604 0030 14BF     		ite	ne
 3605 0032 0023     		movne	r3, #0
 3606 0034 0123     		moveq	r3, #1
 3607 0036 DBB2     		uxtb	r3, r3
 3608 0038 1046     		mov	r0, r2
 3609 003a 1946     		mov	r1, r3
 3610 003c FFF7FEFF 		bl	synopGMAC_tx_desc_init_ring
1425:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i < gmacdev -> TxDescCount; i++){
 3611              		.loc 1 1425 0 discriminator 2
 3612 0040 FB68     		ldr	r3, [r7, #12]
 3613 0042 03F10103 		add	r3, r3, #1
 3614 0046 FB60     		str	r3, [r7, #12]
 3615              	.L166:
1425:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i < gmacdev -> TxDescCount; i++){
 3616              		.loc 1 1425 0 is_stmt 0 discriminator 1
 3617 0048 FA68     		ldr	r2, [r7, #12]
 3618 004a 7B68     		ldr	r3, [r7, #4]
 3619 004c DB6A     		ldr	r3, [r3, #44]
 3620 004e 9A42     		cmp	r2, r3
 3621 0050 DED3     		bcc	.L167
1427:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1428:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1429:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i < gmacdev -> RxDescCount; i++){
 3622              		.loc 1 1429 0 is_stmt 1
 3623 0052 4FF00003 		mov	r3, #0
 3624 0056 FB60     		str	r3, [r7, #12]
 3625 0058 1BE0     		b	.L168
 3626              	.L169:
1430:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMAC_rx_desc_init_ring(gmacdev->RxDesc + i, i == gmacdev->RxDescCount-1);
 3627              		.loc 1 1430 0 discriminator 2
 3628 005a 7B68     		ldr	r3, [r7, #4]
 3629 005c D969     		ldr	r1, [r3, #28]
 3630 005e FA68     		ldr	r2, [r7, #12]
 3631 0060 1346     		mov	r3, r2
 3632 0062 4FEA8303 		lsl	r3, r3, #2
 3633 0066 9B18     		adds	r3, r3, r2
 3634 0068 4FEAC303 		lsl	r3, r3, #3
 3635 006c CA18     		adds	r2, r1, r3
 3636 006e F968     		ldr	r1, [r7, #12]
 3637 0070 7B68     		ldr	r3, [r7, #4]
 3638 0072 9B6A     		ldr	r3, [r3, #40]
 3639 0074 03F1FF33 		add	r3, r3, #-1
 3640 0078 9942     		cmp	r1, r3
 3641 007a 14BF     		ite	ne
 3642 007c 0023     		movne	r3, #0
 3643 007e 0123     		moveq	r3, #1
 3644 0080 DBB2     		uxtb	r3, r3
 3645 0082 1046     		mov	r0, r2
 3646 0084 1946     		mov	r1, r3
 3647 0086 FFF7FEFF 		bl	synopGMAC_rx_desc_init_ring
1429:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i < gmacdev -> RxDescCount; i++){
 3648              		.loc 1 1429 0 discriminator 2
 3649 008a FB68     		ldr	r3, [r7, #12]
 3650 008c 03F10103 		add	r3, r3, #1
 3651 0090 FB60     		str	r3, [r7, #12]
 3652              	.L168:
1429:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i < gmacdev -> RxDescCount; i++){
 3653              		.loc 1 1429 0 is_stmt 0 discriminator 1
 3654 0092 FA68     		ldr	r2, [r7, #12]
 3655 0094 7B68     		ldr	r3, [r7, #4]
 3656 0096 9B6A     		ldr	r3, [r3, #40]
 3657 0098 9A42     		cmp	r2, r3
 3658 009a DED3     		bcc	.L169
1431:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1432:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1433:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->TxNext = 0;
 3659              		.loc 1 1433 0 is_stmt 1
 3660 009c 7B68     		ldr	r3, [r7, #4]
 3661 009e 4FF00002 		mov	r2, #0
 3662 00a2 5A63     		str	r2, [r3, #52]
1434:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->TxBusy = 0;
 3663              		.loc 1 1434 0
 3664 00a4 7B68     		ldr	r3, [r7, #4]
 3665 00a6 4FF00002 		mov	r2, #0
 3666 00aa 1A63     		str	r2, [r3, #48]
1435:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->RxNext = 0;
 3667              		.loc 1 1435 0
 3668 00ac 7B68     		ldr	r3, [r7, #4]
 3669 00ae 4FF00002 		mov	r2, #0
 3670 00b2 DA63     		str	r2, [r3, #60]
1436:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->RxBusy = 0;
 3671              		.loc 1 1436 0
 3672 00b4 7B68     		ldr	r3, [r7, #4]
 3673 00b6 4FF00002 		mov	r2, #0
 3674 00ba 9A63     		str	r2, [r3, #56]
1437:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1438:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return -ESYNOPGMACNOERR;
 3675              		.loc 1 1438 0
 3676 00bc 4FF00003 		mov	r3, #0
1439:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3677              		.loc 1 1439 0
 3678 00c0 1846     		mov	r0, r3
 3679 00c2 07F11007 		add	r7, r7, #16
 3680 00c6 BD46     		mov	sp, r7
 3681 00c8 80BD     		pop	{r7, pc}
 3682              		.cfi_endproc
 3683              	.LFE192:
 3685 00ca 00BF     		.section	.text.synopGMAC_init_rx_desc_base,"ax",%progbits
 3686              		.align	2
 3687              		.global	synopGMAC_init_rx_desc_base
 3688              		.thumb
 3689              		.thumb_func
 3691              	synopGMAC_init_rx_desc_base:
 3692              	.LFB193:
1440:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1441:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Programs the DmaRxBaseAddress with the Rx descriptor base address.
1442:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Rx Descriptor's base address is available in the gmacdev structure. This function progrms the 
1443:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Dma Rx Base address with the starting address of the descriptor ring or chain.
1444:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1445:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
1446:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1447:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_init_rx_desc_base(synopGMACdevice *gmacdev)
1448:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3693              		.loc 1 1448 0
 3694              		.cfi_startproc
 3695              		@ args = 0, pretend = 0, frame = 8
 3696              		@ frame_needed = 1, uses_anonymous_args = 0
 3697 0000 80B5     		push	{r7, lr}
 3698              	.LCFI228:
 3699              		.cfi_def_cfa_offset 8
 3700              		.cfi_offset 7, -8
 3701              		.cfi_offset 14, -4
 3702 0002 82B0     		sub	sp, sp, #8
 3703              	.LCFI229:
 3704              		.cfi_def_cfa_offset 16
 3705 0004 00AF     		add	r7, sp, #0
 3706              	.LCFI230:
 3707              		.cfi_def_cfa_register 7
 3708 0006 7860     		str	r0, [r7, #4]
1449:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase,DmaRxBaseAddr,(u32)gmacdev->RxDescDma);
 3709              		.loc 1 1449 0
 3710 0008 7B68     		ldr	r3, [r7, #4]
 3711 000a 5B68     		ldr	r3, [r3, #4]
 3712 000c 1A46     		mov	r2, r3
 3713 000e 7B68     		ldr	r3, [r7, #4]
 3714 0010 5B69     		ldr	r3, [r3, #20]
 3715 0012 1046     		mov	r0, r2
 3716 0014 4FF00C01 		mov	r1, #12
 3717 0018 1A46     		mov	r2, r3
 3718 001a FFF7FEFF 		bl	synopGMACWriteReg
1450:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 3719              		.loc 1 1450 0
 3720 001e 00BF     		nop
1451:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3721              		.loc 1 1451 0
 3722 0020 07F10807 		add	r7, r7, #8
 3723 0024 BD46     		mov	sp, r7
 3724 0026 80BD     		pop	{r7, pc}
 3725              		.cfi_endproc
 3726              	.LFE193:
 3728              		.section	.text.synopGMAC_init_tx_desc_base,"ax",%progbits
 3729              		.align	2
 3730              		.global	synopGMAC_init_tx_desc_base
 3731              		.thumb
 3732              		.thumb_func
 3734              	synopGMAC_init_tx_desc_base:
 3735              	.LFB194:
1452:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1453:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1454:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Programs the DmaTxBaseAddress with the Tx descriptor base address.
1455:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Tx Descriptor's base address is available in the gmacdev structure. This function progrms the 
1456:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Dma Tx Base address with the starting address of the descriptor ring or chain.
1457:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1458:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
1459:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1460:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_init_tx_desc_base(synopGMACdevice *gmacdev)
1461:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3736              		.loc 1 1461 0
 3737              		.cfi_startproc
 3738              		@ args = 0, pretend = 0, frame = 8
 3739              		@ frame_needed = 1, uses_anonymous_args = 0
 3740 0000 80B5     		push	{r7, lr}
 3741              	.LCFI231:
 3742              		.cfi_def_cfa_offset 8
 3743              		.cfi_offset 7, -8
 3744              		.cfi_offset 14, -4
 3745 0002 82B0     		sub	sp, sp, #8
 3746              	.LCFI232:
 3747              		.cfi_def_cfa_offset 16
 3748 0004 00AF     		add	r7, sp, #0
 3749              	.LCFI233:
 3750              		.cfi_def_cfa_register 7
 3751 0006 7860     		str	r0, [r7, #4]
1462:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase,DmaTxBaseAddr,(u32)gmacdev->TxDescDma);
 3752              		.loc 1 1462 0
 3753 0008 7B68     		ldr	r3, [r7, #4]
 3754 000a 5B68     		ldr	r3, [r3, #4]
 3755 000c 1A46     		mov	r2, r3
 3756 000e 7B68     		ldr	r3, [r7, #4]
 3757 0010 1B69     		ldr	r3, [r3, #16]
 3758 0012 1046     		mov	r0, r2
 3759 0014 4FF01001 		mov	r1, #16
 3760 0018 1A46     		mov	r2, r3
 3761 001a FFF7FEFF 		bl	synopGMACWriteReg
1463:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 3762              		.loc 1 1463 0
 3763 001e 00BF     		nop
1464:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3764              		.loc 1 1464 0
 3765 0020 07F10807 		add	r7, r7, #8
 3766 0024 BD46     		mov	sp, r7
 3767 0026 80BD     		pop	{r7, pc}
 3768              		.cfi_endproc
 3769              	.LFE194:
 3771              		.section	.text.synopGMAC_set_owner_dma,"ax",%progbits
 3772              		.align	2
 3773              		.global	synopGMAC_set_owner_dma
 3774              		.thumb
 3775              		.thumb_func
 3777              	synopGMAC_set_owner_dma:
 3778              	.LFB195:
1465:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1466:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1467:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
1468:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Makes the Dma as owner for this descriptor.
1469:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function sets the own bit of status field of the DMA descriptor,
1470:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * indicating the DMA is the owner for this descriptor. 
1471:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1472:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
1473:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1474:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_set_owner_dma(DmaDesc *desc)
1475:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3779              		.loc 1 1475 0
 3780              		.cfi_startproc
 3781              		@ args = 0, pretend = 0, frame = 8
 3782              		@ frame_needed = 1, uses_anonymous_args = 0
 3783              		@ link register save eliminated.
 3784 0000 80B4     		push	{r7}
 3785              	.LCFI234:
 3786              		.cfi_def_cfa_offset 4
 3787              		.cfi_offset 7, -4
 3788 0002 83B0     		sub	sp, sp, #12
 3789              	.LCFI235:
 3790              		.cfi_def_cfa_offset 16
 3791 0004 00AF     		add	r7, sp, #0
 3792              	.LCFI236:
 3793              		.cfi_def_cfa_register 7
 3794 0006 7860     		str	r0, [r7, #4]
1476:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** desc->status |=  DescOwnByDma;
 3795              		.loc 1 1476 0
 3796 0008 7B68     		ldr	r3, [r7, #4]
 3797 000a 1B68     		ldr	r3, [r3, #0]
 3798 000c 43F00042 		orr	r2, r3, #-2147483648
 3799 0010 7B68     		ldr	r3, [r7, #4]
 3800 0012 1A60     		str	r2, [r3, #0]
1477:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3801              		.loc 1 1477 0
 3802 0014 07F10C07 		add	r7, r7, #12
 3803 0018 BD46     		mov	sp, r7
 3804 001a 80BC     		pop	{r7}
 3805 001c 7047     		bx	lr
 3806              		.cfi_endproc
 3807              	.LFE195:
 3809 001e 00BF     		.section	.text.synopGMAC_set_desc_sof,"ax",%progbits
 3810              		.align	2
 3811              		.global	synopGMAC_set_desc_sof
 3812              		.thumb
 3813              		.thumb_func
 3815              	synopGMAC_set_desc_sof:
 3816              	.LFB196:
1478:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1479:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
1480:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * set tx descriptor to indicate SOF.
1481:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This Descriptor contains the start of ethernet frame.
1482:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1483:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
1484:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1485:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_set_desc_sof(DmaDesc *desc)
1486:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3817              		.loc 1 1486 0
 3818              		.cfi_startproc
 3819              		@ args = 0, pretend = 0, frame = 8
 3820              		@ frame_needed = 1, uses_anonymous_args = 0
 3821              		@ link register save eliminated.
 3822 0000 80B4     		push	{r7}
 3823              	.LCFI237:
 3824              		.cfi_def_cfa_offset 4
 3825              		.cfi_offset 7, -4
 3826 0002 83B0     		sub	sp, sp, #12
 3827              	.LCFI238:
 3828              		.cfi_def_cfa_offset 16
 3829 0004 00AF     		add	r7, sp, #0
 3830              	.LCFI239:
 3831              		.cfi_def_cfa_register 7
 3832 0006 7860     		str	r0, [r7, #4]
1487:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC
1488:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** desc->status |= DescTxFirst;//ENH_DESC
 3833              		.loc 1 1488 0
 3834 0008 7B68     		ldr	r3, [r7, #4]
 3835 000a 1B68     		ldr	r3, [r3, #0]
 3836 000c 43F08052 		orr	r2, r3, #268435456
 3837 0010 7B68     		ldr	r3, [r7, #4]
 3838 0012 1A60     		str	r2, [r3, #0]
1489:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
1490:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** desc->length |= DescTxFirst;
1491:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
1492:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1493:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3839              		.loc 1 1493 0
 3840 0014 07F10C07 		add	r7, r7, #12
 3841 0018 BD46     		mov	sp, r7
 3842 001a 80BC     		pop	{r7}
 3843 001c 7047     		bx	lr
 3844              		.cfi_endproc
 3845              	.LFE196:
 3847 001e 00BF     		.section	.text.synopGMAC_set_desc_eof,"ax",%progbits
 3848              		.align	2
 3849              		.global	synopGMAC_set_desc_eof
 3850              		.thumb
 3851              		.thumb_func
 3853              	synopGMAC_set_desc_eof:
 3854              	.LFB197:
1494:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1495:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
1496:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * set tx descriptor to indicate EOF.
1497:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This descriptor contains the End of ethernet frame.
1498:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1499:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
1500:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1501:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_set_desc_eof(DmaDesc *desc)
1502:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3855              		.loc 1 1502 0
 3856              		.cfi_startproc
 3857              		@ args = 0, pretend = 0, frame = 8
 3858              		@ frame_needed = 1, uses_anonymous_args = 0
 3859              		@ link register save eliminated.
 3860 0000 80B4     		push	{r7}
 3861              	.LCFI240:
 3862              		.cfi_def_cfa_offset 4
 3863              		.cfi_offset 7, -4
 3864 0002 83B0     		sub	sp, sp, #12
 3865              	.LCFI241:
 3866              		.cfi_def_cfa_offset 16
 3867 0004 00AF     		add	r7, sp, #0
 3868              	.LCFI242:
 3869              		.cfi_def_cfa_register 7
 3870 0006 7860     		str	r0, [r7, #4]
1503:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC
1504:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** desc->status |= DescTxLast;//ENH_DESC
 3871              		.loc 1 1504 0
 3872 0008 7B68     		ldr	r3, [r7, #4]
 3873 000a 1B68     		ldr	r3, [r3, #0]
 3874 000c 43F00052 		orr	r2, r3, #536870912
 3875 0010 7B68     		ldr	r3, [r7, #4]
 3876 0012 1A60     		str	r2, [r3, #0]
1505:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
1506:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** desc->length |= DescTxLast;
1507:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
1508:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3877              		.loc 1 1508 0
 3878 0014 07F10C07 		add	r7, r7, #12
 3879 0018 BD46     		mov	sp, r7
 3880 001a 80BC     		pop	{r7}
 3881 001c 7047     		bx	lr
 3882              		.cfi_endproc
 3883              	.LFE197:
 3885 001e 00BF     		.section	.text.synopGMAC_is_sof_in_rx_desc,"ax",%progbits
 3886              		.align	2
 3887              		.global	synopGMAC_is_sof_in_rx_desc
 3888              		.thumb
 3889              		.thumb_func
 3891              	synopGMAC_is_sof_in_rx_desc:
 3892              	.LFB198:
1509:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1510:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1511:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
1512:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * checks whether this descriptor contains start of frame.
1513:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function is to check whether the descriptor's data buffer 
1514:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * contains a fresh ethernet frame?
1515:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1516:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if SOF in current descriptor, else returns fail.
1517:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1518:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_sof_in_rx_desc(DmaDesc *desc)
1519:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3893              		.loc 1 1519 0
 3894              		.cfi_startproc
 3895              		@ args = 0, pretend = 0, frame = 8
 3896              		@ frame_needed = 1, uses_anonymous_args = 0
 3897              		@ link register save eliminated.
 3898 0000 80B4     		push	{r7}
 3899              	.LCFI243:
 3900              		.cfi_def_cfa_offset 4
 3901              		.cfi_offset 7, -4
 3902 0002 83B0     		sub	sp, sp, #12
 3903              	.LCFI244:
 3904              		.cfi_def_cfa_offset 16
 3905 0004 00AF     		add	r7, sp, #0
 3906              	.LCFI245:
 3907              		.cfi_def_cfa_register 7
 3908 0006 7860     		str	r0, [r7, #4]
1520:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** return ((desc->status & DescRxFirst) == DescRxFirst);                      
 3909              		.loc 1 1520 0
 3910 0008 7B68     		ldr	r3, [r7, #4]
 3911 000a 1B68     		ldr	r3, [r3, #0]
 3912 000c 03F40073 		and	r3, r3, #512
 3913 0010 002B     		cmp	r3, #0
 3914 0012 0CBF     		ite	eq
 3915 0014 0023     		moveq	r3, #0
 3916 0016 0123     		movne	r3, #1
 3917 0018 DBB2     		uxtb	r3, r3
1521:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3918              		.loc 1 1521 0
 3919 001a 1846     		mov	r0, r3
 3920 001c 07F10C07 		add	r7, r7, #12
 3921 0020 BD46     		mov	sp, r7
 3922 0022 80BC     		pop	{r7}
 3923 0024 7047     		bx	lr
 3924              		.cfi_endproc
 3925              	.LFE198:
 3927 0026 00BF     		.section	.text.synopGMAC_is_eof_in_rx_desc,"ax",%progbits
 3928              		.align	2
 3929              		.global	synopGMAC_is_eof_in_rx_desc
 3930              		.thumb
 3931              		.thumb_func
 3933              	synopGMAC_is_eof_in_rx_desc:
 3934              	.LFB199:
1522:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1523:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
1524:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * checks whether this descriptor contains end of frame.
1525:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function is to check whether the descriptor's data buffer 
1526:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * contains end of ethernet frame?
1527:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1528:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if SOF in current descriptor, else returns fail.
1529:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1530:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_eof_in_rx_desc(DmaDesc *desc)
1531:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3935              		.loc 1 1531 0
 3936              		.cfi_startproc
 3937              		@ args = 0, pretend = 0, frame = 8
 3938              		@ frame_needed = 1, uses_anonymous_args = 0
 3939              		@ link register save eliminated.
 3940 0000 80B4     		push	{r7}
 3941              	.LCFI246:
 3942              		.cfi_def_cfa_offset 4
 3943              		.cfi_offset 7, -4
 3944 0002 83B0     		sub	sp, sp, #12
 3945              	.LCFI247:
 3946              		.cfi_def_cfa_offset 16
 3947 0004 00AF     		add	r7, sp, #0
 3948              	.LCFI248:
 3949              		.cfi_def_cfa_register 7
 3950 0006 7860     		str	r0, [r7, #4]
1532:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** return ((desc->status & DescRxLast) == DescRxLast);                      
 3951              		.loc 1 1532 0
 3952 0008 7B68     		ldr	r3, [r7, #4]
 3953 000a 1B68     		ldr	r3, [r3, #0]
 3954 000c 03F48073 		and	r3, r3, #256
 3955 0010 002B     		cmp	r3, #0
 3956 0012 0CBF     		ite	eq
 3957 0014 0023     		moveq	r3, #0
 3958 0016 0123     		movne	r3, #1
 3959 0018 DBB2     		uxtb	r3, r3
1533:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 3960              		.loc 1 1533 0
 3961 001a 1846     		mov	r0, r3
 3962 001c 07F10C07 		add	r7, r7, #12
 3963 0020 BD46     		mov	sp, r7
 3964 0022 80BC     		pop	{r7}
 3965 0024 7047     		bx	lr
 3966              		.cfi_endproc
 3967              	.LFE199:
 3969 0026 00BF     		.section	.text.synopGMAC_is_da_filter_failed,"ax",%progbits
 3970              		.align	2
 3971              		.global	synopGMAC_is_da_filter_failed
 3972              		.thumb
 3973              		.thumb_func
 3975              	synopGMAC_is_da_filter_failed:
 3976              	.LFB200:
1534:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1535:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
1536:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * checks whether destination address filter failed in the rx frame.
1537:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1538:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if Failed, false if not.
1539:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1540:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_da_filter_failed(DmaDesc *desc)
1541:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 3977              		.loc 1 1541 0
 3978              		.cfi_startproc
 3979              		@ args = 0, pretend = 0, frame = 8
 3980              		@ frame_needed = 1, uses_anonymous_args = 0
 3981              		@ link register save eliminated.
 3982 0000 80B4     		push	{r7}
 3983              	.LCFI249:
 3984              		.cfi_def_cfa_offset 4
 3985              		.cfi_offset 7, -4
 3986 0002 83B0     		sub	sp, sp, #12
 3987              	.LCFI250:
 3988              		.cfi_def_cfa_offset 16
 3989 0004 00AF     		add	r7, sp, #0
 3990              	.LCFI251:
 3991              		.cfi_def_cfa_register 7
 3992 0006 7860     		str	r0, [r7, #4]
1542:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** return ((desc->status & DescDAFilterFail) == DescDAFilterFail);                      
 3993              		.loc 1 1542 0
 3994 0008 7B68     		ldr	r3, [r7, #4]
 3995 000a 1B68     		ldr	r3, [r3, #0]
 3996 000c 03F08043 		and	r3, r3, #1073741824
 3997 0010 002B     		cmp	r3, #0
 3998 0012 0CBF     		ite	eq
 3999 0014 0023     		moveq	r3, #0
 4000 0016 0123     		movne	r3, #1
 4001 0018 DBB2     		uxtb	r3, r3
1543:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4002              		.loc 1 1543 0
 4003 001a 1846     		mov	r0, r3
 4004 001c 07F10C07 		add	r7, r7, #12
 4005 0020 BD46     		mov	sp, r7
 4006 0022 80BC     		pop	{r7}
 4007 0024 7047     		bx	lr
 4008              		.cfi_endproc
 4009              	.LFE200:
 4011 0026 00BF     		.section	.text.synopGMAC_is_sa_filter_failed,"ax",%progbits
 4012              		.align	2
 4013              		.global	synopGMAC_is_sa_filter_failed
 4014              		.thumb
 4015              		.thumb_func
 4017              	synopGMAC_is_sa_filter_failed:
 4018              	.LFB201:
1544:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1545:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
1546:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * checks whether source address filter failed in the rx frame.
1547:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1548:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if Failed, false if not.
1549:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1550:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_sa_filter_failed(DmaDesc *desc)
1551:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4019              		.loc 1 1551 0
 4020              		.cfi_startproc
 4021              		@ args = 0, pretend = 0, frame = 8
 4022              		@ frame_needed = 1, uses_anonymous_args = 0
 4023              		@ link register save eliminated.
 4024 0000 80B4     		push	{r7}
 4025              	.LCFI252:
 4026              		.cfi_def_cfa_offset 4
 4027              		.cfi_offset 7, -4
 4028 0002 83B0     		sub	sp, sp, #12
 4029              	.LCFI253:
 4030              		.cfi_def_cfa_offset 16
 4031 0004 00AF     		add	r7, sp, #0
 4032              	.LCFI254:
 4033              		.cfi_def_cfa_register 7
 4034 0006 7860     		str	r0, [r7, #4]
1552:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** return ((desc->status & DescSAFilterFail) == DescSAFilterFail);                      
 4035              		.loc 1 1552 0
 4036 0008 7B68     		ldr	r3, [r7, #4]
 4037 000a 1B68     		ldr	r3, [r3, #0]
 4038 000c 03F40053 		and	r3, r3, #8192
 4039 0010 002B     		cmp	r3, #0
 4040 0012 0CBF     		ite	eq
 4041 0014 0023     		moveq	r3, #0
 4042 0016 0123     		movne	r3, #1
 4043 0018 DBB2     		uxtb	r3, r3
1553:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4044              		.loc 1 1553 0
 4045 001a 1846     		mov	r0, r3
 4046 001c 07F10C07 		add	r7, r7, #12
 4047 0020 BD46     		mov	sp, r7
 4048 0022 80BC     		pop	{r7}
 4049 0024 7047     		bx	lr
 4050              		.cfi_endproc
 4051              	.LFE201:
 4053 0026 00BF     		.section	.text.synopGMAC_is_desc_owned_by_dma,"ax",%progbits
 4054              		.align	2
 4055              		.global	synopGMAC_is_desc_owned_by_dma
 4056              		.thumb
 4057              		.thumb_func
 4059              	synopGMAC_is_desc_owned_by_dma:
 4060              	.LFB202:
1554:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1555:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
1556:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether the descriptor is owned by DMA.
1557:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * If descriptor is owned by DMA then the OWN bit is set to 1. This API is same for both ring and 
1558:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1559:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if Dma owns descriptor and false if not.
1560:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1561:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_desc_owned_by_dma(DmaDesc *desc)
1562:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4061              		.loc 1 1562 0
 4062              		.cfi_startproc
 4063              		@ args = 0, pretend = 0, frame = 8
 4064              		@ frame_needed = 1, uses_anonymous_args = 0
 4065              		@ link register save eliminated.
 4066 0000 80B4     		push	{r7}
 4067              	.LCFI255:
 4068              		.cfi_def_cfa_offset 4
 4069              		.cfi_offset 7, -4
 4070 0002 83B0     		sub	sp, sp, #12
 4071              	.LCFI256:
 4072              		.cfi_def_cfa_offset 16
 4073 0004 00AF     		add	r7, sp, #0
 4074              	.LCFI257:
 4075              		.cfi_def_cfa_register 7
 4076 0006 7860     		str	r0, [r7, #4]
1563:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** return ((desc->status & DescOwnByDma) == DescOwnByDma );
 4077              		.loc 1 1563 0
 4078 0008 7B68     		ldr	r3, [r7, #4]
 4079 000a 1B68     		ldr	r3, [r3, #0]
 4080 000c 4FEAD373 		lsr	r3, r3, #31
 4081 0010 DBB2     		uxtb	r3, r3
1564:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4082              		.loc 1 1564 0
 4083 0012 1846     		mov	r0, r3
 4084 0014 07F10C07 		add	r7, r7, #12
 4085 0018 BD46     		mov	sp, r7
 4086 001a 80BC     		pop	{r7}
 4087 001c 7047     		bx	lr
 4088              		.cfi_endproc
 4089              	.LFE202:
 4091 001e 00BF     		.section	.text.synopGMAC_get_rx_desc_frame_length,"ax",%progbits
 4092              		.align	2
 4093              		.global	synopGMAC_get_rx_desc_frame_length
 4094              		.thumb
 4095              		.thumb_func
 4097              	synopGMAC_get_rx_desc_frame_length:
 4098              	.LFB203:
1565:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1566:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1567:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * returns the byte length of received frame including CRC.
1568:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This returns the no of bytes received in the received ethernet frame including CRC(FCS).
1569:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1570:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns the length of received frame lengths in bytes.
1571:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1572:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_get_rx_desc_frame_length(u32 status)
1573:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4099              		.loc 1 1573 0
 4100              		.cfi_startproc
 4101              		@ args = 0, pretend = 0, frame = 8
 4102              		@ frame_needed = 1, uses_anonymous_args = 0
 4103              		@ link register save eliminated.
 4104 0000 80B4     		push	{r7}
 4105              	.LCFI258:
 4106              		.cfi_def_cfa_offset 4
 4107              		.cfi_offset 7, -4
 4108 0002 83B0     		sub	sp, sp, #12
 4109              	.LCFI259:
 4110              		.cfi_def_cfa_offset 16
 4111 0004 00AF     		add	r7, sp, #0
 4112              	.LCFI260:
 4113              		.cfi_def_cfa_register 7
 4114 0006 7860     		str	r0, [r7, #4]
1574:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return ((status & DescFrameLengthMask) >> DescFrameLengthShift);
 4115              		.loc 1 1574 0
 4116 0008 7A68     		ldr	r2, [r7, #4]
 4117 000a 4FF00003 		mov	r3, #0
 4118 000e C3F6FF73 		movt	r3, 16383
 4119 0012 1340     		ands	r3, r3, r2
 4120 0014 4FEA1343 		lsr	r3, r3, #16
1575:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4121              		.loc 1 1575 0
 4122 0018 1846     		mov	r0, r3
 4123 001a 07F10C07 		add	r7, r7, #12
 4124 001e BD46     		mov	sp, r7
 4125 0020 80BC     		pop	{r7}
 4126 0022 7047     		bx	lr
 4127              		.cfi_endproc
 4128              	.LFE203:
 4130              		.section	.text.synopGMAC_is_desc_valid,"ax",%progbits
 4131              		.align	2
 4132              		.global	synopGMAC_is_desc_valid
 4133              		.thumb
 4134              		.thumb_func
 4136              	synopGMAC_is_desc_valid:
 4137              	.LFB204:
1576:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1577:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1578:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether the descriptor is valid
1579:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * if no errors such as CRC/Receive Error/Watchdog Timeout/Late collision/Giant Frame/Overflow/Des
1580:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * error the descritpor is said to be a valid descriptor.
1581:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1582:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return True if desc valid. false if error.
1583:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1584:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_desc_valid(u32 status)
1585:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4138              		.loc 1 1585 0
 4139              		.cfi_startproc
 4140              		@ args = 0, pretend = 0, frame = 8
 4141              		@ frame_needed = 1, uses_anonymous_args = 0
 4142              		@ link register save eliminated.
 4143 0000 80B4     		push	{r7}
 4144              	.LCFI261:
 4145              		.cfi_def_cfa_offset 4
 4146              		.cfi_offset 7, -4
 4147 0002 83B0     		sub	sp, sp, #12
 4148              	.LCFI262:
 4149              		.cfi_def_cfa_offset 16
 4150 0004 00AF     		add	r7, sp, #0
 4151              	.LCFI263:
 4152              		.cfi_def_cfa_register 7
 4153 0006 7860     		str	r0, [r7, #4]
1586:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return ((status & DescError) == 0);
 4154              		.loc 1 1586 0
 4155 0008 7B68     		ldr	r3, [r7, #4]
 4156 000a 03F40043 		and	r3, r3, #32768
 4157 000e 002B     		cmp	r3, #0
 4158 0010 14BF     		ite	ne
 4159 0012 0023     		movne	r3, #0
 4160 0014 0123     		moveq	r3, #1
 4161 0016 DBB2     		uxtb	r3, r3
1587:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4162              		.loc 1 1587 0
 4163 0018 1846     		mov	r0, r3
 4164 001a 07F10C07 		add	r7, r7, #12
 4165 001e BD46     		mov	sp, r7
 4166 0020 80BC     		pop	{r7}
 4167 0022 7047     		bx	lr
 4168              		.cfi_endproc
 4169              	.LFE204:
 4171              		.section	.text.synopGMAC_is_desc_empty,"ax",%progbits
 4172              		.align	2
 4173              		.global	synopGMAC_is_desc_empty
 4174              		.thumb
 4175              		.thumb_func
 4177              	synopGMAC_is_desc_empty:
 4178              	.LFB205:
1588:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1589:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1590:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether the descriptor is empty.
1591:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * If the buffer1 and buffer2 lengths are zero in ring mode descriptor is empty.
1592:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * In chain mode buffer2 length is 0 but buffer2 itself contains the next descriptor address.
1593:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1594:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if descriptor is empty, false if not empty.
1595:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1596:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_desc_empty(DmaDesc *desc)
1597:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4179              		.loc 1 1597 0
 4180              		.cfi_startproc
 4181              		@ args = 0, pretend = 0, frame = 8
 4182              		@ frame_needed = 1, uses_anonymous_args = 0
 4183              		@ link register save eliminated.
 4184 0000 80B4     		push	{r7}
 4185              	.LCFI264:
 4186              		.cfi_def_cfa_offset 4
 4187              		.cfi_offset 7, -4
 4188 0002 83B0     		sub	sp, sp, #12
 4189              	.LCFI265:
 4190              		.cfi_def_cfa_offset 16
 4191 0004 00AF     		add	r7, sp, #0
 4192              	.LCFI266:
 4193              		.cfi_def_cfa_register 7
 4194 0006 7860     		str	r0, [r7, #4]
1598:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	//if both the buffer1 length and buffer2 length are zero desc is empty
1599:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****     return(((desc->length  & DescSize1Mask) == 0) && ((desc->length  & DescSize2Mask) == 0) );
 4195              		.loc 1 1599 0
 4196 0008 7B68     		ldr	r3, [r7, #4]
 4197 000a 5B68     		ldr	r3, [r3, #4]
 4198 000c 4FEAC343 		lsl	r3, r3, #19
 4199 0010 4FEAD343 		lsr	r3, r3, #19
 4200 0014 002B     		cmp	r3, #0
 4201 0016 0BD1     		bne	.L193
 4202              		.loc 1 1599 0 is_stmt 0 discriminator 1
 4203 0018 7B68     		ldr	r3, [r7, #4]
 4204 001a 5A68     		ldr	r2, [r3, #4]
 4205 001c 4FF00003 		mov	r3, #0
 4206 0020 C1F6FF73 		movt	r3, 8191
 4207 0024 1340     		ands	r3, r3, r2
 4208 0026 002B     		cmp	r3, #0
 4209 0028 02D1     		bne	.L193
 4210              		.loc 1 1599 0 discriminator 3
 4211 002a 4FF00103 		mov	r3, #1
 4212 002e 01E0     		b	.L194
 4213              	.L193:
 4214              		.loc 1 1599 0 discriminator 2
 4215 0030 4FF00003 		mov	r3, #0
 4216              	.L194:
 4217              		.loc 1 1599 0 discriminator 4
 4218 0034 DBB2     		uxtb	r3, r3
1600:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4219              		.loc 1 1600 0 is_stmt 1 discriminator 4
 4220 0036 1846     		mov	r0, r3
 4221 0038 07F10C07 		add	r7, r7, #12
 4222 003c BD46     		mov	sp, r7
 4223 003e 80BC     		pop	{r7}
 4224 0040 7047     		bx	lr
 4225              		.cfi_endproc
 4226              	.LFE205:
 4228 0042 00BF     		.section	.text.synopGMAC_is_rx_desc_valid,"ax",%progbits
 4229              		.align	2
 4230              		.global	synopGMAC_is_rx_desc_valid
 4231              		.thumb
 4232              		.thumb_func
 4234              	synopGMAC_is_rx_desc_valid:
 4235              	.LFB206:
1601:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1602:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1603:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1604:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether the rx descriptor is valid.
1605:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * if rx descripor is not in error and complete frame is available in the same descriptor
1606:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1607:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if no error and first and last desc bits are set, otherwise it returns fal
1608:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1609:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_rx_desc_valid(u32 status)
1610:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4236              		.loc 1 1610 0
 4237              		.cfi_startproc
 4238              		@ args = 0, pretend = 0, frame = 8
 4239              		@ frame_needed = 1, uses_anonymous_args = 0
 4240              		@ link register save eliminated.
 4241 0000 80B4     		push	{r7}
 4242              	.LCFI267:
 4243              		.cfi_def_cfa_offset 4
 4244              		.cfi_offset 7, -4
 4245 0002 83B0     		sub	sp, sp, #12
 4246              	.LCFI268:
 4247              		.cfi_def_cfa_offset 16
 4248 0004 00AF     		add	r7, sp, #0
 4249              	.LCFI269:
 4250              		.cfi_def_cfa_register 7
 4251 0006 7860     		str	r0, [r7, #4]
1611:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return ((status & DescError) == 0) && ((status & DescRxFirst) == DescRxFirst) && ((status & DescRx
 4252              		.loc 1 1611 0
 4253 0008 7B68     		ldr	r3, [r7, #4]
 4254 000a 03F40043 		and	r3, r3, #32768
 4255 000e 002B     		cmp	r3, #0
 4256 0010 0CD1     		bne	.L197
 4257              		.loc 1 1611 0 is_stmt 0 discriminator 1
 4258 0012 7B68     		ldr	r3, [r7, #4]
 4259 0014 03F40073 		and	r3, r3, #512
 4260 0018 002B     		cmp	r3, #0
 4261 001a 07D0     		beq	.L197
 4262 001c 7B68     		ldr	r3, [r7, #4]
 4263 001e 03F48073 		and	r3, r3, #256
 4264 0022 002B     		cmp	r3, #0
 4265 0024 02D0     		beq	.L197
 4266              		.loc 1 1611 0 discriminator 3
 4267 0026 4FF00103 		mov	r3, #1
 4268 002a 01E0     		b	.L198
 4269              	.L197:
 4270              		.loc 1 1611 0 discriminator 2
 4271 002c 4FF00003 		mov	r3, #0
 4272              	.L198:
 4273              		.loc 1 1611 0 discriminator 4
 4274 0030 DBB2     		uxtb	r3, r3
1612:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4275              		.loc 1 1612 0 is_stmt 1 discriminator 4
 4276 0032 1846     		mov	r0, r3
 4277 0034 07F10C07 		add	r7, r7, #12
 4278 0038 BD46     		mov	sp, r7
 4279 003a 80BC     		pop	{r7}
 4280 003c 7047     		bx	lr
 4281              		.cfi_endproc
 4282              	.LFE206:
 4284 003e 00BF     		.section	.text.synopGMAC_is_tx_aborted,"ax",%progbits
 4285              		.align	2
 4286              		.global	synopGMAC_is_tx_aborted
 4287              		.thumb
 4288              		.thumb_func
 4290              	synopGMAC_is_tx_aborted:
 4291              	.LFB207:
1613:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1614:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1615:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether the tx is aborted due to collisions.
1616:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1617:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if collisions, else returns false.
1618:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1619:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_tx_aborted(u32 status)
1620:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4292              		.loc 1 1620 0
 4293              		.cfi_startproc
 4294              		@ args = 0, pretend = 0, frame = 8
 4295              		@ frame_needed = 1, uses_anonymous_args = 0
 4296              		@ link register save eliminated.
 4297 0000 80B4     		push	{r7}
 4298              	.LCFI270:
 4299              		.cfi_def_cfa_offset 4
 4300              		.cfi_offset 7, -4
 4301 0002 83B0     		sub	sp, sp, #12
 4302              	.LCFI271:
 4303              		.cfi_def_cfa_offset 16
 4304 0004 00AF     		add	r7, sp, #0
 4305              	.LCFI272:
 4306              		.cfi_def_cfa_register 7
 4307 0006 7860     		str	r0, [r7, #4]
1621:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return (((status & DescTxLateCollision) == DescTxLateCollision) | ((status & DescTxExcCollisions) 
 4308              		.loc 1 1621 0
 4309 0008 7B68     		ldr	r3, [r7, #4]
 4310 000a 03F40073 		and	r3, r3, #512
 4311 000e 002B     		cmp	r3, #0
 4312 0010 0CBF     		ite	eq
 4313 0012 0023     		moveq	r3, #0
 4314 0014 0123     		movne	r3, #1
 4315 0016 DAB2     		uxtb	r2, r3
 4316 0018 7B68     		ldr	r3, [r7, #4]
 4317 001a 03F48073 		and	r3, r3, #256
 4318 001e 002B     		cmp	r3, #0
 4319 0020 0CBF     		ite	eq
 4320 0022 0023     		moveq	r3, #0
 4321 0024 0123     		movne	r3, #1
 4322 0026 DBB2     		uxtb	r3, r3
 4323 0028 1343     		orrs	r3, r3, r2
 4324 002a DBB2     		uxtb	r3, r3
1622:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1623:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4325              		.loc 1 1623 0
 4326 002c 1846     		mov	r0, r3
 4327 002e 07F10C07 		add	r7, r7, #12
 4328 0032 BD46     		mov	sp, r7
 4329 0034 80BC     		pop	{r7}
 4330 0036 7047     		bx	lr
 4331              		.cfi_endproc
 4332              	.LFE207:
 4334              		.section	.text.synopGMAC_is_tx_carrier_error,"ax",%progbits
 4335              		.align	2
 4336              		.global	synopGMAC_is_tx_carrier_error
 4337              		.thumb
 4338              		.thumb_func
 4340              	synopGMAC_is_tx_carrier_error:
 4341              	.LFB208:
1624:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1625:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1626:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether the tx carrier error.
1627:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1628:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if carrier error occured, else returns falser.
1629:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1630:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_tx_carrier_error(u32 status)
1631:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4342              		.loc 1 1631 0
 4343              		.cfi_startproc
 4344              		@ args = 0, pretend = 0, frame = 8
 4345              		@ frame_needed = 1, uses_anonymous_args = 0
 4346              		@ link register save eliminated.
 4347 0000 80B4     		push	{r7}
 4348              	.LCFI273:
 4349              		.cfi_def_cfa_offset 4
 4350              		.cfi_offset 7, -4
 4351 0002 83B0     		sub	sp, sp, #12
 4352              	.LCFI274:
 4353              		.cfi_def_cfa_offset 16
 4354 0004 00AF     		add	r7, sp, #0
 4355              	.LCFI275:
 4356              		.cfi_def_cfa_register 7
 4357 0006 7860     		str	r0, [r7, #4]
1632:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return (((status & DescTxLostCarrier) == DescTxLostCarrier)  | ((status & DescTxNoCarrier) == Desc
 4358              		.loc 1 1632 0
 4359 0008 7B68     		ldr	r3, [r7, #4]
 4360 000a 03F40063 		and	r3, r3, #2048
 4361 000e 002B     		cmp	r3, #0
 4362 0010 0CBF     		ite	eq
 4363 0012 0023     		moveq	r3, #0
 4364 0014 0123     		movne	r3, #1
 4365 0016 DAB2     		uxtb	r2, r3
 4366 0018 7B68     		ldr	r3, [r7, #4]
 4367 001a 03F48063 		and	r3, r3, #1024
 4368 001e 002B     		cmp	r3, #0
 4369 0020 0CBF     		ite	eq
 4370 0022 0023     		moveq	r3, #0
 4371 0024 0123     		movne	r3, #1
 4372 0026 DBB2     		uxtb	r3, r3
 4373 0028 1343     		orrs	r3, r3, r2
 4374 002a DBB2     		uxtb	r3, r3
1633:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4375              		.loc 1 1633 0
 4376 002c 1846     		mov	r0, r3
 4377 002e 07F10C07 		add	r7, r7, #12
 4378 0032 BD46     		mov	sp, r7
 4379 0034 80BC     		pop	{r7}
 4380 0036 7047     		bx	lr
 4381              		.cfi_endproc
 4382              	.LFE208:
 4384              		.section	.text.synopGMAC_get_tx_collision_count,"ax",%progbits
 4385              		.align	2
 4386              		.global	synopGMAC_get_tx_collision_count
 4387              		.thumb
 4388              		.thumb_func
 4390              	synopGMAC_get_tx_collision_count:
 4391              	.LFB209:
1634:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1635:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1636:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1637:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Gives the transmission collision count.
1638:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * returns the transmission collision count indicating number of collisions occured before the fra
1639:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Make sure to check excessive collision didnot happen to ensure the count is valid.
1640:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1641:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns the count value of collision.
1642:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1643:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_get_tx_collision_count(u32 status)
1644:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4392              		.loc 1 1644 0
 4393              		.cfi_startproc
 4394              		@ args = 0, pretend = 0, frame = 8
 4395              		@ frame_needed = 1, uses_anonymous_args = 0
 4396              		@ link register save eliminated.
 4397 0000 80B4     		push	{r7}
 4398              	.LCFI276:
 4399              		.cfi_def_cfa_offset 4
 4400              		.cfi_offset 7, -4
 4401 0002 83B0     		sub	sp, sp, #12
 4402              	.LCFI277:
 4403              		.cfi_def_cfa_offset 16
 4404 0004 00AF     		add	r7, sp, #0
 4405              	.LCFI278:
 4406              		.cfi_def_cfa_register 7
 4407 0006 7860     		str	r0, [r7, #4]
1645:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return ((status & DescTxCollMask) >> DescTxCollShift);
 4408              		.loc 1 1645 0
 4409 0008 7B68     		ldr	r3, [r7, #4]
 4410 000a 03F07803 		and	r3, r3, #120
 4411 000e 4FEAD303 		lsr	r3, r3, #3
1646:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4412              		.loc 1 1646 0
 4413 0012 1846     		mov	r0, r3
 4414 0014 07F10C07 		add	r7, r7, #12
 4415 0018 BD46     		mov	sp, r7
 4416 001a 80BC     		pop	{r7}
 4417 001c 7047     		bx	lr
 4418              		.cfi_endproc
 4419              	.LFE209:
 4421 001e 00BF     		.section	.text.synopGMAC_is_exc_tx_collisions,"ax",%progbits
 4422              		.align	2
 4423              		.global	synopGMAC_is_exc_tx_collisions
 4424              		.thumb
 4425              		.thumb_func
 4427              	synopGMAC_is_exc_tx_collisions:
 4428              	.LFB210:
1647:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_is_exc_tx_collisions(u32 status)
1648:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4429              		.loc 1 1648 0
 4430              		.cfi_startproc
 4431              		@ args = 0, pretend = 0, frame = 8
 4432              		@ frame_needed = 1, uses_anonymous_args = 0
 4433              		@ link register save eliminated.
 4434 0000 80B4     		push	{r7}
 4435              	.LCFI279:
 4436              		.cfi_def_cfa_offset 4
 4437              		.cfi_offset 7, -4
 4438 0002 83B0     		sub	sp, sp, #12
 4439              	.LCFI280:
 4440              		.cfi_def_cfa_offset 16
 4441 0004 00AF     		add	r7, sp, #0
 4442              	.LCFI281:
 4443              		.cfi_def_cfa_register 7
 4444 0006 7860     		str	r0, [r7, #4]
1649:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return ((status & DescTxExcCollisions) == DescTxExcCollisions);
 4445              		.loc 1 1649 0
 4446 0008 7B68     		ldr	r3, [r7, #4]
 4447 000a 03F48073 		and	r3, r3, #256
 4448 000e 002B     		cmp	r3, #0
 4449 0010 0CBF     		ite	eq
 4450 0012 0023     		moveq	r3, #0
 4451 0014 0123     		movne	r3, #1
 4452 0016 DBB2     		uxtb	r3, r3
1650:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4453              		.loc 1 1650 0
 4454 0018 1846     		mov	r0, r3
 4455 001a 07F10C07 		add	r7, r7, #12
 4456 001e BD46     		mov	sp, r7
 4457 0020 80BC     		pop	{r7}
 4458 0022 7047     		bx	lr
 4459              		.cfi_endproc
 4460              	.LFE210:
 4462              		.section	.text.synopGMAC_is_rx_frame_damaged,"ax",%progbits
 4463              		.align	2
 4464              		.global	synopGMAC_is_rx_frame_damaged
 4465              		.thumb
 4466              		.thumb_func
 4468              	synopGMAC_is_rx_frame_damaged:
 4469              	.LFB211:
1651:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1652:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1653:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1654:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Check for damaged frame due to overflow or collision.
1655:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Retruns true if rx frame was damaged due to buffer overflow in MTL or late collision in half du
1656:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1657:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if error else returns false.
1658:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1659:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_rx_frame_damaged(u32 status)
1660:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4470              		.loc 1 1660 0
 4471              		.cfi_startproc
 4472              		@ args = 0, pretend = 0, frame = 8
 4473              		@ frame_needed = 1, uses_anonymous_args = 0
 4474              		@ link register save eliminated.
 4475 0000 80B4     		push	{r7}
 4476              	.LCFI282:
 4477              		.cfi_def_cfa_offset 4
 4478              		.cfi_offset 7, -4
 4479 0002 83B0     		sub	sp, sp, #12
 4480              	.LCFI283:
 4481              		.cfi_def_cfa_offset 16
 4482 0004 00AF     		add	r7, sp, #0
 4483              	.LCFI284:
 4484              		.cfi_def_cfa_register 7
 4485 0006 7860     		str	r0, [r7, #4]
1661:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //bool synopGMAC_dma_rx_collisions(u32 status)
1662:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return (((status & DescRxDamaged) == DescRxDamaged) | ((status & DescRxCollision) == DescRxCollisi
 4486              		.loc 1 1662 0
 4487 0008 7B68     		ldr	r3, [r7, #4]
 4488 000a 03F40063 		and	r3, r3, #2048
 4489 000e 002B     		cmp	r3, #0
 4490 0010 0CBF     		ite	eq
 4491 0012 0023     		moveq	r3, #0
 4492 0014 0123     		movne	r3, #1
 4493 0016 DAB2     		uxtb	r2, r3
 4494 0018 7B68     		ldr	r3, [r7, #4]
 4495 001a 03F04003 		and	r3, r3, #64
 4496 001e 002B     		cmp	r3, #0
 4497 0020 0CBF     		ite	eq
 4498 0022 0023     		moveq	r3, #0
 4499 0024 0123     		movne	r3, #1
 4500 0026 DBB2     		uxtb	r3, r3
 4501 0028 1343     		orrs	r3, r3, r2
 4502 002a DBB2     		uxtb	r3, r3
1663:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4503              		.loc 1 1663 0
 4504 002c 1846     		mov	r0, r3
 4505 002e 07F10C07 		add	r7, r7, #12
 4506 0032 BD46     		mov	sp, r7
 4507 0034 80BC     		pop	{r7}
 4508 0036 7047     		bx	lr
 4509              		.cfi_endproc
 4510              	.LFE211:
 4512              		.section	.text.synopGMAC_is_rx_frame_collision,"ax",%progbits
 4513              		.align	2
 4514              		.global	synopGMAC_is_rx_frame_collision
 4515              		.thumb
 4516              		.thumb_func
 4518              	synopGMAC_is_rx_frame_collision:
 4519              	.LFB212:
1664:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1665:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1666:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Check for damaged frame due to collision.
1667:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Retruns true if rx frame was damaged due to late collision in half duplex mode.
1668:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1669:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if error else returns false.
1670:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1671:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_rx_frame_collision(u32 status)
1672:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4520              		.loc 1 1672 0
 4521              		.cfi_startproc
 4522              		@ args = 0, pretend = 0, frame = 8
 4523              		@ frame_needed = 1, uses_anonymous_args = 0
 4524              		@ link register save eliminated.
 4525 0000 80B4     		push	{r7}
 4526              	.LCFI285:
 4527              		.cfi_def_cfa_offset 4
 4528              		.cfi_offset 7, -4
 4529 0002 83B0     		sub	sp, sp, #12
 4530              	.LCFI286:
 4531              		.cfi_def_cfa_offset 16
 4532 0004 00AF     		add	r7, sp, #0
 4533              	.LCFI287:
 4534              		.cfi_def_cfa_register 7
 4535 0006 7860     		str	r0, [r7, #4]
1673:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //bool synopGMAC_dma_rx_collisions(u32 status)
1674:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return ((status & DescRxCollision) == DescRxCollision);
 4536              		.loc 1 1674 0
 4537 0008 7B68     		ldr	r3, [r7, #4]
 4538 000a 03F04003 		and	r3, r3, #64
 4539 000e 002B     		cmp	r3, #0
 4540 0010 0CBF     		ite	eq
 4541 0012 0023     		moveq	r3, #0
 4542 0014 0123     		movne	r3, #1
 4543 0016 DBB2     		uxtb	r3, r3
1675:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4544              		.loc 1 1675 0
 4545 0018 1846     		mov	r0, r3
 4546 001a 07F10C07 		add	r7, r7, #12
 4547 001e BD46     		mov	sp, r7
 4548 0020 80BC     		pop	{r7}
 4549 0022 7047     		bx	lr
 4550              		.cfi_endproc
 4551              	.LFE212:
 4553              		.section	.text.synopGMAC_is_rx_crc,"ax",%progbits
 4554              		.align	2
 4555              		.global	synopGMAC_is_rx_crc
 4556              		.thumb
 4557              		.thumb_func
 4559              	synopGMAC_is_rx_crc:
 4560              	.LFB213:
1676:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1677:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1678:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Check for receive CRC error.
1679:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Retruns true if rx frame CRC error occured.
1680:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1681:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if error else returns false.
1682:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1683:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_rx_crc(u32 status)
1684:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4561              		.loc 1 1684 0
 4562              		.cfi_startproc
 4563              		@ args = 0, pretend = 0, frame = 8
 4564              		@ frame_needed = 1, uses_anonymous_args = 0
 4565              		@ link register save eliminated.
 4566 0000 80B4     		push	{r7}
 4567              	.LCFI288:
 4568              		.cfi_def_cfa_offset 4
 4569              		.cfi_offset 7, -4
 4570 0002 83B0     		sub	sp, sp, #12
 4571              	.LCFI289:
 4572              		.cfi_def_cfa_offset 16
 4573 0004 00AF     		add	r7, sp, #0
 4574              	.LCFI290:
 4575              		.cfi_def_cfa_register 7
 4576 0006 7860     		str	r0, [r7, #4]
1685:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //u32 synopGMAC_dma_rx_crc(u32 status)
1686:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return ((status & DescRxCrc) == DescRxCrc);
 4577              		.loc 1 1686 0
 4578 0008 7B68     		ldr	r3, [r7, #4]
 4579 000a 03F00203 		and	r3, r3, #2
 4580 000e 002B     		cmp	r3, #0
 4581 0010 0CBF     		ite	eq
 4582 0012 0023     		moveq	r3, #0
 4583 0014 0123     		movne	r3, #1
 4584 0016 DBB2     		uxtb	r3, r3
1687:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4585              		.loc 1 1687 0
 4586 0018 1846     		mov	r0, r3
 4587 001a 07F10C07 		add	r7, r7, #12
 4588 001e BD46     		mov	sp, r7
 4589 0020 80BC     		pop	{r7}
 4590 0022 7047     		bx	lr
 4591              		.cfi_endproc
 4592              	.LFE213:
 4594              		.section	.text.synopGMAC_is_frame_dribbling_errors,"ax",%progbits
 4595              		.align	2
 4596              		.global	synopGMAC_is_frame_dribbling_errors
 4597              		.thumb
 4598              		.thumb_func
 4600              	synopGMAC_is_frame_dribbling_errors:
 4601              	.LFB214:
1688:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1689:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1690:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Indicates rx frame has non integer multiple of bytes. (odd nibbles).
1691:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Retruns true if dribbling error in rx frame.
1692:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1693:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if error else returns false.
1694:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1695:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_frame_dribbling_errors(u32 status)
1696:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4602              		.loc 1 1696 0
 4603              		.cfi_startproc
 4604              		@ args = 0, pretend = 0, frame = 8
 4605              		@ frame_needed = 1, uses_anonymous_args = 0
 4606              		@ link register save eliminated.
 4607 0000 80B4     		push	{r7}
 4608              	.LCFI291:
 4609              		.cfi_def_cfa_offset 4
 4610              		.cfi_offset 7, -4
 4611 0002 83B0     		sub	sp, sp, #12
 4612              	.LCFI292:
 4613              		.cfi_def_cfa_offset 16
 4614 0004 00AF     		add	r7, sp, #0
 4615              	.LCFI293:
 4616              		.cfi_def_cfa_register 7
 4617 0006 7860     		str	r0, [r7, #4]
1697:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //u32 synopGMAC_dma_rx_frame_errors(u32 status)
1698:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return ((status & DescRxDribbling) == DescRxDribbling);
 4618              		.loc 1 1698 0
 4619 0008 7B68     		ldr	r3, [r7, #4]
 4620 000a 03F00403 		and	r3, r3, #4
 4621 000e 002B     		cmp	r3, #0
 4622 0010 0CBF     		ite	eq
 4623 0012 0023     		moveq	r3, #0
 4624 0014 0123     		movne	r3, #1
 4625 0016 DBB2     		uxtb	r3, r3
1699:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4626              		.loc 1 1699 0
 4627 0018 1846     		mov	r0, r3
 4628 001a 07F10C07 		add	r7, r7, #12
 4629 001e BD46     		mov	sp, r7
 4630 0020 80BC     		pop	{r7}
 4631 0022 7047     		bx	lr
 4632              		.cfi_endproc
 4633              	.LFE214:
 4635              		.section	.text.synopGMAC_is_rx_frame_length_errors,"ax",%progbits
 4636              		.align	2
 4637              		.global	synopGMAC_is_rx_frame_length_errors
 4638              		.thumb
 4639              		.thumb_func
 4641              	synopGMAC_is_rx_frame_length_errors:
 4642              	.LFB215:
1700:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1701:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1702:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Indicates error in rx frame length.
1703:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Retruns true if received frame length doesnot match with the length field
1704:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1705:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if error else returns false.
1706:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1707:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_rx_frame_length_errors(u32 status)
1708:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4643              		.loc 1 1708 0
 4644              		.cfi_startproc
 4645              		@ args = 0, pretend = 0, frame = 8
 4646              		@ frame_needed = 1, uses_anonymous_args = 0
 4647              		@ link register save eliminated.
 4648 0000 80B4     		push	{r7}
 4649              	.LCFI294:
 4650              		.cfi_def_cfa_offset 4
 4651              		.cfi_offset 7, -4
 4652 0002 83B0     		sub	sp, sp, #12
 4653              	.LCFI295:
 4654              		.cfi_def_cfa_offset 16
 4655 0004 00AF     		add	r7, sp, #0
 4656              	.LCFI296:
 4657              		.cfi_def_cfa_register 7
 4658 0006 7860     		str	r0, [r7, #4]
1709:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //u32 synopGMAC_dma_rx_length_errors(u32 status)
1710:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((status & DescRxLengthError) == DescRxLengthError);
 4659              		.loc 1 1710 0
 4660 0008 7B68     		ldr	r3, [r7, #4]
 4661 000a 03F48053 		and	r3, r3, #4096
 4662 000e 002B     		cmp	r3, #0
 4663 0010 0CBF     		ite	eq
 4664 0012 0023     		moveq	r3, #0
 4665 0014 0123     		movne	r3, #1
 4666 0016 DBB2     		uxtb	r3, r3
1711:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4667              		.loc 1 1711 0
 4668 0018 1846     		mov	r0, r3
 4669 001a 07F10C07 		add	r7, r7, #12
 4670 001e BD46     		mov	sp, r7
 4671 0020 80BC     		pop	{r7}
 4672 0022 7047     		bx	lr
 4673              		.cfi_endproc
 4674              	.LFE215:
 4676              		.section	.text.synopGMAC_is_last_rx_desc,"ax",%progbits
 4677              		.align	2
 4678              		.global	synopGMAC_is_last_rx_desc
 4679              		.thumb
 4680              		.thumb_func
 4682              	synopGMAC_is_last_rx_desc:
 4683              	.LFB216:
1712:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1713:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1714:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether this rx descriptor is last rx descriptor.
1715:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This returns true if it is last descriptor either in ring mode or in chain mode.
1716:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to devic structure.
1717:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1718:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if it is last descriptor, false if not.
1719:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note This function should not be called before initializing the descriptor using synopGMAC_des
1720:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1721:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_last_rx_desc(synopGMACdevice * gmacdev,DmaDesc *desc)
1722:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4684              		.loc 1 1722 0
 4685              		.cfi_startproc
 4686              		@ args = 0, pretend = 0, frame = 8
 4687              		@ frame_needed = 1, uses_anonymous_args = 0
 4688              		@ link register save eliminated.
 4689 0000 80B4     		push	{r7}
 4690              	.LCFI297:
 4691              		.cfi_def_cfa_offset 4
 4692              		.cfi_offset 7, -4
 4693 0002 83B0     		sub	sp, sp, #12
 4694              	.LCFI298:
 4695              		.cfi_def_cfa_offset 16
 4696 0004 00AF     		add	r7, sp, #0
 4697              	.LCFI299:
 4698              		.cfi_def_cfa_register 7
 4699 0006 7860     		str	r0, [r7, #4]
 4700 0008 3960     		str	r1, [r7, #0]
1723:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //bool synopGMAC_is_last_desc(DmaDesc *desc)
1724:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** return (((desc->length & RxDescEndOfRing) == RxDescEndOfRing) || ((u32)gmacdev->RxDesc == desc->dat
 4701              		.loc 1 1724 0
 4702 000a 3B68     		ldr	r3, [r7, #0]
 4703 000c 5B68     		ldr	r3, [r3, #4]
 4704 000e 03F40043 		and	r3, r3, #32768
 4705 0012 002B     		cmp	r3, #0
 4706 0014 06D1     		bne	.L219
 4707              		.loc 1 1724 0 is_stmt 0 discriminator 2
 4708 0016 7B68     		ldr	r3, [r7, #4]
 4709 0018 DB69     		ldr	r3, [r3, #28]
 4710 001a 1A46     		mov	r2, r3
 4711 001c 3B68     		ldr	r3, [r7, #0]
 4712 001e 5B6A     		ldr	r3, [r3, #36]
 4713 0020 9A42     		cmp	r2, r3
 4714 0022 02D1     		bne	.L220
 4715              	.L219:
 4716              		.loc 1 1724 0 discriminator 1
 4717 0024 4FF00103 		mov	r3, #1
 4718 0028 01E0     		b	.L221
 4719              	.L220:
 4720              		.loc 1 1724 0 discriminator 3
 4721 002a 4FF00003 		mov	r3, #0
 4722              	.L221:
 4723              		.loc 1 1724 0 discriminator 4
 4724 002e DBB2     		uxtb	r3, r3
1725:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4725              		.loc 1 1725 0 is_stmt 1 discriminator 4
 4726 0030 1846     		mov	r0, r3
 4727 0032 07F10C07 		add	r7, r7, #12
 4728 0036 BD46     		mov	sp, r7
 4729 0038 80BC     		pop	{r7}
 4730 003a 7047     		bx	lr
 4731              		.cfi_endproc
 4732              	.LFE216:
 4734              		.section	.text.synopGMAC_is_last_tx_desc,"ax",%progbits
 4735              		.align	2
 4736              		.global	synopGMAC_is_last_tx_desc
 4737              		.thumb
 4738              		.thumb_func
 4740              	synopGMAC_is_last_tx_desc:
 4741              	.LFB217:
1726:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1727:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1728:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether this tx descriptor is last tx descriptor.
1729:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This returns true if it is last descriptor either in ring mode or in chain mode.
1730:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to devic structure.
1731:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1732:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if it is last descriptor, false if not.
1733:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note This function should not be called before initializing the descriptor using synopGMAC_des
1734:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1735:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_last_tx_desc(synopGMACdevice * gmacdev,DmaDesc *desc)
1736:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4742              		.loc 1 1736 0
 4743              		.cfi_startproc
 4744              		@ args = 0, pretend = 0, frame = 8
 4745              		@ frame_needed = 1, uses_anonymous_args = 0
 4746              		@ link register save eliminated.
 4747 0000 80B4     		push	{r7}
 4748              	.LCFI300:
 4749              		.cfi_def_cfa_offset 4
 4750              		.cfi_offset 7, -4
 4751 0002 83B0     		sub	sp, sp, #12
 4752              	.LCFI301:
 4753              		.cfi_def_cfa_offset 16
 4754 0004 00AF     		add	r7, sp, #0
 4755              	.LCFI302:
 4756              		.cfi_def_cfa_register 7
 4757 0006 7860     		str	r0, [r7, #4]
 4758 0008 3960     		str	r1, [r7, #0]
1737:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //bool synopGMAC_is_last_desc(DmaDesc *desc)
1738:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC
1739:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return (((desc->status & TxDescEndOfRing) == TxDescEndOfRing) || ((u32)gmacdev->TxDesc == desc->da
 4759              		.loc 1 1739 0
 4760 000a 3B68     		ldr	r3, [r7, #0]
 4761 000c 1B68     		ldr	r3, [r3, #0]
 4762 000e 03F40013 		and	r3, r3, #2097152
 4763 0012 002B     		cmp	r3, #0
 4764 0014 06D1     		bne	.L224
 4765              		.loc 1 1739 0 is_stmt 0 discriminator 2
 4766 0016 7B68     		ldr	r3, [r7, #4]
 4767 0018 9B69     		ldr	r3, [r3, #24]
 4768 001a 1A46     		mov	r2, r3
 4769 001c 3B68     		ldr	r3, [r7, #0]
 4770 001e 5B6A     		ldr	r3, [r3, #36]
 4771 0020 9A42     		cmp	r2, r3
 4772 0022 02D1     		bne	.L225
 4773              	.L224:
 4774              		.loc 1 1739 0 discriminator 1
 4775 0024 4FF00103 		mov	r3, #1
 4776 0028 01E0     		b	.L226
 4777              	.L225:
 4778              		.loc 1 1739 0 discriminator 3
 4779 002a 4FF00003 		mov	r3, #0
 4780              	.L226:
 4781              		.loc 1 1739 0 discriminator 4
 4782 002e DBB2     		uxtb	r3, r3
1740:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
1741:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return (((desc->length & TxDescEndOfRing) == TxDescEndOfRing) || ((u32)gmacdev->TxDesc == desc->da
1742:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
1743:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4783              		.loc 1 1743 0 is_stmt 1 discriminator 4
 4784 0030 1846     		mov	r0, r3
 4785 0032 07F10C07 		add	r7, r7, #12
 4786 0036 BD46     		mov	sp, r7
 4787 0038 80BC     		pop	{r7}
 4788 003a 7047     		bx	lr
 4789              		.cfi_endproc
 4790              	.LFE217:
 4792              		.section	.text.synopGMAC_is_rx_desc_chained,"ax",%progbits
 4793              		.align	2
 4794              		.global	synopGMAC_is_rx_desc_chained
 4795              		.thumb
 4796              		.thumb_func
 4798              	synopGMAC_is_rx_desc_chained:
 4799              	.LFB218:
1744:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1745:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1746:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether this rx descriptor is in chain mode.
1747:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This returns true if it is this descriptor is in chain mode.
1748:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1749:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if chain mode is set, false if not.
1750:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1751:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_rx_desc_chained(DmaDesc * desc)
1752:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4800              		.loc 1 1752 0
 4801              		.cfi_startproc
 4802              		@ args = 0, pretend = 0, frame = 8
 4803              		@ frame_needed = 1, uses_anonymous_args = 0
 4804              		@ link register save eliminated.
 4805 0000 80B4     		push	{r7}
 4806              	.LCFI303:
 4807              		.cfi_def_cfa_offset 4
 4808              		.cfi_offset 7, -4
 4809 0002 83B0     		sub	sp, sp, #12
 4810              	.LCFI304:
 4811              		.cfi_def_cfa_offset 16
 4812 0004 00AF     		add	r7, sp, #0
 4813              	.LCFI305:
 4814              		.cfi_def_cfa_register 7
 4815 0006 7860     		str	r0, [r7, #4]
1753:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((desc->length & RxDescChain) == RxDescChain);             
 4816              		.loc 1 1753 0
 4817 0008 7B68     		ldr	r3, [r7, #4]
 4818 000a 5B68     		ldr	r3, [r3, #4]
 4819 000c 03F48043 		and	r3, r3, #16384
 4820 0010 002B     		cmp	r3, #0
 4821 0012 0CBF     		ite	eq
 4822 0014 0023     		moveq	r3, #0
 4823 0016 0123     		movne	r3, #1
 4824 0018 DBB2     		uxtb	r3, r3
1754:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4825              		.loc 1 1754 0
 4826 001a 1846     		mov	r0, r3
 4827 001c 07F10C07 		add	r7, r7, #12
 4828 0020 BD46     		mov	sp, r7
 4829 0022 80BC     		pop	{r7}
 4830 0024 7047     		bx	lr
 4831              		.cfi_endproc
 4832              	.LFE218:
 4834 0026 00BF     		.section	.text.synopGMAC_is_tx_desc_chained,"ax",%progbits
 4835              		.align	2
 4836              		.global	synopGMAC_is_tx_desc_chained
 4837              		.thumb
 4838              		.thumb_func
 4840              	synopGMAC_is_tx_desc_chained:
 4841              	.LFB219:
1755:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1756:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1757:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether this tx descriptor is in chain mode.
1758:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This returns true if it is this descriptor is in chain mode.
1759:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to DmaDesc structure.
1760:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if chain mode is set, false if not.
1761:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1762:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_tx_desc_chained(DmaDesc * desc)
1763:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4842              		.loc 1 1763 0
 4843              		.cfi_startproc
 4844              		@ args = 0, pretend = 0, frame = 8
 4845              		@ frame_needed = 1, uses_anonymous_args = 0
 4846              		@ link register save eliminated.
 4847 0000 80B4     		push	{r7}
 4848              	.LCFI306:
 4849              		.cfi_def_cfa_offset 4
 4850              		.cfi_offset 7, -4
 4851 0002 83B0     		sub	sp, sp, #12
 4852              	.LCFI307:
 4853              		.cfi_def_cfa_offset 16
 4854 0004 00AF     		add	r7, sp, #0
 4855              	.LCFI308:
 4856              		.cfi_def_cfa_register 7
 4857 0006 7860     		str	r0, [r7, #4]
1764:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC
1765:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((desc->status & TxDescChain) == TxDescChain);             
 4858              		.loc 1 1765 0
 4859 0008 7B68     		ldr	r3, [r7, #4]
 4860 000a 1B68     		ldr	r3, [r3, #0]
 4861 000c 03F48013 		and	r3, r3, #1048576
 4862 0010 002B     		cmp	r3, #0
 4863 0012 0CBF     		ite	eq
 4864 0014 0023     		moveq	r3, #0
 4865 0016 0123     		movne	r3, #1
 4866 0018 DBB2     		uxtb	r3, r3
1766:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
1767:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((desc->length & TxDescChain) == TxDescChain);             
1768:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
1769:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4867              		.loc 1 1769 0
 4868 001a 1846     		mov	r0, r3
 4869 001c 07F10C07 		add	r7, r7, #12
 4870 0020 BD46     		mov	sp, r7
 4871 0022 80BC     		pop	{r7}
 4872 0024 7047     		bx	lr
 4873              		.cfi_endproc
 4874              	.LFE219:
 4876 0026 00BF     		.section	.text.synopGMAC_get_desc_data,"ax",%progbits
 4877              		.align	2
 4878              		.global	synopGMAC_get_desc_data
 4879              		.thumb
 4880              		.thumb_func
 4882              	synopGMAC_get_desc_data:
 4883              	.LFB220:
1770:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1771:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1772:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Driver Api to get the descriptor field information.
1773:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This returns the status, dma-able address of buffer1, the length of buffer1, virtual address of
1774:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * dma-able address of buffer2, length of buffer2, virtural adddress of buffer2.
1775:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in]  pointer to DmaDesc structure.
1776:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] pointer to status field fo descriptor.
1777:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] dma-able address of buffer1.
1778:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] length of buffer1.
1779:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual address of buffer1.
1780:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] dma-able address of buffer2.
1781:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] length of buffer2.
1782:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual address of buffer2.
1783:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
1784:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1785:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_get_desc_data(DmaDesc * desc, u32 * Status, u32 * Buffer1, u32 * Length1, u32 * Data
1786:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4884              		.loc 1 1786 0
 4885              		.cfi_startproc
 4886              		@ args = 16, pretend = 0, frame = 16
 4887              		@ frame_needed = 1, uses_anonymous_args = 0
 4888              		@ link register save eliminated.
 4889 0000 80B4     		push	{r7}
 4890              	.LCFI309:
 4891              		.cfi_def_cfa_offset 4
 4892              		.cfi_offset 7, -4
 4893 0002 85B0     		sub	sp, sp, #20
 4894              	.LCFI310:
 4895              		.cfi_def_cfa_offset 24
 4896 0004 00AF     		add	r7, sp, #0
 4897              	.LCFI311:
 4898              		.cfi_def_cfa_register 7
 4899 0006 F860     		str	r0, [r7, #12]
 4900 0008 B960     		str	r1, [r7, #8]
 4901 000a 7A60     		str	r2, [r7, #4]
 4902 000c 3B60     		str	r3, [r7, #0]
1787:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1788:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Status != 0)   
 4903              		.loc 1 1788 0
 4904 000e BB68     		ldr	r3, [r7, #8]
 4905 0010 002B     		cmp	r3, #0
 4906 0012 03D0     		beq	.L233
1789:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Status = desc->status;
 4907              		.loc 1 1789 0
 4908 0014 FB68     		ldr	r3, [r7, #12]
 4909 0016 1A68     		ldr	r2, [r3, #0]
 4910 0018 BB68     		ldr	r3, [r7, #8]
 4911 001a 1A60     		str	r2, [r3, #0]
 4912              	.L233:
1790:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1791:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer1 != 0)
 4913              		.loc 1 1791 0
 4914 001c 7B68     		ldr	r3, [r7, #4]
 4915 001e 002B     		cmp	r3, #0
 4916 0020 03D0     		beq	.L234
1792:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer1 = desc->buffer1;
 4917              		.loc 1 1792 0
 4918 0022 FB68     		ldr	r3, [r7, #12]
 4919 0024 9A68     		ldr	r2, [r3, #8]
 4920 0026 7B68     		ldr	r3, [r7, #4]
 4921 0028 1A60     		str	r2, [r3, #0]
 4922              	.L234:
1793:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length1 != 0)
 4923              		.loc 1 1793 0
 4924 002a 3B68     		ldr	r3, [r7, #0]
 4925 002c 002B     		cmp	r3, #0
 4926 002e 07D0     		beq	.L235
1794:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length1 = (desc->length & DescSize1Mask) >> DescSize1Shift;
 4927              		.loc 1 1794 0
 4928 0030 FB68     		ldr	r3, [r7, #12]
 4929 0032 5B68     		ldr	r3, [r3, #4]
 4930 0034 4FEAC343 		lsl	r3, r3, #19
 4931 0038 4FEAD343 		lsr	r3, r3, #19
 4932 003c 3A68     		ldr	r2, [r7, #0]
 4933 003e 1360     		str	r3, [r2, #0]
 4934              	.L235:
1795:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
 4935              		.loc 1 1795 0
 4936 0040 BB69     		ldr	r3, [r7, #24]
 4937 0042 002B     		cmp	r3, #0
 4938 0044 03D0     		beq	.L236
1796:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data1 = desc->data1;
 4939              		.loc 1 1796 0
 4940 0046 FB68     		ldr	r3, [r7, #12]
 4941 0048 1A6A     		ldr	r2, [r3, #32]
 4942 004a BB69     		ldr	r3, [r7, #24]
 4943 004c 1A60     		str	r2, [r3, #0]
 4944              	.L236:
1797:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1798:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer2 != 0)
 4945              		.loc 1 1798 0
 4946 004e FB69     		ldr	r3, [r7, #28]
 4947 0050 002B     		cmp	r3, #0
 4948 0052 03D0     		beq	.L237
1799:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer2 = desc->buffer2;
 4949              		.loc 1 1799 0
 4950 0054 FB68     		ldr	r3, [r7, #12]
 4951 0056 DA68     		ldr	r2, [r3, #12]
 4952 0058 FB69     		ldr	r3, [r7, #28]
 4953 005a 1A60     		str	r2, [r3, #0]
 4954              	.L237:
1800:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length2 != 0)
 4955              		.loc 1 1800 0
 4956 005c 3B6A     		ldr	r3, [r7, #32]
 4957 005e 002B     		cmp	r3, #0
 4958 0060 0AD0     		beq	.L238
1801:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length2 = (desc->length & DescSize2Mask) >> DescSize2Shift;
 4959              		.loc 1 1801 0
 4960 0062 FB68     		ldr	r3, [r7, #12]
 4961 0064 5A68     		ldr	r2, [r3, #4]
 4962 0066 4FF00003 		mov	r3, #0
 4963 006a C1F6FF73 		movt	r3, 8191
 4964 006e 1340     		ands	r3, r3, r2
 4965 0070 4FEA1342 		lsr	r2, r3, #16
 4966 0074 3B6A     		ldr	r3, [r7, #32]
 4967 0076 1A60     		str	r2, [r3, #0]
 4968              	.L238:
1802:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
 4969              		.loc 1 1802 0
 4970 0078 BB69     		ldr	r3, [r7, #24]
 4971 007a 002B     		cmp	r3, #0
 4972 007c 03D0     		beq	.L241
1803:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data2 = desc->data2;
 4973              		.loc 1 1803 0
 4974 007e FB68     		ldr	r3, [r7, #12]
 4975 0080 5A6A     		ldr	r2, [r3, #36]
 4976 0082 7B6A     		ldr	r3, [r7, #36]
 4977 0084 1A60     		str	r2, [r3, #0]
 4978              	.L241:
1804:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1805:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 4979              		.loc 1 1805 0
 4980 0086 00BF     		nop
 4981              	.L232:
1806:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1807:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 4982              		.loc 1 1807 0
 4983 0088 07F11407 		add	r7, r7, #20
 4984 008c BD46     		mov	sp, r7
 4985 008e 80BC     		pop	{r7}
 4986 0090 7047     		bx	lr
 4987              		.cfi_endproc
 4988              	.LFE220:
 4990 0092 00BF     		.section	.text.synopGMAC_get_tx_qptr,"ax",%progbits
 4991              		.align	2
 4992              		.global	synopGMAC_get_tx_qptr
 4993              		.thumb
 4994              		.thumb_func
 4996              	synopGMAC_get_tx_qptr:
 4997              	.LFB221:
1808:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef AVB_SUPPORT
1809:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_set_desc_data(DmaDesc *txdesc, u32 Status, u32 Buffer1, u32 Length1, u32 Data1, u32 
1810:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
1811:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //		TR("s:%08x B1:%08x L1:%08x D1: %08x B2: %08x L2: %08x D2: %08x\n",Status,Buffer1,Length1,Data1,
1812:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1813:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->length = (((Length1 <<DescSize1Shift) & DescSize1Mask) | ((Length2 <<DescSize2Shift) & De
1814:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		#ifdef ENH_DESC
1815:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status |=  (DescTxFirst | DescTxLast | DescTxIntEnable | Status ); //ENH_DESC
1816:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		#else
1817:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->length |=  (DescTxFirst | DescTxLast | DescTxIntEnable ); //Its always assumed that compl
1818:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		#endif
1819:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1820:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	 	txdesc->buffer1 = Buffer1;
1821:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->data1 = Data1;
1822:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1823:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	 	txdesc->buffer2 = Buffer2;
1824:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->data2 = Data2;
1825:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1826:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		#ifdef ENH_DESC	
1827:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status |= DescOwnByDma;//ENH_DESC
1828:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		#else
1829:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status = DescOwnByDma;
1830:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		#endif
1831:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
1832:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
1833:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		
1834:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC_8W
1835:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1836:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function is defined two times. Once when the code is compiled for ENHANCED DESCRIPTOR SUPP
1837:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Get the index and address of Tx desc.
1838:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This api is same for both ring mode and chain mode.
1839:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function tracks the tx descriptor the DMA just closed after the transmission of data from 
1840:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * over. This returns the descriptor fields to the caller.
1841:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1842:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] status field of the descriptor.
1843:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] Dma-able buffer1 pointer.
1844:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] length of buffer1 (Max is 2048).
1845:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual pointer for buffer1.
1846:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] Dma-able buffer2 pointer.
1847:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] length of buffer2 (Max is 2048).
1848:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual pointer for buffer2.
1849:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] u32 data indicating whether the descriptor is in ring mode or chain mode.
1850:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns present tx descriptor index on success. Negative value if error.
1851:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1852:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_get_tx_qptr(synopGMACdevice * gmacdev, u32 * Status, u32 * Buffer1, u32 * Length1, u3
1853:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                           u32 * Ext_Status, u32 * Time_Stamp_High, u32 * Time_Stamp_Low)
1854:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 4998              		.loc 1 1854 0
 4999              		.cfi_startproc
 5000              		@ args = 28, pretend = 0, frame = 24
 5001              		@ frame_needed = 1, uses_anonymous_args = 0
 5002 0000 80B5     		push	{r7, lr}
 5003              	.LCFI312:
 5004              		.cfi_def_cfa_offset 8
 5005              		.cfi_offset 7, -8
 5006              		.cfi_offset 14, -4
 5007 0002 86B0     		sub	sp, sp, #24
 5008              	.LCFI313:
 5009              		.cfi_def_cfa_offset 32
 5010 0004 00AF     		add	r7, sp, #0
 5011              	.LCFI314:
 5012              		.cfi_def_cfa_register 7
 5013 0006 F860     		str	r0, [r7, #12]
 5014 0008 B960     		str	r1, [r7, #8]
 5015 000a 7A60     		str	r2, [r7, #4]
 5016 000c 3B60     		str	r3, [r7, #0]
1855:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32  txover      = gmacdev->TxBusy;
 5017              		.loc 1 1855 0
 5018 000e FB68     		ldr	r3, [r7, #12]
 5019 0010 1B6B     		ldr	r3, [r3, #48]
 5020 0012 7B61     		str	r3, [r7, #20]
1856:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc * txdesc = gmacdev->TxBusyDesc;
 5021              		.loc 1 1856 0
 5022 0014 FB68     		ldr	r3, [r7, #12]
 5023 0016 1B6C     		ldr	r3, [r3, #64]
 5024 0018 3B61     		str	r3, [r7, #16]
1857:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1858:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_desc_owned_by_dma(txdesc))
 5025              		.loc 1 1858 0
 5026 001a 3869     		ldr	r0, [r7, #16]
 5027 001c FFF7FEFF 		bl	synopGMAC_is_desc_owned_by_dma
 5028 0020 0346     		mov	r3, r0
 5029 0022 002B     		cmp	r3, #0
 5030 0024 02D0     		beq	.L243
1859:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
 5031              		.loc 1 1859 0
 5032 0026 4FF0FF33 		mov	r3, #-1
 5033 002a 96E0     		b	.L244
 5034              	.L243:
1860:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_desc_empty(txdesc))
 5035              		.loc 1 1860 0
 5036 002c 3869     		ldr	r0, [r7, #16]
 5037 002e FFF7FEFF 		bl	synopGMAC_is_desc_empty
 5038 0032 0346     		mov	r3, r0
 5039 0034 002B     		cmp	r3, #0
 5040 0036 02D0     		beq	.L245
1861:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
 5041              		.loc 1 1861 0
 5042 0038 4FF0FF33 		mov	r3, #-1
 5043 003c 8DE0     		b	.L244
 5044              	.L245:
1862:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1863:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	(gmacdev->BusyTxDesc)--; //busy tx descriptor is reduced by one as it will be handed over to Proce
 5045              		.loc 1 1863 0
 5046 003e FB68     		ldr	r3, [r7, #12]
 5047 0040 1B6A     		ldr	r3, [r3, #32]
 5048 0042 03F1FF32 		add	r2, r3, #-1
 5049 0046 FB68     		ldr	r3, [r7, #12]
 5050 0048 1A62     		str	r2, [r3, #32]
1864:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1865:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Status != 0)   
 5051              		.loc 1 1865 0
 5052 004a BB68     		ldr	r3, [r7, #8]
 5053 004c 002B     		cmp	r3, #0
 5054 004e 03D0     		beq	.L246
1866:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Status = txdesc->status;
 5055              		.loc 1 1866 0
 5056 0050 3B69     		ldr	r3, [r7, #16]
 5057 0052 1A68     		ldr	r2, [r3, #0]
 5058 0054 BB68     		ldr	r3, [r7, #8]
 5059 0056 1A60     		str	r2, [r3, #0]
 5060              	.L246:
1867:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1868:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Ext_Status != 0)
 5061              		.loc 1 1868 0
 5062 0058 3B6B     		ldr	r3, [r7, #48]
 5063 005a 002B     		cmp	r3, #0
 5064 005c 03D0     		beq	.L247
1869:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Ext_Status = txdesc->extstatus;
 5065              		.loc 1 1869 0
 5066 005e 3B69     		ldr	r3, [r7, #16]
 5067 0060 1A69     		ldr	r2, [r3, #16]
 5068 0062 3B6B     		ldr	r3, [r7, #48]
 5069 0064 1A60     		str	r2, [r3, #0]
 5070              	.L247:
1870:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         if(Time_Stamp_High != 0)
 5071              		.loc 1 1870 0
 5072 0066 7B6B     		ldr	r3, [r7, #52]
 5073 0068 002B     		cmp	r3, #0
 5074 006a 03D0     		beq	.L248
1871:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Time_Stamp_High = txdesc->timestamphigh; 
 5075              		.loc 1 1871 0
 5076 006c 3B69     		ldr	r3, [r7, #16]
 5077 006e DA69     		ldr	r2, [r3, #28]
 5078 0070 7B6B     		ldr	r3, [r7, #52]
 5079 0072 1A60     		str	r2, [r3, #0]
 5080              	.L248:
1872:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         if(Time_Stamp_Low != 0)
 5081              		.loc 1 1872 0
 5082 0074 BB6B     		ldr	r3, [r7, #56]
 5083 0076 002B     		cmp	r3, #0
 5084 0078 03D0     		beq	.L249
1873:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Time_Stamp_High = txdesc->timestamplow; 
 5085              		.loc 1 1873 0
 5086 007a 3B69     		ldr	r3, [r7, #16]
 5087 007c 9A69     		ldr	r2, [r3, #24]
 5088 007e 7B6B     		ldr	r3, [r7, #52]
 5089 0080 1A60     		str	r2, [r3, #0]
 5090              	.L249:
1874:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1875:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer1 != 0)
 5091              		.loc 1 1875 0
 5092 0082 7B68     		ldr	r3, [r7, #4]
 5093 0084 002B     		cmp	r3, #0
 5094 0086 03D0     		beq	.L250
1876:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer1 = txdesc->buffer1;
 5095              		.loc 1 1876 0
 5096 0088 3B69     		ldr	r3, [r7, #16]
 5097 008a 9A68     		ldr	r2, [r3, #8]
 5098 008c 7B68     		ldr	r3, [r7, #4]
 5099 008e 1A60     		str	r2, [r3, #0]
 5100              	.L250:
1877:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length1 != 0)
 5101              		.loc 1 1877 0
 5102 0090 3B68     		ldr	r3, [r7, #0]
 5103 0092 002B     		cmp	r3, #0
 5104 0094 07D0     		beq	.L251
1878:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length1 = (txdesc->length & DescSize1Mask) >> DescSize1Shift;
 5105              		.loc 1 1878 0
 5106 0096 3B69     		ldr	r3, [r7, #16]
 5107 0098 5B68     		ldr	r3, [r3, #4]
 5108 009a 4FEAC343 		lsl	r3, r3, #19
 5109 009e 4FEAD343 		lsr	r3, r3, #19
 5110 00a2 3A68     		ldr	r2, [r7, #0]
 5111 00a4 1360     		str	r3, [r2, #0]
 5112              	.L251:
1879:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
 5113              		.loc 1 1879 0
 5114 00a6 3B6A     		ldr	r3, [r7, #32]
 5115 00a8 002B     		cmp	r3, #0
 5116 00aa 03D0     		beq	.L252
1880:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data1 = txdesc->data1;
 5117              		.loc 1 1880 0
 5118 00ac 3B69     		ldr	r3, [r7, #16]
 5119 00ae 1A6A     		ldr	r2, [r3, #32]
 5120 00b0 3B6A     		ldr	r3, [r7, #32]
 5121 00b2 1A60     		str	r2, [r3, #0]
 5122              	.L252:
1881:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1882:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer2 != 0)
 5123              		.loc 1 1882 0
 5124 00b4 7B6A     		ldr	r3, [r7, #36]
 5125 00b6 002B     		cmp	r3, #0
 5126 00b8 03D0     		beq	.L253
1883:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer2 = txdesc->buffer2;
 5127              		.loc 1 1883 0
 5128 00ba 3B69     		ldr	r3, [r7, #16]
 5129 00bc DA68     		ldr	r2, [r3, #12]
 5130 00be 7B6A     		ldr	r3, [r7, #36]
 5131 00c0 1A60     		str	r2, [r3, #0]
 5132              	.L253:
1884:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length2 != 0)
 5133              		.loc 1 1884 0
 5134 00c2 BB6A     		ldr	r3, [r7, #40]
 5135 00c4 002B     		cmp	r3, #0
 5136 00c6 0AD0     		beq	.L254
1885:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length2 = (txdesc->length & DescSize2Mask) >> DescSize2Shift;
 5137              		.loc 1 1885 0
 5138 00c8 3B69     		ldr	r3, [r7, #16]
 5139 00ca 5A68     		ldr	r2, [r3, #4]
 5140 00cc 4FF00003 		mov	r3, #0
 5141 00d0 C1F6FF73 		movt	r3, 8191
 5142 00d4 1340     		ands	r3, r3, r2
 5143 00d6 4FEA1342 		lsr	r2, r3, #16
 5144 00da BB6A     		ldr	r3, [r7, #40]
 5145 00dc 1A60     		str	r2, [r3, #0]
 5146              	.L254:
1886:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
 5147              		.loc 1 1886 0
 5148 00de 3B6A     		ldr	r3, [r7, #32]
 5149 00e0 002B     		cmp	r3, #0
 5150 00e2 03D0     		beq	.L255
1887:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data2 = txdesc->data2;
 5151              		.loc 1 1887 0
 5152 00e4 3B69     		ldr	r3, [r7, #16]
 5153 00e6 5A6A     		ldr	r2, [r3, #36]
 5154 00e8 FB6A     		ldr	r3, [r7, #44]
 5155 00ea 1A60     		str	r2, [r3, #0]
 5156              	.L255:
1888:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1889:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->TxBusy     = synopGMAC_is_last_tx_desc(gmacdev,txdesc) ? 0 : txover + 1;
 5157              		.loc 1 1889 0
 5158 00ec F868     		ldr	r0, [r7, #12]
 5159 00ee 3969     		ldr	r1, [r7, #16]
 5160 00f0 FFF7FEFF 		bl	synopGMAC_is_last_tx_desc
 5161 00f4 0346     		mov	r3, r0
 5162 00f6 002B     		cmp	r3, #0
 5163 00f8 03D1     		bne	.L256
 5164              		.loc 1 1889 0 is_stmt 0 discriminator 1
 5165 00fa 7B69     		ldr	r3, [r7, #20]
 5166 00fc 03F10103 		add	r3, r3, #1
 5167 0100 01E0     		b	.L257
 5168              	.L256:
 5169              		.loc 1 1889 0 discriminator 2
 5170 0102 4FF00003 		mov	r3, #0
 5171              	.L257:
 5172              		.loc 1 1889 0 discriminator 3
 5173 0106 FA68     		ldr	r2, [r7, #12]
 5174 0108 1363     		str	r3, [r2, #48]
1890:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1891:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_tx_desc_chained(txdesc)){
 5175              		.loc 1 1891 0 is_stmt 1 discriminator 3
 5176 010a 3869     		ldr	r0, [r7, #16]
 5177 010c FFF7FEFF 		bl	synopGMAC_is_tx_desc_chained
 5178 0110 0346     		mov	r3, r0
 5179 0112 002B     		cmp	r3, #0
 5180 0114 08D0     		beq	.L258
1892:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	   	gmacdev->TxBusyDesc = (DmaDesc *)txdesc->data2;
 5181              		.loc 1 1892 0
 5182 0116 3B69     		ldr	r3, [r7, #16]
 5183 0118 5B6A     		ldr	r3, [r3, #36]
 5184 011a 1A46     		mov	r2, r3
 5185 011c FB68     		ldr	r3, [r7, #12]
 5186 011e 1A64     		str	r2, [r3, #64]
1893:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_tx_desc_init_chain(txdesc);
 5187              		.loc 1 1893 0
 5188 0120 3869     		ldr	r0, [r7, #16]
 5189 0122 FFF7FEFF 		bl	synopGMAC_tx_desc_init_chain
 5190 0126 17E0     		b	.L259
 5191              	.L258:
1894:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1895:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else{
1896:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->TxBusyDesc = synopGMAC_is_last_tx_desc(gmacdev,txdesc) ? gmacdev->TxDesc : (txdesc + 1);
 5192              		.loc 1 1896 0
 5193 0128 F868     		ldr	r0, [r7, #12]
 5194 012a 3969     		ldr	r1, [r7, #16]
 5195 012c FFF7FEFF 		bl	synopGMAC_is_last_tx_desc
 5196 0130 0346     		mov	r3, r0
 5197 0132 002B     		cmp	r3, #0
 5198 0134 02D0     		beq	.L260
 5199              		.loc 1 1896 0 is_stmt 0 discriminator 1
 5200 0136 FB68     		ldr	r3, [r7, #12]
 5201 0138 9B69     		ldr	r3, [r3, #24]
 5202 013a 02E0     		b	.L261
 5203              	.L260:
 5204              		.loc 1 1896 0 discriminator 2
 5205 013c 3B69     		ldr	r3, [r7, #16]
 5206 013e 03F12803 		add	r3, r3, #40
 5207              	.L261:
 5208              		.loc 1 1896 0 discriminator 3
 5209 0142 FA68     		ldr	r2, [r7, #12]
 5210 0144 1364     		str	r3, [r2, #64]
1897:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_tx_desc_init_ring(txdesc, synopGMAC_is_last_tx_desc(gmacdev,txdesc));
 5211              		.loc 1 1897 0 is_stmt 1 discriminator 3
 5212 0146 F868     		ldr	r0, [r7, #12]
 5213 0148 3969     		ldr	r1, [r7, #16]
 5214 014a FFF7FEFF 		bl	synopGMAC_is_last_tx_desc
 5215 014e 0346     		mov	r3, r0
 5216 0150 3869     		ldr	r0, [r7, #16]
 5217 0152 1946     		mov	r1, r3
 5218 0154 FFF7FEFF 		bl	synopGMAC_tx_desc_init_ring
 5219              	.L259:
1898:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1899:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	//TR("(get)%02d %08x %08x %08x %08x %08x %08x %08x\n",txover,(u32)txdesc,txdesc->status,txdesc->le
1900:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1901:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return txover;	
 5220              		.loc 1 1901 0
 5221 0158 7B69     		ldr	r3, [r7, #20]
 5222              	.L244:
1902:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 5223              		.loc 1 1902 0
 5224 015a 1846     		mov	r0, r3
 5225 015c 07F11807 		add	r7, r7, #24
 5226 0160 BD46     		mov	sp, r7
 5227 0162 80BD     		pop	{r7, pc}
 5228              		.cfi_endproc
 5229              	.LFE221:
 5231              		.section	.text.synopGMAC_set_tx_qptr,"ax",%progbits
 5232              		.align	2
 5233              		.global	synopGMAC_set_tx_qptr
 5234              		.thumb
 5235              		.thumb_func
 5237              	synopGMAC_set_tx_qptr:
 5238              	.LFB222:
1903:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
1904:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1905:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1906:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Get the index and address of Tx desc.
1907:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This api is same for both ring mode and chain mode.
1908:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function tracks the tx descriptor the DMA just closed after the transmission of data from 
1909:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * over. This returns the descriptor fields to the caller.
1910:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1911:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] status field of the descriptor.
1912:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] Dma-able buffer1 pointer.
1913:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] length of buffer1 (Max is 2048).
1914:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual pointer for buffer1.
1915:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] Dma-able buffer2 pointer.
1916:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] length of buffer2 (Max is 2048).
1917:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual pointer for buffer2.
1918:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] u32 data indicating whether the descriptor is in ring mode or chain mode.
1919:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns present tx descriptor index on success. Negative value if error.
1920:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1921:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_get_tx_qptr(synopGMACdevice * gmacdev, u32 * Status, u32 * Buffer1, u32 * Length1, u3
1922:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
1923:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32  txover      = gmacdev->TxBusy;
1924:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc * txdesc = gmacdev->TxBusyDesc;
1925:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1926:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_desc_owned_by_dma(txdesc))
1927:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
1928:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_desc_empty(txdesc))
1929:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
1930:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1931:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	(gmacdev->BusyTxDesc)--; //busy tx descriptor is reduced by one as it will be handed over to Proce
1932:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1933:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Status != 0)   
1934:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Status = txdesc->status;
1935:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1936:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer1 != 0)
1937:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer1 = txdesc->buffer1;
1938:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length1 != 0)
1939:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length1 = (txdesc->length & DescSize1Mask) >> DescSize1Shift;
1940:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
1941:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data1 = txdesc->data1;
1942:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1943:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer2 != 0)
1944:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer2 = txdesc->buffer2;
1945:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length2 != 0)
1946:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length2 = (txdesc->length & DescSize2Mask) >> DescSize2Shift;
1947:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
1948:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data2 = txdesc->data2;
1949:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1950:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->TxBusy     = synopGMAC_is_last_tx_desc(gmacdev,txdesc) ? 0 : txover + 1;
1951:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1952:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_tx_desc_chained(txdesc)){
1953:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	   	gmacdev->TxBusyDesc = (DmaDesc *)txdesc->data2;
1954:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_tx_desc_init_chain(txdesc);
1955:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1956:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else{
1957:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->TxBusyDesc = synopGMAC_is_last_tx_desc(gmacdev,txdesc) ? gmacdev->TxDesc : (txdesc + 1);
1958:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_tx_desc_init_ring(txdesc, synopGMAC_is_last_tx_desc(gmacdev,txdesc));
1959:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
1960:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1961:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return txover;	
1962:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
1963:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1964:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
1965:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
1966:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Populate the tx desc structure with the buffer address.
1967:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Once the driver has a packet ready to be transmitted, this function is called with the 
1968:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * valid dma-able buffer addresses and their lengths. This function populates the descriptor
1969:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * and make the DMA the owner for the descriptor. This function also controls whetther Checksum
1970:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * offloading to be done in hardware or not. 
1971:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This api is same for both ring mode and chain mode.
1972:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
1973:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Dma-able buffer1 pointer.
1974:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] length of buffer1 (Max is 2048).
1975:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] virtual pointer for buffer1.
1976:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Dma-able buffer2 pointer.
1977:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] length of buffer2 (Max is 2048).
1978:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] virtual pointer for buffer2.
1979:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 data indicating whether the descriptor is in ring mode or chain mode.
1980:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 indicating whether the checksum offloading in HW/SW.
1981:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns present tx descriptor index on success. Negative value if error.
1982:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
1983:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_set_tx_qptr(synopGMACdevice * gmacdev, u32 Buffer1, u32 Length1, u32 Data1, u32 Buffe
1984:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 5239              		.loc 1 1984 0
 5240              		.cfi_startproc
 5241              		@ args = 16, pretend = 0, frame = 24
 5242              		@ frame_needed = 1, uses_anonymous_args = 0
 5243 0000 80B5     		push	{r7, lr}
 5244              	.LCFI315:
 5245              		.cfi_def_cfa_offset 8
 5246              		.cfi_offset 7, -8
 5247              		.cfi_offset 14, -4
 5248 0002 86B0     		sub	sp, sp, #24
 5249              	.LCFI316:
 5250              		.cfi_def_cfa_offset 32
 5251 0004 00AF     		add	r7, sp, #0
 5252              	.LCFI317:
 5253              		.cfi_def_cfa_register 7
 5254 0006 F860     		str	r0, [r7, #12]
 5255 0008 B960     		str	r1, [r7, #8]
 5256 000a 7A60     		str	r2, [r7, #4]
 5257 000c 3B60     		str	r3, [r7, #0]
1985:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32  txnext      = gmacdev->TxNext;
 5258              		.loc 1 1985 0
 5259 000e FB68     		ldr	r3, [r7, #12]
 5260 0010 5B6B     		ldr	r3, [r3, #52]
 5261 0012 7B61     		str	r3, [r7, #20]
1986:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc * txdesc = gmacdev->TxNextDesc;
 5262              		.loc 1 1986 0
 5263 0014 FB68     		ldr	r3, [r7, #12]
 5264 0016 5B6C     		ldr	r3, [r3, #68]
 5265 0018 3B61     		str	r3, [r7, #16]
1987:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(!synopGMAC_is_desc_empty(txdesc))
 5266              		.loc 1 1987 0
 5267 001a 3869     		ldr	r0, [r7, #16]
 5268 001c FFF7FEFF 		bl	synopGMAC_is_desc_empty
 5269 0020 0346     		mov	r3, r0
 5270 0022 002B     		cmp	r3, #0
 5271 0024 02D1     		bne	.L263
1988:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
 5272              		.loc 1 1988 0
 5273 0026 4FF0FF33 		mov	r3, #-1
 5274 002a 83E0     		b	.L264
 5275              	.L263:
1989:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1990:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	(gmacdev->BusyTxDesc)++; //busy tx descriptor is incremented by one as it will be handed over to D
 5276              		.loc 1 1990 0
 5277 002c FB68     		ldr	r3, [r7, #12]
 5278 002e 1B6A     		ldr	r3, [r3, #32]
 5279 0030 03F10102 		add	r2, r3, #1
 5280 0034 FB68     		ldr	r3, [r7, #12]
 5281 0036 1A62     		str	r2, [r3, #32]
1991:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
1992:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_tx_desc_chained(txdesc))
 5282              		.loc 1 1992 0
 5283 0038 3869     		ldr	r0, [r7, #16]
 5284 003a FFF7FEFF 		bl	synopGMAC_is_tx_desc_chained
 5285 003e 0346     		mov	r3, r0
 5286 0040 002B     		cmp	r3, #0
 5287 0042 31D0     		beq	.L265
1993:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	{
1994:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->length |= ((Length1 <<DescSize1Shift) & DescSize1Mask);
 5288              		.loc 1 1994 0
 5289 0044 3B69     		ldr	r3, [r7, #16]
 5290 0046 5A68     		ldr	r2, [r3, #4]
 5291 0048 7B68     		ldr	r3, [r7, #4]
 5292 004a 4FEAC343 		lsl	r3, r3, #19
 5293 004e 4FEAD343 		lsr	r3, r3, #19
 5294 0052 1A43     		orrs	r2, r2, r3
 5295 0054 3B69     		ldr	r3, [r7, #16]
 5296 0056 5A60     		str	r2, [r3, #4]
1995:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
1996:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC
1997:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status |=  (DescTxFirst | DescTxLast | DescTxIntEnable); //ENH_DESC
 5297              		.loc 1 1997 0
 5298 0058 3B69     		ldr	r3, [r7, #16]
 5299 005a 1B68     		ldr	r3, [r3, #0]
 5300 005c 43F0E042 		orr	r2, r3, #1879048192
 5301 0060 3B69     		ldr	r3, [r7, #16]
 5302 0062 1A60     		str	r2, [r3, #0]
1998:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
1999:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->length |=  (DescTxFirst | DescTxLast | DescTxIntEnable); //Its always assumed that comple
2000:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
2001:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2002:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//txdesc->buffer1 = Buffer1;
2003:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//txdesc->data1 = Data1;
2004:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2005:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(offload_needed)
 5303              		.loc 1 2005 0
 5304 0064 FB6A     		ldr	r3, [r7, #44]
 5305 0066 002B     		cmp	r3, #0
 5306 0068 03D0     		beq	.L266
2006:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		{
2007:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			/*
2008:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			 Make sure that the OS you are running supports the IP and TCP checkusm offloaidng,
2009:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			 before calling any of the functions given below.		 
2010:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			 */
2011:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//	synopGMAC_tx_checksum_offload_ipv4hdr(gmacdev, txdesc);
2012:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//	synopGMAC_tx_checksum_offload_tcponly(gmacdev, txdesc);
2013:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			synopGMAC_tx_checksum_offload_tcp_pseudo(gmacdev, txdesc);
 5307              		.loc 1 2013 0
 5308 006a F868     		ldr	r0, [r7, #12]
 5309 006c 3969     		ldr	r1, [r7, #16]
 5310 006e FFF7FEFF 		bl	synopGMAC_tx_checksum_offload_tcp_pseudo
 5311              	.L266:
2014:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
2015:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2016:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC
2017:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status |= DescOwnByDma;//ENH_DESC
 5312              		.loc 1 2017 0
 5313 0072 3B69     		ldr	r3, [r7, #16]
 5314 0074 1B68     		ldr	r3, [r3, #0]
 5315 0076 43F00042 		orr	r2, r3, #-2147483648
 5316 007a 3B69     		ldr	r3, [r7, #16]
 5317 007c 1A60     		str	r2, [r3, #0]
2018:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
2019:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status = DescOwnByDma;
2020:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
2021:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2022:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->TxNext = synopGMAC_is_last_tx_desc(gmacdev,txdesc) ? 0 : txnext + 1;
 5318              		.loc 1 2022 0
 5319 007e F868     		ldr	r0, [r7, #12]
 5320 0080 3969     		ldr	r1, [r7, #16]
 5321 0082 FFF7FEFF 		bl	synopGMAC_is_last_tx_desc
 5322 0086 0346     		mov	r3, r0
 5323 0088 002B     		cmp	r3, #0
 5324 008a 03D1     		bne	.L267
 5325              		.loc 1 2022 0 is_stmt 0 discriminator 1
 5326 008c 7B69     		ldr	r3, [r7, #20]
 5327 008e 03F10103 		add	r3, r3, #1
 5328 0092 01E0     		b	.L268
 5329              	.L267:
 5330              		.loc 1 2022 0 discriminator 2
 5331 0094 4FF00003 		mov	r3, #0
 5332              	.L268:
 5333              		.loc 1 2022 0 discriminator 3
 5334 0098 FA68     		ldr	r2, [r7, #12]
 5335 009a 5363     		str	r3, [r2, #52]
2023:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	   	gmacdev->TxNextDesc = (DmaDesc *)txdesc->data2;
 5336              		.loc 1 2023 0 is_stmt 1 discriminator 3
 5337 009c 3B69     		ldr	r3, [r7, #16]
 5338 009e 5B6A     		ldr	r3, [r3, #36]
 5339 00a0 1A46     		mov	r2, r3
 5340 00a2 FB68     		ldr	r3, [r7, #12]
 5341 00a4 5A64     		str	r2, [r3, #68]
 5342 00a6 44E0     		b	.L269
 5343              	.L265:
2024:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2025:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else
2026:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	{
2027:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->length |= (((Length1 <<DescSize1Shift) & DescSize1Mask) | ((Length2 <<DescSize2Shift) & D
 5344              		.loc 1 2027 0
 5345 00a8 3B69     		ldr	r3, [r7, #16]
 5346 00aa 5968     		ldr	r1, [r3, #4]
 5347 00ac 7B68     		ldr	r3, [r7, #4]
 5348 00ae 4FEAC342 		lsl	r2, r3, #19
 5349 00b2 4FEAD242 		lsr	r2, r2, #19
 5350 00b6 7B6A     		ldr	r3, [r7, #36]
 5351 00b8 4FEA0340 		lsl	r0, r3, #16
 5352 00bc 4FF00003 		mov	r3, #0
 5353 00c0 C1F6FF73 		movt	r3, 8191
 5354 00c4 0340     		ands	r3, r3, r0
 5355 00c6 1343     		orrs	r3, r3, r2
 5356 00c8 41EA0302 		orr	r2, r1, r3
 5357 00cc 3B69     		ldr	r3, [r7, #16]
 5358 00ce 5A60     		str	r2, [r3, #4]
2028:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2029:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC
2030:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status |=  (DescTxFirst | DescTxLast | DescTxIntEnable); //ENH_DESC
 5359              		.loc 1 2030 0
 5360 00d0 3B69     		ldr	r3, [r7, #16]
 5361 00d2 1B68     		ldr	r3, [r3, #0]
 5362 00d4 43F0E042 		orr	r2, r3, #1879048192
 5363 00d8 3B69     		ldr	r3, [r7, #16]
 5364 00da 1A60     		str	r2, [r3, #0]
2031:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
2032:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->length |=  (DescTxFirst | DescTxLast | DescTxIntEnable); //Its always assumed that comple
2033:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
2034:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2035:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(offload_needed)
 5365              		.loc 1 2035 0
 5366 00dc FB6A     		ldr	r3, [r7, #44]
 5367 00de 002B     		cmp	r3, #0
 5368 00e0 03D0     		beq	.L270
2036:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		{
2037:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			/*
2038:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			 Make sure that the OS you are running supports the IP and TCP checkusm offloaidng,
2039:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			 before calling any of the functions given below.		 
2040:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			 */
2041:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//	synopGMAC_tx_checksum_offload_ipv4hdr(gmacdev, txdesc);
2042:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//	synopGMAC_tx_checksum_offload_tcponly(gmacdev, txdesc);
2043:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			synopGMAC_tx_checksum_offload_tcp_pseudo(gmacdev, txdesc);
 5369              		.loc 1 2043 0
 5370 00e2 F868     		ldr	r0, [r7, #12]
 5371 00e4 3969     		ldr	r1, [r7, #16]
 5372 00e6 FFF7FEFF 		bl	synopGMAC_tx_checksum_offload_tcp_pseudo
 5373              	.L270:
2044:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
2045:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2046:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC	
2047:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status |= DescOwnByDma;//ENH_DESC
 5374              		.loc 1 2047 0
 5375 00ea 3B69     		ldr	r3, [r7, #16]
 5376 00ec 1B68     		ldr	r3, [r3, #0]
 5377 00ee 43F00042 		orr	r2, r3, #-2147483648
 5378 00f2 3B69     		ldr	r3, [r7, #16]
 5379 00f4 1A60     		str	r2, [r3, #0]
2048:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
2049:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		txdesc->status = DescOwnByDma;
2050:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
2051:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2052:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->TxNext = synopGMAC_is_last_tx_desc(gmacdev,txdesc) ? 0 : txnext + 1;
 5380              		.loc 1 2052 0
 5381 00f6 F868     		ldr	r0, [r7, #12]
 5382 00f8 3969     		ldr	r1, [r7, #16]
 5383 00fa FFF7FEFF 		bl	synopGMAC_is_last_tx_desc
 5384 00fe 0346     		mov	r3, r0
 5385 0100 002B     		cmp	r3, #0
 5386 0102 03D1     		bne	.L271
 5387              		.loc 1 2052 0 is_stmt 0 discriminator 1
 5388 0104 7B69     		ldr	r3, [r7, #20]
 5389 0106 03F10103 		add	r3, r3, #1
 5390 010a 01E0     		b	.L272
 5391              	.L271:
 5392              		.loc 1 2052 0 discriminator 2
 5393 010c 4FF00003 		mov	r3, #0
 5394              	.L272:
 5395              		.loc 1 2052 0 discriminator 3
 5396 0110 FA68     		ldr	r2, [r7, #12]
 5397 0112 5363     		str	r3, [r2, #52]
2053:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->TxNextDesc = synopGMAC_is_last_tx_desc(gmacdev,txdesc) ? gmacdev->TxDesc : (txdesc + 1);
 5398              		.loc 1 2053 0 is_stmt 1 discriminator 3
 5399 0114 F868     		ldr	r0, [r7, #12]
 5400 0116 3969     		ldr	r1, [r7, #16]
 5401 0118 FFF7FEFF 		bl	synopGMAC_is_last_tx_desc
 5402 011c 0346     		mov	r3, r0
 5403 011e 002B     		cmp	r3, #0
 5404 0120 02D0     		beq	.L273
 5405              		.loc 1 2053 0 is_stmt 0 discriminator 1
 5406 0122 FB68     		ldr	r3, [r7, #12]
 5407 0124 9B69     		ldr	r3, [r3, #24]
 5408 0126 02E0     		b	.L274
 5409              	.L273:
 5410              		.loc 1 2053 0 discriminator 2
 5411 0128 3B69     		ldr	r3, [r7, #16]
 5412 012a 03F12803 		add	r3, r3, #40
 5413              	.L274:
 5414              		.loc 1 2053 0 discriminator 3
 5415 012e FA68     		ldr	r2, [r7, #12]
 5416 0130 5364     		str	r3, [r2, #68]
 5417              	.L269:
2054:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2055:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2056:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2057:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return txnext;	
 5418              		.loc 1 2057 0 is_stmt 1
 5419 0132 7B69     		ldr	r3, [r7, #20]
 5420              	.L264:
2058:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 5421              		.loc 1 2058 0
 5422 0134 1846     		mov	r0, r3
 5423 0136 07F11807 		add	r7, r7, #24
 5424 013a BD46     		mov	sp, r7
 5425 013c 80BD     		pop	{r7, pc}
 5426              		.cfi_endproc
 5427              	.LFE222:
 5429 013e 00BF     		.section	.text.synopGMAC_set_rx_qptr,"ax",%progbits
 5430              		.align	2
 5431              		.global	synopGMAC_set_rx_qptr
 5432              		.thumb
 5433              		.thumb_func
 5435              	synopGMAC_set_rx_qptr:
 5436              	.LFB223:
2059:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2060:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC_8W
2061:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2062:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Prepares the descriptor to receive packets.
2063:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The descriptor is allocated with the valid buffer addresses (sk_buff address) and the length fi
2064:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * and handed over to DMA by setting the ownership. After successful return from this function the
2065:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * descriptor is added to the receive descriptor pool/queue.
2066:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This api is same for both ring mode and chain mode.
2067:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2068:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Dma-able buffer1 pointer.
2069:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] length of buffer1 (Max is 2048).
2070:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Dma-able buffer2 pointer.
2071:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] length of buffer2 (Max is 2048).
2072:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 data indicating whether the descriptor is in ring mode or chain mode.
2073:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns present rx descriptor index on success. Negative value if error.
2074:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2075:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_set_rx_qptr(synopGMACdevice * gmacdev, u32 Buffer1, u32 Length1, u32 Data1, u32 Buffe
2076:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 5437              		.loc 1 2076 0
 5438              		.cfi_startproc
 5439              		@ args = 12, pretend = 0, frame = 24
 5440              		@ frame_needed = 1, uses_anonymous_args = 0
 5441 0000 80B5     		push	{r7, lr}
 5442              	.LCFI318:
 5443              		.cfi_def_cfa_offset 8
 5444              		.cfi_offset 7, -8
 5445              		.cfi_offset 14, -4
 5446 0002 86B0     		sub	sp, sp, #24
 5447              	.LCFI319:
 5448              		.cfi_def_cfa_offset 32
 5449 0004 00AF     		add	r7, sp, #0
 5450              	.LCFI320:
 5451              		.cfi_def_cfa_register 7
 5452 0006 F860     		str	r0, [r7, #12]
 5453 0008 B960     		str	r1, [r7, #8]
 5454 000a 7A60     		str	r2, [r7, #4]
 5455 000c 3B60     		str	r3, [r7, #0]
2077:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32  rxnext      = gmacdev->RxNext;
 5456              		.loc 1 2077 0
 5457 000e FB68     		ldr	r3, [r7, #12]
 5458 0010 DB6B     		ldr	r3, [r3, #60]
 5459 0012 7B61     		str	r3, [r7, #20]
2078:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc * rxdesc = gmacdev->RxNextDesc;
 5460              		.loc 1 2078 0
 5461 0014 FB68     		ldr	r3, [r7, #12]
 5462 0016 DB6C     		ldr	r3, [r3, #76]
 5463 0018 3B61     		str	r3, [r7, #16]
2079:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2080:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(!synopGMAC_is_desc_empty(rxdesc))
 5464              		.loc 1 2080 0
 5465 001a 3869     		ldr	r0, [r7, #16]
 5466 001c FFF7FEFF 		bl	synopGMAC_is_desc_empty
 5467 0020 0346     		mov	r3, r0
 5468 0022 002B     		cmp	r3, #0
 5469 0024 02D1     		bne	.L276
2081:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
 5470              		.loc 1 2081 0
 5471 0026 4FF0FF33 		mov	r3, #-1
 5472 002a 97E0     		b	.L277
 5473              	.L276:
2082:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2083:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2084:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_rx_desc_chained(rxdesc)){
 5474              		.loc 1 2084 0
 5475 002c 3869     		ldr	r0, [r7, #16]
 5476 002e FFF7FEFF 		bl	synopGMAC_is_rx_desc_chained
 5477 0032 0346     		mov	r3, r0
 5478 0034 002B     		cmp	r3, #0
 5479 0036 38D0     		beq	.L278
2085:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->length |= ((Length1 <<DescSize1Shift) & DescSize1Mask);
 5480              		.loc 1 2085 0
 5481 0038 3B69     		ldr	r3, [r7, #16]
 5482 003a 5A68     		ldr	r2, [r3, #4]
 5483 003c 7B68     		ldr	r3, [r7, #4]
 5484 003e 4FEAC343 		lsl	r3, r3, #19
 5485 0042 4FEAD343 		lsr	r3, r3, #19
 5486 0046 1A43     		orrs	r2, r2, r3
 5487 0048 3B69     		ldr	r3, [r7, #16]
 5488 004a 5A60     		str	r2, [r3, #4]
2086:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2087:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->buffer1 = Buffer1;
 5489              		.loc 1 2087 0
 5490 004c 3B69     		ldr	r3, [r7, #16]
 5491 004e BA68     		ldr	r2, [r7, #8]
 5492 0050 9A60     		str	r2, [r3, #8]
2088:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->data1 = Data1;
 5493              		.loc 1 2088 0
 5494 0052 3B69     		ldr	r3, [r7, #16]
 5495 0054 3A68     		ldr	r2, [r7, #0]
 5496 0056 1A62     		str	r2, [r3, #32]
2089:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2090:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->extstatus = 0;
 5497              		.loc 1 2090 0
 5498 0058 3B69     		ldr	r3, [r7, #16]
 5499 005a 4FF00002 		mov	r2, #0
 5500 005e 1A61     		str	r2, [r3, #16]
2091:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->reserved1 = 0;
 5501              		.loc 1 2091 0
 5502 0060 3B69     		ldr	r3, [r7, #16]
 5503 0062 4FF00002 		mov	r2, #0
 5504 0066 5A61     		str	r2, [r3, #20]
2092:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->timestamplow = 0;
 5505              		.loc 1 2092 0
 5506 0068 3B69     		ldr	r3, [r7, #16]
 5507 006a 4FF00002 		mov	r2, #0
 5508 006e 9A61     		str	r2, [r3, #24]
2093:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->timestamphigh = 0;
 5509              		.loc 1 2093 0
 5510 0070 3B69     		ldr	r3, [r7, #16]
 5511 0072 4FF00002 		mov	r2, #0
 5512 0076 DA61     		str	r2, [r3, #28]
2094:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2095:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if((rxnext % MODULO_INTERRUPT) !=0)
2096:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->length |= RxDisIntCompl;		
2097:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   
2098:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->status = DescOwnByDma;
 5513              		.loc 1 2098 0
 5514 0078 3B69     		ldr	r3, [r7, #16]
 5515 007a 4FF00042 		mov	r2, #-2147483648
 5516 007e 1A60     		str	r2, [r3, #0]
2099:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2100:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->RxNext     = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? 0 : rxnext + 1;
 5517              		.loc 1 2100 0
 5518 0080 F868     		ldr	r0, [r7, #12]
 5519 0082 3969     		ldr	r1, [r7, #16]
 5520 0084 FFF7FEFF 		bl	synopGMAC_is_last_rx_desc
 5521 0088 0346     		mov	r3, r0
 5522 008a 002B     		cmp	r3, #0
 5523 008c 03D1     		bne	.L279
 5524              		.loc 1 2100 0 is_stmt 0 discriminator 1
 5525 008e 7B69     		ldr	r3, [r7, #20]
 5526 0090 03F10103 		add	r3, r3, #1
 5527 0094 01E0     		b	.L280
 5528              	.L279:
 5529              		.loc 1 2100 0 discriminator 2
 5530 0096 4FF00003 		mov	r3, #0
 5531              	.L280:
 5532              		.loc 1 2100 0 discriminator 3
 5533 009a FA68     		ldr	r2, [r7, #12]
 5534 009c D363     		str	r3, [r2, #60]
2101:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	   	gmacdev->RxNextDesc = (DmaDesc *)rxdesc->data2;
 5535              		.loc 1 2101 0 is_stmt 1 discriminator 3
 5536 009e 3B69     		ldr	r3, [r7, #16]
 5537 00a0 5B6A     		ldr	r3, [r3, #36]
 5538 00a2 1A46     		mov	r2, r3
 5539 00a4 FB68     		ldr	r3, [r7, #12]
 5540 00a6 DA64     		str	r2, [r3, #76]
 5541 00a8 51E0     		b	.L281
 5542              	.L278:
2102:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2103:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else{
2104:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->length |= (((Length1 <<DescSize1Shift) & DescSize1Mask) | ((Length2 << DescSize2Shift) & 
 5543              		.loc 1 2104 0
 5544 00aa 3B69     		ldr	r3, [r7, #16]
 5545 00ac 5968     		ldr	r1, [r3, #4]
 5546 00ae 7B68     		ldr	r3, [r7, #4]
 5547 00b0 4FEAC342 		lsl	r2, r3, #19
 5548 00b4 4FEAD242 		lsr	r2, r2, #19
 5549 00b8 7B6A     		ldr	r3, [r7, #36]
 5550 00ba 4FEA0340 		lsl	r0, r3, #16
 5551 00be 4FF00003 		mov	r3, #0
 5552 00c2 C1F6FF73 		movt	r3, 8191
 5553 00c6 0340     		ands	r3, r3, r0
 5554 00c8 1343     		orrs	r3, r3, r2
 5555 00ca 41EA0302 		orr	r2, r1, r3
 5556 00ce 3B69     		ldr	r3, [r7, #16]
 5557 00d0 5A60     		str	r2, [r3, #4]
2105:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2106:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->buffer1 = Buffer1;
 5558              		.loc 1 2106 0
 5559 00d2 3B69     		ldr	r3, [r7, #16]
 5560 00d4 BA68     		ldr	r2, [r7, #8]
 5561 00d6 9A60     		str	r2, [r3, #8]
2107:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->data1 = Data1;
 5562              		.loc 1 2107 0
 5563 00d8 3B69     		ldr	r3, [r7, #16]
 5564 00da 3A68     		ldr	r2, [r7, #0]
 5565 00dc 1A62     		str	r2, [r3, #32]
2108:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2109:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->extstatus = 0;
 5566              		.loc 1 2109 0
 5567 00de 3B69     		ldr	r3, [r7, #16]
 5568 00e0 4FF00002 		mov	r2, #0
 5569 00e4 1A61     		str	r2, [r3, #16]
2110:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->reserved1 = 0;
 5570              		.loc 1 2110 0
 5571 00e6 3B69     		ldr	r3, [r7, #16]
 5572 00e8 4FF00002 		mov	r2, #0
 5573 00ec 5A61     		str	r2, [r3, #20]
2111:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->timestamplow = 0;
 5574              		.loc 1 2111 0
 5575 00ee 3B69     		ldr	r3, [r7, #16]
 5576 00f0 4FF00002 		mov	r2, #0
 5577 00f4 9A61     		str	r2, [r3, #24]
2112:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->timestamphigh = 0;
 5578              		.loc 1 2112 0
 5579 00f6 3B69     		ldr	r3, [r7, #16]
 5580 00f8 4FF00002 		mov	r2, #0
 5581 00fc DA61     		str	r2, [r3, #28]
2113:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2114:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->buffer2 = Buffer2;
 5582              		.loc 1 2114 0
 5583 00fe 3B69     		ldr	r3, [r7, #16]
 5584 0100 3A6A     		ldr	r2, [r7, #32]
 5585 0102 DA60     		str	r2, [r3, #12]
2115:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->data2 = Data2;
 5586              		.loc 1 2115 0
 5587 0104 3B69     		ldr	r3, [r7, #16]
 5588 0106 BA6A     		ldr	r2, [r7, #40]
 5589 0108 5A62     		str	r2, [r3, #36]
2116:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
2117:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if((rxnext % MODULO_INTERRUPT) !=0)
2118:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->length |= RxDisIntCompl;		
2119:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2120:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->status = DescOwnByDma;
 5590              		.loc 1 2120 0
 5591 010a 3B69     		ldr	r3, [r7, #16]
 5592 010c 4FF00042 		mov	r2, #-2147483648
 5593 0110 1A60     		str	r2, [r3, #0]
2121:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2122:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->RxNext     = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? 0 : rxnext + 1;
 5594              		.loc 1 2122 0
 5595 0112 F868     		ldr	r0, [r7, #12]
 5596 0114 3969     		ldr	r1, [r7, #16]
 5597 0116 FFF7FEFF 		bl	synopGMAC_is_last_rx_desc
 5598 011a 0346     		mov	r3, r0
 5599 011c 002B     		cmp	r3, #0
 5600 011e 03D1     		bne	.L282
 5601              		.loc 1 2122 0 is_stmt 0 discriminator 1
 5602 0120 7B69     		ldr	r3, [r7, #20]
 5603 0122 03F10103 		add	r3, r3, #1
 5604 0126 01E0     		b	.L283
 5605              	.L282:
 5606              		.loc 1 2122 0 discriminator 2
 5607 0128 4FF00003 		mov	r3, #0
 5608              	.L283:
 5609              		.loc 1 2122 0 discriminator 3
 5610 012c FA68     		ldr	r2, [r7, #12]
 5611 012e D363     		str	r3, [r2, #60]
2123:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->RxNextDesc = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? gmacdev->RxDesc : (rxdesc + 1);
 5612              		.loc 1 2123 0 is_stmt 1 discriminator 3
 5613 0130 F868     		ldr	r0, [r7, #12]
 5614 0132 3969     		ldr	r1, [r7, #16]
 5615 0134 FFF7FEFF 		bl	synopGMAC_is_last_rx_desc
 5616 0138 0346     		mov	r3, r0
 5617 013a 002B     		cmp	r3, #0
 5618 013c 02D0     		beq	.L284
 5619              		.loc 1 2123 0 is_stmt 0 discriminator 1
 5620 013e FB68     		ldr	r3, [r7, #12]
 5621 0140 DB69     		ldr	r3, [r3, #28]
 5622 0142 02E0     		b	.L285
 5623              	.L284:
 5624              		.loc 1 2123 0 discriminator 2
 5625 0144 3B69     		ldr	r3, [r7, #16]
 5626 0146 03F12803 		add	r3, r3, #40
 5627              	.L285:
 5628              		.loc 1 2123 0 discriminator 3
 5629 014a FA68     		ldr	r2, [r7, #12]
 5630 014c D364     		str	r3, [r2, #76]
 5631              	.L281:
2124:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2125:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	//TR("%02d %08x %08x %08x %08x %08x %08x %08x\n",rxnext,(u32)rxdesc,rxdesc->status,rxdesc->length,
2126:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2127:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	(gmacdev->BusyRxDesc)++; //One descriptor will be given to Hardware. So busy count incremented by 
 5632              		.loc 1 2127 0 is_stmt 1
 5633 014e FB68     		ldr	r3, [r7, #12]
 5634 0150 5B6A     		ldr	r3, [r3, #36]
 5635 0152 03F10102 		add	r2, r3, #1
 5636 0156 FB68     		ldr	r3, [r7, #12]
 5637 0158 5A62     		str	r2, [r3, #36]
2128:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return rxnext;
 5638              		.loc 1 2128 0
 5639 015a 7B69     		ldr	r3, [r7, #20]
 5640              	.L277:
2129:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 5641              		.loc 1 2129 0
 5642 015c 1846     		mov	r0, r3
 5643 015e 07F11807 		add	r7, r7, #24
 5644 0162 BD46     		mov	sp, r7
 5645 0164 80BD     		pop	{r7, pc}
 5646              		.cfi_endproc
 5647              	.LFE223:
 5649 0166 00BF     		.section	.text.synopGMAC_get_rx_qptr,"ax",%progbits
 5650              		.align	2
 5651              		.global	synopGMAC_get_rx_qptr
 5652              		.thumb
 5653              		.thumb_func
 5655              	synopGMAC_get_rx_qptr:
 5656              	.LFB224:
2130:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2131:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
2132:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2133:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Prepares the descriptor to receive packets.
2134:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The descriptor is allocated with the valid buffer addresses (sk_buff address) and the length fi
2135:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * and handed over to DMA by setting the ownership. After successful return from this function the
2136:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * descriptor is added to the receive descriptor pool/queue.
2137:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This api is same for both ring mode and chain mode.
2138:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2139:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Dma-able buffer1 pointer.
2140:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] length of buffer1 (Max is 2048).
2141:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Dma-able buffer2 pointer.
2142:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] length of buffer2 (Max is 2048).
2143:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 data indicating whether the descriptor is in ring mode or chain mode.
2144:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns present rx descriptor index on success. Negative value if error.
2145:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2146:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_set_rx_qptr(synopGMACdevice * gmacdev, u32 Buffer1, u32 Length1, u32 Data1, u32 Buffe
2147:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
2148:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32  rxnext      = gmacdev->RxNext;
2149:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc * rxdesc = gmacdev->RxNextDesc;
2150:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2151:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(!synopGMAC_is_desc_empty(rxdesc))
2152:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
2153:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2154:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_rx_desc_chained(rxdesc)){
2155:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->length |= ((Length1 <<DescSize1Shift) & DescSize1Mask);
2156:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2157:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->buffer1 = Buffer1;
2158:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->data1 = Data1;
2159:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2160:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if((rxnext % MODULO_INTERRUPT) !=0)
2161:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->length |= RxDisIntCompl;		
2162:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2163:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->status = DescOwnByDma;
2164:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2165:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->RxNext     = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? 0 : rxnext + 1;
2166:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	   	gmacdev->RxNextDesc = (DmaDesc *)rxdesc->data2;
2167:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2168:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else{
2169:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->length |= (((Length1 <<DescSize1Shift) & DescSize1Mask) | ((Length2 << DescSize2Shift) & 
2170:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2171:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->buffer1 = Buffer1;
2172:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->data1 = Data1;
2173:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2174:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->buffer2 = Buffer2;
2175:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->data2 = Data2;
2176:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
2177:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if((rxnext % MODULO_INTERRUPT) !=0)
2178:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->length |= RxDisIntCompl;		
2179:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2180:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		rxdesc->status = DescOwnByDma;
2181:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2182:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->RxNext     = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? 0 : rxnext + 1;
2183:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->RxNextDesc = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? gmacdev->RxDesc : (rxdesc + 1);
2184:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2185:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	(gmacdev->BusyRxDesc)++; //One descriptor will be given to Hardware. So busy count incremented by 
2186:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return rxnext;
2187:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
2188:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
2189:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC_8W
2190:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2191:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function is defined two times. Once when the code is compiled for ENHANCED DESCRIPTOR SUPP
2192:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Get back the descriptor from DMA after data has been received.
2193:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When the DMA indicates that the data is received (interrupt is generated), this function should
2194:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * called to get the descriptor and hence the data buffers received. With successful return from t
2195:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * function caller gets the descriptor fields for processing. check the parameters to understand t
2196:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * fields returned.`
2197:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2198:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] pointer to hold the status of DMA.
2199:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] Dma-able buffer1 pointer.
2200:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] pointer to hold length of buffer1 (Max is 2048).
2201:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual pointer for buffer1.
2202:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] Dma-able buffer2 pointer.
2203:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] pointer to hold length of buffer2 (Max is 2048).
2204:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual pointer for buffer2.
2205:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns present rx descriptor index on success. Negative value if error.
2206:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2207:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_get_rx_qptr(synopGMACdevice * gmacdev, u32 * Status, u32 * Buffer1, u32 * Length1, u3
2208:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****                           u32 * Ext_Status, u32 * Time_Stamp_High, u32 * Time_Stamp_Low)
2209:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 5657              		.loc 1 2209 0
 5658              		.cfi_startproc
 5659              		@ args = 28, pretend = 0, frame = 24
 5660              		@ frame_needed = 1, uses_anonymous_args = 0
 5661 0000 80B5     		push	{r7, lr}
 5662              	.LCFI321:
 5663              		.cfi_def_cfa_offset 8
 5664              		.cfi_offset 7, -8
 5665              		.cfi_offset 14, -4
 5666 0002 86B0     		sub	sp, sp, #24
 5667              	.LCFI322:
 5668              		.cfi_def_cfa_offset 32
 5669 0004 00AF     		add	r7, sp, #0
 5670              	.LCFI323:
 5671              		.cfi_def_cfa_register 7
 5672 0006 F860     		str	r0, [r7, #12]
 5673 0008 B960     		str	r1, [r7, #8]
 5674 000a 7A60     		str	r2, [r7, #4]
 5675 000c 3B60     		str	r3, [r7, #0]
2210:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 rxnext       = gmacdev->RxBusy;	// index of descriptor the DMA just completed. May be useful w
 5676              		.loc 1 2210 0
 5677 000e FB68     		ldr	r3, [r7, #12]
 5678 0010 9B6B     		ldr	r3, [r3, #56]
 5679 0012 7B61     		str	r3, [r7, #20]
2211:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 						//is spread over multiple buffers/descriptors
2212:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc * rxdesc = gmacdev->RxBusyDesc;
 5680              		.loc 1 2212 0
 5681 0014 FB68     		ldr	r3, [r7, #12]
 5682 0016 9B6C     		ldr	r3, [r3, #72]
 5683 0018 3B61     		str	r3, [r7, #16]
2213:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_desc_owned_by_dma(rxdesc))
 5684              		.loc 1 2213 0
 5685 001a 3869     		ldr	r0, [r7, #16]
 5686 001c FFF7FEFF 		bl	synopGMAC_is_desc_owned_by_dma
 5687 0020 0346     		mov	r3, r0
 5688 0022 002B     		cmp	r3, #0
 5689 0024 02D0     		beq	.L287
2214:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
 5690              		.loc 1 2214 0
 5691 0026 4FF0FF33 		mov	r3, #-1
 5692 002a 6FE0     		b	.L288
 5693              	.L287:
2215:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_desc_empty(rxdesc))
 5694              		.loc 1 2215 0
 5695 002c 3869     		ldr	r0, [r7, #16]
 5696 002e FFF7FEFF 		bl	synopGMAC_is_desc_empty
 5697 0032 0346     		mov	r3, r0
 5698 0034 002B     		cmp	r3, #0
 5699 0036 02D0     		beq	.L289
2216:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
 5700              		.loc 1 2216 0
 5701 0038 4FF0FF33 		mov	r3, #-1
 5702 003c 66E0     		b	.L288
 5703              	.L289:
2217:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
2218:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2219:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Status != 0)
 5704              		.loc 1 2219 0
 5705 003e BB68     		ldr	r3, [r7, #8]
 5706 0040 002B     		cmp	r3, #0
 5707 0042 03D0     		beq	.L290
2220:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Status = rxdesc->status;// send the status of this descriptor
 5708              		.loc 1 2220 0
 5709 0044 3B69     		ldr	r3, [r7, #16]
 5710 0046 1A68     		ldr	r2, [r3, #0]
 5711 0048 BB68     		ldr	r3, [r7, #8]
 5712 004a 1A60     		str	r2, [r3, #0]
 5713              	.L290:
2221:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2222:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Ext_Status != 0)
 5714              		.loc 1 2222 0
 5715 004c 3B6B     		ldr	r3, [r7, #48]
 5716 004e 002B     		cmp	r3, #0
 5717 0050 03D0     		beq	.L291
2223:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Ext_Status = rxdesc->extstatus;
 5718              		.loc 1 2223 0
 5719 0052 3B69     		ldr	r3, [r7, #16]
 5720 0054 1A69     		ldr	r2, [r3, #16]
 5721 0056 3B6B     		ldr	r3, [r7, #48]
 5722 0058 1A60     		str	r2, [r3, #0]
 5723              	.L291:
2224:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         if(Time_Stamp_High != 0)
 5724              		.loc 1 2224 0
 5725 005a 7B6B     		ldr	r3, [r7, #52]
 5726 005c 002B     		cmp	r3, #0
 5727 005e 03D0     		beq	.L292
2225:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Time_Stamp_High = rxdesc->timestamphigh; 
 5728              		.loc 1 2225 0
 5729 0060 3B69     		ldr	r3, [r7, #16]
 5730 0062 DA69     		ldr	r2, [r3, #28]
 5731 0064 7B6B     		ldr	r3, [r7, #52]
 5732 0066 1A60     		str	r2, [r3, #0]
 5733              	.L292:
2226:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         if(Time_Stamp_Low != 0)
 5734              		.loc 1 2226 0
 5735 0068 BB6B     		ldr	r3, [r7, #56]
 5736 006a 002B     		cmp	r3, #0
 5737 006c 03D0     		beq	.L293
2227:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Time_Stamp_Low = rxdesc->timestamplow; 
 5738              		.loc 1 2227 0
 5739 006e 3B69     		ldr	r3, [r7, #16]
 5740 0070 9A69     		ldr	r2, [r3, #24]
 5741 0072 BB6B     		ldr	r3, [r7, #56]
 5742 0074 1A60     		str	r2, [r3, #0]
 5743              	.L293:
2228:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2229:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length1 != 0)
 5744              		.loc 1 2229 0
 5745 0076 3B68     		ldr	r3, [r7, #0]
 5746 0078 002B     		cmp	r3, #0
 5747 007a 07D0     		beq	.L294
2230:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length1 = (rxdesc->length & DescSize1Mask) >> DescSize1Shift;
 5748              		.loc 1 2230 0
 5749 007c 3B69     		ldr	r3, [r7, #16]
 5750 007e 5B68     		ldr	r3, [r3, #4]
 5751 0080 4FEAC343 		lsl	r3, r3, #19
 5752 0084 4FEAD343 		lsr	r3, r3, #19
 5753 0088 3A68     		ldr	r2, [r7, #0]
 5754 008a 1360     		str	r3, [r2, #0]
 5755              	.L294:
2231:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer1 != 0)
 5756              		.loc 1 2231 0
 5757 008c 7B68     		ldr	r3, [r7, #4]
 5758 008e 002B     		cmp	r3, #0
 5759 0090 03D0     		beq	.L295
2232:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer1 = rxdesc->buffer1;
 5760              		.loc 1 2232 0
 5761 0092 3B69     		ldr	r3, [r7, #16]
 5762 0094 9A68     		ldr	r2, [r3, #8]
 5763 0096 7B68     		ldr	r3, [r7, #4]
 5764 0098 1A60     		str	r2, [r3, #0]
 5765              	.L295:
2233:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
 5766              		.loc 1 2233 0
 5767 009a 3B6A     		ldr	r3, [r7, #32]
 5768 009c 002B     		cmp	r3, #0
 5769 009e 03D0     		beq	.L296
2234:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data1 = rxdesc->data1;
 5770              		.loc 1 2234 0
 5771 00a0 3B69     		ldr	r3, [r7, #16]
 5772 00a2 1A6A     		ldr	r2, [r3, #32]
 5773 00a4 3B6A     		ldr	r3, [r7, #32]
 5774 00a6 1A60     		str	r2, [r3, #0]
 5775              	.L296:
2235:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2236:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length2 != 0)
 5776              		.loc 1 2236 0
 5777 00a8 BB6A     		ldr	r3, [r7, #40]
 5778 00aa 002B     		cmp	r3, #0
 5779 00ac 0AD0     		beq	.L297
2237:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length2 = (rxdesc->length & DescSize2Mask) >> DescSize2Shift;
 5780              		.loc 1 2237 0
 5781 00ae 3B69     		ldr	r3, [r7, #16]
 5782 00b0 5A68     		ldr	r2, [r3, #4]
 5783 00b2 4FF00003 		mov	r3, #0
 5784 00b6 C1F6FF73 		movt	r3, 8191
 5785 00ba 1340     		ands	r3, r3, r2
 5786 00bc 4FEA1342 		lsr	r2, r3, #16
 5787 00c0 BB6A     		ldr	r3, [r7, #40]
 5788 00c2 1A60     		str	r2, [r3, #0]
 5789              	.L297:
2238:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer2 != 0)
 5790              		.loc 1 2238 0
 5791 00c4 7B6A     		ldr	r3, [r7, #36]
 5792 00c6 002B     		cmp	r3, #0
 5793 00c8 03D0     		beq	.L298
2239:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer2 = rxdesc->buffer2;
 5794              		.loc 1 2239 0
 5795 00ca 3B69     		ldr	r3, [r7, #16]
 5796 00cc DA68     		ldr	r2, [r3, #12]
 5797 00ce 7B6A     		ldr	r3, [r7, #36]
 5798 00d0 1A60     		str	r2, [r3, #0]
 5799              	.L298:
2240:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
 5800              		.loc 1 2240 0
 5801 00d2 3B6A     		ldr	r3, [r7, #32]
 5802 00d4 002B     		cmp	r3, #0
 5803 00d6 03D0     		beq	.L299
2241:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data2 = rxdesc->data2;
 5804              		.loc 1 2241 0
 5805 00d8 3B69     		ldr	r3, [r7, #16]
 5806 00da 5A6A     		ldr	r2, [r3, #36]
 5807 00dc FB6A     		ldr	r3, [r7, #44]
 5808 00de 1A60     		str	r2, [r3, #0]
 5809              	.L299:
2242:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2243:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->RxBusy     = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? 0 : rxnext + 1;
 5810              		.loc 1 2243 0
 5811 00e0 F868     		ldr	r0, [r7, #12]
 5812 00e2 3969     		ldr	r1, [r7, #16]
 5813 00e4 FFF7FEFF 		bl	synopGMAC_is_last_rx_desc
 5814 00e8 0346     		mov	r3, r0
 5815 00ea 002B     		cmp	r3, #0
 5816 00ec 03D1     		bne	.L300
 5817              		.loc 1 2243 0 is_stmt 0 discriminator 1
 5818 00ee 7B69     		ldr	r3, [r7, #20]
 5819 00f0 03F10103 		add	r3, r3, #1
 5820 00f4 01E0     		b	.L301
 5821              	.L300:
 5822              		.loc 1 2243 0 discriminator 2
 5823 00f6 4FF00003 		mov	r3, #0
 5824              	.L301:
 5825              		.loc 1 2243 0 discriminator 3
 5826 00fa FA68     		ldr	r2, [r7, #12]
 5827 00fc 9363     		str	r3, [r2, #56]
2244:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2245:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	//TR("%02d %08x %08x %08x %08x %08x %08x %08x\n",rxnext,(u32)rxdesc,rxdesc->status,rxdesc->length,
2246:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	(gmacdev->BusyRxDesc)--; //busy tx descriptor is reduced by one as it will be handed over to Proce
 5828              		.loc 1 2246 0 is_stmt 1 discriminator 3
 5829 00fe FB68     		ldr	r3, [r7, #12]
 5830 0100 5B6A     		ldr	r3, [r3, #36]
 5831 0102 03F1FF32 		add	r2, r3, #-1
 5832 0106 FB68     		ldr	r3, [r7, #12]
 5833 0108 5A62     		str	r2, [r3, #36]
2247:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return(rxnext);
 5834              		.loc 1 2247 0 discriminator 3
 5835 010a 7B69     		ldr	r3, [r7, #20]
 5836              	.L288:
2248:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2249:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 5837              		.loc 1 2249 0
 5838 010c 1846     		mov	r0, r3
 5839 010e 07F11807 		add	r7, r7, #24
 5840 0112 BD46     		mov	sp, r7
 5841 0114 80BD     		pop	{r7, pc}
 5842              		.cfi_endproc
 5843              	.LFE224:
 5845 0116 00BF     		.section	.text.synopGMAC_clear_interrupt,"ax",%progbits
 5846              		.align	2
 5847              		.global	synopGMAC_clear_interrupt
 5848              		.thumb
 5849              		.thumb_func
 5851              	synopGMAC_clear_interrupt:
 5852              	.LFB225:
2250:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #else
2251:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2252:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2253:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Get back the descriptor from DMA after data has been received.
2254:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When the DMA indicates that the data is received (interrupt is generated), this function should
2255:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * called to get the descriptor and hence the data buffers received. With successful return from t
2256:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * function caller gets the descriptor fields for processing. check the parameters to understand t
2257:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * fields returned.`
2258:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2259:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] pointer to hold the status of DMA.
2260:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] Dma-able buffer1 pointer.
2261:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] pointer to hold length of buffer1 (Max is 2048).
2262:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual pointer for buffer1.
2263:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] Dma-able buffer2 pointer.
2264:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] pointer to hold length of buffer2 (Max is 2048).
2265:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[out] virtual pointer for buffer2.
2266:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns present rx descriptor index on success. Negative value if error.
2267:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2268:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** s32 synopGMAC_get_rx_qptr(synopGMACdevice * gmacdev, u32 * Status, u32 * Buffer1, u32 * Length1, u3
2269:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
2270:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 rxnext       = gmacdev->RxBusy;	// index of descriptor the DMA just completed. May be useful w
2271:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 						//is spread over multiple buffers/descriptors
2272:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc * rxdesc = gmacdev->RxBusyDesc;
2273:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_desc_owned_by_dma(rxdesc))
2274:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
2275:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_desc_empty(rxdesc))
2276:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		return -1;
2277:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
2278:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2279:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Status != 0)
2280:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Status = rxdesc->status;// send the status of this descriptor
2281:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2282:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length1 != 0)
2283:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length1 = (rxdesc->length & DescSize1Mask) >> DescSize1Shift;
2284:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer1 != 0)
2285:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer1 = rxdesc->buffer1;
2286:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0)
2287:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data1 = rxdesc->data1;
2288:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2289:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Length2 != 0)
2290:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Length2 = (rxdesc->length & DescSize2Mask) >> DescSize2Shift;
2291:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Buffer2 != 0)
2292:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Buffer2 = rxdesc->buffer2;
2293:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(Data1 != 0) /* Should it be Data2 instead*/
2294:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		*Data2 = rxdesc->data2;
2295:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2296:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	gmacdev->RxBusy     = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? 0 : rxnext + 1;
2297:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2298:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(synopGMAC_is_rx_desc_chained(rxdesc)){
2299:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	   	gmacdev->RxBusyDesc = (DmaDesc *)rxdesc->data2;
2300:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_rx_desc_init_chain(rxdesc);
2301:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		//synopGMAC_desc_init_chain(rxdesc, synopGMAC_is_last_rx_desc(gmacdev,rxdesc),0,0);
2302:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2303:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else{
2304:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		gmacdev->RxBusyDesc = synopGMAC_is_last_rx_desc(gmacdev,rxdesc) ? gmacdev->RxDesc : (rxdesc + 1);
2305:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMAC_rx_desc_init_ring(rxdesc, synopGMAC_is_last_rx_desc(gmacdev,rxdesc));
2306:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2307:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	(gmacdev->BusyRxDesc)--; //This returns one descriptor to processor. So busy count will be decreme
2308:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2309:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return(rxnext);
2310:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2311:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
2312:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2313:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
2314:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2315:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2316:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Clears all the pending interrupts.
2317:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * If the Dma status register is read then all the interrupts gets cleared
2318:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2319:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2320:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2321:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_clear_interrupt(synopGMACdevice *gmacdev)
2322:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 5853              		.loc 1 2322 0
 5854              		.cfi_startproc
 5855              		@ args = 0, pretend = 0, frame = 16
 5856              		@ frame_needed = 1, uses_anonymous_args = 0
 5857 0000 80B5     		push	{r7, lr}
 5858              	.LCFI324:
 5859              		.cfi_def_cfa_offset 8
 5860              		.cfi_offset 7, -8
 5861              		.cfi_offset 14, -4
 5862 0002 84B0     		sub	sp, sp, #16
 5863              	.LCFI325:
 5864              		.cfi_def_cfa_offset 24
 5865 0004 00AF     		add	r7, sp, #0
 5866              	.LCFI326:
 5867              		.cfi_def_cfa_register 7
 5868 0006 7860     		str	r0, [r7, #4]
2323:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
2324:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaStatus);
 5869              		.loc 1 2324 0
 5870 0008 7B68     		ldr	r3, [r7, #4]
 5871 000a 5B68     		ldr	r3, [r3, #4]
 5872 000c 1846     		mov	r0, r3
 5873 000e 4FF01401 		mov	r1, #20
 5874 0012 FFF7FEFF 		bl	synopGMACReadReg
 5875 0016 F860     		str	r0, [r7, #12]
2325:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaStatus ,data);
 5876              		.loc 1 2325 0
 5877 0018 7B68     		ldr	r3, [r7, #4]
 5878 001a 5B68     		ldr	r3, [r3, #4]
 5879 001c 1846     		mov	r0, r3
 5880 001e 4FF01401 		mov	r1, #20
 5881 0022 FA68     		ldr	r2, [r7, #12]
 5882 0024 FFF7FEFF 		bl	synopGMACWriteReg
2326:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 5883              		.loc 1 2326 0
 5884 0028 07F11007 		add	r7, r7, #16
 5885 002c BD46     		mov	sp, r7
 5886 002e 80BD     		pop	{r7, pc}
 5887              		.cfi_endproc
 5888              	.LFE225:
 5890              		.section	.text.synopGMAC_get_interrupt_type,"ax",%progbits
 5891              		.align	2
 5892              		.global	synopGMAC_get_interrupt_type
 5893              		.thumb
 5894              		.thumb_func
 5896              	synopGMAC_get_interrupt_type:
 5897              	.LFB226:
2327:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2328:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2329:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Returns the all unmasked interrupt status after reading the DmaStatus register.
2330:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2331:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 upon success. Error code upon failure.
2332:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2333:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_get_interrupt_type(synopGMACdevice *gmacdev)
2334:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 5898              		.loc 1 2334 0
 5899              		.cfi_startproc
 5900              		@ args = 0, pretend = 0, frame = 16
 5901              		@ frame_needed = 1, uses_anonymous_args = 0
 5902 0000 80B5     		push	{r7, lr}
 5903              	.LCFI327:
 5904              		.cfi_def_cfa_offset 8
 5905              		.cfi_offset 7, -8
 5906              		.cfi_offset 14, -4
 5907 0002 84B0     		sub	sp, sp, #16
 5908              	.LCFI328:
 5909              		.cfi_def_cfa_offset 24
 5910 0004 00AF     		add	r7, sp, #0
 5911              	.LCFI329:
 5912              		.cfi_def_cfa_register 7
 5913 0006 7860     		str	r0, [r7, #4]
2335:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
2336:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 interrupts = 0;
 5914              		.loc 1 2336 0
 5915 0008 4FF00003 		mov	r3, #0
 5916 000c FB60     		str	r3, [r7, #12]
2337:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaStatus);
 5917              		.loc 1 2337 0
 5918 000e 7B68     		ldr	r3, [r7, #4]
 5919 0010 5B68     		ldr	r3, [r3, #4]
 5920 0012 1846     		mov	r0, r3
 5921 0014 4FF01401 		mov	r1, #20
 5922 0018 FFF7FEFF 		bl	synopGMACReadReg
 5923 001c B860     		str	r0, [r7, #8]
2338:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaStatus ,data); //This is the appropriate location to
 5924              		.loc 1 2338 0
 5925 001e 7B68     		ldr	r3, [r7, #4]
 5926 0020 5B68     		ldr	r3, [r3, #4]
 5927 0022 1846     		mov	r0, r3
 5928 0024 4FF01401 		mov	r1, #20
 5929 0028 BA68     		ldr	r2, [r7, #8]
 5930 002a FFF7FEFF 		bl	synopGMACWriteReg
2339:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(data & DmaIntErrorMask)	interrupts     |= synopGMACDmaError;
 5931              		.loc 1 2339 0
 5932 002e BB68     		ldr	r3, [r7, #8]
 5933 0030 03F40053 		and	r3, r3, #8192
 5934 0034 002B     		cmp	r3, #0
 5935 0036 03D0     		beq	.L304
 5936              		.loc 1 2339 0 is_stmt 0 discriminator 1
 5937 0038 FB68     		ldr	r3, [r7, #12]
 5938 003a 43F08003 		orr	r3, r3, #128
 5939 003e FB60     		str	r3, [r7, #12]
 5940              	.L304:
2340:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(data & DmaIntRxNormMask)	interrupts     |= synopGMACDmaRxNormal;
 5941              		.loc 1 2340 0 is_stmt 1
 5942 0040 BB68     		ldr	r3, [r7, #8]
 5943 0042 03F04003 		and	r3, r3, #64
 5944 0046 002B     		cmp	r3, #0
 5945 0048 03D0     		beq	.L305
 5946              		.loc 1 2340 0 is_stmt 0 discriminator 1
 5947 004a FB68     		ldr	r3, [r7, #12]
 5948 004c 43F00103 		orr	r3, r3, #1
 5949 0050 FB60     		str	r3, [r7, #12]
 5950              	.L305:
2341:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(data & DmaIntRxAbnMask)	interrupts     |= synopGMACDmaRxAbnormal;
 5951              		.loc 1 2341 0 is_stmt 1
 5952 0052 BB68     		ldr	r3, [r7, #8]
 5953 0054 03F08003 		and	r3, r3, #128
 5954 0058 002B     		cmp	r3, #0
 5955 005a 03D0     		beq	.L306
 5956              		.loc 1 2341 0 is_stmt 0 discriminator 1
 5957 005c FB68     		ldr	r3, [r7, #12]
 5958 005e 43F00203 		orr	r3, r3, #2
 5959 0062 FB60     		str	r3, [r7, #12]
 5960              	.L306:
2342:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(data & DmaIntRxStoppedMask)	interrupts |= synopGMACDmaRxStopped;
 5961              		.loc 1 2342 0 is_stmt 1
 5962 0064 BB68     		ldr	r3, [r7, #8]
 5963 0066 03F48073 		and	r3, r3, #256
 5964 006a 002B     		cmp	r3, #0
 5965 006c 03D0     		beq	.L307
 5966              		.loc 1 2342 0 is_stmt 0 discriminator 1
 5967 006e FB68     		ldr	r3, [r7, #12]
 5968 0070 43F00403 		orr	r3, r3, #4
 5969 0074 FB60     		str	r3, [r7, #12]
 5970              	.L307:
2343:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(data & DmaIntTxNormMask)	interrupts     |= synopGMACDmaTxNormal;
 5971              		.loc 1 2343 0 is_stmt 1
 5972 0076 BB68     		ldr	r3, [r7, #8]
 5973 0078 03F00103 		and	r3, r3, #1
 5974 007c 002B     		cmp	r3, #0
 5975 007e 03D0     		beq	.L308
 5976              		.loc 1 2343 0 is_stmt 0 discriminator 1
 5977 0080 FB68     		ldr	r3, [r7, #12]
 5978 0082 43F00803 		orr	r3, r3, #8
 5979 0086 FB60     		str	r3, [r7, #12]
 5980              	.L308:
2344:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(data & DmaIntTxAbnMask)	interrupts     |= synopGMACDmaTxAbnormal;
 5981              		.loc 1 2344 0 is_stmt 1
 5982 0088 BB68     		ldr	r3, [r7, #8]
 5983 008a 03F02003 		and	r3, r3, #32
 5984 008e 002B     		cmp	r3, #0
 5985 0090 03D0     		beq	.L309
 5986              		.loc 1 2344 0 is_stmt 0 discriminator 1
 5987 0092 FB68     		ldr	r3, [r7, #12]
 5988 0094 43F01003 		orr	r3, r3, #16
 5989 0098 FB60     		str	r3, [r7, #12]
 5990              	.L309:
2345:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(data & DmaIntTxStoppedMask)	interrupts |= synopGMACDmaTxStopped;
 5991              		.loc 1 2345 0 is_stmt 1
 5992 009a BB68     		ldr	r3, [r7, #8]
 5993 009c 03F00203 		and	r3, r3, #2
 5994 00a0 002B     		cmp	r3, #0
 5995 00a2 03D0     		beq	.L310
 5996              		.loc 1 2345 0 is_stmt 0 discriminator 1
 5997 00a4 FB68     		ldr	r3, [r7, #12]
 5998 00a6 43F02003 		orr	r3, r3, #32
 5999 00aa FB60     		str	r3, [r7, #12]
 6000              	.L310:
2346:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef AVB_SUPPORT
2347:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****     if(data & DmaSlotCounterIntr)   interrupts |= synopGMADmaSlotCounter;      
2348:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
2349:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2350:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return interrupts;
 6001              		.loc 1 2350 0 is_stmt 1
 6002 00ac FB68     		ldr	r3, [r7, #12]
2351:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6003              		.loc 1 2351 0
 6004 00ae 1846     		mov	r0, r3
 6005 00b0 07F11007 		add	r7, r7, #16
 6006 00b4 BD46     		mov	sp, r7
 6007 00b6 80BD     		pop	{r7, pc}
 6008              		.cfi_endproc
 6009              	.LFE226:
 6011              		.section	.text.synopGMAC_get_interrupt_mask,"ax",%progbits
 6012              		.align	2
 6013              		.global	synopGMAC_get_interrupt_mask
 6014              		.thumb
 6015              		.thumb_func
 6017              	synopGMAC_get_interrupt_mask:
 6018              	.LFB227:
2352:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2353:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2354:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Returns the interrupt mask.
2355:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2356:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return 0 upon success. Error code upon failure.
2357:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2358:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_get_interrupt_mask(synopGMACdevice *gmacdev)
2359:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6019              		.loc 1 2359 0
 6020              		.cfi_startproc
 6021              		@ args = 0, pretend = 0, frame = 8
 6022              		@ frame_needed = 1, uses_anonymous_args = 0
 6023 0000 80B5     		push	{r7, lr}
 6024              	.LCFI330:
 6025              		.cfi_def_cfa_offset 8
 6026              		.cfi_offset 7, -8
 6027              		.cfi_offset 14, -4
 6028 0002 82B0     		sub	sp, sp, #8
 6029              	.LCFI331:
 6030              		.cfi_def_cfa_offset 16
 6031 0004 00AF     		add	r7, sp, #0
 6032              	.LCFI332:
 6033              		.cfi_def_cfa_register 7
 6034 0006 7860     		str	r0, [r7, #4]
2360:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return(synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaInterrupt));
 6035              		.loc 1 2360 0
 6036 0008 7B68     		ldr	r3, [r7, #4]
 6037 000a 5B68     		ldr	r3, [r3, #4]
 6038 000c 1846     		mov	r0, r3
 6039 000e 4FF01C01 		mov	r1, #28
 6040 0012 FFF7FEFF 		bl	synopGMACReadReg
 6041 0016 0346     		mov	r3, r0
2361:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6042              		.loc 1 2361 0
 6043 0018 1846     		mov	r0, r3
 6044 001a 07F10807 		add	r7, r7, #8
 6045 001e BD46     		mov	sp, r7
 6046 0020 80BD     		pop	{r7, pc}
 6047              		.cfi_endproc
 6048              	.LFE227:
 6050 0022 00BF     		.section	.text.synopGMAC_enable_interrupt,"ax",%progbits
 6051              		.align	2
 6052              		.global	synopGMAC_enable_interrupt
 6053              		.thumb
 6054              		.thumb_func
 6056              	synopGMAC_enable_interrupt:
 6057              	.LFB228:
2362:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2363:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2364:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable all the interrupts.
2365:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the DMA interrupt as specified by the bit mask.
2366:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2367:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] bit mask of interrupts to be enabled.
2368:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2369:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2370:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_enable_interrupt(synopGMACdevice *gmacdev, u32 interrupts)
2371:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6058              		.loc 1 2371 0
 6059              		.cfi_startproc
 6060              		@ args = 0, pretend = 0, frame = 8
 6061              		@ frame_needed = 1, uses_anonymous_args = 0
 6062 0000 80B5     		push	{r7, lr}
 6063              	.LCFI333:
 6064              		.cfi_def_cfa_offset 8
 6065              		.cfi_offset 7, -8
 6066              		.cfi_offset 14, -4
 6067 0002 82B0     		sub	sp, sp, #8
 6068              	.LCFI334:
 6069              		.cfi_def_cfa_offset 16
 6070 0004 00AF     		add	r7, sp, #0
 6071              	.LCFI335:
 6072              		.cfi_def_cfa_register 7
 6073 0006 7860     		str	r0, [r7, #4]
 6074 0008 3960     		str	r1, [r7, #0]
2372:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaInterrupt, interrupts);
 6075              		.loc 1 2372 0
 6076 000a 7B68     		ldr	r3, [r7, #4]
 6077 000c 5B68     		ldr	r3, [r3, #4]
 6078 000e 1846     		mov	r0, r3
 6079 0010 4FF01C01 		mov	r1, #28
 6080 0014 3A68     		ldr	r2, [r7, #0]
 6081 0016 FFF7FEFF 		bl	synopGMACWriteReg
2373:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 6082              		.loc 1 2373 0
 6083 001a 00BF     		nop
2374:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6084              		.loc 1 2374 0
 6085 001c 07F10807 		add	r7, r7, #8
 6086 0020 BD46     		mov	sp, r7
 6087 0022 80BD     		pop	{r7, pc}
 6088              		.cfi_endproc
 6089              	.LFE228:
 6091              		.section	.text.synopGMAC_disable_interrupt_all,"ax",%progbits
 6092              		.align	2
 6093              		.global	synopGMAC_disable_interrupt_all
 6094              		.thumb
 6095              		.thumb_func
 6097              	synopGMAC_disable_interrupt_all:
 6098              	.LFB229:
2375:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2376:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2377:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2378:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable all the interrupts.
2379:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables all DMA interrupts.
2380:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2381:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2382:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note This function disabled all the interrupts, if you want to disable a particular interrupt 
2383:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   *  use synopGMAC_disable_interrupt().
2384:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2385:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_interrupt_all(synopGMACdevice *gmacdev)
2386:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6099              		.loc 1 2386 0
 6100              		.cfi_startproc
 6101              		@ args = 0, pretend = 0, frame = 8
 6102              		@ frame_needed = 1, uses_anonymous_args = 0
 6103 0000 80B5     		push	{r7, lr}
 6104              	.LCFI336:
 6105              		.cfi_def_cfa_offset 8
 6106              		.cfi_offset 7, -8
 6107              		.cfi_offset 14, -4
 6108 0002 82B0     		sub	sp, sp, #8
 6109              	.LCFI337:
 6110              		.cfi_def_cfa_offset 16
 6111 0004 00AF     		add	r7, sp, #0
 6112              	.LCFI338:
 6113              		.cfi_def_cfa_register 7
 6114 0006 7860     		str	r0, [r7, #4]
2387:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaInterrupt, DmaIntDisable);
 6115              		.loc 1 2387 0
 6116 0008 7B68     		ldr	r3, [r7, #4]
 6117 000a 5B68     		ldr	r3, [r3, #4]
 6118 000c 1846     		mov	r0, r3
 6119 000e 4FF01C01 		mov	r1, #28
 6120 0012 4FF00002 		mov	r2, #0
 6121 0016 FFF7FEFF 		bl	synopGMACWriteReg
2388:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 6122              		.loc 1 2388 0
 6123 001a 00BF     		nop
2389:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6124              		.loc 1 2389 0
 6125 001c 07F10807 		add	r7, r7, #8
 6126 0020 BD46     		mov	sp, r7
 6127 0022 80BD     		pop	{r7, pc}
 6128              		.cfi_endproc
 6129              	.LFE229:
 6131              		.section	.text.synopGMAC_disable_interrupt,"ax",%progbits
 6132              		.align	2
 6133              		.global	synopGMAC_disable_interrupt
 6134              		.thumb
 6135              		.thumb_func
 6137              	synopGMAC_disable_interrupt:
 6138              	.LFB230:
2390:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2391:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2392:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable interrupt according to the bitfield supplied.
2393:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables only those interrupts specified in the bit mask in second argument.
2394:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2395:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] bit mask for interrupts to be disabled.
2396:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2397:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2398:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_interrupt(synopGMACdevice *gmacdev, u32 interrupts)
2399:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6139              		.loc 1 2399 0
 6140              		.cfi_startproc
 6141              		@ args = 0, pretend = 0, frame = 8
 6142              		@ frame_needed = 1, uses_anonymous_args = 0
 6143 0000 80B5     		push	{r7, lr}
 6144              	.LCFI339:
 6145              		.cfi_def_cfa_offset 8
 6146              		.cfi_offset 7, -8
 6147              		.cfi_offset 14, -4
 6148 0002 82B0     		sub	sp, sp, #8
 6149              	.LCFI340:
 6150              		.cfi_def_cfa_offset 16
 6151 0004 00AF     		add	r7, sp, #0
 6152              	.LCFI341:
 6153              		.cfi_def_cfa_register 7
 6154 0006 7860     		str	r0, [r7, #4]
 6155 0008 3960     		str	r1, [r7, #0]
2400:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->DmaBase, DmaInterrupt, interrupts);
 6156              		.loc 1 2400 0
 6157 000a 7B68     		ldr	r3, [r7, #4]
 6158 000c 5B68     		ldr	r3, [r3, #4]
 6159 000e 1846     		mov	r0, r3
 6160 0010 4FF01C01 		mov	r1, #28
 6161 0014 3A68     		ldr	r2, [r7, #0]
 6162 0016 FFF7FEFF 		bl	synopGMACClearBits
2401:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 6163              		.loc 1 2401 0
 6164 001a 00BF     		nop
2402:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6165              		.loc 1 2402 0
 6166 001c 07F10807 		add	r7, r7, #8
 6167 0020 BD46     		mov	sp, r7
 6168 0022 80BD     		pop	{r7, pc}
 6169              		.cfi_endproc
 6170              	.LFE230:
 6172              		.section	.text.synopGMAC_enable_dma_rx,"ax",%progbits
 6173              		.align	2
 6174              		.global	synopGMAC_enable_dma_rx
 6175              		.thumb
 6176              		.thumb_func
 6178              	synopGMAC_enable_dma_rx:
 6179              	.LFB231:
2403:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2404:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable the DMA Reception.
2405:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2406:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2407:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2408:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_enable_dma_rx(synopGMACdevice * gmacdev)
2409:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6180              		.loc 1 2409 0
 6181              		.cfi_startproc
 6182              		@ args = 0, pretend = 0, frame = 16
 6183              		@ frame_needed = 1, uses_anonymous_args = 0
 6184 0000 80B5     		push	{r7, lr}
 6185              	.LCFI342:
 6186              		.cfi_def_cfa_offset 8
 6187              		.cfi_offset 7, -8
 6188              		.cfi_offset 14, -4
 6189 0002 84B0     		sub	sp, sp, #16
 6190              	.LCFI343:
 6191              		.cfi_def_cfa_offset 24
 6192 0004 00AF     		add	r7, sp, #0
 6193              	.LCFI344:
 6194              		.cfi_def_cfa_register 7
 6195 0006 7860     		str	r0, [r7, #4]
2410:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //	synopGMACSetBits((u32 *)gmacdev->DmaBase, DmaControl, DmaRxStart);
2411:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
2412:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaControl);
 6196              		.loc 1 2412 0
 6197 0008 7B68     		ldr	r3, [r7, #4]
 6198 000a 5B68     		ldr	r3, [r3, #4]
 6199 000c 1846     		mov	r0, r3
 6200 000e 4FF01801 		mov	r1, #24
 6201 0012 FFF7FEFF 		bl	synopGMACReadReg
 6202 0016 F860     		str	r0, [r7, #12]
2413:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   	data |= DmaRxStart; 
 6203              		.loc 1 2413 0
 6204 0018 FB68     		ldr	r3, [r7, #12]
 6205 001a 43F00203 		orr	r3, r3, #2
 6206 001e FB60     		str	r3, [r7, #12]
2414:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaControl ,data);
 6207              		.loc 1 2414 0
 6208 0020 7B68     		ldr	r3, [r7, #4]
 6209 0022 5B68     		ldr	r3, [r3, #4]
 6210 0024 1846     		mov	r0, r3
 6211 0026 4FF01801 		mov	r1, #24
 6212 002a FA68     		ldr	r2, [r7, #12]
 6213 002c FFF7FEFF 		bl	synopGMACWriteReg
2415:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2416:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6214              		.loc 1 2416 0
 6215 0030 07F11007 		add	r7, r7, #16
 6216 0034 BD46     		mov	sp, r7
 6217 0036 80BD     		pop	{r7, pc}
 6218              		.cfi_endproc
 6219              	.LFE231:
 6221              		.section	.text.synopGMAC_enable_dma_tx,"ax",%progbits
 6222              		.align	2
 6223              		.global	synopGMAC_enable_dma_tx
 6224              		.thumb
 6225              		.thumb_func
 6227              	synopGMAC_enable_dma_tx:
 6228              	.LFB232:
2417:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2418:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2419:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable the DMA Transmission.
2420:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2421:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2422:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2423:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_enable_dma_tx(synopGMACdevice * gmacdev)
2424:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6229              		.loc 1 2424 0
 6230              		.cfi_startproc
 6231              		@ args = 0, pretend = 0, frame = 16
 6232              		@ frame_needed = 1, uses_anonymous_args = 0
 6233 0000 80B5     		push	{r7, lr}
 6234              	.LCFI345:
 6235              		.cfi_def_cfa_offset 8
 6236              		.cfi_offset 7, -8
 6237              		.cfi_offset 14, -4
 6238 0002 84B0     		sub	sp, sp, #16
 6239              	.LCFI346:
 6240              		.cfi_def_cfa_offset 24
 6241 0004 00AF     		add	r7, sp, #0
 6242              	.LCFI347:
 6243              		.cfi_def_cfa_register 7
 6244 0006 7860     		str	r0, [r7, #4]
2425:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //	synopGMACSetBits((u32 *)gmacdev->DmaBase, DmaControl, DmaTxStart);
2426:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
2427:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaControl);
 6245              		.loc 1 2427 0
 6246 0008 7B68     		ldr	r3, [r7, #4]
 6247 000a 5B68     		ldr	r3, [r3, #4]
 6248 000c 1846     		mov	r0, r3
 6249 000e 4FF01801 		mov	r1, #24
 6250 0012 FFF7FEFF 		bl	synopGMACReadReg
 6251 0016 F860     		str	r0, [r7, #12]
2428:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   	data |= DmaTxStart; 
 6252              		.loc 1 2428 0
 6253 0018 FB68     		ldr	r3, [r7, #12]
 6254 001a 43F40053 		orr	r3, r3, #8192
 6255 001e FB60     		str	r3, [r7, #12]
2429:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaControl ,data);
 6256              		.loc 1 2429 0
 6257 0020 7B68     		ldr	r3, [r7, #4]
 6258 0022 5B68     		ldr	r3, [r3, #4]
 6259 0024 1846     		mov	r0, r3
 6260 0026 4FF01801 		mov	r1, #24
 6261 002a FA68     		ldr	r2, [r7, #12]
 6262 002c FFF7FEFF 		bl	synopGMACWriteReg
2430:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2431:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6263              		.loc 1 2431 0
 6264 0030 07F11007 		add	r7, r7, #16
 6265 0034 BD46     		mov	sp, r7
 6266 0036 80BD     		pop	{r7, pc}
 6267              		.cfi_endproc
 6268              	.LFE232:
 6270              		.section	.text.synopGMAC_resume_dma_tx,"ax",%progbits
 6271              		.align	2
 6272              		.global	synopGMAC_resume_dma_tx
 6273              		.thumb
 6274              		.thumb_func
 6276              	synopGMAC_resume_dma_tx:
 6277              	.LFB233:
2432:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2433:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2434:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Resumes the DMA Transmission.
2435:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * the DmaTxPollDemand is written. (the data writeen could be anything).
2436:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This forces the DMA to resume transmission.
2437:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2438:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2439:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2440:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_resume_dma_tx(synopGMACdevice * gmacdev)
2441:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6278              		.loc 1 2441 0
 6279              		.cfi_startproc
 6280              		@ args = 0, pretend = 0, frame = 8
 6281              		@ frame_needed = 1, uses_anonymous_args = 0
 6282 0000 80B5     		push	{r7, lr}
 6283              	.LCFI348:
 6284              		.cfi_def_cfa_offset 8
 6285              		.cfi_offset 7, -8
 6286              		.cfi_offset 14, -4
 6287 0002 82B0     		sub	sp, sp, #8
 6288              	.LCFI349:
 6289              		.cfi_def_cfa_offset 16
 6290 0004 00AF     		add	r7, sp, #0
 6291              	.LCFI350:
 6292              		.cfi_def_cfa_register 7
 6293 0006 7860     		str	r0, [r7, #4]
2442:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaTxPollDemand, 0);
 6294              		.loc 1 2442 0
 6295 0008 7B68     		ldr	r3, [r7, #4]
 6296 000a 5B68     		ldr	r3, [r3, #4]
 6297 000c 1846     		mov	r0, r3
 6298 000e 4FF00401 		mov	r1, #4
 6299 0012 4FF00002 		mov	r2, #0
 6300 0016 FFF7FEFF 		bl	synopGMACWriteReg
2443:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2444:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6301              		.loc 1 2444 0
 6302 001a 07F10807 		add	r7, r7, #8
 6303 001e BD46     		mov	sp, r7
 6304 0020 80BD     		pop	{r7, pc}
 6305              		.cfi_endproc
 6306              	.LFE233:
 6308 0022 00BF     		.section	.text.synopGMAC_resume_dma_rx,"ax",%progbits
 6309              		.align	2
 6310              		.global	synopGMAC_resume_dma_rx
 6311              		.thumb
 6312              		.thumb_func
 6314              	synopGMAC_resume_dma_rx:
 6315              	.LFB234:
2445:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2446:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Resumes the DMA Reception.
2447:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * the DmaRxPollDemand is written. (the data writeen could be anything).
2448:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This forces the DMA to resume reception.
2449:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2450:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2451:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2452:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_resume_dma_rx(synopGMACdevice * gmacdev)
2453:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6316              		.loc 1 2453 0
 6317              		.cfi_startproc
 6318              		@ args = 0, pretend = 0, frame = 8
 6319              		@ frame_needed = 1, uses_anonymous_args = 0
 6320 0000 80B5     		push	{r7, lr}
 6321              	.LCFI351:
 6322              		.cfi_def_cfa_offset 8
 6323              		.cfi_offset 7, -8
 6324              		.cfi_offset 14, -4
 6325 0002 82B0     		sub	sp, sp, #8
 6326              	.LCFI352:
 6327              		.cfi_def_cfa_offset 16
 6328 0004 00AF     		add	r7, sp, #0
 6329              	.LCFI353:
 6330              		.cfi_def_cfa_register 7
 6331 0006 7860     		str	r0, [r7, #4]
2454:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaRxPollDemand, 0);
 6332              		.loc 1 2454 0
 6333 0008 7B68     		ldr	r3, [r7, #4]
 6334 000a 5B68     		ldr	r3, [r3, #4]
 6335 000c 1846     		mov	r0, r3
 6336 000e 4FF00801 		mov	r1, #8
 6337 0012 4FF00002 		mov	r2, #0
 6338 0016 FFF7FEFF 		bl	synopGMACWriteReg
2455:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2456:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6339              		.loc 1 2456 0
 6340 001a 07F10807 		add	r7, r7, #8
 6341 001e BD46     		mov	sp, r7
 6342 0020 80BD     		pop	{r7, pc}
 6343              		.cfi_endproc
 6344              	.LFE234:
 6346 0022 00BF     		.section	.text.synopGMAC_take_desc_ownership,"ax",%progbits
 6347              		.align	2
 6348              		.global	synopGMAC_take_desc_ownership
 6349              		.thumb
 6350              		.thumb_func
 6352              	synopGMAC_take_desc_ownership:
 6353              	.LFB235:
2457:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2458:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Take ownership of this Descriptor.
2459:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The function is same for both the ring mode and the chain mode DMA structures.
2460:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2461:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2462:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2463:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_take_desc_ownership(DmaDesc * desc)
2464:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6354              		.loc 1 2464 0
 6355              		.cfi_startproc
 6356              		@ args = 0, pretend = 0, frame = 8
 6357              		@ frame_needed = 1, uses_anonymous_args = 0
 6358              		@ link register save eliminated.
 6359 0000 80B4     		push	{r7}
 6360              	.LCFI354:
 6361              		.cfi_def_cfa_offset 4
 6362              		.cfi_offset 7, -4
 6363 0002 83B0     		sub	sp, sp, #12
 6364              	.LCFI355:
 6365              		.cfi_def_cfa_offset 16
 6366 0004 00AF     		add	r7, sp, #0
 6367              	.LCFI356:
 6368              		.cfi_def_cfa_register 7
 6369 0006 7860     		str	r0, [r7, #4]
2465:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(desc){
 6370              		.loc 1 2465 0
 6371 0008 7B68     		ldr	r3, [r7, #4]
 6372 000a 002B     		cmp	r3, #0
 6373 000c 05D0     		beq	.L324
2466:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		desc->status &= ~DescOwnByDma;  //Clear the DMA own bit
 6374              		.loc 1 2466 0
 6375 000e 7B68     		ldr	r3, [r7, #4]
 6376 0010 1B68     		ldr	r3, [r3, #0]
 6377 0012 23F00042 		bic	r2, r3, #-2147483648
 6378 0016 7B68     		ldr	r3, [r7, #4]
 6379 0018 1A60     		str	r2, [r3, #0]
 6380              	.L324:
2467:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //		desc->status |= DescError;	// Set the error to indicate this descriptor is bad
2468:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2469:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6381              		.loc 1 2469 0
 6382 001a 07F10C07 		add	r7, r7, #12
 6383 001e BD46     		mov	sp, r7
 6384 0020 80BC     		pop	{r7}
 6385 0022 7047     		bx	lr
 6386              		.cfi_endproc
 6387              	.LFE235:
 6389              		.section	.text.synopGMAC_take_desc_ownership_rx,"ax",%progbits
 6390              		.align	2
 6391              		.global	synopGMAC_take_desc_ownership_rx
 6392              		.thumb
 6393              		.thumb_func
 6395              	synopGMAC_take_desc_ownership_rx:
 6396              	.LFB236:
2470:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2471:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2472:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Take ownership of all the rx Descriptors.
2473:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function is called when there is fatal error in DMA transmission.
2474:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When called it takes the ownership of all the rx descriptor in rx descriptor pool/queue from DM
2475:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The function is same for both the ring mode and the chain mode DMA structures.
2476:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2477:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2478:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note Make sure to disable the transmission before calling this function, otherwise may result 
2479:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2480:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_take_desc_ownership_rx(synopGMACdevice * gmacdev)
2481:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6397              		.loc 1 2481 0
 6398              		.cfi_startproc
 6399              		@ args = 0, pretend = 0, frame = 16
 6400              		@ frame_needed = 1, uses_anonymous_args = 0
 6401 0000 80B5     		push	{r7, lr}
 6402              	.LCFI357:
 6403              		.cfi_def_cfa_offset 8
 6404              		.cfi_offset 7, -8
 6405              		.cfi_offset 14, -4
 6406 0002 84B0     		sub	sp, sp, #16
 6407              	.LCFI358:
 6408              		.cfi_def_cfa_offset 24
 6409 0004 00AF     		add	r7, sp, #0
 6410              	.LCFI359:
 6411              		.cfi_def_cfa_register 7
 6412 0006 7860     		str	r0, [r7, #4]
2482:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	s32 i;
2483:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc *desc;
2484:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc = gmacdev->RxDesc;
 6413              		.loc 1 2484 0
 6414 0008 7B68     		ldr	r3, [r7, #4]
 6415 000a DB69     		ldr	r3, [r3, #28]
 6416 000c BB60     		str	r3, [r7, #8]
2485:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i = 0; i < gmacdev->RxDescCount; i++){
 6417              		.loc 1 2485 0
 6418 000e 4FF00003 		mov	r3, #0
 6419 0012 FB60     		str	r3, [r7, #12]
 6420 0014 1CE0     		b	.L327
 6421              	.L330:
2486:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(synopGMAC_is_rx_desc_chained(desc)){	//This descriptor is in chain mode
 6422              		.loc 1 2486 0
 6423 0016 B868     		ldr	r0, [r7, #8]
 6424 0018 FFF7FEFF 		bl	synopGMAC_is_rx_desc_chained
 6425 001c 0346     		mov	r3, r0
 6426 001e 002B     		cmp	r3, #0
 6427 0020 06D0     		beq	.L328
2487:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
2488:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			synopGMAC_take_desc_ownership(desc);
 6428              		.loc 1 2488 0
 6429 0022 B868     		ldr	r0, [r7, #8]
 6430 0024 FFF7FEFF 		bl	synopGMAC_take_desc_ownership
2489:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			desc = (DmaDesc *)desc->data2;
 6431              		.loc 1 2489 0
 6432 0028 BB68     		ldr	r3, [r7, #8]
 6433 002a 5B6A     		ldr	r3, [r3, #36]
 6434 002c BB60     		str	r3, [r7, #8]
 6435 002e 0BE0     		b	.L329
 6436              	.L328:
2490:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
2491:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		else{
2492:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			synopGMAC_take_desc_ownership(desc + i);
 6437              		.loc 1 2492 0
 6438 0030 FA68     		ldr	r2, [r7, #12]
 6439 0032 1346     		mov	r3, r2
 6440 0034 4FEA8303 		lsl	r3, r3, #2
 6441 0038 9B18     		adds	r3, r3, r2
 6442 003a 4FEAC303 		lsl	r3, r3, #3
 6443 003e BA68     		ldr	r2, [r7, #8]
 6444 0040 D318     		adds	r3, r2, r3
 6445 0042 1846     		mov	r0, r3
 6446 0044 FFF7FEFF 		bl	synopGMAC_take_desc_ownership
 6447              	.L329:
2485:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i = 0; i < gmacdev->RxDescCount; i++){
 6448              		.loc 1 2485 0
 6449 0048 FB68     		ldr	r3, [r7, #12]
 6450 004a 03F10103 		add	r3, r3, #1
 6451 004e FB60     		str	r3, [r7, #12]
 6452              	.L327:
2485:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i = 0; i < gmacdev->RxDescCount; i++){
 6453              		.loc 1 2485 0 is_stmt 0 discriminator 1
 6454 0050 FA68     		ldr	r2, [r7, #12]
 6455 0052 7B68     		ldr	r3, [r7, #4]
 6456 0054 9B6A     		ldr	r3, [r3, #40]
 6457 0056 9A42     		cmp	r2, r3
 6458 0058 DDD3     		bcc	.L330
2493:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
2494:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2495:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6459              		.loc 1 2495 0 is_stmt 1
 6460 005a 07F11007 		add	r7, r7, #16
 6461 005e BD46     		mov	sp, r7
 6462 0060 80BD     		pop	{r7, pc}
 6463              		.cfi_endproc
 6464              	.LFE236:
 6466 0062 00BF     		.section	.text.synopGMAC_take_desc_ownership_tx,"ax",%progbits
 6467              		.align	2
 6468              		.global	synopGMAC_take_desc_ownership_tx
 6469              		.thumb
 6470              		.thumb_func
 6472              	synopGMAC_take_desc_ownership_tx:
 6473              	.LFB237:
2496:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2497:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2498:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Take ownership of all the rx Descriptors.
2499:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function is called when there is fatal error in DMA transmission.
2500:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When called it takes the ownership of all the tx descriptor in tx descriptor pool/queue from DM
2501:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The function is same for both the ring mode and the chain mode DMA structures.
2502:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2503:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2504:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \note Make sure to disable the transmission before calling this function, otherwise may result 
2505:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2506:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_take_desc_ownership_tx(synopGMACdevice * gmacdev)
2507:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6474              		.loc 1 2507 0
 6475              		.cfi_startproc
 6476              		@ args = 0, pretend = 0, frame = 16
 6477              		@ frame_needed = 1, uses_anonymous_args = 0
 6478 0000 80B5     		push	{r7, lr}
 6479              	.LCFI360:
 6480              		.cfi_def_cfa_offset 8
 6481              		.cfi_offset 7, -8
 6482              		.cfi_offset 14, -4
 6483 0002 84B0     		sub	sp, sp, #16
 6484              	.LCFI361:
 6485              		.cfi_def_cfa_offset 24
 6486 0004 00AF     		add	r7, sp, #0
 6487              	.LCFI362:
 6488              		.cfi_def_cfa_register 7
 6489 0006 7860     		str	r0, [r7, #4]
2508:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	s32 i;
2509:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	DmaDesc *desc;
2510:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc = gmacdev->TxDesc;
 6490              		.loc 1 2510 0
 6491 0008 7B68     		ldr	r3, [r7, #4]
 6492 000a 9B69     		ldr	r3, [r3, #24]
 6493 000c BB60     		str	r3, [r7, #8]
2511:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i = 0; i < gmacdev->TxDescCount; i++){
 6494              		.loc 1 2511 0
 6495 000e 4FF00003 		mov	r3, #0
 6496 0012 FB60     		str	r3, [r7, #12]
 6497 0014 1CE0     		b	.L332
 6498              	.L335:
2512:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		if(synopGMAC_is_tx_desc_chained(desc)){	//This descriptor is in chain mode
 6499              		.loc 1 2512 0
 6500 0016 B868     		ldr	r0, [r7, #8]
 6501 0018 FFF7FEFF 		bl	synopGMAC_is_tx_desc_chained
 6502 001c 0346     		mov	r3, r0
 6503 001e 002B     		cmp	r3, #0
 6504 0020 06D0     		beq	.L333
2513:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			synopGMAC_take_desc_ownership(desc);
 6505              		.loc 1 2513 0
 6506 0022 B868     		ldr	r0, [r7, #8]
 6507 0024 FFF7FEFF 		bl	synopGMAC_take_desc_ownership
2514:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			desc = (DmaDesc *)desc->data2;
 6508              		.loc 1 2514 0
 6509 0028 BB68     		ldr	r3, [r7, #8]
 6510 002a 5B6A     		ldr	r3, [r3, #36]
 6511 002c BB60     		str	r3, [r7, #8]
 6512 002e 0BE0     		b	.L334
 6513              	.L333:
2515:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
2516:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		else{
2517:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 			synopGMAC_take_desc_ownership(desc + i);
 6514              		.loc 1 2517 0
 6515 0030 FA68     		ldr	r2, [r7, #12]
 6516 0032 1346     		mov	r3, r2
 6517 0034 4FEA8303 		lsl	r3, r3, #2
 6518 0038 9B18     		adds	r3, r3, r2
 6519 003a 4FEAC303 		lsl	r3, r3, #3
 6520 003e BA68     		ldr	r2, [r7, #8]
 6521 0040 D318     		adds	r3, r2, r3
 6522 0042 1846     		mov	r0, r3
 6523 0044 FFF7FEFF 		bl	synopGMAC_take_desc_ownership
 6524              	.L334:
2511:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i = 0; i < gmacdev->TxDescCount; i++){
 6525              		.loc 1 2511 0
 6526 0048 FB68     		ldr	r3, [r7, #12]
 6527 004a 03F10103 		add	r3, r3, #1
 6528 004e FB60     		str	r3, [r7, #12]
 6529              	.L332:
2511:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i = 0; i < gmacdev->TxDescCount; i++){
 6530              		.loc 1 2511 0 is_stmt 0 discriminator 1
 6531 0050 FA68     		ldr	r2, [r7, #12]
 6532 0052 7B68     		ldr	r3, [r7, #4]
 6533 0054 DB6A     		ldr	r3, [r3, #44]
 6534 0056 9A42     		cmp	r2, r3
 6535 0058 DDD3     		bcc	.L335
2518:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		}
2519:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2520:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
2521:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6536              		.loc 1 2521 0 is_stmt 1
 6537 005a 07F11007 		add	r7, r7, #16
 6538 005e BD46     		mov	sp, r7
 6539 0060 80BD     		pop	{r7, pc}
 6540              		.cfi_endproc
 6541              	.LFE237:
 6543 0062 00BF     		.section	.text.synopGMAC_disable_dma_tx,"ax",%progbits
 6544              		.align	2
 6545              		.global	synopGMAC_disable_dma_tx
 6546              		.thumb
 6547              		.thumb_func
 6549              	synopGMAC_disable_dma_tx:
 6550              	.LFB238:
2522:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2523:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2524:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the DMA for Transmission.
2525:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2526:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2527:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2528:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2529:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_dma_tx(synopGMACdevice * gmacdev)
2530:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {	
 6551              		.loc 1 2530 0
 6552              		.cfi_startproc
 6553              		@ args = 0, pretend = 0, frame = 16
 6554              		@ frame_needed = 1, uses_anonymous_args = 0
 6555 0000 80B5     		push	{r7, lr}
 6556              	.LCFI363:
 6557              		.cfi_def_cfa_offset 8
 6558              		.cfi_offset 7, -8
 6559              		.cfi_offset 14, -4
 6560 0002 84B0     		sub	sp, sp, #16
 6561              	.LCFI364:
 6562              		.cfi_def_cfa_offset 24
 6563 0004 00AF     		add	r7, sp, #0
 6564              	.LCFI365:
 6565              		.cfi_def_cfa_register 7
 6566 0006 7860     		str	r0, [r7, #4]
2531:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //	synopGMACClearBits((u32 *)gmacdev->DmaBase, DmaControl, DmaTxStart);
2532:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
2533:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaControl);
 6567              		.loc 1 2533 0
 6568 0008 7B68     		ldr	r3, [r7, #4]
 6569 000a 5B68     		ldr	r3, [r3, #4]
 6570 000c 1846     		mov	r0, r3
 6571 000e 4FF01801 		mov	r1, #24
 6572 0012 FFF7FEFF 		bl	synopGMACReadReg
 6573 0016 F860     		str	r0, [r7, #12]
2534:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   	data &= (~DmaTxStart); 
 6574              		.loc 1 2534 0
 6575 0018 FB68     		ldr	r3, [r7, #12]
 6576 001a 23F40053 		bic	r3, r3, #8192
 6577 001e FB60     		str	r3, [r7, #12]
2535:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaControl ,data);
 6578              		.loc 1 2535 0
 6579 0020 7B68     		ldr	r3, [r7, #4]
 6580 0022 5B68     		ldr	r3, [r3, #4]
 6581 0024 1846     		mov	r0, r3
 6582 0026 4FF01801 		mov	r1, #24
 6583 002a FA68     		ldr	r2, [r7, #12]
 6584 002c FFF7FEFF 		bl	synopGMACWriteReg
2536:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6585              		.loc 1 2536 0
 6586 0030 07F11007 		add	r7, r7, #16
 6587 0034 BD46     		mov	sp, r7
 6588 0036 80BD     		pop	{r7, pc}
 6589              		.cfi_endproc
 6590              	.LFE238:
 6592              		.section	.text.synopGMAC_disable_dma_rx,"ax",%progbits
 6593              		.align	2
 6594              		.global	synopGMAC_disable_dma_rx
 6595              		.thumb
 6596              		.thumb_func
 6598              	synopGMAC_disable_dma_rx:
 6599              	.LFB239:
2537:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2538:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the DMA for Reception.
2539:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2540:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2541:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2542:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_dma_rx(synopGMACdevice * gmacdev)
2543:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {	
 6600              		.loc 1 2543 0
 6601              		.cfi_startproc
 6602              		@ args = 0, pretend = 0, frame = 16
 6603              		@ frame_needed = 1, uses_anonymous_args = 0
 6604 0000 80B5     		push	{r7, lr}
 6605              	.LCFI366:
 6606              		.cfi_def_cfa_offset 8
 6607              		.cfi_offset 7, -8
 6608              		.cfi_offset 14, -4
 6609 0002 84B0     		sub	sp, sp, #16
 6610              	.LCFI367:
 6611              		.cfi_def_cfa_offset 24
 6612 0004 00AF     		add	r7, sp, #0
 6613              	.LCFI368:
 6614              		.cfi_def_cfa_register 7
 6615 0006 7860     		str	r0, [r7, #4]
2544:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** //	synopGMACClearBits((u32 *)gmacdev->DmaBase, DmaControl, DmaRxStart);
2545:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
2546:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = synopGMACReadReg((u32 *)gmacdev->DmaBase, DmaControl);
 6616              		.loc 1 2546 0
 6617 0008 7B68     		ldr	r3, [r7, #4]
 6618 000a 5B68     		ldr	r3, [r3, #4]
 6619 000c 1846     		mov	r0, r3
 6620 000e 4FF01801 		mov	r1, #24
 6621 0012 FFF7FEFF 		bl	synopGMACReadReg
 6622 0016 F860     		str	r0, [r7, #12]
2547:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   	data &= (~DmaRxStart); 
 6623              		.loc 1 2547 0
 6624 0018 FB68     		ldr	r3, [r7, #12]
 6625 001a 23F00203 		bic	r3, r3, #2
 6626 001e FB60     		str	r3, [r7, #12]
2548:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACWriteReg((u32 *)gmacdev->DmaBase, DmaControl ,data);
 6627              		.loc 1 2548 0
 6628 0020 7B68     		ldr	r3, [r7, #4]
 6629 0022 5B68     		ldr	r3, [r3, #4]
 6630 0024 1846     		mov	r0, r3
 6631 0026 4FF01801 		mov	r1, #24
 6632 002a FA68     		ldr	r2, [r7, #12]
 6633 002c FFF7FEFF 		bl	synopGMACWriteReg
2549:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6634              		.loc 1 2549 0
 6635 0030 07F11007 		add	r7, r7, #16
 6636 0034 BD46     		mov	sp, r7
 6637 0036 80BD     		pop	{r7, pc}
 6638              		.cfi_endproc
 6639              	.LFE239:
 6641              		.section	.text.synopGMAC_pmt_int_enable,"ax",%progbits
 6642              		.align	2
 6643              		.global	synopGMAC_pmt_int_enable
 6644              		.thumb
 6645              		.thumb_func
 6647              	synopGMAC_pmt_int_enable:
 6648              	.LFB240:
2550:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2551:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2552:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	
2553:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*******************PMT APIs***************************************/
2554:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2555:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2556:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2557:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2558:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2559:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the assertion of PMT interrupt.
2560:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This enables the assertion of PMT interrupt due to Magic Pkt or Wakeup frame
2561:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * reception.
2562:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2563:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2564:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2565:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_pmt_int_enable(synopGMACdevice *gmacdev)
2566:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6649              		.loc 1 2566 0
 6650              		.cfi_startproc
 6651              		@ args = 0, pretend = 0, frame = 8
 6652              		@ frame_needed = 1, uses_anonymous_args = 0
 6653 0000 80B5     		push	{r7, lr}
 6654              	.LCFI369:
 6655              		.cfi_def_cfa_offset 8
 6656              		.cfi_offset 7, -8
 6657              		.cfi_offset 14, -4
 6658 0002 82B0     		sub	sp, sp, #8
 6659              	.LCFI370:
 6660              		.cfi_def_cfa_offset 16
 6661 0004 00AF     		add	r7, sp, #0
 6662              	.LCFI371:
 6663              		.cfi_def_cfa_register 7
 6664 0006 7860     		str	r0, [r7, #4]
2567:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacInterruptMask,GmacPmtIntMask); 
 6665              		.loc 1 2567 0
 6666 0008 7B68     		ldr	r3, [r7, #4]
 6667 000a 1B68     		ldr	r3, [r3, #0]
 6668 000c 1846     		mov	r0, r3
 6669 000e 4FF03C01 		mov	r1, #60
 6670 0012 4FF00802 		mov	r2, #8
 6671 0016 FFF7FEFF 		bl	synopGMACClearBits
2568:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         return;
 6672              		.loc 1 2568 0
 6673 001a 00BF     		nop
2569:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6674              		.loc 1 2569 0
 6675 001c 07F10807 		add	r7, r7, #8
 6676 0020 BD46     		mov	sp, r7
 6677 0022 80BD     		pop	{r7, pc}
 6678              		.cfi_endproc
 6679              	.LFE240:
 6681              		.section	.text.synopGMAC_pmt_int_disable,"ax",%progbits
 6682              		.align	2
 6683              		.global	synopGMAC_pmt_int_disable
 6684              		.thumb
 6685              		.thumb_func
 6687              	synopGMAC_pmt_int_disable:
 6688              	.LFB241:
2570:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2571:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables the assertion of PMT interrupt.
2572:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This disables the assertion of PMT interrupt due to Magic Pkt or Wakeup frame
2573:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * reception.
2574:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2575:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2576:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2577:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_pmt_int_disable(synopGMACdevice *gmacdev)
2578:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6689              		.loc 1 2578 0
 6690              		.cfi_startproc
 6691              		@ args = 0, pretend = 0, frame = 8
 6692              		@ frame_needed = 1, uses_anonymous_args = 0
 6693 0000 80B5     		push	{r7, lr}
 6694              	.LCFI372:
 6695              		.cfi_def_cfa_offset 8
 6696              		.cfi_offset 7, -8
 6697              		.cfi_offset 14, -4
 6698 0002 82B0     		sub	sp, sp, #8
 6699              	.LCFI373:
 6700              		.cfi_def_cfa_offset 16
 6701 0004 00AF     		add	r7, sp, #0
 6702              	.LCFI374:
 6703              		.cfi_def_cfa_register 7
 6704 0006 7860     		str	r0, [r7, #4]
2579:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacInterruptMask,GmacPmtIntMask); 
 6705              		.loc 1 2579 0
 6706 0008 7B68     		ldr	r3, [r7, #4]
 6707 000a 1B68     		ldr	r3, [r3, #0]
 6708 000c 1846     		mov	r0, r3
 6709 000e 4FF03C01 		mov	r1, #60
 6710 0012 4FF00802 		mov	r2, #8
 6711 0016 FFF7FEFF 		bl	synopGMACSetBits
2580:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****         return;
 6712              		.loc 1 2580 0
 6713 001a 00BF     		nop
2581:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6714              		.loc 1 2581 0
 6715 001c 07F10807 		add	r7, r7, #8
 6716 0020 BD46     		mov	sp, r7
 6717 0022 80BD     		pop	{r7, pc}
 6718              		.cfi_endproc
 6719              	.LFE241:
 6721              		.section	.text.synopGMAC_power_down_enable,"ax",%progbits
 6722              		.align	2
 6723              		.global	synopGMAC_power_down_enable
 6724              		.thumb
 6725              		.thumb_func
 6727              	synopGMAC_power_down_enable:
 6728              	.LFB242:
2582:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2583:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the power down mode of GMAC.
2584:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function puts the Gmac in power down mode.
2585:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2586:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2587:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2588:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_power_down_enable(synopGMACdevice *gmacdev)
2589:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6729              		.loc 1 2589 0
 6730              		.cfi_startproc
 6731              		@ args = 0, pretend = 0, frame = 8
 6732              		@ frame_needed = 1, uses_anonymous_args = 0
 6733 0000 80B5     		push	{r7, lr}
 6734              	.LCFI375:
 6735              		.cfi_def_cfa_offset 8
 6736              		.cfi_offset 7, -8
 6737              		.cfi_offset 14, -4
 6738 0002 82B0     		sub	sp, sp, #8
 6739              	.LCFI376:
 6740              		.cfi_def_cfa_offset 16
 6741 0004 00AF     		add	r7, sp, #0
 6742              	.LCFI377:
 6743              		.cfi_def_cfa_register 7
 6744 0006 7860     		str	r0, [r7, #4]
2590:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacPmtCtrlStatus,GmacPmtPowerDown);	
 6745              		.loc 1 2590 0
 6746 0008 7B68     		ldr	r3, [r7, #4]
 6747 000a 1B68     		ldr	r3, [r3, #0]
 6748 000c 1846     		mov	r0, r3
 6749 000e 4FF02C01 		mov	r1, #44
 6750 0012 4FF00102 		mov	r2, #1
 6751 0016 FFF7FEFF 		bl	synopGMACSetBits
2591:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 6752              		.loc 1 2591 0
 6753 001a 00BF     		nop
2592:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6754              		.loc 1 2592 0
 6755 001c 07F10807 		add	r7, r7, #8
 6756 0020 BD46     		mov	sp, r7
 6757 0022 80BD     		pop	{r7, pc}
 6758              		.cfi_endproc
 6759              	.LFE242:
 6761              		.section	.text.synopGMAC_power_down_disable,"ax",%progbits
 6762              		.align	2
 6763              		.global	synopGMAC_power_down_disable
 6764              		.thumb
 6765              		.thumb_func
 6767              	synopGMAC_power_down_disable:
 6768              	.LFB243:
2593:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2594:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables the powerd down setting of GMAC.
2595:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * If the driver wants to bring up the GMAC from powerdown mode, even though the magic packet or t
2596:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * wake up frames received from the network, this function should be called.
2597:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2598:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2599:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2600:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_power_down_disable(synopGMACdevice *gmacdev)
2601:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6769              		.loc 1 2601 0
 6770              		.cfi_startproc
 6771              		@ args = 0, pretend = 0, frame = 8
 6772              		@ frame_needed = 1, uses_anonymous_args = 0
 6773 0000 80B5     		push	{r7, lr}
 6774              	.LCFI378:
 6775              		.cfi_def_cfa_offset 8
 6776              		.cfi_offset 7, -8
 6777              		.cfi_offset 14, -4
 6778 0002 82B0     		sub	sp, sp, #8
 6779              	.LCFI379:
 6780              		.cfi_def_cfa_offset 16
 6781 0004 00AF     		add	r7, sp, #0
 6782              	.LCFI380:
 6783              		.cfi_def_cfa_register 7
 6784 0006 7860     		str	r0, [r7, #4]
2602:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacPmtCtrlStatus,GmacPmtPowerDown);	
 6785              		.loc 1 2602 0
 6786 0008 7B68     		ldr	r3, [r7, #4]
 6787 000a 1B68     		ldr	r3, [r3, #0]
 6788 000c 1846     		mov	r0, r3
 6789 000e 4FF02C01 		mov	r1, #44
 6790 0012 4FF00102 		mov	r2, #1
 6791 0016 FFF7FEFF 		bl	synopGMACClearBits
2603:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 6792              		.loc 1 2603 0
 6793 001a 00BF     		nop
2604:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6794              		.loc 1 2604 0
 6795 001c 07F10807 		add	r7, r7, #8
 6796 0020 BD46     		mov	sp, r7
 6797 0022 80BD     		pop	{r7, pc}
 6798              		.cfi_endproc
 6799              	.LFE243:
 6801              		.section	.text.synopGMAC_enable_pmt_interrupt,"ax",%progbits
 6802              		.align	2
 6803              		.global	synopGMAC_enable_pmt_interrupt
 6804              		.thumb
 6805              		.thumb_func
 6807              	synopGMAC_enable_pmt_interrupt:
 6808              	.LFB244:
2605:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2606:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the pmt interrupt generation in powerdown mode.
2607:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2608:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2609:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2610:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_enable_pmt_interrupt(synopGMACdevice *gmacdev)
2611:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6809              		.loc 1 2611 0
 6810              		.cfi_startproc
 6811              		@ args = 0, pretend = 0, frame = 8
 6812              		@ frame_needed = 1, uses_anonymous_args = 0
 6813 0000 80B5     		push	{r7, lr}
 6814              	.LCFI381:
 6815              		.cfi_def_cfa_offset 8
 6816              		.cfi_offset 7, -8
 6817              		.cfi_offset 14, -4
 6818 0002 82B0     		sub	sp, sp, #8
 6819              	.LCFI382:
 6820              		.cfi_def_cfa_offset 16
 6821 0004 00AF     		add	r7, sp, #0
 6822              	.LCFI383:
 6823              		.cfi_def_cfa_register 7
 6824 0006 7860     		str	r0, [r7, #4]
2612:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacInterruptMask,GmacPmtIntMask);	
 6825              		.loc 1 2612 0
 6826 0008 7B68     		ldr	r3, [r7, #4]
 6827 000a 1B68     		ldr	r3, [r3, #0]
 6828 000c 1846     		mov	r0, r3
 6829 000e 4FF03C01 		mov	r1, #60
 6830 0012 4FF00802 		mov	r2, #8
 6831 0016 FFF7FEFF 		bl	synopGMACClearBits
2613:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6832              		.loc 1 2613 0
 6833 001a 07F10807 		add	r7, r7, #8
 6834 001e BD46     		mov	sp, r7
 6835 0020 80BD     		pop	{r7, pc}
 6836              		.cfi_endproc
 6837              	.LFE244:
 6839 0022 00BF     		.section	.text.synopGMAC_disable_pmt_interrupt,"ax",%progbits
 6840              		.align	2
 6841              		.global	synopGMAC_disable_pmt_interrupt
 6842              		.thumb
 6843              		.thumb_func
 6845              	synopGMAC_disable_pmt_interrupt:
 6846              	.LFB245:
2614:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2615:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disables the pmt interrupt generation in powerdown mode.
2616:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2617:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2618:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2619:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_pmt_interrupt(synopGMACdevice *gmacdev)
2620:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6847              		.loc 1 2620 0
 6848              		.cfi_startproc
 6849              		@ args = 0, pretend = 0, frame = 8
 6850              		@ frame_needed = 1, uses_anonymous_args = 0
 6851 0000 80B5     		push	{r7, lr}
 6852              	.LCFI384:
 6853              		.cfi_def_cfa_offset 8
 6854              		.cfi_offset 7, -8
 6855              		.cfi_offset 14, -4
 6856 0002 82B0     		sub	sp, sp, #8
 6857              	.LCFI385:
 6858              		.cfi_def_cfa_offset 16
 6859 0004 00AF     		add	r7, sp, #0
 6860              	.LCFI386:
 6861              		.cfi_def_cfa_register 7
 6862 0006 7860     		str	r0, [r7, #4]
2621:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacInterruptMask,GmacPmtIntMask);	
 6863              		.loc 1 2621 0
 6864 0008 7B68     		ldr	r3, [r7, #4]
 6865 000a 1B68     		ldr	r3, [r3, #0]
 6866 000c 1846     		mov	r0, r3
 6867 000e 4FF03C01 		mov	r1, #60
 6868 0012 4FF00802 		mov	r2, #8
 6869 0016 FFF7FEFF 		bl	synopGMACSetBits
2622:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6870              		.loc 1 2622 0
 6871 001a 07F10807 		add	r7, r7, #8
 6872 001e BD46     		mov	sp, r7
 6873 0020 80BD     		pop	{r7, pc}
 6874              		.cfi_endproc
 6875              	.LFE245:
 6877 0022 00BF     		.section	.text.synopGMAC_magic_packet_enable,"ax",%progbits
 6878              		.align	2
 6879              		.global	synopGMAC_magic_packet_enable
 6880              		.thumb
 6881              		.thumb_func
 6883              	synopGMAC_magic_packet_enable:
 6884              	.LFB246:
2623:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2624:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables GMAC to look for Magic packet.
2625:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2626:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2627:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2628:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_magic_packet_enable(synopGMACdevice *gmacdev)
2629:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6885              		.loc 1 2629 0
 6886              		.cfi_startproc
 6887              		@ args = 0, pretend = 0, frame = 8
 6888              		@ frame_needed = 1, uses_anonymous_args = 0
 6889 0000 80B5     		push	{r7, lr}
 6890              	.LCFI387:
 6891              		.cfi_def_cfa_offset 8
 6892              		.cfi_offset 7, -8
 6893              		.cfi_offset 14, -4
 6894 0002 82B0     		sub	sp, sp, #8
 6895              	.LCFI388:
 6896              		.cfi_def_cfa_offset 16
 6897 0004 00AF     		add	r7, sp, #0
 6898              	.LCFI389:
 6899              		.cfi_def_cfa_register 7
 6900 0006 7860     		str	r0, [r7, #4]
2630:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacPmtCtrlStatus,GmacPmtMagicPktEnable);	
 6901              		.loc 1 2630 0
 6902 0008 7B68     		ldr	r3, [r7, #4]
 6903 000a 1B68     		ldr	r3, [r3, #0]
 6904 000c 1846     		mov	r0, r3
 6905 000e 4FF02C01 		mov	r1, #44
 6906 0012 4FF00202 		mov	r2, #2
 6907 0016 FFF7FEFF 		bl	synopGMACSetBits
2631:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 6908              		.loc 1 2631 0
 6909 001a 00BF     		nop
2632:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6910              		.loc 1 2632 0
 6911 001c 07F10807 		add	r7, r7, #8
 6912 0020 BD46     		mov	sp, r7
 6913 0022 80BD     		pop	{r7, pc}
 6914              		.cfi_endproc
 6915              	.LFE246:
 6917              		.section	.text.synopGMAC_wakeup_frame_enable,"ax",%progbits
 6918              		.align	2
 6919              		.global	synopGMAC_wakeup_frame_enable
 6920              		.thumb
 6921              		.thumb_func
 6923              	synopGMAC_wakeup_frame_enable:
 6924              	.LFB247:
2633:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2634:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2635:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables GMAC to look for wake up frame. 
2636:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Wake up frame is defined by the user.
2637:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2638:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2639:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2640:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_wakeup_frame_enable(synopGMACdevice *gmacdev)
2641:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6925              		.loc 1 2641 0
 6926              		.cfi_startproc
 6927              		@ args = 0, pretend = 0, frame = 8
 6928              		@ frame_needed = 1, uses_anonymous_args = 0
 6929 0000 80B5     		push	{r7, lr}
 6930              	.LCFI390:
 6931              		.cfi_def_cfa_offset 8
 6932              		.cfi_offset 7, -8
 6933              		.cfi_offset 14, -4
 6934 0002 82B0     		sub	sp, sp, #8
 6935              	.LCFI391:
 6936              		.cfi_def_cfa_offset 16
 6937 0004 00AF     		add	r7, sp, #0
 6938              	.LCFI392:
 6939              		.cfi_def_cfa_register 7
 6940 0006 7860     		str	r0, [r7, #4]
2642:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacPmtCtrlStatus,GmacPmtWakeupFrameEnable);	
 6941              		.loc 1 2642 0
 6942 0008 7B68     		ldr	r3, [r7, #4]
 6943 000a 1B68     		ldr	r3, [r3, #0]
 6944 000c 1846     		mov	r0, r3
 6945 000e 4FF02C01 		mov	r1, #44
 6946 0012 4FF00402 		mov	r2, #4
 6947 0016 FFF7FEFF 		bl	synopGMACSetBits
2643:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 6948              		.loc 1 2643 0
 6949 001a 00BF     		nop
2644:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6950              		.loc 1 2644 0
 6951 001c 07F10807 		add	r7, r7, #8
 6952 0020 BD46     		mov	sp, r7
 6953 0022 80BD     		pop	{r7, pc}
 6954              		.cfi_endproc
 6955              	.LFE247:
 6957              		.section	.text.synopGMAC_pmt_unicast_enable,"ax",%progbits
 6958              		.align	2
 6959              		.global	synopGMAC_pmt_unicast_enable
 6960              		.thumb
 6961              		.thumb_func
 6963              	synopGMAC_pmt_unicast_enable:
 6964              	.LFB248:
2645:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2646:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2647:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables wake-up frame filter to handle unicast packets.
2648:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2649:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2650:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2651:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_pmt_unicast_enable(synopGMACdevice *gmacdev)
2652:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 6965              		.loc 1 2652 0
 6966              		.cfi_startproc
 6967              		@ args = 0, pretend = 0, frame = 8
 6968              		@ frame_needed = 1, uses_anonymous_args = 0
 6969 0000 80B5     		push	{r7, lr}
 6970              	.LCFI393:
 6971              		.cfi_def_cfa_offset 8
 6972              		.cfi_offset 7, -8
 6973              		.cfi_offset 14, -4
 6974 0002 82B0     		sub	sp, sp, #8
 6975              	.LCFI394:
 6976              		.cfi_def_cfa_offset 16
 6977 0004 00AF     		add	r7, sp, #0
 6978              	.LCFI395:
 6979              		.cfi_def_cfa_register 7
 6980 0006 7860     		str	r0, [r7, #4]
2653:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacPmtCtrlStatus,GmacPmtGlobalUnicast);	
 6981              		.loc 1 2653 0
 6982 0008 7B68     		ldr	r3, [r7, #4]
 6983 000a 1B68     		ldr	r3, [r3, #0]
 6984 000c 1846     		mov	r0, r3
 6985 000e 4FF02C01 		mov	r1, #44
 6986 0012 4FF40072 		mov	r2, #512
 6987 0016 FFF7FEFF 		bl	synopGMACSetBits
2654:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 6988              		.loc 1 2654 0
 6989 001a 00BF     		nop
2655:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 6990              		.loc 1 2655 0
 6991 001c 07F10807 		add	r7, r7, #8
 6992 0020 BD46     		mov	sp, r7
 6993 0022 80BD     		pop	{r7, pc}
 6994              		.cfi_endproc
 6995              	.LFE248:
 6997              		.section	.text.synopGMAC_is_magic_packet_received,"ax",%progbits
 6998              		.align	2
 6999              		.global	synopGMAC_is_magic_packet_received
 7000              		.thumb
 7001              		.thumb_func
 7003              	synopGMAC_is_magic_packet_received:
 7004              	.LFB249:
2656:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2657:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether the packet received is a magic packet?.
2658:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2659:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns True if magic packet received else returns false.
2660:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2661:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_magic_packet_received(synopGMACdevice *gmacdev)
2662:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7005              		.loc 1 2662 0
 7006              		.cfi_startproc
 7007              		@ args = 0, pretend = 0, frame = 16
 7008              		@ frame_needed = 1, uses_anonymous_args = 0
 7009 0000 80B5     		push	{r7, lr}
 7010              	.LCFI396:
 7011              		.cfi_def_cfa_offset 8
 7012              		.cfi_offset 7, -8
 7013              		.cfi_offset 14, -4
 7014 0002 84B0     		sub	sp, sp, #16
 7015              	.LCFI397:
 7016              		.cfi_def_cfa_offset 24
 7017 0004 00AF     		add	r7, sp, #0
 7018              	.LCFI398:
 7019              		.cfi_def_cfa_register 7
 7020 0006 7860     		str	r0, [r7, #4]
2663:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
2664:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = 	synopGMACReadReg((u32 *)gmacdev->MacBase,GmacPmtCtrlStatus);	
 7021              		.loc 1 2664 0
 7022 0008 7B68     		ldr	r3, [r7, #4]
 7023 000a 1B68     		ldr	r3, [r3, #0]
 7024 000c 1846     		mov	r0, r3
 7025 000e 4FF02C01 		mov	r1, #44
 7026 0012 FFF7FEFF 		bl	synopGMACReadReg
 7027 0016 F860     		str	r0, [r7, #12]
2665:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((data & GmacPmtMagicPktReceived) == GmacPmtMagicPktReceived);
 7028              		.loc 1 2665 0
 7029 0018 FB68     		ldr	r3, [r7, #12]
 7030 001a 03F02003 		and	r3, r3, #32
 7031 001e 002B     		cmp	r3, #0
 7032 0020 0CBF     		ite	eq
 7033 0022 0023     		moveq	r3, #0
 7034 0024 0123     		movne	r3, #1
 7035 0026 DBB2     		uxtb	r3, r3
2666:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7036              		.loc 1 2666 0
 7037 0028 1846     		mov	r0, r3
 7038 002a 07F11007 		add	r7, r7, #16
 7039 002e BD46     		mov	sp, r7
 7040 0030 80BD     		pop	{r7, pc}
 7041              		.cfi_endproc
 7042              	.LFE249:
 7044 0032 00BF     		.section	.text.synopGMAC_is_wakeup_frame_received,"ax",%progbits
 7045              		.align	2
 7046              		.global	synopGMAC_is_wakeup_frame_received
 7047              		.thumb
 7048              		.thumb_func
 7050              	synopGMAC_is_wakeup_frame_received:
 7051              	.LFB250:
2667:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2668:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks whether the packet received is a wakeup frame?.
2669:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2670:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if wakeup frame received else returns false.
2671:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2672:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_wakeup_frame_received(synopGMACdevice *gmacdev)
2673:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7052              		.loc 1 2673 0
 7053              		.cfi_startproc
 7054              		@ args = 0, pretend = 0, frame = 16
 7055              		@ frame_needed = 1, uses_anonymous_args = 0
 7056 0000 80B5     		push	{r7, lr}
 7057              	.LCFI399:
 7058              		.cfi_def_cfa_offset 8
 7059              		.cfi_offset 7, -8
 7060              		.cfi_offset 14, -4
 7061 0002 84B0     		sub	sp, sp, #16
 7062              	.LCFI400:
 7063              		.cfi_def_cfa_offset 24
 7064 0004 00AF     		add	r7, sp, #0
 7065              	.LCFI401:
 7066              		.cfi_def_cfa_register 7
 7067 0006 7860     		str	r0, [r7, #4]
2674:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	u32 data;
2675:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	data = 	synopGMACReadReg((u32 *)gmacdev->MacBase,GmacPmtCtrlStatus);	
 7068              		.loc 1 2675 0
 7069 0008 7B68     		ldr	r3, [r7, #4]
 7070 000a 1B68     		ldr	r3, [r3, #0]
 7071 000c 1846     		mov	r0, r3
 7072 000e 4FF02C01 		mov	r1, #44
 7073 0012 FFF7FEFF 		bl	synopGMACReadReg
 7074 0016 F860     		str	r0, [r7, #12]
2676:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((data & GmacPmtWakeupFrameReceived) == GmacPmtWakeupFrameReceived);
 7075              		.loc 1 2676 0
 7076 0018 FB68     		ldr	r3, [r7, #12]
 7077 001a 03F04003 		and	r3, r3, #64
 7078 001e 002B     		cmp	r3, #0
 7079 0020 0CBF     		ite	eq
 7080 0022 0023     		moveq	r3, #0
 7081 0024 0123     		movne	r3, #1
 7082 0026 DBB2     		uxtb	r3, r3
2677:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7083              		.loc 1 2677 0
 7084 0028 1846     		mov	r0, r3
 7085 002a 07F11007 		add	r7, r7, #16
 7086 002e BD46     		mov	sp, r7
 7087 0030 80BD     		pop	{r7, pc}
 7088              		.cfi_endproc
 7089              	.LFE250:
 7091 0032 00BF     		.section	.text.synopGMAC_write_wakeup_frame_register,"ax",%progbits
 7092              		.align	2
 7093              		.global	synopGMAC_write_wakeup_frame_register
 7094              		.thumb
 7095              		.thumb_func
 7097              	synopGMAC_write_wakeup_frame_register:
 7098              	.LFB251:
2678:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2679:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2680:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Populates the remote wakeup frame registers.
2681:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Consecutive 8 writes to GmacWakeupAddr writes the wakeup frame filter registers.
2682:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Before commensing a new write, frame filter pointer is reset to 0x0000.
2683:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * A small delay is introduced to allow frame filter pointer reset operation.
2684:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2685:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to frame filter contents array.
2686:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2687:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2688:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_write_wakeup_frame_register(synopGMACdevice *gmacdev, u32 * filter_contents)
2689:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7099              		.loc 1 2689 0
 7100              		.cfi_startproc
 7101              		@ args = 0, pretend = 0, frame = 16
 7102              		@ frame_needed = 1, uses_anonymous_args = 0
 7103 0000 80B5     		push	{r7, lr}
 7104              	.LCFI402:
 7105              		.cfi_def_cfa_offset 8
 7106              		.cfi_offset 7, -8
 7107              		.cfi_offset 14, -4
 7108 0002 84B0     		sub	sp, sp, #16
 7109              	.LCFI403:
 7110              		.cfi_def_cfa_offset 24
 7111 0004 00AF     		add	r7, sp, #0
 7112              	.LCFI404:
 7113              		.cfi_def_cfa_register 7
 7114 0006 7860     		str	r0, [r7, #4]
 7115 0008 3960     		str	r1, [r7, #0]
2690:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	s32 i;
2691:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacPmtCtrlStatus,GmacPmtFrmFilterPtrReset);
 7116              		.loc 1 2691 0
 7117 000a 7B68     		ldr	r3, [r7, #4]
 7118 000c 1B68     		ldr	r3, [r3, #0]
 7119 000e 1846     		mov	r0, r3
 7120 0010 4FF02C01 		mov	r1, #44
 7121 0014 4FF00042 		mov	r2, #-2147483648
 7122 0018 FFF7FEFF 		bl	synopGMACSetBits
2692:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****          
2693:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****      //   synopGMAC_Wait(WAKE_UP_FRAME_WAIT);
2694:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if(NULL != SynopGMACOneShotTimerCallback)
 7123              		.loc 1 2694 0
 7124 001c 40F20003 		movw	r3, #:lower16:SynopGMACOneShotTimerCallback
 7125 0020 C0F20003 		movt	r3, #:upper16:SynopGMACOneShotTimerCallback
 7126 0024 1B68     		ldr	r3, [r3, #0]
 7127 0026 002B     		cmp	r3, #0
 7128 0028 07D0     		beq	.L359
2695:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	{
2696:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		SynopGMACOneShotTimerCallback(WAKE_UP_FRAME_WAIT);
 7129              		.loc 1 2696 0
 7130 002a 40F20003 		movw	r3, #:lower16:SynopGMACOneShotTimerCallback
 7131 002e C0F20003 		movt	r3, #:upper16:SynopGMACOneShotTimerCallback
 7132 0032 1B68     		ldr	r3, [r3, #0]
 7133 0034 4FF00100 		mov	r0, #1
 7134 0038 9847     		blx	r3
 7135              	.L359:
2697:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	}
2698:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2699:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i<WAKEUP_REG_LENGTH; i++)
 7136              		.loc 1 2699 0
 7137 003a 4FF00003 		mov	r3, #0
 7138 003e FB60     		str	r3, [r7, #12]
 7139 0040 12E0     		b	.L360
 7140              	.L361:
2700:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 		synopGMACWriteReg((u32 *)gmacdev->MacBase, GmacWakeupAddr,  *(filter_contents + i));
 7141              		.loc 1 2700 0 discriminator 2
 7142 0042 7B68     		ldr	r3, [r7, #4]
 7143 0044 1B68     		ldr	r3, [r3, #0]
 7144 0046 1A46     		mov	r2, r3
 7145 0048 FB68     		ldr	r3, [r7, #12]
 7146 004a 4FEA8303 		lsl	r3, r3, #2
 7147 004e 3968     		ldr	r1, [r7, #0]
 7148 0050 CB18     		adds	r3, r1, r3
 7149 0052 1B68     		ldr	r3, [r3, #0]
 7150 0054 1046     		mov	r0, r2
 7151 0056 4FF02801 		mov	r1, #40
 7152 005a 1A46     		mov	r2, r3
 7153 005c FFF7FEFF 		bl	synopGMACWriteReg
2699:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i<WAKEUP_REG_LENGTH; i++)
 7154              		.loc 1 2699 0 discriminator 2
 7155 0060 FB68     		ldr	r3, [r7, #12]
 7156 0062 03F10103 		add	r3, r3, #1
 7157 0066 FB60     		str	r3, [r7, #12]
 7158              	.L360:
2699:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	for(i =0; i<WAKEUP_REG_LENGTH; i++)
 7159              		.loc 1 2699 0 is_stmt 0 discriminator 1
 7160 0068 FB68     		ldr	r3, [r7, #12]
 7161 006a 072B     		cmp	r3, #7
 7162 006c E9DD     		ble	.L361
2701:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7163              		.loc 1 2701 0 is_stmt 1
 7164 006e 00BF     		nop
2702:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2703:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7165              		.loc 1 2703 0
 7166 0070 07F11007 		add	r7, r7, #16
 7167 0074 BD46     		mov	sp, r7
 7168 0076 80BD     		pop	{r7, pc}
 7169              		.cfi_endproc
 7170              	.LFE251:
 7172              		.section	.text.synopGMAC_mmc_counters_stop,"ax",%progbits
 7173              		.align	2
 7174              		.global	synopGMAC_mmc_counters_stop
 7175              		.thumb
 7176              		.thumb_func
 7178              	synopGMAC_mmc_counters_stop:
 7179              	.LFB252:
2704:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*******************PMT APIs***************************************/
2705:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*******************MMC APIs***************************************/
2706:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2707:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2708:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Freezes the MMC counters.
2709:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function call freezes the MMC counters. None of the MMC counters are updated
2710:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * due to any tx or rx frames until synopGMAC_mmc_counters_resume is called.
2711:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2712:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2713:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2714:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_mmc_counters_stop(synopGMACdevice *gmacdev)
2715:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7180              		.loc 1 2715 0
 7181              		.cfi_startproc
 7182              		@ args = 0, pretend = 0, frame = 8
 7183              		@ frame_needed = 1, uses_anonymous_args = 0
 7184 0000 80B5     		push	{r7, lr}
 7185              	.LCFI405:
 7186              		.cfi_def_cfa_offset 8
 7187              		.cfi_offset 7, -8
 7188              		.cfi_offset 14, -4
 7189 0002 82B0     		sub	sp, sp, #8
 7190              	.LCFI406:
 7191              		.cfi_def_cfa_offset 16
 7192 0004 00AF     		add	r7, sp, #0
 7193              	.LCFI407:
 7194              		.cfi_def_cfa_register 7
 7195 0006 7860     		str	r0, [r7, #4]
2716:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacMmcCntrl,GmacMmcCounterFreeze);
 7196              		.loc 1 2716 0
 7197 0008 7B68     		ldr	r3, [r7, #4]
 7198 000a 1B68     		ldr	r3, [r3, #0]
 7199 000c 1846     		mov	r0, r3
 7200 000e 4FF48071 		mov	r1, #256
 7201 0012 4FF00802 		mov	r2, #8
 7202 0016 FFF7FEFF 		bl	synopGMACSetBits
2717:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7203              		.loc 1 2717 0
 7204 001a 00BF     		nop
2718:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7205              		.loc 1 2718 0
 7206 001c 07F10807 		add	r7, r7, #8
 7207 0020 BD46     		mov	sp, r7
 7208 0022 80BD     		pop	{r7, pc}
 7209              		.cfi_endproc
 7210              	.LFE252:
 7212              		.section	.text.synopGMAC_mmc_counters_resume,"ax",%progbits
 7213              		.align	2
 7214              		.global	synopGMAC_mmc_counters_resume
 7215              		.thumb
 7216              		.thumb_func
 7218              	synopGMAC_mmc_counters_resume:
 7219              	.LFB253:
2719:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2720:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Resumes the MMC counter updation.
2721:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2722:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2723:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2724:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_mmc_counters_resume(synopGMACdevice *gmacdev)
2725:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7220              		.loc 1 2725 0
 7221              		.cfi_startproc
 7222              		@ args = 0, pretend = 0, frame = 8
 7223              		@ frame_needed = 1, uses_anonymous_args = 0
 7224 0000 80B5     		push	{r7, lr}
 7225              	.LCFI408:
 7226              		.cfi_def_cfa_offset 8
 7227              		.cfi_offset 7, -8
 7228              		.cfi_offset 14, -4
 7229 0002 82B0     		sub	sp, sp, #8
 7230              	.LCFI409:
 7231              		.cfi_def_cfa_offset 16
 7232 0004 00AF     		add	r7, sp, #0
 7233              	.LCFI410:
 7234              		.cfi_def_cfa_register 7
 7235 0006 7860     		str	r0, [r7, #4]
2726:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacMmcCntrl,GmacMmcCounterFreeze);
 7236              		.loc 1 2726 0
 7237 0008 7B68     		ldr	r3, [r7, #4]
 7238 000a 1B68     		ldr	r3, [r3, #0]
 7239 000c 1846     		mov	r0, r3
 7240 000e 4FF48071 		mov	r1, #256
 7241 0012 4FF00802 		mov	r2, #8
 7242 0016 FFF7FEFF 		bl	synopGMACClearBits
2727:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7243              		.loc 1 2727 0
 7244 001a 00BF     		nop
2728:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7245              		.loc 1 2728 0
 7246 001c 07F10807 		add	r7, r7, #8
 7247 0020 BD46     		mov	sp, r7
 7248 0022 80BD     		pop	{r7, pc}
 7249              		.cfi_endproc
 7250              	.LFE253:
 7252              		.section	.text.synopGMAC_mmc_counters_set_selfclear,"ax",%progbits
 7253              		.align	2
 7254              		.global	synopGMAC_mmc_counters_set_selfclear
 7255              		.thumb
 7256              		.thumb_func
 7258              	synopGMAC_mmc_counters_set_selfclear:
 7259              	.LFB254:
2729:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2730:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Configures the MMC in Self clearing mode.
2731:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Programs MMC interface so that counters are cleared when the counters are read.
2732:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2733:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2734:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2735:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_mmc_counters_set_selfclear(synopGMACdevice *gmacdev)
2736:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7260              		.loc 1 2736 0
 7261              		.cfi_startproc
 7262              		@ args = 0, pretend = 0, frame = 8
 7263              		@ frame_needed = 1, uses_anonymous_args = 0
 7264 0000 80B5     		push	{r7, lr}
 7265              	.LCFI411:
 7266              		.cfi_def_cfa_offset 8
 7267              		.cfi_offset 7, -8
 7268              		.cfi_offset 14, -4
 7269 0002 82B0     		sub	sp, sp, #8
 7270              	.LCFI412:
 7271              		.cfi_def_cfa_offset 16
 7272 0004 00AF     		add	r7, sp, #0
 7273              	.LCFI413:
 7274              		.cfi_def_cfa_register 7
 7275 0006 7860     		str	r0, [r7, #4]
2737:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacMmcCntrl,GmacMmcCounterResetOnRead);
 7276              		.loc 1 2737 0
 7277 0008 7B68     		ldr	r3, [r7, #4]
 7278 000a 1B68     		ldr	r3, [r3, #0]
 7279 000c 1846     		mov	r0, r3
 7280 000e 4FF48071 		mov	r1, #256
 7281 0012 4FF00402 		mov	r2, #4
 7282 0016 FFF7FEFF 		bl	synopGMACSetBits
2738:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7283              		.loc 1 2738 0
 7284 001a 00BF     		nop
2739:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7285              		.loc 1 2739 0
 7286 001c 07F10807 		add	r7, r7, #8
 7287 0020 BD46     		mov	sp, r7
 7288 0022 80BD     		pop	{r7, pc}
 7289              		.cfi_endproc
 7290              	.LFE254:
 7292              		.section	.text.synopGMAC_mmc_counters_reset_selfclear,"ax",%progbits
 7293              		.align	2
 7294              		.global	synopGMAC_mmc_counters_reset_selfclear
 7295              		.thumb
 7296              		.thumb_func
 7298              	synopGMAC_mmc_counters_reset_selfclear:
 7299              	.LFB255:
2740:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2741:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Configures the MMC in non-Self clearing mode.
2742:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Programs MMC interface so that counters are cleared when the counters are read.
2743:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2744:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2745:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2746:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_mmc_counters_reset_selfclear(synopGMACdevice *gmacdev)
2747:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7300              		.loc 1 2747 0
 7301              		.cfi_startproc
 7302              		@ args = 0, pretend = 0, frame = 8
 7303              		@ frame_needed = 1, uses_anonymous_args = 0
 7304 0000 80B5     		push	{r7, lr}
 7305              	.LCFI414:
 7306              		.cfi_def_cfa_offset 8
 7307              		.cfi_offset 7, -8
 7308              		.cfi_offset 14, -4
 7309 0002 82B0     		sub	sp, sp, #8
 7310              	.LCFI415:
 7311              		.cfi_def_cfa_offset 16
 7312 0004 00AF     		add	r7, sp, #0
 7313              	.LCFI416:
 7314              		.cfi_def_cfa_register 7
 7315 0006 7860     		str	r0, [r7, #4]
2748:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacMmcCntrl,GmacMmcCounterResetOnRead);
 7316              		.loc 1 2748 0
 7317 0008 7B68     		ldr	r3, [r7, #4]
 7318 000a 1B68     		ldr	r3, [r3, #0]
 7319 000c 1846     		mov	r0, r3
 7320 000e 4FF48071 		mov	r1, #256
 7321 0012 4FF00402 		mov	r2, #4
 7322 0016 FFF7FEFF 		bl	synopGMACClearBits
2749:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7323              		.loc 1 2749 0
 7324 001a 00BF     		nop
2750:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7325              		.loc 1 2750 0
 7326 001c 07F10807 		add	r7, r7, #8
 7327 0020 BD46     		mov	sp, r7
 7328 0022 80BD     		pop	{r7, pc}
 7329              		.cfi_endproc
 7330              	.LFE255:
 7332              		.section	.text.synopGMAC_mmc_counters_disable_rollover,"ax",%progbits
 7333              		.align	2
 7334              		.global	synopGMAC_mmc_counters_disable_rollover
 7335              		.thumb
 7336              		.thumb_func
 7338              	synopGMAC_mmc_counters_disable_rollover:
 7339              	.LFB256:
2751:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2752:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Configures the MMC to stop rollover.
2753:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Programs MMC interface so that counters will not rollover after reaching maximum value.
2754:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2755:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2756:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2757:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_mmc_counters_disable_rollover(synopGMACdevice *gmacdev)
2758:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7340              		.loc 1 2758 0
 7341              		.cfi_startproc
 7342              		@ args = 0, pretend = 0, frame = 8
 7343              		@ frame_needed = 1, uses_anonymous_args = 0
 7344 0000 80B5     		push	{r7, lr}
 7345              	.LCFI417:
 7346              		.cfi_def_cfa_offset 8
 7347              		.cfi_offset 7, -8
 7348              		.cfi_offset 14, -4
 7349 0002 82B0     		sub	sp, sp, #8
 7350              	.LCFI418:
 7351              		.cfi_def_cfa_offset 16
 7352 0004 00AF     		add	r7, sp, #0
 7353              	.LCFI419:
 7354              		.cfi_def_cfa_register 7
 7355 0006 7860     		str	r0, [r7, #4]
2759:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacMmcCntrl,GmacMmcCounterStopRollover);
 7356              		.loc 1 2759 0
 7357 0008 7B68     		ldr	r3, [r7, #4]
 7358 000a 1B68     		ldr	r3, [r3, #0]
 7359 000c 1846     		mov	r0, r3
 7360 000e 4FF48071 		mov	r1, #256
 7361 0012 4FF00202 		mov	r2, #2
 7362 0016 FFF7FEFF 		bl	synopGMACSetBits
2760:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7363              		.loc 1 2760 0
 7364 001a 00BF     		nop
2761:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7365              		.loc 1 2761 0
 7366 001c 07F10807 		add	r7, r7, #8
 7367 0020 BD46     		mov	sp, r7
 7368 0022 80BD     		pop	{r7, pc}
 7369              		.cfi_endproc
 7370              	.LFE256:
 7372              		.section	.text.synopGMAC_mmc_counters_enable_rollover,"ax",%progbits
 7373              		.align	2
 7374              		.global	synopGMAC_mmc_counters_enable_rollover
 7375              		.thumb
 7376              		.thumb_func
 7378              	synopGMAC_mmc_counters_enable_rollover:
 7379              	.LFB257:
2762:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2763:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Configures the MMC to rollover.
2764:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Programs MMC interface so that counters will rollover after reaching maximum value.
2765:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2766:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2767:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2768:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_mmc_counters_enable_rollover(synopGMACdevice *gmacdev)
2769:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7380              		.loc 1 2769 0
 7381              		.cfi_startproc
 7382              		@ args = 0, pretend = 0, frame = 8
 7383              		@ frame_needed = 1, uses_anonymous_args = 0
 7384 0000 80B5     		push	{r7, lr}
 7385              	.LCFI420:
 7386              		.cfi_def_cfa_offset 8
 7387              		.cfi_offset 7, -8
 7388              		.cfi_offset 14, -4
 7389 0002 82B0     		sub	sp, sp, #8
 7390              	.LCFI421:
 7391              		.cfi_def_cfa_offset 16
 7392 0004 00AF     		add	r7, sp, #0
 7393              	.LCFI422:
 7394              		.cfi_def_cfa_register 7
 7395 0006 7860     		str	r0, [r7, #4]
2770:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacMmcCntrl,GmacMmcCounterStopRollover);
 7396              		.loc 1 2770 0
 7397 0008 7B68     		ldr	r3, [r7, #4]
 7398 000a 1B68     		ldr	r3, [r3, #0]
 7399 000c 1846     		mov	r0, r3
 7400 000e 4FF48071 		mov	r1, #256
 7401 0012 4FF00202 		mov	r2, #2
 7402 0016 FFF7FEFF 		bl	synopGMACClearBits
2771:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7403              		.loc 1 2771 0
 7404 001a 00BF     		nop
2772:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7405              		.loc 1 2772 0
 7406 001c 07F10807 		add	r7, r7, #8
 7407 0020 BD46     		mov	sp, r7
 7408 0022 80BD     		pop	{r7, pc}
 7409              		.cfi_endproc
 7410              	.LFE257:
 7412              		.section	.text.synopGMAC_read_mmc_counter,"ax",%progbits
 7413              		.align	2
 7414              		.global	synopGMAC_read_mmc_counter
 7415              		.thumb
 7416              		.thumb_func
 7418              	synopGMAC_read_mmc_counter:
 7419              	.LFB258:
2773:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2774:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2775:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Read the MMC Counter.
2776:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2777:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] the counter to be read.
2778:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns the read count value.
2779:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2780:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_read_mmc_counter(synopGMACdevice *gmacdev, u32 counter)
2781:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7420              		.loc 1 2781 0
 7421              		.cfi_startproc
 7422              		@ args = 0, pretend = 0, frame = 8
 7423              		@ frame_needed = 1, uses_anonymous_args = 0
 7424 0000 80B5     		push	{r7, lr}
 7425              	.LCFI423:
 7426              		.cfi_def_cfa_offset 8
 7427              		.cfi_offset 7, -8
 7428              		.cfi_offset 14, -4
 7429 0002 82B0     		sub	sp, sp, #8
 7430              	.LCFI424:
 7431              		.cfi_def_cfa_offset 16
 7432 0004 00AF     		add	r7, sp, #0
 7433              	.LCFI425:
 7434              		.cfi_def_cfa_register 7
 7435 0006 7860     		str	r0, [r7, #4]
 7436 0008 3960     		str	r1, [r7, #0]
2782:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return(	synopGMACReadReg((u32 *)gmacdev->MacBase,counter));
 7437              		.loc 1 2782 0
 7438 000a 7B68     		ldr	r3, [r7, #4]
 7439 000c 1B68     		ldr	r3, [r3, #0]
 7440 000e 1846     		mov	r0, r3
 7441 0010 3968     		ldr	r1, [r7, #0]
 7442 0012 FFF7FEFF 		bl	synopGMACReadReg
 7443 0016 0346     		mov	r3, r0
2783:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7444              		.loc 1 2783 0
 7445 0018 1846     		mov	r0, r3
 7446 001a 07F10807 		add	r7, r7, #8
 7447 001e BD46     		mov	sp, r7
 7448 0020 80BD     		pop	{r7, pc}
 7449              		.cfi_endproc
 7450              	.LFE258:
 7452 0022 00BF     		.section	.text.synopGMAC_read_mmc_rx_int_status,"ax",%progbits
 7453              		.align	2
 7454              		.global	synopGMAC_read_mmc_rx_int_status
 7455              		.thumb
 7456              		.thumb_func
 7458              	synopGMAC_read_mmc_rx_int_status:
 7459              	.LFB259:
2784:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2785:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Read the MMC Rx interrupt status.
2786:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2787:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns the Rx interrupt status.
2788:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2789:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_read_mmc_rx_int_status(synopGMACdevice *gmacdev)
2790:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7460              		.loc 1 2790 0
 7461              		.cfi_startproc
 7462              		@ args = 0, pretend = 0, frame = 8
 7463              		@ frame_needed = 1, uses_anonymous_args = 0
 7464 0000 80B5     		push	{r7, lr}
 7465              	.LCFI426:
 7466              		.cfi_def_cfa_offset 8
 7467              		.cfi_offset 7, -8
 7468              		.cfi_offset 14, -4
 7469 0002 82B0     		sub	sp, sp, #8
 7470              	.LCFI427:
 7471              		.cfi_def_cfa_offset 16
 7472 0004 00AF     		add	r7, sp, #0
 7473              	.LCFI428:
 7474              		.cfi_def_cfa_register 7
 7475 0006 7860     		str	r0, [r7, #4]
2791:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return(	synopGMACReadReg((u32 *)gmacdev->MacBase,GmacMmcIntrRx));
 7476              		.loc 1 2791 0
 7477 0008 7B68     		ldr	r3, [r7, #4]
 7478 000a 1B68     		ldr	r3, [r3, #0]
 7479 000c 1846     		mov	r0, r3
 7480 000e 4FF48271 		mov	r1, #260
 7481 0012 FFF7FEFF 		bl	synopGMACReadReg
 7482 0016 0346     		mov	r3, r0
2792:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7483              		.loc 1 2792 0
 7484 0018 1846     		mov	r0, r3
 7485 001a 07F10807 		add	r7, r7, #8
 7486 001e BD46     		mov	sp, r7
 7487 0020 80BD     		pop	{r7, pc}
 7488              		.cfi_endproc
 7489              	.LFE259:
 7491 0022 00BF     		.section	.text.synopGMAC_read_mmc_tx_int_status,"ax",%progbits
 7492              		.align	2
 7493              		.global	synopGMAC_read_mmc_tx_int_status
 7494              		.thumb
 7495              		.thumb_func
 7497              	synopGMAC_read_mmc_tx_int_status:
 7498              	.LFB260:
2793:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2794:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Read the MMC Tx interrupt status.
2795:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2796:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns the Tx interrupt status.
2797:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2798:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_read_mmc_tx_int_status(synopGMACdevice *gmacdev)
2799:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7499              		.loc 1 2799 0
 7500              		.cfi_startproc
 7501              		@ args = 0, pretend = 0, frame = 8
 7502              		@ frame_needed = 1, uses_anonymous_args = 0
 7503 0000 80B5     		push	{r7, lr}
 7504              	.LCFI429:
 7505              		.cfi_def_cfa_offset 8
 7506              		.cfi_offset 7, -8
 7507              		.cfi_offset 14, -4
 7508 0002 82B0     		sub	sp, sp, #8
 7509              	.LCFI430:
 7510              		.cfi_def_cfa_offset 16
 7511 0004 00AF     		add	r7, sp, #0
 7512              	.LCFI431:
 7513              		.cfi_def_cfa_register 7
 7514 0006 7860     		str	r0, [r7, #4]
2800:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return(	synopGMACReadReg((u32 *)gmacdev->MacBase,GmacMmcIntrTx));
 7515              		.loc 1 2800 0
 7516 0008 7B68     		ldr	r3, [r7, #4]
 7517 000a 1B68     		ldr	r3, [r3, #0]
 7518 000c 1846     		mov	r0, r3
 7519 000e 4FF48471 		mov	r1, #264
 7520 0012 FFF7FEFF 		bl	synopGMACReadReg
 7521 0016 0346     		mov	r3, r0
2801:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7522              		.loc 1 2801 0
 7523 0018 1846     		mov	r0, r3
 7524 001a 07F10807 		add	r7, r7, #8
 7525 001e BD46     		mov	sp, r7
 7526 0020 80BD     		pop	{r7, pc}
 7527              		.cfi_endproc
 7528              	.LFE260:
 7530 0022 00BF     		.section	.text.synopGMAC_disable_mmc_tx_interrupt,"ax",%progbits
 7531              		.align	2
 7532              		.global	synopGMAC_disable_mmc_tx_interrupt
 7533              		.thumb
 7534              		.thumb_func
 7536              	synopGMAC_disable_mmc_tx_interrupt:
 7537              	.LFB261:
2802:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2803:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the MMC Tx interrupt.
2804:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The MMC tx interrupts are masked out as per the mask specified.
2805:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2806:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] tx interrupt bit mask for which interrupts needs to be disabled.
2807:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2808:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2809:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_mmc_tx_interrupt(synopGMACdevice *gmacdev, u32 mask)
2810:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7538              		.loc 1 2810 0
 7539              		.cfi_startproc
 7540              		@ args = 0, pretend = 0, frame = 8
 7541              		@ frame_needed = 1, uses_anonymous_args = 0
 7542 0000 80B5     		push	{r7, lr}
 7543              	.LCFI432:
 7544              		.cfi_def_cfa_offset 8
 7545              		.cfi_offset 7, -8
 7546              		.cfi_offset 14, -4
 7547 0002 82B0     		sub	sp, sp, #8
 7548              	.LCFI433:
 7549              		.cfi_def_cfa_offset 16
 7550 0004 00AF     		add	r7, sp, #0
 7551              	.LCFI434:
 7552              		.cfi_def_cfa_register 7
 7553 0006 7860     		str	r0, [r7, #4]
 7554 0008 3960     		str	r1, [r7, #0]
2811:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacMmcIntrMaskTx,mask);
 7555              		.loc 1 2811 0
 7556 000a 7B68     		ldr	r3, [r7, #4]
 7557 000c 1B68     		ldr	r3, [r3, #0]
 7558 000e 1846     		mov	r0, r3
 7559 0010 4FF48871 		mov	r1, #272
 7560 0014 3A68     		ldr	r2, [r7, #0]
 7561 0016 FFF7FEFF 		bl	synopGMACSetBits
2812:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7562              		.loc 1 2812 0
 7563 001a 00BF     		nop
2813:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7564              		.loc 1 2813 0
 7565 001c 07F10807 		add	r7, r7, #8
 7566 0020 BD46     		mov	sp, r7
 7567 0022 80BD     		pop	{r7, pc}
 7568              		.cfi_endproc
 7569              	.LFE261:
 7571              		.section	.text.synopGMAC_enable_mmc_tx_interrupt,"ax",%progbits
 7572              		.align	2
 7573              		.global	synopGMAC_enable_mmc_tx_interrupt
 7574              		.thumb
 7575              		.thumb_func
 7577              	synopGMAC_enable_mmc_tx_interrupt:
 7578              	.LFB262:
2814:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2815:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable the MMC Tx interrupt.
2816:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The MMC tx interrupts are enabled as per the mask specified.
2817:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2818:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] tx interrupt bit mask for which interrupts needs to be enabled.
2819:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2820:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2821:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_enable_mmc_tx_interrupt(synopGMACdevice *gmacdev, u32 mask)
2822:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7579              		.loc 1 2822 0
 7580              		.cfi_startproc
 7581              		@ args = 0, pretend = 0, frame = 8
 7582              		@ frame_needed = 1, uses_anonymous_args = 0
 7583 0000 80B5     		push	{r7, lr}
 7584              	.LCFI435:
 7585              		.cfi_def_cfa_offset 8
 7586              		.cfi_offset 7, -8
 7587              		.cfi_offset 14, -4
 7588 0002 82B0     		sub	sp, sp, #8
 7589              	.LCFI436:
 7590              		.cfi_def_cfa_offset 16
 7591 0004 00AF     		add	r7, sp, #0
 7592              	.LCFI437:
 7593              		.cfi_def_cfa_register 7
 7594 0006 7860     		str	r0, [r7, #4]
 7595 0008 3960     		str	r1, [r7, #0]
2823:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacMmcIntrMaskTx,mask);
 7596              		.loc 1 2823 0
 7597 000a 7B68     		ldr	r3, [r7, #4]
 7598 000c 1B68     		ldr	r3, [r3, #0]
 7599 000e 1846     		mov	r0, r3
 7600 0010 4FF48871 		mov	r1, #272
 7601 0014 3A68     		ldr	r2, [r7, #0]
 7602 0016 FFF7FEFF 		bl	synopGMACClearBits
2824:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7603              		.loc 1 2824 0
 7604 001a 07F10807 		add	r7, r7, #8
 7605 001e BD46     		mov	sp, r7
 7606 0020 80BD     		pop	{r7, pc}
 7607              		.cfi_endproc
 7608              	.LFE262:
 7610 0022 00BF     		.section	.text.synopGMAC_disable_mmc_rx_interrupt,"ax",%progbits
 7611              		.align	2
 7612              		.global	synopGMAC_disable_mmc_rx_interrupt
 7613              		.thumb
 7614              		.thumb_func
 7616              	synopGMAC_disable_mmc_rx_interrupt:
 7617              	.LFB263:
2825:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2826:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the MMC Rx interrupt.
2827:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The MMC rx interrupts are masked out as per the mask specified.
2828:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2829:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] rx interrupt bit mask for which interrupts needs to be disabled.
2830:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2831:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2832:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_mmc_rx_interrupt(synopGMACdevice *gmacdev, u32 mask)
2833:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7618              		.loc 1 2833 0
 7619              		.cfi_startproc
 7620              		@ args = 0, pretend = 0, frame = 8
 7621              		@ frame_needed = 1, uses_anonymous_args = 0
 7622 0000 80B5     		push	{r7, lr}
 7623              	.LCFI438:
 7624              		.cfi_def_cfa_offset 8
 7625              		.cfi_offset 7, -8
 7626              		.cfi_offset 14, -4
 7627 0002 82B0     		sub	sp, sp, #8
 7628              	.LCFI439:
 7629              		.cfi_def_cfa_offset 16
 7630 0004 00AF     		add	r7, sp, #0
 7631              	.LCFI440:
 7632              		.cfi_def_cfa_register 7
 7633 0006 7860     		str	r0, [r7, #4]
 7634 0008 3960     		str	r1, [r7, #0]
2834:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacMmcIntrMaskRx,mask);
 7635              		.loc 1 2834 0
 7636 000a 7B68     		ldr	r3, [r7, #4]
 7637 000c 1B68     		ldr	r3, [r3, #0]
 7638 000e 1846     		mov	r0, r3
 7639 0010 4FF48671 		mov	r1, #268
 7640 0014 3A68     		ldr	r2, [r7, #0]
 7641 0016 FFF7FEFF 		bl	synopGMACSetBits
2835:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7642              		.loc 1 2835 0
 7643 001a 00BF     		nop
2836:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7644              		.loc 1 2836 0
 7645 001c 07F10807 		add	r7, r7, #8
 7646 0020 BD46     		mov	sp, r7
 7647 0022 80BD     		pop	{r7, pc}
 7648              		.cfi_endproc
 7649              	.LFE263:
 7651              		.section	.text.synopGMAC_enable_mmc_rx_interrupt,"ax",%progbits
 7652              		.align	2
 7653              		.global	synopGMAC_enable_mmc_rx_interrupt
 7654              		.thumb
 7655              		.thumb_func
 7657              	synopGMAC_enable_mmc_rx_interrupt:
 7658              	.LFB264:
2837:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2838:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable the MMC Rx interrupt.
2839:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The MMC rx interrupts are enabled as per the mask specified.
2840:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2841:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] rx interrupt bit mask for which interrupts needs to be enabled.
2842:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2843:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2844:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_enable_mmc_rx_interrupt(synopGMACdevice *gmacdev, u32 mask)
2845:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7659              		.loc 1 2845 0
 7660              		.cfi_startproc
 7661              		@ args = 0, pretend = 0, frame = 8
 7662              		@ frame_needed = 1, uses_anonymous_args = 0
 7663 0000 80B5     		push	{r7, lr}
 7664              	.LCFI441:
 7665              		.cfi_def_cfa_offset 8
 7666              		.cfi_offset 7, -8
 7667              		.cfi_offset 14, -4
 7668 0002 82B0     		sub	sp, sp, #8
 7669              	.LCFI442:
 7670              		.cfi_def_cfa_offset 16
 7671 0004 00AF     		add	r7, sp, #0
 7672              	.LCFI443:
 7673              		.cfi_def_cfa_register 7
 7674 0006 7860     		str	r0, [r7, #4]
 7675 0008 3960     		str	r1, [r7, #0]
2846:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacMmcIntrMaskRx,mask);
 7676              		.loc 1 2846 0
 7677 000a 7B68     		ldr	r3, [r7, #4]
 7678 000c 1B68     		ldr	r3, [r3, #0]
 7679 000e 1846     		mov	r0, r3
 7680 0010 4FF48671 		mov	r1, #268
 7681 0014 3A68     		ldr	r2, [r7, #0]
 7682 0016 FFF7FEFF 		bl	synopGMACClearBits
2847:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7683              		.loc 1 2847 0
 7684 001a 00BF     		nop
2848:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7685              		.loc 1 2848 0
 7686 001c 07F10807 		add	r7, r7, #8
 7687 0020 BD46     		mov	sp, r7
 7688 0022 80BD     		pop	{r7, pc}
 7689              		.cfi_endproc
 7690              	.LFE264:
 7692              		.section	.text.synopGMAC_disable_mmc_ipc_rx_interrupt,"ax",%progbits
 7693              		.align	2
 7694              		.global	synopGMAC_disable_mmc_ipc_rx_interrupt
 7695              		.thumb
 7696              		.thumb_func
 7698              	synopGMAC_disable_mmc_ipc_rx_interrupt:
 7699              	.LFB265:
2849:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2850:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the MMC ipc rx checksum offload interrupt.
2851:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The MMC ipc rx checksum offload interrupts are masked out as per the mask specified.
2852:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2853:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] rx interrupt bit mask for which interrupts needs to be disabled.
2854:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2855:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2856:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_mmc_ipc_rx_interrupt(synopGMACdevice *gmacdev, u32 mask)
2857:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7700              		.loc 1 2857 0
 7701              		.cfi_startproc
 7702              		@ args = 0, pretend = 0, frame = 8
 7703              		@ frame_needed = 1, uses_anonymous_args = 0
 7704 0000 80B5     		push	{r7, lr}
 7705              	.LCFI444:
 7706              		.cfi_def_cfa_offset 8
 7707              		.cfi_offset 7, -8
 7708              		.cfi_offset 14, -4
 7709 0002 82B0     		sub	sp, sp, #8
 7710              	.LCFI445:
 7711              		.cfi_def_cfa_offset 16
 7712 0004 00AF     		add	r7, sp, #0
 7713              	.LCFI446:
 7714              		.cfi_def_cfa_register 7
 7715 0006 7860     		str	r0, [r7, #4]
 7716 0008 3960     		str	r1, [r7, #0]
2858:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacMmcRxIpcIntrMask,mask);
 7717              		.loc 1 2858 0
 7718 000a 7B68     		ldr	r3, [r7, #4]
 7719 000c 1B68     		ldr	r3, [r3, #0]
 7720 000e 1846     		mov	r0, r3
 7721 0010 4FF40071 		mov	r1, #512
 7722 0014 3A68     		ldr	r2, [r7, #0]
 7723 0016 FFF7FEFF 		bl	synopGMACSetBits
2859:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7724              		.loc 1 2859 0
 7725 001a 00BF     		nop
2860:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7726              		.loc 1 2860 0
 7727 001c 07F10807 		add	r7, r7, #8
 7728 0020 BD46     		mov	sp, r7
 7729 0022 80BD     		pop	{r7, pc}
 7730              		.cfi_endproc
 7731              	.LFE265:
 7733              		.section	.text.synopGMAC_enable_mmc_ipc_rx_interrupt,"ax",%progbits
 7734              		.align	2
 7735              		.global	synopGMAC_enable_mmc_ipc_rx_interrupt
 7736              		.thumb
 7737              		.thumb_func
 7739              	synopGMAC_enable_mmc_ipc_rx_interrupt:
 7740              	.LFB266:
2861:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2862:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enable the MMC ipc rx checksum offload interrupt.
2863:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The MMC ipc rx checksum offload interrupts are enabled as per the mask specified.
2864:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2865:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] rx interrupt bit mask for which interrupts needs to be enabled.
2866:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2867:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2868:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_enable_mmc_ipc_rx_interrupt(synopGMACdevice *gmacdev, u32 mask)
2869:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7741              		.loc 1 2869 0
 7742              		.cfi_startproc
 7743              		@ args = 0, pretend = 0, frame = 8
 7744              		@ frame_needed = 1, uses_anonymous_args = 0
 7745 0000 80B5     		push	{r7, lr}
 7746              	.LCFI447:
 7747              		.cfi_def_cfa_offset 8
 7748              		.cfi_offset 7, -8
 7749              		.cfi_offset 14, -4
 7750 0002 82B0     		sub	sp, sp, #8
 7751              	.LCFI448:
 7752              		.cfi_def_cfa_offset 16
 7753 0004 00AF     		add	r7, sp, #0
 7754              	.LCFI449:
 7755              		.cfi_def_cfa_register 7
 7756 0006 7860     		str	r0, [r7, #4]
 7757 0008 3960     		str	r1, [r7, #0]
2870:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacMmcRxIpcIntrMask,mask);
 7758              		.loc 1 2870 0
 7759 000a 7B68     		ldr	r3, [r7, #4]
 7760 000c 1B68     		ldr	r3, [r3, #0]
 7761 000e 1846     		mov	r0, r3
 7762 0010 4FF40071 		mov	r1, #512
 7763 0014 3A68     		ldr	r2, [r7, #0]
 7764 0016 FFF7FEFF 		bl	synopGMACClearBits
2871:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7765              		.loc 1 2871 0
 7766 001a 00BF     		nop
2872:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7767              		.loc 1 2872 0
 7768 001c 07F10807 		add	r7, r7, #8
 7769 0020 BD46     		mov	sp, r7
 7770 0022 80BD     		pop	{r7, pc}
 7771              		.cfi_endproc
 7772              	.LFE266:
 7774              		.section	.text.synopGMAC_enable_rx_chksum_offload,"ax",%progbits
 7775              		.align	2
 7776              		.global	synopGMAC_enable_rx_chksum_offload
 7777              		.thumb
 7778              		.thumb_func
 7780              	synopGMAC_enable_rx_chksum_offload:
 7781              	.LFB267:
2873:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*******************MMC APIs***************************************/
2874:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /*******************Ip checksum offloading APIs***************************************/
2875:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2876:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2877:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Enables the ip checksum offloading in receive path.
2878:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When set GMAC calculates 16 bit 1's complement of all received ethernet frame payload.
2879:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * It also checks IPv4 Header checksum is correct. GMAC core appends the 16 bit checksum calculate
2880:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * for payload of IP datagram and appends it to Ethernet frame transferred to the application.
2881:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2882:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2883:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2884:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_enable_rx_chksum_offload(synopGMACdevice *gmacdev)
2885:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7782              		.loc 1 2885 0
 7783              		.cfi_startproc
 7784              		@ args = 0, pretend = 0, frame = 8
 7785              		@ frame_needed = 1, uses_anonymous_args = 0
 7786 0000 80B5     		push	{r7, lr}
 7787              	.LCFI450:
 7788              		.cfi_def_cfa_offset 8
 7789              		.cfi_offset 7, -8
 7790              		.cfi_offset 14, -4
 7791 0002 82B0     		sub	sp, sp, #8
 7792              	.LCFI451:
 7793              		.cfi_def_cfa_offset 16
 7794 0004 00AF     		add	r7, sp, #0
 7795              	.LCFI452:
 7796              		.cfi_def_cfa_register 7
 7797 0006 7860     		str	r0, [r7, #4]
2886:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->MacBase,GmacConfig,GmacRxIpcOffload);
 7798              		.loc 1 2886 0
 7799 0008 7B68     		ldr	r3, [r7, #4]
 7800 000a 1B68     		ldr	r3, [r3, #0]
 7801 000c 1846     		mov	r0, r3
 7802 000e 4FF00001 		mov	r1, #0
 7803 0012 4FF48062 		mov	r2, #1024
 7804 0016 FFF7FEFF 		bl	synopGMACSetBits
2887:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7805              		.loc 1 2887 0
 7806 001a 00BF     		nop
2888:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7807              		.loc 1 2888 0
 7808 001c 07F10807 		add	r7, r7, #8
 7809 0020 BD46     		mov	sp, r7
 7810 0022 80BD     		pop	{r7, pc}
 7811              		.cfi_endproc
 7812              	.LFE267:
 7814              		.section	.text.synopGMAC_disable_rx_Ipchecksum_offload,"ax",%progbits
 7815              		.align	2
 7816              		.global	synopGMAC_disable_rx_Ipchecksum_offload
 7817              		.thumb
 7818              		.thumb_func
 7820              	synopGMAC_disable_rx_Ipchecksum_offload:
 7821              	.LFB268:
2889:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2890:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Disable the ip checksum offloading in receive path.
2891:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Ip checksum offloading is disabled in the receive path.
2892:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2893:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2894:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2895:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_disable_rx_Ipchecksum_offload(synopGMACdevice *gmacdev)
2896:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7822              		.loc 1 2896 0
 7823              		.cfi_startproc
 7824              		@ args = 0, pretend = 0, frame = 8
 7825              		@ frame_needed = 1, uses_anonymous_args = 0
 7826 0000 80B5     		push	{r7, lr}
 7827              	.LCFI453:
 7828              		.cfi_def_cfa_offset 8
 7829              		.cfi_offset 7, -8
 7830              		.cfi_offset 14, -4
 7831 0002 82B0     		sub	sp, sp, #8
 7832              	.LCFI454:
 7833              		.cfi_def_cfa_offset 16
 7834 0004 00AF     		add	r7, sp, #0
 7835              	.LCFI455:
 7836              		.cfi_def_cfa_register 7
 7837 0006 7860     		str	r0, [r7, #4]
2897:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->MacBase,GmacConfig,GmacRxIpcOffload);
 7838              		.loc 1 2897 0
 7839 0008 7B68     		ldr	r3, [r7, #4]
 7840 000a 1B68     		ldr	r3, [r3, #0]
 7841 000c 1846     		mov	r0, r3
 7842 000e 4FF00001 		mov	r1, #0
 7843 0012 4FF48062 		mov	r2, #1024
 7844 0016 FFF7FEFF 		bl	synopGMACClearBits
2898:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7845              		.loc 1 2898 0
 7846 001a 07F10807 		add	r7, r7, #8
 7847 001e BD46     		mov	sp, r7
 7848 0020 80BD     		pop	{r7, pc}
 7849              		.cfi_endproc
 7850              	.LFE268:
 7852 0022 00BF     		.section	.text.synopGMAC_rx_tcpip_chksum_drop_enable,"ax",%progbits
 7853              		.align	2
 7854              		.global	synopGMAC_rx_tcpip_chksum_drop_enable
 7855              		.thumb
 7856              		.thumb_func
 7858              	synopGMAC_rx_tcpip_chksum_drop_enable:
 7859              	.LFB269:
2899:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2900:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Instruct the DMA to drop the packets fails tcp ip checksum.
2901:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This is to instruct the receive DMA engine to drop the recevied packet if they 
2902:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * fails the tcp/ip checksum in hardware. Valid only when full checksum offloading is enabled(type
2903:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2904:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2905:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2906:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_tcpip_chksum_drop_enable(synopGMACdevice *gmacdev)
2907:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7860              		.loc 1 2907 0
 7861              		.cfi_startproc
 7862              		@ args = 0, pretend = 0, frame = 8
 7863              		@ frame_needed = 1, uses_anonymous_args = 0
 7864 0000 80B5     		push	{r7, lr}
 7865              	.LCFI456:
 7866              		.cfi_def_cfa_offset 8
 7867              		.cfi_offset 7, -8
 7868              		.cfi_offset 14, -4
 7869 0002 82B0     		sub	sp, sp, #8
 7870              	.LCFI457:
 7871              		.cfi_def_cfa_offset 16
 7872 0004 00AF     		add	r7, sp, #0
 7873              	.LCFI458:
 7874              		.cfi_def_cfa_register 7
 7875 0006 7860     		str	r0, [r7, #4]
2908:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACClearBits((u32 *)gmacdev->DmaBase,DmaControl,DmaDisableDropTcpCs);
 7876              		.loc 1 2908 0
 7877 0008 7B68     		ldr	r3, [r7, #4]
 7878 000a 5B68     		ldr	r3, [r3, #4]
 7879 000c 1846     		mov	r0, r3
 7880 000e 4FF01801 		mov	r1, #24
 7881 0012 4FF08062 		mov	r2, #67108864
 7882 0016 FFF7FEFF 		bl	synopGMACClearBits
2909:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7883              		.loc 1 2909 0
 7884 001a 00BF     		nop
2910:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7885              		.loc 1 2910 0
 7886 001c 07F10807 		add	r7, r7, #8
 7887 0020 BD46     		mov	sp, r7
 7888 0022 80BD     		pop	{r7, pc}
 7889              		.cfi_endproc
 7890              	.LFE269:
 7892              		.section	.text.synopGMAC_rx_tcpip_chksum_drop_disable,"ax",%progbits
 7893              		.align	2
 7894              		.global	synopGMAC_rx_tcpip_chksum_drop_disable
 7895              		.thumb
 7896              		.thumb_func
 7898              	synopGMAC_rx_tcpip_chksum_drop_disable:
 7899              	.LFB270:
2911:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2912:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Instruct the DMA not to drop the packets even if it fails tcp ip checksum.
2913:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This is to instruct the receive DMA engine to allow the packets even if recevied packet
2914:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * fails the tcp/ip checksum in hardware. Valid only when full checksum offloading is enabled(type
2915:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2916:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
2917:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2918:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_rx_tcpip_chksum_drop_disable(synopGMACdevice *gmacdev)
2919:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7900              		.loc 1 2919 0
 7901              		.cfi_startproc
 7902              		@ args = 0, pretend = 0, frame = 8
 7903              		@ frame_needed = 1, uses_anonymous_args = 0
 7904 0000 80B5     		push	{r7, lr}
 7905              	.LCFI459:
 7906              		.cfi_def_cfa_offset 8
 7907              		.cfi_offset 7, -8
 7908              		.cfi_offset 14, -4
 7909 0002 82B0     		sub	sp, sp, #8
 7910              	.LCFI460:
 7911              		.cfi_def_cfa_offset 16
 7912 0004 00AF     		add	r7, sp, #0
 7913              	.LCFI461:
 7914              		.cfi_def_cfa_register 7
 7915 0006 7860     		str	r0, [r7, #4]
2920:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	synopGMACSetBits((u32 *)gmacdev->DmaBase,DmaControl,DmaDisableDropTcpCs);
 7916              		.loc 1 2920 0
 7917 0008 7B68     		ldr	r3, [r7, #4]
 7918 000a 5B68     		ldr	r3, [r3, #4]
 7919 000c 1846     		mov	r0, r3
 7920 000e 4FF01801 		mov	r1, #24
 7921 0012 4FF08062 		mov	r2, #67108864
 7922 0016 FFF7FEFF 		bl	synopGMACSetBits
2921:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return;
 7923              		.loc 1 2921 0
 7924 001a 00BF     		nop
2922:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7925              		.loc 1 2922 0
 7926 001c 07F10807 		add	r7, r7, #8
 7927 0020 BD46     		mov	sp, r7
 7928 0022 80BD     		pop	{r7, pc}
 7929              		.cfi_endproc
 7930              	.LFE270:
 7932              		.section	.text.synopGMAC_is_ext_status,"ax",%progbits
 7933              		.align	2
 7934              		.global	synopGMAC_is_ext_status
 7935              		.thumb
 7936              		.thumb_func
 7938              	synopGMAC_is_ext_status:
 7939              	.LFB271:
2923:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2924:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /** 
2925:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * When the Enhanced Descriptor is enabled then the bit 0 of RDES0 indicates whether the
2926:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Extended Status is available (RDES4). Time Stamp feature and the Checksum Offload Engine2
2927:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * makes use of this extended status to provide the status of the received packet.
2928:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice
2929:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns TRUE or FALSE
2930:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2931:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #ifdef ENH_DESC_8W
2932:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2933:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2934:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function indicates whether extended status is available in the RDES0.
2935:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Any function which accesses the fields of extended status register must ensure a check on this 
2936:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This is valid only for Enhanced Descriptor.
2937:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2938:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 status field of the corresponding descriptor.
2939:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns TRUE or FALSE.
2940:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2941:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_ext_status(synopGMACdevice *gmacdev,u32 status) 		      // extended status presen
2942:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7940              		.loc 1 2942 0
 7941              		.cfi_startproc
 7942              		@ args = 0, pretend = 0, frame = 8
 7943              		@ frame_needed = 1, uses_anonymous_args = 0
 7944              		@ link register save eliminated.
 7945 0000 80B4     		push	{r7}
 7946              	.LCFI462:
 7947              		.cfi_def_cfa_offset 4
 7948              		.cfi_offset 7, -4
 7949 0002 83B0     		sub	sp, sp, #12
 7950              	.LCFI463:
 7951              		.cfi_def_cfa_offset 16
 7952 0004 00AF     		add	r7, sp, #0
 7953              	.LCFI464:
 7954              		.cfi_def_cfa_register 7
 7955 0006 7860     		str	r0, [r7, #4]
 7956 0008 3960     		str	r1, [r7, #0]
2943:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((status & DescRxEXTsts ) != 0 ); // if extstatus set then it returns 1
 7957              		.loc 1 2943 0
 7958 000a 3B68     		ldr	r3, [r7, #0]
 7959 000c 03F00103 		and	r3, r3, #1
 7960 0010 002B     		cmp	r3, #0
 7961 0012 0CBF     		ite	eq
 7962 0014 0023     		moveq	r3, #0
 7963 0016 0123     		movne	r3, #1
 7964 0018 DBB2     		uxtb	r3, r3
2944:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 7965              		.loc 1 2944 0
 7966 001a 1846     		mov	r0, r3
 7967 001c 07F10C07 		add	r7, r7, #12
 7968 0020 BD46     		mov	sp, r7
 7969 0022 80BC     		pop	{r7}
 7970 0024 7047     		bx	lr
 7971              		.cfi_endproc
 7972              	.LFE271:
 7974 0026 00BF     		.section	.text.synopGMAC_ES_is_IP_header_error,"ax",%progbits
 7975              		.align	2
 7976              		.global	synopGMAC_ES_is_IP_header_error
 7977              		.thumb
 7978              		.thumb_func
 7980              	synopGMAC_ES_is_IP_header_error:
 7981              	.LFB272:
2945:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2946:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function returns true if the IP header checksum bit is set in the extended status.
2947:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Valid only when enhaced status available is set in RDES0 bit 0.
2948:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This is valid only for Enhanced Descriptor.
2949:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2950:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 status field of the corresponding descriptor.
2951:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns TRUE or FALSE.
2952:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2953:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_ES_is_IP_header_error(synopGMACdevice *gmacdev,u32 ext_status)          // IP header
2954:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 7982              		.loc 1 2954 0
 7983              		.cfi_startproc
 7984              		@ args = 0, pretend = 0, frame = 8
 7985              		@ frame_needed = 1, uses_anonymous_args = 0
 7986              		@ link register save eliminated.
 7987 0000 80B4     		push	{r7}
 7988              	.LCFI465:
 7989              		.cfi_def_cfa_offset 4
 7990              		.cfi_offset 7, -4
 7991 0002 83B0     		sub	sp, sp, #12
 7992              	.LCFI466:
 7993              		.cfi_def_cfa_offset 16
 7994 0004 00AF     		add	r7, sp, #0
 7995              	.LCFI467:
 7996              		.cfi_def_cfa_register 7
 7997 0006 7860     		str	r0, [r7, #4]
 7998 0008 3960     		str	r1, [r7, #0]
2955:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((ext_status & DescRxIpHeaderError) != 0 ); // if IPV4 header error return 1
 7999              		.loc 1 2955 0
 8000 000a 3B68     		ldr	r3, [r7, #0]
 8001 000c 03F00803 		and	r3, r3, #8
 8002 0010 002B     		cmp	r3, #0
 8003 0012 0CBF     		ite	eq
 8004 0014 0023     		moveq	r3, #0
 8005 0016 0123     		movne	r3, #1
 8006 0018 DBB2     		uxtb	r3, r3
2956:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8007              		.loc 1 2956 0
 8008 001a 1846     		mov	r0, r3
 8009 001c 07F10C07 		add	r7, r7, #12
 8010 0020 BD46     		mov	sp, r7
 8011 0022 80BC     		pop	{r7}
 8012 0024 7047     		bx	lr
 8013              		.cfi_endproc
 8014              	.LFE272:
 8016 0026 00BF     		.section	.text.synopGMAC_ES_is_rx_checksum_bypassed,"ax",%progbits
 8017              		.align	2
 8018              		.global	synopGMAC_ES_is_rx_checksum_bypassed
 8019              		.thumb
 8020              		.thumb_func
 8022              	synopGMAC_ES_is_rx_checksum_bypassed:
 8023              	.LFB273:
2957:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2958:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function returns true if the Checksum is bypassed in the hardware.
2959:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Valid only when enhaced status available is set in RDES0 bit 0.
2960:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This is valid only for Enhanced Descriptor.
2961:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2962:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 status field of the corresponding descriptor.
2963:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns TRUE or FALSE.
2964:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2965:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_ES_is_rx_checksum_bypassed(synopGMACdevice *gmacdev,u32 ext_status)     // Hardware 
2966:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8024              		.loc 1 2966 0
 8025              		.cfi_startproc
 8026              		@ args = 0, pretend = 0, frame = 8
 8027              		@ frame_needed = 1, uses_anonymous_args = 0
 8028              		@ link register save eliminated.
 8029 0000 80B4     		push	{r7}
 8030              	.LCFI468:
 8031              		.cfi_def_cfa_offset 4
 8032              		.cfi_offset 7, -4
 8033 0002 83B0     		sub	sp, sp, #12
 8034              	.LCFI469:
 8035              		.cfi_def_cfa_offset 16
 8036 0004 00AF     		add	r7, sp, #0
 8037              	.LCFI470:
 8038              		.cfi_def_cfa_register 7
 8039 0006 7860     		str	r0, [r7, #4]
 8040 0008 3960     		str	r1, [r7, #0]
2967:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((ext_status & DescRxChkSumBypass ) != 0 ); // if checksum offloading bypassed return 1
 8041              		.loc 1 2967 0
 8042 000a 3B68     		ldr	r3, [r7, #0]
 8043 000c 03F02003 		and	r3, r3, #32
 8044 0010 002B     		cmp	r3, #0
 8045 0012 0CBF     		ite	eq
 8046 0014 0023     		moveq	r3, #0
 8047 0016 0123     		movne	r3, #1
 8048 0018 DBB2     		uxtb	r3, r3
2968:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8049              		.loc 1 2968 0
 8050 001a 1846     		mov	r0, r3
 8051 001c 07F10C07 		add	r7, r7, #12
 8052 0020 BD46     		mov	sp, r7
 8053 0022 80BC     		pop	{r7}
 8054 0024 7047     		bx	lr
 8055              		.cfi_endproc
 8056              	.LFE273:
 8058 0026 00BF     		.section	.text.synopGMAC_ES_is_IP_payload_error,"ax",%progbits
 8059              		.align	2
 8060              		.global	synopGMAC_ES_is_IP_payload_error
 8061              		.thumb
 8062              		.thumb_func
 8064              	synopGMAC_ES_is_IP_payload_error:
 8065              	.LFB274:
2969:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2970:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This function returns true if payload checksum error is set in the extended status.
2971:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Valid only when enhaced status available is set in RDES0 bit 0.
2972:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This is valid only for Enhanced Descriptor.
2973:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2974:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 status field of the corresponding descriptor.
2975:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns TRUE or FALSE.
2976:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2977:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_ES_is_IP_payload_error(synopGMACdevice *gmacdev,u32 ext_status)         // IP payloa
2978:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8066              		.loc 1 2978 0
 8067              		.cfi_startproc
 8068              		@ args = 0, pretend = 0, frame = 8
 8069              		@ frame_needed = 1, uses_anonymous_args = 0
 8070              		@ link register save eliminated.
 8071 0000 80B4     		push	{r7}
 8072              	.LCFI471:
 8073              		.cfi_def_cfa_offset 4
 8074              		.cfi_offset 7, -4
 8075 0002 83B0     		sub	sp, sp, #12
 8076              	.LCFI472:
 8077              		.cfi_def_cfa_offset 16
 8078 0004 00AF     		add	r7, sp, #0
 8079              	.LCFI473:
 8080              		.cfi_def_cfa_register 7
 8081 0006 7860     		str	r0, [r7, #4]
 8082 0008 3960     		str	r1, [r7, #0]
2979:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((ext_status & DescRxIpPayloadError) != 0 ); // if IP payload error return 1
 8083              		.loc 1 2979 0
 8084 000a 3B68     		ldr	r3, [r7, #0]
 8085 000c 03F01003 		and	r3, r3, #16
 8086 0010 002B     		cmp	r3, #0
 8087 0012 0CBF     		ite	eq
 8088 0014 0023     		moveq	r3, #0
 8089 0016 0123     		movne	r3, #1
 8090 0018 DBB2     		uxtb	r3, r3
2980:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8091              		.loc 1 2980 0
 8092 001a 1846     		mov	r0, r3
 8093 001c 07F10C07 		add	r7, r7, #12
 8094 0020 BD46     		mov	sp, r7
 8095 0022 80BC     		pop	{r7}
 8096 0024 7047     		bx	lr
 8097              		.cfi_endproc
 8098              	.LFE274:
 8100 0026 00BF     		.section	.text.synopGMAC_is_rx_checksum_error,"ax",%progbits
 8101              		.align	2
 8102              		.global	synopGMAC_is_rx_checksum_error
 8103              		.thumb
 8104              		.thumb_func
 8106              	synopGMAC_is_rx_checksum_error:
 8107              	.LFB275:
2981:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** #endif
2982:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2983:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2984:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
2985:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
2986:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Decodes the Rx Descriptor status to various checksum error conditions.
2987:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
2988:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 status field of the corresponding descriptor.
2989:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns decoded enum (u32) indicating the status.
2990:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
2991:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** u32 synopGMAC_is_rx_checksum_error(synopGMACdevice *gmacdev, u32 status)
2992:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8108              		.loc 1 2992 0
 8109              		.cfi_startproc
 8110              		@ args = 0, pretend = 0, frame = 8
 8111              		@ frame_needed = 1, uses_anonymous_args = 0
 8112              		@ link register save eliminated.
 8113 0000 80B4     		push	{r7}
 8114              	.LCFI474:
 8115              		.cfi_def_cfa_offset 4
 8116              		.cfi_offset 7, -4
 8117 0002 83B0     		sub	sp, sp, #12
 8118              	.LCFI475:
 8119              		.cfi_def_cfa_offset 16
 8120 0004 00AF     		add	r7, sp, #0
 8121              	.LCFI476:
 8122              		.cfi_def_cfa_register 7
 8123 0006 7860     		str	r0, [r7, #4]
 8124 0008 3960     		str	r1, [r7, #0]
2993:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	if     (((status & DescRxChkBit5) == 0) && ((status & DescRxChkBit7) == 0) && ((status & DescRxChk
 8125              		.loc 1 2993 0
 8126 000a 3B68     		ldr	r3, [r7, #0]
 8127 000c 03F02003 		and	r3, r3, #32
 8128 0010 002B     		cmp	r3, #0
 8129 0012 0CD1     		bne	.L408
 8130              		.loc 1 2993 0 is_stmt 0 discriminator 1
 8131 0014 3B68     		ldr	r3, [r7, #0]
 8132 0016 03F08003 		and	r3, r3, #128
 8133 001a 002B     		cmp	r3, #0
 8134 001c 07D1     		bne	.L408
 8135 001e 3B68     		ldr	r3, [r7, #0]
 8136 0020 03F00103 		and	r3, r3, #1
 8137 0024 002B     		cmp	r3, #0
 8138 0026 02D1     		bne	.L408
2994:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return RxLenLT600;
 8139              		.loc 1 2994 0 is_stmt 1
 8140 0028 4FF00003 		mov	r3, #0
 8141 002c 6DE0     		b	.L409
 8142              	.L408:
2995:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else if(((status & DescRxChkBit5) == 0) && ((status & DescRxChkBit7) == 0) && ((status & DescRxChk
 8143              		.loc 1 2995 0
 8144 002e 3B68     		ldr	r3, [r7, #0]
 8145 0030 03F02003 		and	r3, r3, #32
 8146 0034 002B     		cmp	r3, #0
 8147 0036 0CD1     		bne	.L410
 8148              		.loc 1 2995 0 is_stmt 0 discriminator 1
 8149 0038 3B68     		ldr	r3, [r7, #0]
 8150 003a 03F08003 		and	r3, r3, #128
 8151 003e 002B     		cmp	r3, #0
 8152 0040 07D1     		bne	.L410
 8153 0042 3B68     		ldr	r3, [r7, #0]
 8154 0044 03F00103 		and	r3, r3, #1
 8155 0048 002B     		cmp	r3, #0
 8156 004a 02D0     		beq	.L410
2996:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return RxIpHdrPayLoadChkBypass;
 8157              		.loc 1 2996 0 is_stmt 1
 8158 004c 4FF00103 		mov	r3, #1
 8159 0050 5BE0     		b	.L409
 8160              	.L410:
2997:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else if(((status & DescRxChkBit5) == 0) && ((status & DescRxChkBit7) != 0) && ((status & DescRxChk
 8161              		.loc 1 2997 0
 8162 0052 3B68     		ldr	r3, [r7, #0]
 8163 0054 03F02003 		and	r3, r3, #32
 8164 0058 002B     		cmp	r3, #0
 8165 005a 0CD1     		bne	.L411
 8166              		.loc 1 2997 0 is_stmt 0 discriminator 1
 8167 005c 3B68     		ldr	r3, [r7, #0]
 8168 005e 03F08003 		and	r3, r3, #128
 8169 0062 002B     		cmp	r3, #0
 8170 0064 07D0     		beq	.L411
 8171 0066 3B68     		ldr	r3, [r7, #0]
 8172 0068 03F00103 		and	r3, r3, #1
 8173 006c 002B     		cmp	r3, #0
 8174 006e 02D0     		beq	.L411
2998:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return RxChkBypass;
 8175              		.loc 1 2998 0 is_stmt 1
 8176 0070 4FF00303 		mov	r3, #3
 8177 0074 49E0     		b	.L409
 8178              	.L411:
2999:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else if(((status & DescRxChkBit5) != 0) && ((status & DescRxChkBit7) == 0) && ((status & DescRxChk
 8179              		.loc 1 2999 0
 8180 0076 3B68     		ldr	r3, [r7, #0]
 8181 0078 03F02003 		and	r3, r3, #32
 8182 007c 002B     		cmp	r3, #0
 8183 007e 0CD0     		beq	.L412
 8184              		.loc 1 2999 0 is_stmt 0 discriminator 1
 8185 0080 3B68     		ldr	r3, [r7, #0]
 8186 0082 03F08003 		and	r3, r3, #128
 8187 0086 002B     		cmp	r3, #0
 8188 0088 07D1     		bne	.L412
 8189 008a 3B68     		ldr	r3, [r7, #0]
 8190 008c 03F00103 		and	r3, r3, #1
 8191 0090 002B     		cmp	r3, #0
 8192 0092 02D1     		bne	.L412
3000:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return RxNoChkError;
 8193              		.loc 1 3000 0 is_stmt 1
 8194 0094 4FF00403 		mov	r3, #4
 8195 0098 37E0     		b	.L409
 8196              	.L412:
3001:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else if(((status & DescRxChkBit5) != 0) && ((status & DescRxChkBit7) == 0) && ((status & DescRxChk
 8197              		.loc 1 3001 0
 8198 009a 3B68     		ldr	r3, [r7, #0]
 8199 009c 03F02003 		and	r3, r3, #32
 8200 00a0 002B     		cmp	r3, #0
 8201 00a2 0CD0     		beq	.L413
 8202              		.loc 1 3001 0 is_stmt 0 discriminator 1
 8203 00a4 3B68     		ldr	r3, [r7, #0]
 8204 00a6 03F08003 		and	r3, r3, #128
 8205 00aa 002B     		cmp	r3, #0
 8206 00ac 07D1     		bne	.L413
 8207 00ae 3B68     		ldr	r3, [r7, #0]
 8208 00b0 03F00103 		and	r3, r3, #1
 8209 00b4 002B     		cmp	r3, #0
 8210 00b6 02D0     		beq	.L413
3002:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return RxPayLoadChkError;
 8211              		.loc 1 3002 0 is_stmt 1
 8212 00b8 4FF00503 		mov	r3, #5
 8213 00bc 25E0     		b	.L409
 8214              	.L413:
3003:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else if(((status & DescRxChkBit5) != 0) && ((status & DescRxChkBit7) != 0) && ((status & DescRxChk
 8215              		.loc 1 3003 0
 8216 00be 3B68     		ldr	r3, [r7, #0]
 8217 00c0 03F02003 		and	r3, r3, #32
 8218 00c4 002B     		cmp	r3, #0
 8219 00c6 0CD0     		beq	.L414
 8220              		.loc 1 3003 0 is_stmt 0 discriminator 1
 8221 00c8 3B68     		ldr	r3, [r7, #0]
 8222 00ca 03F08003 		and	r3, r3, #128
 8223 00ce 002B     		cmp	r3, #0
 8224 00d0 07D0     		beq	.L414
 8225 00d2 3B68     		ldr	r3, [r7, #0]
 8226 00d4 03F00103 		and	r3, r3, #1
 8227 00d8 002B     		cmp	r3, #0
 8228 00da 02D1     		bne	.L414
3004:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return RxIpHdrChkError;
 8229              		.loc 1 3004 0 is_stmt 1
 8230 00dc 4FF00603 		mov	r3, #6
 8231 00e0 13E0     		b	.L409
 8232              	.L414:
3005:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else if(((status & DescRxChkBit5) != 0) && ((status & DescRxChkBit7) != 0) && ((status & DescRxChk
 8233              		.loc 1 3005 0
 8234 00e2 3B68     		ldr	r3, [r7, #0]
 8235 00e4 03F02003 		and	r3, r3, #32
 8236 00e8 002B     		cmp	r3, #0
 8237 00ea 0CD0     		beq	.L415
 8238              		.loc 1 3005 0 is_stmt 0 discriminator 1
 8239 00ec 3B68     		ldr	r3, [r7, #0]
 8240 00ee 03F08003 		and	r3, r3, #128
 8241 00f2 002B     		cmp	r3, #0
 8242 00f4 07D0     		beq	.L415
 8243 00f6 3B68     		ldr	r3, [r7, #0]
 8244 00f8 03F00103 		and	r3, r3, #1
 8245 00fc 002B     		cmp	r3, #0
 8246 00fe 02D0     		beq	.L415
3006:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return RxIpHdrPayLoadChkError;
 8247              		.loc 1 3006 0 is_stmt 1
 8248 0100 4FF00703 		mov	r3, #7
 8249 0104 01E0     		b	.L409
 8250              	.L415:
3007:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	else
3008:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return RxIpHdrPayLoadRes;
 8251              		.loc 1 3008 0
 8252 0106 4FF00203 		mov	r3, #2
 8253              	.L409:
3009:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8254              		.loc 1 3009 0
 8255 010a 1846     		mov	r0, r3
 8256 010c 07F10C07 		add	r7, r7, #12
 8257 0110 BD46     		mov	sp, r7
 8258 0112 80BC     		pop	{r7}
 8259 0114 7047     		bx	lr
 8260              		.cfi_endproc
 8261              	.LFE275:
 8263 0116 00BF     		.section	.text.synopGMAC_is_tx_ipv4header_checksum_error,"ax",%progbits
 8264              		.align	2
 8265              		.global	synopGMAC_is_tx_ipv4header_checksum_error
 8266              		.thumb
 8267              		.thumb_func
 8269              	synopGMAC_is_tx_ipv4header_checksum_error:
 8270              	.LFB276:
3010:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
3011:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks if any Ipv4 header checksum error in the frame just transmitted.
3012:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This serves as indication that error occureed in the IPv4 header checksum insertion.
3013:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The sent out frame doesnot carry any ipv4 header checksum inserted by the hardware.
3014:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
3015:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 status field of the corresponding descriptor.
3016:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if error in ipv4 header checksum, else returns false.
3017:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
3018:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_tx_ipv4header_checksum_error(synopGMACdevice *gmacdev, u32 status)
3019:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8271              		.loc 1 3019 0
 8272              		.cfi_startproc
 8273              		@ args = 0, pretend = 0, frame = 8
 8274              		@ frame_needed = 1, uses_anonymous_args = 0
 8275              		@ link register save eliminated.
 8276 0000 80B4     		push	{r7}
 8277              	.LCFI477:
 8278              		.cfi_def_cfa_offset 4
 8279              		.cfi_offset 7, -4
 8280 0002 83B0     		sub	sp, sp, #12
 8281              	.LCFI478:
 8282              		.cfi_def_cfa_offset 16
 8283 0004 00AF     		add	r7, sp, #0
 8284              	.LCFI479:
 8285              		.cfi_def_cfa_register 7
 8286 0006 7860     		str	r0, [r7, #4]
 8287 0008 3960     		str	r1, [r7, #0]
3020:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((status & DescTxIpv4ChkError) == DescTxIpv4ChkError);
 8288              		.loc 1 3020 0
 8289 000a 3B68     		ldr	r3, [r7, #0]
 8290 000c 03F48033 		and	r3, r3, #65536
 8291 0010 002B     		cmp	r3, #0
 8292 0012 0CBF     		ite	eq
 8293 0014 0023     		moveq	r3, #0
 8294 0016 0123     		movne	r3, #1
 8295 0018 DBB2     		uxtb	r3, r3
3021:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8296              		.loc 1 3021 0
 8297 001a 1846     		mov	r0, r3
 8298 001c 07F10C07 		add	r7, r7, #12
 8299 0020 BD46     		mov	sp, r7
 8300 0022 80BC     		pop	{r7}
 8301 0024 7047     		bx	lr
 8302              		.cfi_endproc
 8303              	.LFE276:
 8305 0026 00BF     		.section	.text.synopGMAC_is_tx_payload_checksum_error,"ax",%progbits
 8306              		.align	2
 8307              		.global	synopGMAC_is_tx_payload_checksum_error
 8308              		.thumb
 8309              		.thumb_func
 8311              	synopGMAC_is_tx_payload_checksum_error:
 8312              	.LFB277:
3022:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
3023:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
3024:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
3025:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checks if any payload checksum error in the frame just transmitted.
3026:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * This serves as indication that error occureed in the payload checksum insertion.
3027:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The sent out frame doesnot carry any payload checksum inserted by the hardware.
3028:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
3029:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] u32 status field of the corresponding descriptor.
3030:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns true if error in ipv4 header checksum, else returns false.
3031:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
3032:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** bool synopGMAC_is_tx_payload_checksum_error(synopGMACdevice *gmacdev, u32 status)
3033:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8313              		.loc 1 3033 0
 8314              		.cfi_startproc
 8315              		@ args = 0, pretend = 0, frame = 8
 8316              		@ frame_needed = 1, uses_anonymous_args = 0
 8317              		@ link register save eliminated.
 8318 0000 80B4     		push	{r7}
 8319              	.LCFI480:
 8320              		.cfi_def_cfa_offset 4
 8321              		.cfi_offset 7, -4
 8322 0002 83B0     		sub	sp, sp, #12
 8323              	.LCFI481:
 8324              		.cfi_def_cfa_offset 16
 8325 0004 00AF     		add	r7, sp, #0
 8326              	.LCFI482:
 8327              		.cfi_def_cfa_register 7
 8328 0006 7860     		str	r0, [r7, #4]
 8329 0008 3960     		str	r1, [r7, #0]
3034:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	return((status & DescTxPayChkError) == DescTxPayChkError);
 8330              		.loc 1 3034 0
 8331 000a 3B68     		ldr	r3, [r7, #0]
 8332 000c 03F48053 		and	r3, r3, #4096
 8333 0010 002B     		cmp	r3, #0
 8334 0012 0CBF     		ite	eq
 8335 0014 0023     		moveq	r3, #0
 8336 0016 0123     		movne	r3, #1
 8337 0018 DBB2     		uxtb	r3, r3
3035:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8338              		.loc 1 3035 0
 8339 001a 1846     		mov	r0, r3
 8340 001c 07F10C07 		add	r7, r7, #12
 8341 0020 BD46     		mov	sp, r7
 8342 0022 80BC     		pop	{r7}
 8343 0024 7047     		bx	lr
 8344              		.cfi_endproc
 8345              	.LFE277:
 8347 0026 00BF     		.section	.text.synopGMAC_tx_checksum_offload_bypass,"ax",%progbits
 8348              		.align	2
 8349              		.global	synopGMAC_tx_checksum_offload_bypass
 8350              		.thumb
 8351              		.thumb_func
 8353              	synopGMAC_tx_checksum_offload_bypass:
 8354              	.LFB278:
3036:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
3037:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The check summ offload engine is bypassed in the tx path.
3038:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Checksum is not computed in the Hardware.
3039:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
3040:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Pointer to tx descriptor for which  ointer to synopGMACdevice.
3041:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
3042:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
3043:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_checksum_offload_bypass(synopGMACdevice *gmacdev, DmaDesc *desc)
3044:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8355              		.loc 1 3044 0
 8356              		.cfi_startproc
 8357              		@ args = 0, pretend = 0, frame = 8
 8358              		@ frame_needed = 1, uses_anonymous_args = 0
 8359              		@ link register save eliminated.
 8360 0000 80B4     		push	{r7}
 8361              	.LCFI483:
 8362              		.cfi_def_cfa_offset 4
 8363              		.cfi_offset 7, -4
 8364 0002 83B0     		sub	sp, sp, #12
 8365              	.LCFI484:
 8366              		.cfi_def_cfa_offset 16
 8367 0004 00AF     		add	r7, sp, #0
 8368              	.LCFI485:
 8369              		.cfi_def_cfa_register 7
 8370 0006 7860     		str	r0, [r7, #4]
 8371 0008 3960     		str	r1, [r7, #0]
3045:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#ifdef ENH_DESC
3046:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->status = (desc->length & (~DescTxCisMask));//ENH_DESC
 8372              		.loc 1 3046 0
 8373 000a 3B68     		ldr	r3, [r7, #0]
 8374 000c 5B68     		ldr	r3, [r3, #4]
 8375 000e 23F44002 		bic	r2, r3, #12582912
 8376 0012 3B68     		ldr	r3, [r7, #0]
 8377 0014 1A60     		str	r2, [r3, #0]
3047:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#else
3048:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = (desc->length & (~DescTxCisMask));
3049:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#endif
3050:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
3051:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8378              		.loc 1 3051 0
 8379 0016 07F10C07 		add	r7, r7, #12
 8380 001a BD46     		mov	sp, r7
 8381 001c 80BC     		pop	{r7}
 8382 001e 7047     		bx	lr
 8383              		.cfi_endproc
 8384              	.LFE278:
 8386              		.section	.text.synopGMAC_tx_checksum_offload_ipv4hdr,"ax",%progbits
 8387              		.align	2
 8388              		.global	synopGMAC_tx_checksum_offload_ipv4hdr
 8389              		.thumb
 8390              		.thumb_func
 8392              	synopGMAC_tx_checksum_offload_ipv4hdr:
 8393              	.LFB279:
3052:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
3053:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The check summ offload engine is enabled to do only IPV4 header checksum.
3054:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * IPV4 header Checksum is computed in the Hardware.
3055:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
3056:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Pointer to tx descriptor for which  ointer to synopGMACdevice.
3057:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
3058:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
3059:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_checksum_offload_ipv4hdr(synopGMACdevice *gmacdev, DmaDesc *desc)
3060:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8394              		.loc 1 3060 0
 8395              		.cfi_startproc
 8396              		@ args = 0, pretend = 0, frame = 8
 8397              		@ frame_needed = 1, uses_anonymous_args = 0
 8398              		@ link register save eliminated.
 8399 0000 80B4     		push	{r7}
 8400              	.LCFI486:
 8401              		.cfi_def_cfa_offset 4
 8402              		.cfi_offset 7, -4
 8403 0002 83B0     		sub	sp, sp, #12
 8404              	.LCFI487:
 8405              		.cfi_def_cfa_offset 16
 8406 0004 00AF     		add	r7, sp, #0
 8407              	.LCFI488:
 8408              		.cfi_def_cfa_register 7
 8409 0006 7860     		str	r0, [r7, #4]
 8410 0008 3960     		str	r1, [r7, #0]
3061:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#ifdef ENH_DESC
3062:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->status = ((desc->status & (~DescTxCisMask)) | DescTxCisIpv4HdrCs);//ENH_DESC
 8411              		.loc 1 3062 0
 8412 000a 3B68     		ldr	r3, [r7, #0]
 8413 000c 1B68     		ldr	r3, [r3, #0]
 8414 000e 23F44003 		bic	r3, r3, #12582912
 8415 0012 43F48002 		orr	r2, r3, #4194304
 8416 0016 3B68     		ldr	r3, [r7, #0]
 8417 0018 1A60     		str	r2, [r3, #0]
3063:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#else
3064:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = ((desc->length & (~DescTxCisMask)) | DescTxCisIpv4HdrCs);
3065:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#endif
3066:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
3067:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8418              		.loc 1 3067 0
 8419 001a 07F10C07 		add	r7, r7, #12
 8420 001e BD46     		mov	sp, r7
 8421 0020 80BC     		pop	{r7}
 8422 0022 7047     		bx	lr
 8423              		.cfi_endproc
 8424              	.LFE279:
 8426              		.section	.text.synopGMAC_tx_checksum_offload_tcponly,"ax",%progbits
 8427              		.align	2
 8428              		.global	synopGMAC_tx_checksum_offload_tcponly
 8429              		.thumb
 8430              		.thumb_func
 8432              	synopGMAC_tx_checksum_offload_tcponly:
 8433              	.LFB280:
3068:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
3069:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
3070:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The check summ offload engine is enabled to do TCPIP checsum assuming Pseudo header is availabl
3071:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Hardware computes the tcp ip checksum assuming pseudo header checksum is computed in software.
3072:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Ipv4 header checksum is also inserted.
3073:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
3074:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Pointer to tx descriptor for which  ointer to synopGMACdevice.
3075:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
3076:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
3077:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_checksum_offload_tcponly(synopGMACdevice *gmacdev, DmaDesc *desc)
3078:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8434              		.loc 1 3078 0
 8435              		.cfi_startproc
 8436              		@ args = 0, pretend = 0, frame = 8
 8437              		@ frame_needed = 1, uses_anonymous_args = 0
 8438              		@ link register save eliminated.
 8439 0000 80B4     		push	{r7}
 8440              	.LCFI489:
 8441              		.cfi_def_cfa_offset 4
 8442              		.cfi_offset 7, -4
 8443 0002 83B0     		sub	sp, sp, #12
 8444              	.LCFI490:
 8445              		.cfi_def_cfa_offset 16
 8446 0004 00AF     		add	r7, sp, #0
 8447              	.LCFI491:
 8448              		.cfi_def_cfa_register 7
 8449 0006 7860     		str	r0, [r7, #4]
 8450 0008 3960     		str	r1, [r7, #0]
3079:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#ifdef ENH_DESC
3080:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->status = ((desc->status & (~DescTxCisMask)) | DescTxCisTcpOnlyCs);//ENH_DESC
 8451              		.loc 1 3080 0
 8452 000a 3B68     		ldr	r3, [r7, #0]
 8453 000c 1B68     		ldr	r3, [r3, #0]
 8454 000e 23F44003 		bic	r3, r3, #12582912
 8455 0012 43F40002 		orr	r2, r3, #8388608
 8456 0016 3B68     		ldr	r3, [r7, #0]
 8457 0018 1A60     		str	r2, [r3, #0]
3081:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#else
3082:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = ((desc->length & (~DescTxCisMask)) | DescTxCisTcpOnlyCs);
3083:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#endif
3084:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
3085:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8458              		.loc 1 3085 0
 8459 001a 07F10C07 		add	r7, r7, #12
 8460 001e BD46     		mov	sp, r7
 8461 0020 80BC     		pop	{r7}
 8462 0022 7047     		bx	lr
 8463              		.cfi_endproc
 8464              	.LFE280:
 8466              		.section	.text.synopGMAC_tx_checksum_offload_tcp_pseudo,"ax",%progbits
 8467              		.align	2
 8468              		.global	synopGMAC_tx_checksum_offload_tcp_pseudo
 8469              		.thumb
 8470              		.thumb_func
 8472              	synopGMAC_tx_checksum_offload_tcp_pseudo:
 8473              	.LFB281:
3086:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** /**
3087:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * The check summ offload engine is enabled to do complete checksum computation.
3088:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Hardware computes the tcp ip checksum including the pseudo header checksum.
3089:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Here the tcp payload checksum field should be set to 0000.
3090:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * Ipv4 header checksum is also inserted.
3091:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] pointer to synopGMACdevice.
3092:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * @param[in] Pointer to tx descriptor for which  ointer to synopGMACdevice.
3093:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   * \return returns void.
3094:../Dave/Generated/src/ETH001/synopGMAC_Dev.c ****   */
3095:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** void synopGMAC_tx_checksum_offload_tcp_pseudo(synopGMACdevice *gmacdev, DmaDesc *desc)
3096:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** {
 8474              		.loc 1 3096 0
 8475              		.cfi_startproc
 8476              		@ args = 0, pretend = 0, frame = 8
 8477              		@ frame_needed = 1, uses_anonymous_args = 0
 8478              		@ link register save eliminated.
 8479 0000 80B4     		push	{r7}
 8480              	.LCFI492:
 8481              		.cfi_def_cfa_offset 4
 8482              		.cfi_offset 7, -4
 8483 0002 83B0     		sub	sp, sp, #12
 8484              	.LCFI493:
 8485              		.cfi_def_cfa_offset 16
 8486 0004 00AF     		add	r7, sp, #0
 8487              	.LCFI494:
 8488              		.cfi_def_cfa_register 7
 8489 0006 7860     		str	r0, [r7, #4]
 8490 0008 3960     		str	r1, [r7, #0]
3097:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#ifdef ENH_DESC
3098:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->status = ((desc->status & (~DescTxCisMask)) | DescTxCisTcpPseudoCs);
 8491              		.loc 1 3098 0
 8492 000a 3B68     		ldr	r3, [r7, #0]
 8493 000c 1B68     		ldr	r3, [r3, #0]
 8494 000e 43F44002 		orr	r2, r3, #12582912
 8495 0012 3B68     		ldr	r3, [r7, #0]
 8496 0014 1A60     		str	r2, [r3, #0]
3099:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#else
3100:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	desc->length = ((desc->length & (~DescTxCisMask)) | DescTxCisTcpPseudoCs);
3101:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 	#endif
3102:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** 
3103:../Dave/Generated/src/ETH001/synopGMAC_Dev.c **** }
 8497              		.loc 1 3103 0
 8498 0016 07F10C07 		add	r7, r7, #12
 8499 001a BD46     		mov	sp, r7
 8500 001c 80BC     		pop	{r7}
 8501 001e 7047     		bx	lr
 8502              		.cfi_endproc
 8503              	.LFE281:
 8505              		.text
 8506              	.Letext0:
 8507              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 8508              		.file 3 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 8509              		.file 4 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 8510              		.file 5 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 8511              		.file 6 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 8512              		.file 7 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 8513              		.file 8 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 synopGMAC_Dev.c
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:20     .bss:00000000 $d
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:21     .bss:00000000 SynopGMACOneShotTimerCallback
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:24     .text.synopGMAC_set_tx_address:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:29     .text.synopGMAC_set_tx_address:00000000 synopGMAC_set_tx_address
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:88     .text.synopGMAC_RegisterOneShotTimerCallback:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:93     .text.synopGMAC_RegisterOneShotTimerCallback:00000000 synopGMAC_RegisterOneShotTimerCallback
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:125    .text.synopGMAC_set_mdc_clk_div:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:130    .text.synopGMAC_set_mdc_clk_div:00000000 synopGMAC_set_mdc_clk_div
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:183    .text.synopGMAC_get_mdc_clk_div:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:188    .text.synopGMAC_get_mdc_clk_div:00000000 synopGMAC_get_mdc_clk_div
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:228    .text.synopGMAC_read_version:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:233    .text.synopGMAC_read_version:00000000 synopGMAC_read_version
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:276    .text.synopGMAC_rmii_100mbps_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:281    .text.synopGMAC_rmii_100mbps_enable:00000000 synopGMAC_rmii_100mbps_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:316    .text.synopGMAC_reset:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:321    .text.synopGMAC_reset:00000000 synopGMAC_reset
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:391    .text.synopGMAC_dma_bus_mode_init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:396    .text.synopGMAC_dma_bus_mode_init:00000000 synopGMAC_dma_bus_mode_init
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:433    .text.synopGMAC_dma_control_init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:438    .text.synopGMAC_dma_control_init:00000000 synopGMAC_dma_control_init
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:475    .text.synopGMAC_wd_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:480    .text.synopGMAC_wd_enable:00000000 synopGMAC_wd_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:515    .text.synopGMAC_wd_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:520    .text.synopGMAC_wd_disable:00000000 synopGMAC_wd_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:555    .text.synopGMAC_jab_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:560    .text.synopGMAC_jab_enable:00000000 synopGMAC_jab_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:595    .text.synopGMAC_jab_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:600    .text.synopGMAC_jab_disable:00000000 synopGMAC_jab_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:635    .text.synopGMAC_frame_burst_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:640    .text.synopGMAC_frame_burst_enable:00000000 synopGMAC_frame_burst_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:675    .text.synopGMAC_frame_burst_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:680    .text.synopGMAC_frame_burst_disable:00000000 synopGMAC_frame_burst_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:715    .text.synopGMAC_jumbo_frame_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:720    .text.synopGMAC_jumbo_frame_enable:00000000 synopGMAC_jumbo_frame_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:755    .text.synopGMAC_jumbo_frame_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:760    .text.synopGMAC_jumbo_frame_disable:00000000 synopGMAC_jumbo_frame_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:795    .text.synopGMAC_disable_crs:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:800    .text.synopGMAC_disable_crs:00000000 synopGMAC_disable_crs
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:835    .text.synopGMAC_select_gmii:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:840    .text.synopGMAC_select_gmii:00000000 synopGMAC_select_gmii
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:875    .text.synopGMAC_select_mii:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:880    .text.synopGMAC_select_mii:00000000 synopGMAC_select_mii
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:915    .text.synopGMAC_rx_own_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:920    .text.synopGMAC_rx_own_enable:00000000 synopGMAC_rx_own_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:955    .text.synopGMAC_rx_own_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:960    .text.synopGMAC_rx_own_disable:00000000 synopGMAC_rx_own_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:995    .text.synopGMAC_loopback_on:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1000   .text.synopGMAC_loopback_on:00000000 synopGMAC_loopback_on
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1035   .text.synopGMAC_loopback_off:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1040   .text.synopGMAC_loopback_off:00000000 synopGMAC_loopback_off
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1075   .text.synopGMAC_set_full_duplex:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1080   .text.synopGMAC_set_full_duplex:00000000 synopGMAC_set_full_duplex
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1115   .text.synopGMAC_set_half_duplex:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1120   .text.synopGMAC_set_half_duplex:00000000 synopGMAC_set_half_duplex
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1155   .text.synopGMAC_retry_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1160   .text.synopGMAC_retry_enable:00000000 synopGMAC_retry_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1195   .text.synopGMAC_retry_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1200   .text.synopGMAC_retry_disable:00000000 synopGMAC_retry_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1235   .text.synopGMAC_pad_crc_strip_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1240   .text.synopGMAC_pad_crc_strip_enable:00000000 synopGMAC_pad_crc_strip_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1275   .text.synopGMAC_pad_crc_strip_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1280   .text.synopGMAC_pad_crc_strip_disable:00000000 synopGMAC_pad_crc_strip_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1315   .text.synopGMAC_back_off_limit:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1320   .text.synopGMAC_back_off_limit:00000000 synopGMAC_back_off_limit
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1372   .text.synopGMAC_deferral_check_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1377   .text.synopGMAC_deferral_check_enable:00000000 synopGMAC_deferral_check_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1412   .text.synopGMAC_deferral_check_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1417   .text.synopGMAC_deferral_check_disable:00000000 synopGMAC_deferral_check_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1452   .text.synopGMAC_rx_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1457   .text.synopGMAC_rx_enable:00000000 synopGMAC_rx_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1492   .text.synopGMAC_rx_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1497   .text.synopGMAC_rx_disable:00000000 synopGMAC_rx_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1532   .text.synopGMAC_tx_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1537   .text.synopGMAC_tx_enable:00000000 synopGMAC_tx_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1572   .text.synopGMAC_tx_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1577   .text.synopGMAC_tx_disable:00000000 synopGMAC_tx_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1612   .text.synopGMAC_frame_filter_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1617   .text.synopGMAC_frame_filter_enable:00000000 synopGMAC_frame_filter_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1652   .text.synopGMAC_frame_filter_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1657   .text.synopGMAC_frame_filter_disable:00000000 synopGMAC_frame_filter_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1692   .text.synopGMAC_write_hash_table_high:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1697   .text.synopGMAC_write_hash_table_high:00000000 synopGMAC_write_hash_table_high
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1733   .text.synopGMAC_write_hash_table_low:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1738   .text.synopGMAC_write_hash_table_low:00000000 synopGMAC_write_hash_table_low
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1774   .text.synopGMAC_hash_perfect_filter_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1779   .text.synopGMAC_hash_perfect_filter_enable:00000000 synopGMAC_hash_perfect_filter_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1814   .text.synopGMAC_Hash_filter_only_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1819   .text.synopGMAC_Hash_filter_only_enable:00000000 synopGMAC_Hash_filter_only_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1854   .text.synopGMAC_src_addr_filter_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1859   .text.synopGMAC_src_addr_filter_enable:00000000 synopGMAC_src_addr_filter_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1894   .text.synopGMAC_src_addr_filter_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1899   .text.synopGMAC_src_addr_filter_disable:00000000 synopGMAC_src_addr_filter_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1934   .text.synopGMAC_dst_addr_filter_inverse:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1939   .text.synopGMAC_dst_addr_filter_inverse:00000000 synopGMAC_dst_addr_filter_inverse
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1974   .text.synopGMAC_dst_addr_filter_normal:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:1979   .text.synopGMAC_dst_addr_filter_normal:00000000 synopGMAC_dst_addr_filter_normal
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2014   .text.synopGMAC_set_pass_control:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2019   .text.synopGMAC_set_pass_control:00000000 synopGMAC_set_pass_control
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2071   .text.synopGMAC_broadcast_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2076   .text.synopGMAC_broadcast_enable:00000000 synopGMAC_broadcast_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2111   .text.synopGMAC_broadcast_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2116   .text.synopGMAC_broadcast_disable:00000000 synopGMAC_broadcast_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2151   .text.synopGMAC_multicast_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2156   .text.synopGMAC_multicast_enable:00000000 synopGMAC_multicast_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2191   .text.synopGMAC_multicast_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2196   .text.synopGMAC_multicast_disable:00000000 synopGMAC_multicast_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2231   .text.synopGMAC_multicast_hash_filter_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2236   .text.synopGMAC_multicast_hash_filter_enable:00000000 synopGMAC_multicast_hash_filter_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2271   .text.synopGMAC_multicast_hash_filter_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2276   .text.synopGMAC_multicast_hash_filter_disable:00000000 synopGMAC_multicast_hash_filter_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2311   .text.synopGMAC_promisc_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2316   .text.synopGMAC_promisc_enable:00000000 synopGMAC_promisc_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2351   .text.synopGMAC_promisc_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2356   .text.synopGMAC_promisc_disable:00000000 synopGMAC_promisc_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2391   .text.synopGMAC_unicast_hash_filter_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2396   .text.synopGMAC_unicast_hash_filter_enable:00000000 synopGMAC_unicast_hash_filter_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2431   .text.synopGMAC_unicast_hash_filter_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2436   .text.synopGMAC_unicast_hash_filter_disable:00000000 synopGMAC_unicast_hash_filter_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2471   .text.synopGMAC_unicast_pause_frame_detect_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2476   .text.synopGMAC_unicast_pause_frame_detect_enable:00000000 synopGMAC_unicast_pause_frame_detect_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2511   .text.synopGMAC_unicast_pause_frame_detect_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2516   .text.synopGMAC_unicast_pause_frame_detect_disable:00000000 synopGMAC_unicast_pause_frame_detect_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2551   .text.synopGMAC_rx_flow_control_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2556   .text.synopGMAC_rx_flow_control_enable:00000000 synopGMAC_rx_flow_control_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2591   .text.synopGMAC_rx_flow_control_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2596   .text.synopGMAC_rx_flow_control_disable:00000000 synopGMAC_rx_flow_control_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2631   .text.synopGMAC_tx_flow_control_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2636   .text.synopGMAC_tx_flow_control_enable:00000000 synopGMAC_tx_flow_control_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2671   .text.synopGMAC_tx_flow_control_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2676   .text.synopGMAC_tx_flow_control_disable:00000000 synopGMAC_tx_flow_control_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2711   .text.synopGMAC_tx_activate_flow_control:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2716   .text.synopGMAC_tx_activate_flow_control:00000000 synopGMAC_tx_activate_flow_control
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2778   .text.synopGMAC_tx_deactivate_flow_control:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2783   .text.synopGMAC_tx_deactivate_flow_control:00000000 synopGMAC_tx_deactivate_flow_control
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2825   .text.synopGMAC_pause_control:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2830   .text.synopGMAC_pause_control:00000000 synopGMAC_pause_control
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2897   .text.synopGMAC_mac_init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:2902   .text.synopGMAC_mac_init:00000000 synopGMAC_mac_init
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3099   .text.synopGMAC_set_mac_addr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3104   .text.synopGMAC_set_mac_addr:00000000 synopGMAC_set_mac_addr
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3179   .text.synopGMAC_get_mac_addr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3184   .text.synopGMAC_get_mac_addr:00000000 synopGMAC_get_mac_addr
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3269   .rodata:00000000 $d
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3270   .rodata:00000000 .LC0
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3278   .text.synopGMAC_attach:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3283   .text.synopGMAC_attach:00000000 synopGMAC_attach
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3346   .text.synopGMAC_rx_desc_init_ring:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3351   .text.synopGMAC_rx_desc_init_ring:00000000 synopGMAC_rx_desc_init_ring
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3416   .text.synopGMAC_tx_desc_init_ring:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3421   .text.synopGMAC_tx_desc_init_ring:00000000 synopGMAC_tx_desc_init_ring
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3470   .text.synopGMAC_rx_desc_init_chain:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3475   .text.synopGMAC_rx_desc_init_chain:00000000 synopGMAC_rx_desc_init_chain
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3520   .text.synopGMAC_tx_desc_init_chain:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3525   .text.synopGMAC_tx_desc_init_chain:00000000 synopGMAC_tx_desc_init_chain
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3562   .text.synopGMAC_init_tx_rx_desc_queue:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3567   .text.synopGMAC_init_tx_rx_desc_queue:00000000 synopGMAC_init_tx_rx_desc_queue
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3686   .text.synopGMAC_init_rx_desc_base:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3691   .text.synopGMAC_init_rx_desc_base:00000000 synopGMAC_init_rx_desc_base
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3729   .text.synopGMAC_init_tx_desc_base:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3734   .text.synopGMAC_init_tx_desc_base:00000000 synopGMAC_init_tx_desc_base
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3772   .text.synopGMAC_set_owner_dma:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3777   .text.synopGMAC_set_owner_dma:00000000 synopGMAC_set_owner_dma
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3810   .text.synopGMAC_set_desc_sof:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3815   .text.synopGMAC_set_desc_sof:00000000 synopGMAC_set_desc_sof
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3848   .text.synopGMAC_set_desc_eof:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3853   .text.synopGMAC_set_desc_eof:00000000 synopGMAC_set_desc_eof
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3886   .text.synopGMAC_is_sof_in_rx_desc:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3891   .text.synopGMAC_is_sof_in_rx_desc:00000000 synopGMAC_is_sof_in_rx_desc
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3928   .text.synopGMAC_is_eof_in_rx_desc:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3933   .text.synopGMAC_is_eof_in_rx_desc:00000000 synopGMAC_is_eof_in_rx_desc
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3970   .text.synopGMAC_is_da_filter_failed:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:3975   .text.synopGMAC_is_da_filter_failed:00000000 synopGMAC_is_da_filter_failed
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4012   .text.synopGMAC_is_sa_filter_failed:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4017   .text.synopGMAC_is_sa_filter_failed:00000000 synopGMAC_is_sa_filter_failed
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4054   .text.synopGMAC_is_desc_owned_by_dma:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4059   .text.synopGMAC_is_desc_owned_by_dma:00000000 synopGMAC_is_desc_owned_by_dma
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4092   .text.synopGMAC_get_rx_desc_frame_length:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4097   .text.synopGMAC_get_rx_desc_frame_length:00000000 synopGMAC_get_rx_desc_frame_length
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4131   .text.synopGMAC_is_desc_valid:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4136   .text.synopGMAC_is_desc_valid:00000000 synopGMAC_is_desc_valid
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4172   .text.synopGMAC_is_desc_empty:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4177   .text.synopGMAC_is_desc_empty:00000000 synopGMAC_is_desc_empty
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4229   .text.synopGMAC_is_rx_desc_valid:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4234   .text.synopGMAC_is_rx_desc_valid:00000000 synopGMAC_is_rx_desc_valid
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4285   .text.synopGMAC_is_tx_aborted:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4290   .text.synopGMAC_is_tx_aborted:00000000 synopGMAC_is_tx_aborted
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4335   .text.synopGMAC_is_tx_carrier_error:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4340   .text.synopGMAC_is_tx_carrier_error:00000000 synopGMAC_is_tx_carrier_error
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4385   .text.synopGMAC_get_tx_collision_count:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4390   .text.synopGMAC_get_tx_collision_count:00000000 synopGMAC_get_tx_collision_count
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4422   .text.synopGMAC_is_exc_tx_collisions:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4427   .text.synopGMAC_is_exc_tx_collisions:00000000 synopGMAC_is_exc_tx_collisions
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4463   .text.synopGMAC_is_rx_frame_damaged:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4468   .text.synopGMAC_is_rx_frame_damaged:00000000 synopGMAC_is_rx_frame_damaged
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4513   .text.synopGMAC_is_rx_frame_collision:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4518   .text.synopGMAC_is_rx_frame_collision:00000000 synopGMAC_is_rx_frame_collision
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4554   .text.synopGMAC_is_rx_crc:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4559   .text.synopGMAC_is_rx_crc:00000000 synopGMAC_is_rx_crc
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4595   .text.synopGMAC_is_frame_dribbling_errors:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4600   .text.synopGMAC_is_frame_dribbling_errors:00000000 synopGMAC_is_frame_dribbling_errors
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4636   .text.synopGMAC_is_rx_frame_length_errors:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4641   .text.synopGMAC_is_rx_frame_length_errors:00000000 synopGMAC_is_rx_frame_length_errors
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4677   .text.synopGMAC_is_last_rx_desc:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4682   .text.synopGMAC_is_last_rx_desc:00000000 synopGMAC_is_last_rx_desc
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4735   .text.synopGMAC_is_last_tx_desc:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4740   .text.synopGMAC_is_last_tx_desc:00000000 synopGMAC_is_last_tx_desc
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4793   .text.synopGMAC_is_rx_desc_chained:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4798   .text.synopGMAC_is_rx_desc_chained:00000000 synopGMAC_is_rx_desc_chained
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4835   .text.synopGMAC_is_tx_desc_chained:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4840   .text.synopGMAC_is_tx_desc_chained:00000000 synopGMAC_is_tx_desc_chained
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4877   .text.synopGMAC_get_desc_data:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4882   .text.synopGMAC_get_desc_data:00000000 synopGMAC_get_desc_data
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4991   .text.synopGMAC_get_tx_qptr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:4996   .text.synopGMAC_get_tx_qptr:00000000 synopGMAC_get_tx_qptr
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5232   .text.synopGMAC_set_tx_qptr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5237   .text.synopGMAC_set_tx_qptr:00000000 synopGMAC_set_tx_qptr
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8472   .text.synopGMAC_tx_checksum_offload_tcp_pseudo:00000000 synopGMAC_tx_checksum_offload_tcp_pseudo
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5430   .text.synopGMAC_set_rx_qptr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5435   .text.synopGMAC_set_rx_qptr:00000000 synopGMAC_set_rx_qptr
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5650   .text.synopGMAC_get_rx_qptr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5655   .text.synopGMAC_get_rx_qptr:00000000 synopGMAC_get_rx_qptr
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5846   .text.synopGMAC_clear_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5851   .text.synopGMAC_clear_interrupt:00000000 synopGMAC_clear_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5891   .text.synopGMAC_get_interrupt_type:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:5896   .text.synopGMAC_get_interrupt_type:00000000 synopGMAC_get_interrupt_type
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6012   .text.synopGMAC_get_interrupt_mask:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6017   .text.synopGMAC_get_interrupt_mask:00000000 synopGMAC_get_interrupt_mask
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6051   .text.synopGMAC_enable_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6056   .text.synopGMAC_enable_interrupt:00000000 synopGMAC_enable_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6092   .text.synopGMAC_disable_interrupt_all:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6097   .text.synopGMAC_disable_interrupt_all:00000000 synopGMAC_disable_interrupt_all
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6132   .text.synopGMAC_disable_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6137   .text.synopGMAC_disable_interrupt:00000000 synopGMAC_disable_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6173   .text.synopGMAC_enable_dma_rx:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6178   .text.synopGMAC_enable_dma_rx:00000000 synopGMAC_enable_dma_rx
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6222   .text.synopGMAC_enable_dma_tx:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6227   .text.synopGMAC_enable_dma_tx:00000000 synopGMAC_enable_dma_tx
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6271   .text.synopGMAC_resume_dma_tx:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6276   .text.synopGMAC_resume_dma_tx:00000000 synopGMAC_resume_dma_tx
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6309   .text.synopGMAC_resume_dma_rx:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6314   .text.synopGMAC_resume_dma_rx:00000000 synopGMAC_resume_dma_rx
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6347   .text.synopGMAC_take_desc_ownership:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6352   .text.synopGMAC_take_desc_ownership:00000000 synopGMAC_take_desc_ownership
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6390   .text.synopGMAC_take_desc_ownership_rx:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6395   .text.synopGMAC_take_desc_ownership_rx:00000000 synopGMAC_take_desc_ownership_rx
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6467   .text.synopGMAC_take_desc_ownership_tx:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6472   .text.synopGMAC_take_desc_ownership_tx:00000000 synopGMAC_take_desc_ownership_tx
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6544   .text.synopGMAC_disable_dma_tx:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6549   .text.synopGMAC_disable_dma_tx:00000000 synopGMAC_disable_dma_tx
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6593   .text.synopGMAC_disable_dma_rx:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6598   .text.synopGMAC_disable_dma_rx:00000000 synopGMAC_disable_dma_rx
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6642   .text.synopGMAC_pmt_int_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6647   .text.synopGMAC_pmt_int_enable:00000000 synopGMAC_pmt_int_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6682   .text.synopGMAC_pmt_int_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6687   .text.synopGMAC_pmt_int_disable:00000000 synopGMAC_pmt_int_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6722   .text.synopGMAC_power_down_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6727   .text.synopGMAC_power_down_enable:00000000 synopGMAC_power_down_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6762   .text.synopGMAC_power_down_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6767   .text.synopGMAC_power_down_disable:00000000 synopGMAC_power_down_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6802   .text.synopGMAC_enable_pmt_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6807   .text.synopGMAC_enable_pmt_interrupt:00000000 synopGMAC_enable_pmt_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6840   .text.synopGMAC_disable_pmt_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6845   .text.synopGMAC_disable_pmt_interrupt:00000000 synopGMAC_disable_pmt_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6878   .text.synopGMAC_magic_packet_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6883   .text.synopGMAC_magic_packet_enable:00000000 synopGMAC_magic_packet_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6918   .text.synopGMAC_wakeup_frame_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6923   .text.synopGMAC_wakeup_frame_enable:00000000 synopGMAC_wakeup_frame_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6958   .text.synopGMAC_pmt_unicast_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6963   .text.synopGMAC_pmt_unicast_enable:00000000 synopGMAC_pmt_unicast_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:6998   .text.synopGMAC_is_magic_packet_received:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7003   .text.synopGMAC_is_magic_packet_received:00000000 synopGMAC_is_magic_packet_received
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7045   .text.synopGMAC_is_wakeup_frame_received:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7050   .text.synopGMAC_is_wakeup_frame_received:00000000 synopGMAC_is_wakeup_frame_received
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7092   .text.synopGMAC_write_wakeup_frame_register:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7097   .text.synopGMAC_write_wakeup_frame_register:00000000 synopGMAC_write_wakeup_frame_register
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7173   .text.synopGMAC_mmc_counters_stop:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7178   .text.synopGMAC_mmc_counters_stop:00000000 synopGMAC_mmc_counters_stop
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7213   .text.synopGMAC_mmc_counters_resume:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7218   .text.synopGMAC_mmc_counters_resume:00000000 synopGMAC_mmc_counters_resume
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7253   .text.synopGMAC_mmc_counters_set_selfclear:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7258   .text.synopGMAC_mmc_counters_set_selfclear:00000000 synopGMAC_mmc_counters_set_selfclear
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7293   .text.synopGMAC_mmc_counters_reset_selfclear:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7298   .text.synopGMAC_mmc_counters_reset_selfclear:00000000 synopGMAC_mmc_counters_reset_selfclear
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7333   .text.synopGMAC_mmc_counters_disable_rollover:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7338   .text.synopGMAC_mmc_counters_disable_rollover:00000000 synopGMAC_mmc_counters_disable_rollover
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7373   .text.synopGMAC_mmc_counters_enable_rollover:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7378   .text.synopGMAC_mmc_counters_enable_rollover:00000000 synopGMAC_mmc_counters_enable_rollover
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7413   .text.synopGMAC_read_mmc_counter:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7418   .text.synopGMAC_read_mmc_counter:00000000 synopGMAC_read_mmc_counter
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7453   .text.synopGMAC_read_mmc_rx_int_status:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7458   .text.synopGMAC_read_mmc_rx_int_status:00000000 synopGMAC_read_mmc_rx_int_status
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7492   .text.synopGMAC_read_mmc_tx_int_status:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7497   .text.synopGMAC_read_mmc_tx_int_status:00000000 synopGMAC_read_mmc_tx_int_status
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7531   .text.synopGMAC_disable_mmc_tx_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7536   .text.synopGMAC_disable_mmc_tx_interrupt:00000000 synopGMAC_disable_mmc_tx_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7572   .text.synopGMAC_enable_mmc_tx_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7577   .text.synopGMAC_enable_mmc_tx_interrupt:00000000 synopGMAC_enable_mmc_tx_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7611   .text.synopGMAC_disable_mmc_rx_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7616   .text.synopGMAC_disable_mmc_rx_interrupt:00000000 synopGMAC_disable_mmc_rx_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7652   .text.synopGMAC_enable_mmc_rx_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7657   .text.synopGMAC_enable_mmc_rx_interrupt:00000000 synopGMAC_enable_mmc_rx_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7693   .text.synopGMAC_disable_mmc_ipc_rx_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7698   .text.synopGMAC_disable_mmc_ipc_rx_interrupt:00000000 synopGMAC_disable_mmc_ipc_rx_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7734   .text.synopGMAC_enable_mmc_ipc_rx_interrupt:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7739   .text.synopGMAC_enable_mmc_ipc_rx_interrupt:00000000 synopGMAC_enable_mmc_ipc_rx_interrupt
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7775   .text.synopGMAC_enable_rx_chksum_offload:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7780   .text.synopGMAC_enable_rx_chksum_offload:00000000 synopGMAC_enable_rx_chksum_offload
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7815   .text.synopGMAC_disable_rx_Ipchecksum_offload:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7820   .text.synopGMAC_disable_rx_Ipchecksum_offload:00000000 synopGMAC_disable_rx_Ipchecksum_offload
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7853   .text.synopGMAC_rx_tcpip_chksum_drop_enable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7858   .text.synopGMAC_rx_tcpip_chksum_drop_enable:00000000 synopGMAC_rx_tcpip_chksum_drop_enable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7893   .text.synopGMAC_rx_tcpip_chksum_drop_disable:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7898   .text.synopGMAC_rx_tcpip_chksum_drop_disable:00000000 synopGMAC_rx_tcpip_chksum_drop_disable
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7933   .text.synopGMAC_is_ext_status:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7938   .text.synopGMAC_is_ext_status:00000000 synopGMAC_is_ext_status
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7975   .text.synopGMAC_ES_is_IP_header_error:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:7980   .text.synopGMAC_ES_is_IP_header_error:00000000 synopGMAC_ES_is_IP_header_error
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8017   .text.synopGMAC_ES_is_rx_checksum_bypassed:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8022   .text.synopGMAC_ES_is_rx_checksum_bypassed:00000000 synopGMAC_ES_is_rx_checksum_bypassed
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8059   .text.synopGMAC_ES_is_IP_payload_error:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8064   .text.synopGMAC_ES_is_IP_payload_error:00000000 synopGMAC_ES_is_IP_payload_error
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8101   .text.synopGMAC_is_rx_checksum_error:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8106   .text.synopGMAC_is_rx_checksum_error:00000000 synopGMAC_is_rx_checksum_error
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8264   .text.synopGMAC_is_tx_ipv4header_checksum_error:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8269   .text.synopGMAC_is_tx_ipv4header_checksum_error:00000000 synopGMAC_is_tx_ipv4header_checksum_error
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8306   .text.synopGMAC_is_tx_payload_checksum_error:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8311   .text.synopGMAC_is_tx_payload_checksum_error:00000000 synopGMAC_is_tx_payload_checksum_error
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8348   .text.synopGMAC_tx_checksum_offload_bypass:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8353   .text.synopGMAC_tx_checksum_offload_bypass:00000000 synopGMAC_tx_checksum_offload_bypass
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8387   .text.synopGMAC_tx_checksum_offload_ipv4hdr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8392   .text.synopGMAC_tx_checksum_offload_ipv4hdr:00000000 synopGMAC_tx_checksum_offload_ipv4hdr
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8427   .text.synopGMAC_tx_checksum_offload_tcponly:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8432   .text.synopGMAC_tx_checksum_offload_tcponly:00000000 synopGMAC_tx_checksum_offload_tcponly
C:\Users\Mihai\AppData\Local\Temp\ccnZdptJ.s:8467   .text.synopGMAC_tx_checksum_offload_tcp_pseudo:00000000 $t
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1791a5ae2e936ca1033c1c44be394cc7
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.55.0006b5fda1d606516f2dcaf4aca92b11
                           .group:00000000 wm4.MULTIPLEXER.h.43.4aa654be3ec80895f631b5281bbb9105
                           .group:00000000 wm4.CCU8PWMLIB.h.70.a5d6a5267902b8b4aea2a0224518259a
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.SYSTM001.h.63.668098b2213d40a5bd0db5fbe813cf05
                           .group:00000000 wm4.ETH002_Conf.h.56.5bd2b085b66f43d51abd69396be7f35f
                           .group:00000000 wm4.EthernetPHY.h.54.7af1709186b21e62a5f1d4049da3988b
                           .group:00000000 wm4.ETH001_Conf.h.71.1e151af1ba54dd023e1f942bdf922819
                           .group:00000000 wm4.synopGMAC_plat.h.78.7a90e072b497857344aea4ba1e994097
                           .group:00000000 wm4.synopGMAC_stack_interface.h.73.6be6aaee0ac6637432f4d0589044479b
                           .group:00000000 wm4.SynopGMAC_Dev.h.72.7c89c07cf666d37f5c9b615720d5e111
                           .group:00000000 wm4.synopGMAC_network_interface.h.73.4dd08316a11bc43c8c4a9da15277fb0f
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.ETH004_Conf.h.56.564c3f309c32b3c742fc91049cf66940
                           .group:00000000 wm4.lwipopts.h.73.a7a63bda1e8216abd1d90275eaaa0027
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.b213c7fd77614ebc3691cef18ad2ff22
                           .group:00000000 wm4.cc.h.66.ec134211c658dcc89de4610e4e7bab46
                           .group:00000000 wm4.arch.h.47.5153c52bfb94ee3b37299920afab6afd
                           .group:00000000 wm4.debug.h.43.557ecd6c90cc70b375bb8a29118be47b
                           .group:00000000 wm4.opt.h.94.d36882acafebb8726bce646fc8b2397b
                           .group:00000000 wm4.err.h.52.37c5d17538f8e8347a9c84196701e92d
                           .group:00000000 wm4.pbuf.h.43.e9a1ad12b97478787a109e22d5306820
                           .group:00000000 wm4.inet.h.46.b516065779826845d16d49f513869a2b
                           .group:00000000 wm4.ip_addr.h.79.9a0ce887ca8c88c22ad7686bcb5105df
                           .group:00000000 wm4.sys.h.65.4a0cd87b9e0d8bb4cd6b30e939b2ca7e
                           .group:00000000 wm4.mem.h.96.20770766e6c9e6c42af6bfa95ef5c63f
                           .group:00000000 wm4.def.h.33.049f911dab26023a266ed46ced0ce4bc
                           .group:00000000 wm4.netif.h.53.c13431a64f0e73a26710e71455725e84
                           .group:00000000 wm4.ip.h.48.ad46847692d4d729760949b27e48a442
                           .group:00000000 wm4.icmp.h.44.450dbf91f594cc26ad19d086cdc83713
                           .group:00000000 wm4.tcp.h.55.5c30b9432fa60afaa85cbdd225b0c683
                           .group:00000000 wm4.udp.h.48.1a8dde095cd0a13580afaba1443e5a3f
                           .group:00000000 wm4.SDMMC003_Conf.h.50.e707c07613fb4e6f2eaec982a892429d
                           .group:00000000 wm4.SDMMC003.h.85.b66055f6032a052f5173e3d123f9c61e
                           .group:00000000 wm4.SDMMC001.h.50.3e2fedc7e5ace33db4121d5cc027e8a4
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.diskio.h.7.93a3c8131d08770c060b04d2180fd09a
                           .group:00000000 wm4.diskio.h.42.a863614abe78d56d18ed7cb292d0028d
                           .group:00000000 wm4.ffconf.h.57.4ab321a2116d35ff7f28236ac31fad7c
                           .group:00000000 wm4.ff.h.82.8f05a37d35a49dba2681a7f047fee4ee
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.LMM001.h.42.c21fe9cbedc336738c3dc89405cad216
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.100.69cb08672bc6ab3f052aa9d5bd6dc5ca
                           .group:00000000 wm4._default_fcntl.h.6.d036cf640d0f9a06bcff1be55acd66be
                           .group:00000000 wm4.stat.h.2.a761b02482a54847ff0d09dfcff24a5c
                           .group:00000000 wm4.fcntl.h.9.9336f33d7f5028f694c75e6e224e0cf7
                           .group:00000000 wm4.SLTHA001.h.97.d7e87c19a31e3244bdd5839e7cc42a61
                           .group:00000000 wm4.WEBSERVER001_Conf.h.54.cd6d29aaa96a848cbc5321bab5d6cd90
                           .group:00000000 wm4.IO004.h.51.dbf9dd216c57d6a7f14a22b2cb7e5626
                           .group:00000000 wm4.MOTORLIBS.h.59.b2e97de0df555dedfa51e24447b57ab8
                           .group:00000000 wm4.uc_id.h.35.a6c4837fad81477ba31967683332b8cc
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.c5c972f6f634bc5116c171852aaab668
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.4809ded45954a78aa476d1e9f44d110e
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d

UNDEFINED SYMBOLS
synopGMACReadReg
synopGMACWriteReg
synopGMACSetBits
synopGMACClearBits
synopGMACCheckBits
memset
