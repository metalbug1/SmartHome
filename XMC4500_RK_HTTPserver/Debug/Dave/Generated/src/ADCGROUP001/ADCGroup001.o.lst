   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"ADCGroup001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADCGROUP001_Init,"ax",%progbits
  20              		.align	2
  21              		.global	ADCGROUP001_Init
  22              		.thumb
  23              		.thumb_func
  25              	ADCGROUP001_Init:
  26              	.LFB112:
  27              		.file 1 "../Dave/Generated/src/ADCGROUP001/ADCGroup001.c"
   1:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
   2:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  DAVE App Name : ADCGROUP001       App Version: 1.0.4               
   3:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
   6:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
   7:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
   8:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*CODE_BLOCK_BEGIN[ADCGROUP001.c]*/
   9:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  10:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  11:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  Copyright (c) 2011, Infineon Technologies AG                                 **
  12:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  All rights reserved.                                                         **
  13:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  14:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  Redistribution and use in source and binary forms, with or without           **
  15:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  modification,are permitted provided that the following conditions are met:   **
  16:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  17:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  18:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  this list of conditions and the following disclaimer.                        **
  19:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  20:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  this list of conditions and the following disclaimer in the documentation    **
  21:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  and/or other materials provided with the distribution.                       **
  22:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  23:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  may be used to endorse or promote products derived from this software without**
  24:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  specific prior written permission.                                           **
  25:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  26:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  27:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  28:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  29:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  30:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  31:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  32:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  33:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  34:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  35:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  36:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  37:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  38:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  To improve the quality of the software, users are encouraged to share        **
  39:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  40:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  dave@infineon.com).                                                          **
  41:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                               **
  42:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ********************************************************************************
  43:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  44:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  45:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** PLATFORM : Infineon XMC4000 Series                                         **
  46:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  47:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** COMPILER : Compiler Independent                                            **
  48:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  49:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** AUTHOR   : DAVE App Developer                                              **
  50:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  51:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** MAY BE CHANGED BY USER [yes/no]: Yes                                       **
  52:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  53:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** MODIFICATION DATE : July 31, 2012                                          **
  54:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                            **
  55:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
  56:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  57:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /******************************************************************************
  58:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Author(s) Identity                                   **
  59:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************
  60:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                                                                           **
  61:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** Initials     Name                                                         **
  62:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** CM           DAVE App Developer                                           **
  63:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** ** --------------------------------------------------------------------------**
  64:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  65:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
  66:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  67:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  68:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
  69:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @file ADCGROUP001.c
  70:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  71:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @brief This file contains ADCGROUP001 App API definitions
  72:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  73:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
  74:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  75:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  76:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ** INCLUDE FILES                                                             **
  77:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  ******************************************************************************/
  78:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** #include <DAVE3.h>
  79:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  80:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
  81:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @cond INTERNAL_DOCS
  82:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
  83:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  84:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  85:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Type Definitions                              **
  86:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
  87:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
  88:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
  89:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                 Private Function Declarations:
  90:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
  91:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /**
  92:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @brief This function initializes the app.
  93:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  94:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @param [in] HandlePtr pointer to the Instance variable<BR>
  95:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  96:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * @return  NOne <BR>
  97:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  *
  98:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * <b>Reentrancy:  Yes</b><BR>
  99:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * <b>Sync/Async:  Synchronous</b><BR>
 100:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
 101:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 102:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_lInit(const ADCGROUP001_HandleType *HandlePtr );
 103:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 104:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 105:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Global Constant Definitions                           **
 106:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 107:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 108:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 109:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Global Variable Definitions                           **
 110:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 111:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 112:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 113:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Constant Definitions                          **
 114:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 115:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 116:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 117:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                 Function like macro definitions                            **
 118:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 119:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 120:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 121:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Private Function Definitions                          **
 122:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 123:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 124:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*******************************************************************************
 125:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** **                      Public Function Definitions                           **
 126:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** *******************************************************************************/
 127:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 128:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 129:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 130:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /** This function initializes the app */
 131:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_Init(void)
 132:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
  28              		.loc 1 132 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 133:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /*Initialize the global app */
 134:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   ADCGLOB001_Init();    
  40              		.loc 1 134 0
  41 0004 FFF7FEFF 		bl	ADCGLOB001_Init
 135:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   ADCGROUP001_lInit(&ADCGROUP001_Handle0);   
  42              		.loc 1 135 0
  43 0008 40F20000 		movw	r0, #:lower16:ADCGROUP001_Handle0
  44 000c C0F20000 		movt	r0, #:upper16:ADCGROUP001_Handle0
  45 0010 FFF7FEFF 		bl	ADCGROUP001_lInit
 136:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
  46              		.loc 1 136 0
  47 0014 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE112:
  51 0016 00BF     		.section	.text.ADCGROUP001_lInit,"ax",%progbits
  52              		.align	2
  53              		.global	ADCGROUP001_lInit
  54              		.thumb
  55              		.thumb_func
  57              	ADCGROUP001_lInit:
  58              	.LFB113:
 137:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 138:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* 
 139:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * This Function initializes the adcgroup App. Local function is used to 
 140:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  * initialize all the instances of the app.
 141:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  */
 142:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** void ADCGROUP001_lInit(const ADCGROUP001_HandleType *HandlePtr )
 143:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
  59              		.loc 1 143 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 16
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 80B5     		push	{r7, lr}
  64              	.LCFI2:
  65              		.cfi_def_cfa_offset 8
  66              		.cfi_offset 7, -8
  67              		.cfi_offset 14, -4
  68 0002 84B0     		sub	sp, sp, #16
  69              	.LCFI3:
  70              		.cfi_def_cfa_offset 24
  71 0004 00AF     		add	r7, sp, #0
  72              	.LCFI4:
  73              		.cfi_def_cfa_register 7
  74 0006 7860     		str	r0, [r7, #4]
 144:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 145:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;     
 146:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /* Pointer to the VADC Kernel Structure */   
 147:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr; 
 148:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 149:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
  75              		.loc 1 149 0
  76 0008 7B68     		ldr	r3, [r7, #4]
  77 000a 1B69     		ldr	r3, [r3, #16]
  78 000c FB60     		str	r3, [r7, #12]
 150:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
  79              		.loc 1 150 0
  80 000e 7B68     		ldr	r3, [r7, #4]
  81 0010 5B69     		ldr	r3, [r3, #20]
  82 0012 BB60     		str	r3, [r7, #8]
 151:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 152:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 153:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 154:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_UNINITIALIZED))
  83              		.loc 1 154 0
  84 0014 7B68     		ldr	r3, [r7, #4]
  85 0016 DB68     		ldr	r3, [r3, #12]
  86 0018 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  87 001a 002B     		cmp	r3, #0
  88 001c 40F0B980 		bne	.L2
 155:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 156:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     
 157:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Post calibration enable\disable */
 158:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGlobalPtr->GLOBCFG, VADC_GLOBCFG_DPCAL0_Msk, 
  89              		.loc 1 158 0
  90 0020 7B68     		ldr	r3, [r7, #4]
  91 0022 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
  92 0024 1A46     		mov	r2, r3
  93 0026 7B68     		ldr	r3, [r7, #4]
  94 0028 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  95 002a 03F11003 		add	r3, r3, #16
  96 002e 02FA03F3 		lsl	r3, r2, r3
  97 0032 03F48032 		and	r2, r3, #65536
  98 0036 FB68     		ldr	r3, [r7, #12]
  99 0038 D3F88030 		ldr	r3, [r3, #128]
 100 003c 23F48033 		bic	r3, r3, #65536
 101 0040 1A43     		orrs	r2, r2, r3
 102 0042 FB68     		ldr	r3, [r7, #12]
 103 0044 C3F88020 		str	r2, [r3, #128]
 159:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + HandlePtr->kGroupNo),
 160:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****             HandlePtr->kPostCalibration);
 161:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 162:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*  Converter is permanently on */
 163:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->ARBCFG, VADC_G_ARBCFG_ANONC_Msk, 
 104              		.loc 1 163 0
 105 0048 7B68     		ldr	r3, [r7, #4]
 106 004a DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 107 004c 03F00302 		and	r2, r3, #3
 108 0050 BB68     		ldr	r3, [r7, #8]
 109 0052 D3F88030 		ldr	r3, [r3, #128]
 110 0056 23F00303 		bic	r3, r3, #3
 111 005a 1A43     		orrs	r2, r2, r3
 112 005c BB68     		ldr	r3, [r7, #8]
 113 005e C3F88020 		str	r2, [r3, #128]
 164:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****            VADC_G_ARBCFG_ANONC_Pos, (uint32_t)HandlePtr->kAnalogConverterCtrl);
 165:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 166:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Arbitration mode */
 167:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->ARBCFG, VADC_G_ARBCFG_ARBM_Msk, VADC_G_ARBCFG_ARBM_Pos,
 114              		.loc 1 167 0
 115 0062 7B68     		ldr	r3, [r7, #4]
 116 0064 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 117 0066 4FEAC313 		lsl	r3, r3, #7
 118 006a DAB2     		uxtb	r2, r3
 119 006c BB68     		ldr	r3, [r7, #8]
 120 006e D3F88030 		ldr	r3, [r3, #128]
 121 0072 23F08003 		bic	r3, r3, #128
 122 0076 1A43     		orrs	r2, r2, r3
 123 0078 BB68     		ldr	r3, [r7, #8]
 124 007a C3F88020 		str	r2, [r3, #128]
 168:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                          (uint32_t)HandlePtr->kArbitrationMode);
 169:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 170:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Group specific boundary 0 */
 171:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY0_Msk,
 125              		.loc 1 171 0
 126 007e 7B68     		ldr	r3, [r7, #4]
 127 0080 9B88     		ldrh	r3, [r3, #4]
 128 0082 4FEA0352 		lsl	r2, r3, #20
 129 0086 4FEA1252 		lsr	r2, r2, #20
 130 008a BB68     		ldr	r3, [r7, #8]
 131 008c D3F8B830 		ldr	r3, [r3, #184]
 132 0090 23F47F63 		bic	r3, r3, #4080
 133 0094 23F00F03 		bic	r3, r3, #15
 134 0098 1A43     		orrs	r2, r2, r3
 135 009a BB68     		ldr	r3, [r7, #8]
 136 009c C3F8B820 		str	r2, [r3, #184]
 172:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                VADC_G_BOUND_BOUNDARY0_Pos, (uint32_t)HandlePtr->kGrpBoundary0);
 173:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     
 174:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the Group specific boundary 1 */
 175:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY1_Msk,
 137              		.loc 1 175 0
 138 00a0 7B68     		ldr	r3, [r7, #4]
 139 00a2 DB88     		ldrh	r3, [r3, #6]
 140 00a4 4FEA0342 		lsl	r2, r3, #16
 141 00a8 4FF00003 		mov	r3, #0
 142 00ac C0F6FF73 		movt	r3, 4095
 143 00b0 1340     		ands	r3, r3, r2
 144 00b2 BA68     		ldr	r2, [r7, #8]
 145 00b4 D2F8B820 		ldr	r2, [r2, #184]
 146 00b8 22F07F62 		bic	r2, r2, #267386880
 147 00bc 22F47022 		bic	r2, r2, #983040
 148 00c0 1A43     		orrs	r2, r2, r3
 149 00c2 BB68     		ldr	r3, [r7, #8]
 150 00c4 C3F8B820 		str	r2, [r3, #184]
 176:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                VADC_G_BOUND_BOUNDARY1_Pos, (uint32_t)HandlePtr->kGrpBoundary1);
 177:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 
 178:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 179:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Enable write control for EMUX configuration.
 180:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set the EMUX coding scheme, EMUX mode, EMUX start select.
 181:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 182:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->EMUXCTR |= (uint32_t)((((uint32_t)1 << VADC_G_EMUXCTR_EMXWC_Pos) & VADC_G_EMUXCTR
 151              		.loc 1 182 0
 152 00c8 BB68     		ldr	r3, [r7, #8]
 153 00ca D3F8F021 		ldr	r2, [r3, #496]
 183:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         (((uint32_t)HandlePtr->kEMUXCodeScheme \
 154              		.loc 1 183 0
 155 00ce 7B68     		ldr	r3, [r7, #4]
 156 00d0 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 184:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXC
 157              		.loc 1 184 0
 158 00d2 4FEA0373 		lsl	r3, r3, #28
 159 00d6 03F08051 		and	r1, r3, #268435456
 185:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         (((uint32_t)HandlePtr->kEMUXStartSelect  \
 160              		.loc 1 185 0
 161 00da 7B68     		ldr	r3, [r7, #4]
 162 00dc 5B7A     		ldrb	r3, [r3, #9]	@ zero_extendqisi2
 186:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                               << VADC_G_EMUXCTR_EMUXSET_Pos) & VADC_G_EMUXCTR_EMUXS
 163              		.loc 1 186 0
 164 00de 03F00703 		and	r3, r3, #7
 184:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXC
 165              		.loc 1 184 0
 166 00e2 1943     		orrs	r1, r1, r3
 187:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         (((uint32_t)HandlePtr->kEMUXMode \
 167              		.loc 1 187 0
 168 00e4 7B68     		ldr	r3, [r7, #4]
 169 00e6 9B7A     		ldrb	r3, [r3, #10]	@ zero_extendqisi2
 188:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                               << VADC_G_EMUXCTR_EMUXMODE_Pos) & VADC_G_EMUXCTR_EMUX
 170              		.loc 1 188 0
 171 00e8 4FEA8363 		lsl	r3, r3, #26
 172 00ec 03F04063 		and	r3, r3, #201326592
 182:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->EMUXCTR |= (uint32_t)((((uint32_t)1 << VADC_G_EMUXCTR_EMXWC_Pos) & VADC_G_EMUXCTR
 173              		.loc 1 182 0
 174 00f0 0B43     		orrs	r3, r3, r1
 175 00f2 1343     		orrs	r3, r3, r2
 176 00f4 43F00042 		orr	r2, r3, #-2147483648
 177 00f8 BB68     		ldr	r3, [r7, #8]
 178 00fa C3F8F021 		str	r2, [r3, #496]
 189:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 190:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 191:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set conversion mode, EMUX conversion mode, sample time control,
 192:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set EMUX sample time control for class 0. 
 193:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 194:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass0 \
 179              		.loc 1 194 0
 180 00fe BB68     		ldr	r3, [r7, #8]
 181 0100 D3F8A020 		ldr	r2, [r3, #160]
 182 0104 7B68     		ldr	r3, [r7, #4]
 183 0106 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 195:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 184              		.loc 1 195 0
 185 0108 4FEA0323 		lsl	r3, r3, #8
 186 010c 03F4E061 		and	r1, r3, #1792
 196:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXConversionModeClass0 \
 187              		.loc 1 196 0
 188 0110 7B68     		ldr	r3, [r7, #4]
 189 0112 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 197:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 190              		.loc 1 197 0
 191 0114 4FEA0363 		lsl	r3, r3, #24
 192 0118 03F0E063 		and	r3, r3, #117440512
 195:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 193              		.loc 1 195 0
 194 011c 1943     		orrs	r1, r1, r3
 198:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kSampleTimeControlClass0 \
 195              		.loc 1 198 0
 196 011e 7B68     		ldr	r3, [r7, #4]
 197 0120 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 199:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCS_Pos) & VADC_G_ICLASS_STCS_Msk
 198              		.loc 1 199 0
 199 0122 03F01F03 		and	r3, r3, #31
 197:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 200              		.loc 1 197 0
 201 0126 1943     		orrs	r1, r1, r3
 200:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXSampleTimeControlClass0 \
 202              		.loc 1 200 0
 203 0128 7B68     		ldr	r3, [r7, #4]
 204 012a 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 201:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCE_Pos) & VADC_G_ICLASS_STCE_Msk
 205              		.loc 1 201 0
 206 012c 4FEA0343 		lsl	r3, r3, #16
 207 0130 03F4F813 		and	r3, r3, #2031616
 194:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass0 \
 208              		.loc 1 194 0
 209 0134 0B43     		orrs	r3, r3, r1
 210 0136 1A43     		orrs	r2, r2, r3
 211 0138 BB68     		ldr	r3, [r7, #8]
 212 013a C3F8A020 		str	r2, [r3, #160]
 202:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 
 203:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /*
 204:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * Set conversion mode, EMUX conversion mode, sample time control,  
 205:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      * EMUX sample time control for class 1. 
 206:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      */
 207:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass1 \
 213              		.loc 1 207 0
 214 013e BB68     		ldr	r3, [r7, #8]
 215 0140 D3F8A420 		ldr	r2, [r3, #164]
 216 0144 7B68     		ldr	r3, [r7, #4]
 217 0146 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 208:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 218              		.loc 1 208 0
 219 0148 4FEA0323 		lsl	r3, r3, #8
 220 014c 03F4E061 		and	r1, r3, #1792
 209:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXConversionModeClass1 \
 221              		.loc 1 209 0
 222 0150 7B68     		ldr	r3, [r7, #4]
 223 0152 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 210:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 224              		.loc 1 210 0
 225 0154 4FEA0363 		lsl	r3, r3, #24
 226 0158 03F0E063 		and	r3, r3, #117440512
 208:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CMS_Pos) & VADC_G_ICLASS_CMS_Msk) 
 227              		.loc 1 208 0
 228 015c 1943     		orrs	r1, r1, r3
 211:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kSampleTimeControlClass1 \
 229              		.loc 1 211 0
 230 015e 7B68     		ldr	r3, [r7, #4]
 231 0160 DB7E     		ldrb	r3, [r3, #27]	@ zero_extendqisi2
 212:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_STCS_Pos) & VADC_G_ICLASS_STCS_Msk
 232              		.loc 1 212 0
 233 0162 03F01F03 		and	r3, r3, #31
 210:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                 << VADC_G_ICLASS_CME_Pos) & VADC_G_ICLASS_CME_Msk) 
 234              		.loc 1 210 0
 235 0166 1943     		orrs	r1, r1, r3
 213:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           (((uint32_t)HandlePtr->kEMUXSampleTimeControlClass1 \
 236              		.loc 1 213 0
 237 0168 7B68     		ldr	r3, [r7, #4]
 238 016a DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 214:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                     << VADC_G_ICLASS_STCE_Pos) & VADC_G_ICLASS_STCE
 239              		.loc 1 214 0
 240 016c 4FEA0343 		lsl	r3, r3, #16
 241 0170 03F4F813 		and	r3, r3, #2031616
 207:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] |= (uint32_t)((((uint32_t)HandlePtr->kConversionModeClass1 \
 242              		.loc 1 207 0
 243 0174 0B43     		orrs	r3, r3, r1
 244 0176 1A43     		orrs	r2, r2, r3
 245 0178 BB68     		ldr	r3, [r7, #8]
 246 017a C3F8A420 		str	r2, [r3, #164]
 215:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****      /* Enable/Disable Startup Calibration */     
 216:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(ADCGLOB001_StartUpCalibrationInit() == (uint32_t)DAVEApp_SUCCESS)
 247              		.loc 1 216 0
 248 017e FFF7FEFF 		bl	ADCGLOB001_StartUpCalibrationInit
 249 0182 0346     		mov	r3, r0
 250 0184 002B     		cmp	r3, #0
 251 0186 04D1     		bne	.L2
 217:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 218:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the App State to Initialized */
 219:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       HandlePtr->DynamicHandlePtr->State = ADCGROUP001_INITIALIZED;
 252              		.loc 1 219 0
 253 0188 7B68     		ldr	r3, [r7, #4]
 254 018a DB68     		ldr	r3, [r3, #12]
 255 018c 4FF00102 		mov	r2, #1
 256 0190 1A70     		strb	r2, [r3, #0]
 257              	.L2:
 220:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 221:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 222:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 223:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);  
 224:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 225:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 226:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 227:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 228:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 229:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 230:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 231:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 232:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 258              		.loc 1 232 0
 259 0192 07F11007 		add	r7, r7, #16
 260 0196 BD46     		mov	sp, r7
 261 0198 80BD     		pop	{r7, pc}
 262              		.cfi_endproc
 263              	.LFE113:
 265 019a 00BF     		.section	.text.ADCGROUP001_Deinit,"ax",%progbits
 266              		.align	2
 267              		.global	ADCGROUP001_Deinit
 268              		.thumb
 269              		.thumb_func
 271              	ADCGROUP001_Deinit:
 272              	.LFB114:
 233:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 234:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function resets the adcgroup001 app */
 235:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_Deinit(const ADCGROUP001_HandleType *HandlePtr )
 236:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 273              		.loc 1 236 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 24
 276              		@ frame_needed = 1, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278 0000 80B4     		push	{r7}
 279              	.LCFI5:
 280              		.cfi_def_cfa_offset 4
 281              		.cfi_offset 7, -4
 282 0002 87B0     		sub	sp, sp, #28
 283              	.LCFI6:
 284              		.cfi_def_cfa_offset 32
 285 0004 00AF     		add	r7, sp, #0
 286              	.LCFI7:
 287              		.cfi_def_cfa_register 7
 288 0006 7860     		str	r0, [r7, #4]
 237:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 289              		.loc 1 237 0
 290 0008 4FF00103 		mov	r3, #1
 291 000c 7B61     		str	r3, [r7, #20]
 238:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 239:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 240:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;            
 241:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /* Pointer to the VADC Kernel Structure */
 242:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_GLOBAL_TypeDef *VADCGlobalPtr;     
 243:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 244:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGlobalPtr = HandlePtr->VADCGlobalPtr;
 292              		.loc 1 244 0
 293 000e 7B68     		ldr	r3, [r7, #4]
 294 0010 1B69     		ldr	r3, [r3, #16]
 295 0012 3B61     		str	r3, [r7, #16]
 245:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 296              		.loc 1 245 0
 297 0014 7B68     		ldr	r3, [r7, #4]
 298 0016 5B69     		ldr	r3, [r3, #20]
 299 0018 FB60     		str	r3, [r7, #12]
 246:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 247:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 248:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 249:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 300              		.loc 1 249 0
 301 001a 7B68     		ldr	r3, [r7, #4]
 302 001c DB68     		ldr	r3, [r3, #12]
 303 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 304 0020 012B     		cmp	r3, #1
 305 0022 28D1     		bne	.L5
 250:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 251:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Post calibration enable\disable */
 252:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     CLR_BIT(VADCGlobalPtr->GLOBCFG, VADC_GLOBCFG_DPCAL0_Pos);
 306              		.loc 1 252 0
 307 0024 3B69     		ldr	r3, [r7, #16]
 308 0026 D3F88030 		ldr	r3, [r3, #128]
 309 002a 23F48032 		bic	r2, r3, #65536
 310 002e 3B69     		ldr	r3, [r7, #16]
 311 0030 C3F88020 		str	r2, [r3, #128]
 253:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 254:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Arbitration mode */
 255:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ARBCFG = (uint32_t)0x00;
 312              		.loc 1 255 0
 313 0034 FB68     		ldr	r3, [r7, #12]
 314 0036 4FF00002 		mov	r2, #0
 315 003a C3F88020 		str	r2, [r3, #128]
 256:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 257:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset the Group specific boundary */
 258:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->BOUND = (uint32_t)0x00;
 316              		.loc 1 258 0
 317 003e FB68     		ldr	r3, [r7, #12]
 318 0040 4FF00002 		mov	r2, #0
 319 0044 C3F8B820 		str	r2, [r3, #184]
 259:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 260:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* ReSet the EMUX control register */
 261:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->EMUXCTR = (uint32_t)(0X80000000);
 320              		.loc 1 261 0
 321 0048 FB68     		ldr	r3, [r7, #12]
 322 004a 4FF00042 		mov	r2, #-2147483648
 323 004e C3F8F021 		str	r2, [r3, #496]
 262:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 263:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset class 0 input register*/
 264:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[0] = (uint32_t)0x00;
 324              		.loc 1 264 0
 325 0052 FB68     		ldr	r3, [r7, #12]
 326 0054 4FF00002 		mov	r2, #0
 327 0058 C3F8A020 		str	r2, [r3, #160]
 265:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Reset class 1 input register*/
 266:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     VADCGroupPtr->ICLASS[1] = (uint32_t)0x00;
 328              		.loc 1 266 0
 329 005c FB68     		ldr	r3, [r7, #12]
 330 005e 4FF00002 		mov	r2, #0
 331 0062 C3F8A420 		str	r2, [r3, #164]
 267:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 268:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     /* Set the App State to Initialized */
 269:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     HandlePtr->DynamicHandlePtr->State = ADCGROUP001_UNINITIALIZED;
 332              		.loc 1 269 0
 333 0066 7B68     		ldr	r3, [r7, #4]
 334 0068 DB68     		ldr	r3, [r3, #12]
 335 006a 4FF00002 		mov	r2, #0
 336 006e 1A70     		strb	r2, [r3, #0]
 270:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 271:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     Status = (uint32_t)DAVEApp_SUCCESS;
 337              		.loc 1 271 0
 338 0070 4FF00003 		mov	r3, #0
 339 0074 7B61     		str	r3, [r7, #20]
 340              	.L5:
 272:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 273:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 274:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 275:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 276:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 277:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 278:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 279:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 341              		.loc 1 279 0
 342 0076 7B69     		ldr	r3, [r7, #20]
 280:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 343              		.loc 1 280 0
 344 0078 1846     		mov	r0, r3
 345 007a 07F11C07 		add	r7, r7, #28
 346 007e BD46     		mov	sp, r7
 347 0080 80BC     		pop	{r7}
 348 0082 7047     		bx	lr
 349              		.cfi_endproc
 350              	.LFE114:
 352              		.section	.text.ADCGROUP001_SetGroupBound0,"ax",%progbits
 353              		.align	2
 354              		.global	ADCGROUP001_SetGroupBound0
 355              		.thumb
 356              		.thumb_func
 358              	ADCGROUP001_SetGroupBound0:
 359              	.LFB115:
 281:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 282:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 283:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the group specific boundary 0 */
 284:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupBound0(const ADCGROUP001_HandleType *HandlePtr,
 285:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                          uint16_t BoundaryValue)
 286:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 360              		.loc 1 286 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 16
 363              		@ frame_needed = 1, uses_anonymous_args = 0
 364              		@ link register save eliminated.
 365 0000 80B4     		push	{r7}
 366              	.LCFI8:
 367              		.cfi_def_cfa_offset 4
 368              		.cfi_offset 7, -4
 369 0002 85B0     		sub	sp, sp, #20
 370              	.LCFI9:
 371              		.cfi_def_cfa_offset 24
 372 0004 00AF     		add	r7, sp, #0
 373              	.LCFI10:
 374              		.cfi_def_cfa_register 7
 375 0006 7860     		str	r0, [r7, #4]
 376 0008 0B46     		mov	r3, r1
 377 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 287:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 378              		.loc 1 287 0
 379 000c 4FF00103 		mov	r3, #1
 380 0010 FB60     		str	r3, [r7, #12]
 288:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 289:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 290:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 381              		.loc 1 290 0
 382 0012 7B68     		ldr	r3, [r7, #4]
 383 0014 5B69     		ldr	r3, [r3, #20]
 384 0016 BB60     		str	r3, [r7, #8]
 291:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 292:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 293:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 294:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED)
 385              		.loc 1 294 0
 386 0018 7B68     		ldr	r3, [r7, #4]
 387 001a DB68     		ldr	r3, [r3, #12]
 388 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 389 001e 012B     		cmp	r3, #1
 390 0020 1AD1     		bne	.L8
 295:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 296:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(BoundaryValue <= (uint16_t)ADCGROUP001_MAX_BOUNDARY_VALUE)
 391              		.loc 1 296 0
 392 0022 7B88     		ldrh	r3, [r7, #2]
 393 0024 B3F5805F 		cmp	r3, #4096
 394 0028 13D8     		bhi	.L9
 297:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 298:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the Group specific boundary 0 */
 299:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY0_Msk, 
 395              		.loc 1 299 0
 396 002a 7B88     		ldrh	r3, [r7, #2]
 397 002c 4FEA0352 		lsl	r2, r3, #20
 398 0030 4FEA1252 		lsr	r2, r2, #20
 399 0034 BB68     		ldr	r3, [r7, #8]
 400 0036 D3F8B830 		ldr	r3, [r3, #184]
 401 003a 23F47F63 		bic	r3, r3, #4080
 402 003e 23F00F03 		bic	r3, r3, #15
 403 0042 1A43     		orrs	r2, r2, r3
 404 0044 BB68     		ldr	r3, [r7, #8]
 405 0046 C3F8B820 		str	r2, [r3, #184]
 300:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_BOUND_BOUNDARY0_Pos, (uint32_t)BoundaryValue);  
 301:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 406              		.loc 1 301 0
 407 004a 4FF00003 		mov	r3, #0
 408 004e FB60     		str	r3, [r7, #12]
 409 0050 02E0     		b	.L8
 410              	.L9:
 302:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 303:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 304:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 305:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 411              		.loc 1 305 0
 412 0052 4FF00203 		mov	r3, #2
 413 0056 FB60     		str	r3, [r7, #12]
 414              	.L8:
 306:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 307:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 308:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 309:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 310:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 311:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }  
 312:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 313:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 314:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 315:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 415              		.loc 1 315 0
 416 0058 FB68     		ldr	r3, [r7, #12]
 316:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 417              		.loc 1 316 0
 418 005a 1846     		mov	r0, r3
 419 005c 07F11407 		add	r7, r7, #20
 420 0060 BD46     		mov	sp, r7
 421 0062 80BC     		pop	{r7}
 422 0064 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE115:
 426 0066 00BF     		.section	.text.ADCGROUP001_SetGroupBound1,"ax",%progbits
 427              		.align	2
 428              		.global	ADCGROUP001_SetGroupBound1
 429              		.thumb
 430              		.thumb_func
 432              	ADCGROUP001_SetGroupBound1:
 433              	.LFB116:
 317:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 318:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 319:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the group specific boundary 1 */
 320:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupBound1(const ADCGROUP001_HandleType *HandlePtr,
 321:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                          uint16_t BoundaryValue)
 322:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 434              		.loc 1 322 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 16
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439 0000 80B4     		push	{r7}
 440              	.LCFI11:
 441              		.cfi_def_cfa_offset 4
 442              		.cfi_offset 7, -4
 443 0002 85B0     		sub	sp, sp, #20
 444              	.LCFI12:
 445              		.cfi_def_cfa_offset 24
 446 0004 00AF     		add	r7, sp, #0
 447              	.LCFI13:
 448              		.cfi_def_cfa_register 7
 449 0006 7860     		str	r0, [r7, #4]
 450 0008 0B46     		mov	r3, r1
 451 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 323:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 452              		.loc 1 323 0
 453 000c 4FF00103 		mov	r3, #1
 454 0010 FB60     		str	r3, [r7, #12]
 324:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 325:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 326:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 455              		.loc 1 326 0
 456 0012 7B68     		ldr	r3, [r7, #4]
 457 0014 5B69     		ldr	r3, [r3, #20]
 458 0016 BB60     		str	r3, [r7, #8]
 327:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 328:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 329:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 330:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if(HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED)
 459              		.loc 1 330 0
 460 0018 7B68     		ldr	r3, [r7, #4]
 461 001a DB68     		ldr	r3, [r3, #12]
 462 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 463 001e 012B     		cmp	r3, #1
 464 0020 1DD1     		bne	.L12
 331:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 332:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(BoundaryValue <= (uint16_t)ADCGROUP001_MAX_BOUNDARY_VALUE)
 465              		.loc 1 332 0
 466 0022 7B88     		ldrh	r3, [r7, #2]
 467 0024 B3F5805F 		cmp	r3, #4096
 468 0028 16D8     		bhi	.L13
 333:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 334:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the Group specific boundary 0 */
 335:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->BOUND, VADC_G_BOUND_BOUNDARY1_Msk, 
 469              		.loc 1 335 0
 470 002a 7B88     		ldrh	r3, [r7, #2]
 471 002c 4FEA0342 		lsl	r2, r3, #16
 472 0030 4FF00003 		mov	r3, #0
 473 0034 C0F6FF73 		movt	r3, 4095
 474 0038 1340     		ands	r3, r3, r2
 475 003a BA68     		ldr	r2, [r7, #8]
 476 003c D2F8B820 		ldr	r2, [r2, #184]
 477 0040 22F07F62 		bic	r2, r2, #267386880
 478 0044 22F47022 		bic	r2, r2, #983040
 479 0048 1A43     		orrs	r2, r2, r3
 480 004a BB68     		ldr	r3, [r7, #8]
 481 004c C3F8B820 		str	r2, [r3, #184]
 336:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_BOUND_BOUNDARY1_Pos, (uint32_t)BoundaryValue);  
 337:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 482              		.loc 1 337 0
 483 0050 4FF00003 		mov	r3, #0
 484 0054 FB60     		str	r3, [r7, #12]
 485 0056 02E0     		b	.L12
 486              	.L13:
 338:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 339:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 340:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 341:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 342:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 487              		.loc 1 342 0
 488 0058 4FF00203 		mov	r3, #2
 489 005c FB60     		str	r3, [r7, #12]
 490              	.L12:
 343:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 344:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 345:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else
 346:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 347:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 348:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }  
 349:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 350:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 351:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 352:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 491              		.loc 1 352 0
 492 005e FB68     		ldr	r3, [r7, #12]
 353:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 493              		.loc 1 353 0
 494 0060 1846     		mov	r0, r3
 495 0062 07F11407 		add	r7, r7, #20
 496 0066 BD46     		mov	sp, r7
 497 0068 80BC     		pop	{r7}
 498 006a 7047     		bx	lr
 499              		.cfi_endproc
 500              	.LFE116:
 502              		.section	.text.ADCGROUP001_ActiveGroupServiceRequestNode,"ax",%progbits
 503              		.align	2
 504              		.global	ADCGROUP001_ActiveGroupServiceRequestNode
 505              		.thumb
 506              		.thumb_func
 508              	ADCGROUP001_ActiveGroupServiceRequestNode:
 509              	.LFB117:
 354:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 355:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 356:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function activates group specific service request node */
 357:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_ActiveGroupServiceRequestNode(
 358:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 359:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 510              		.loc 1 359 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 16
 513              		@ frame_needed = 1, uses_anonymous_args = 0
 514              		@ link register save eliminated.
 515 0000 80B4     		push	{r7}
 516              	.LCFI14:
 517              		.cfi_def_cfa_offset 4
 518              		.cfi_offset 7, -4
 519 0002 85B0     		sub	sp, sp, #20
 520              	.LCFI15:
 521              		.cfi_def_cfa_offset 24
 522 0004 00AF     		add	r7, sp, #0
 523              	.LCFI16:
 524              		.cfi_def_cfa_register 7
 525 0006 7860     		str	r0, [r7, #4]
 526 0008 0B46     		mov	r3, r1
 527 000a FB70     		strb	r3, [r7, #3]
 360:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 528              		.loc 1 360 0
 529 000c 4FF00103 		mov	r3, #1
 530 0010 FB60     		str	r3, [r7, #12]
 361:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 362:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 363:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 531              		.loc 1 363 0
 532 0012 7B68     		ldr	r3, [r7, #4]
 533 0014 5B69     		ldr	r3, [r3, #20]
 534 0016 BB60     		str	r3, [r7, #8]
 364:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 365:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 366:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 367:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 535              		.loc 1 367 0
 536 0018 7B68     		ldr	r3, [r7, #4]
 537 001a DB68     		ldr	r3, [r3, #12]
 538 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 539 001e 012B     		cmp	r3, #1
 540 0020 23D1     		bne	.L16
 368:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 369:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 541              		.loc 1 369 0
 542 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 543 0024 032B     		cmp	r3, #3
 544 0026 1DD8     		bhi	.L17
 370:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 371:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Activate the Group specific service request node */
 372:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 545              		.loc 1 372 0
 546 0028 BB68     		ldr	r3, [r7, #8]
 547 002a D3F8C821 		ldr	r2, [r3, #456]
 548 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 549 0030 4FF00101 		mov	r1, #1
 550 0034 01FA03F3 		lsl	r3, r1, r3
 551 0038 6FEA0303 		mvn	r3, r3
 552 003c 1A40     		ands	r2, r2, r3
 553 003e BB68     		ldr	r3, [r7, #8]
 554 0040 C3F8C821 		str	r2, [r3, #456]
 373:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SET_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 555              		.loc 1 373 0
 556 0044 BB68     		ldr	r3, [r7, #8]
 557 0046 D3F8C821 		ldr	r2, [r3, #456]
 558 004a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 559 004c 4FF00101 		mov	r1, #1
 560 0050 01FA03F3 		lsl	r3, r1, r3
 561 0054 1A43     		orrs	r2, r2, r3
 562 0056 BB68     		ldr	r3, [r7, #8]
 563 0058 C3F8C821 		str	r2, [r3, #456]
 374:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 564              		.loc 1 374 0
 565 005c 4FF00003 		mov	r3, #0
 566 0060 FB60     		str	r3, [r7, #12]
 567 0062 02E0     		b	.L16
 568              	.L17:
 375:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 376:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
 377:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 378:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 569              		.loc 1 378 0
 570 0064 4FF00203 		mov	r3, #2
 571 0068 FB60     		str	r3, [r7, #12]
 572              	.L16:
 379:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 380:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 381:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 382:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 383:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****    ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 384:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 385:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 386:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 387:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 573              		.loc 1 387 0
 574 006a FB68     		ldr	r3, [r7, #12]
 388:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 575              		.loc 1 388 0
 576 006c 1846     		mov	r0, r3
 577 006e 07F11407 		add	r7, r7, #20
 578 0072 BD46     		mov	sp, r7
 579 0074 80BC     		pop	{r7}
 580 0076 7047     		bx	lr
 581              		.cfi_endproc
 582              	.LFE117:
 584              		.section	.text.ADCGROUP001_DeActiveGroupServiceRequestNode,"ax",%progbits
 585              		.align	2
 586              		.global	ADCGROUP001_DeActiveGroupServiceRequestNode
 587              		.thumb
 588              		.thumb_func
 590              	ADCGROUP001_DeActiveGroupServiceRequestNode:
 591              	.LFB118:
 389:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 390:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function deactivates group specific service request node */
 391:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_DeActiveGroupServiceRequestNode(
 392:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 393:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 592              		.loc 1 393 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 16
 595              		@ frame_needed = 1, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597 0000 80B4     		push	{r7}
 598              	.LCFI17:
 599              		.cfi_def_cfa_offset 4
 600              		.cfi_offset 7, -4
 601 0002 85B0     		sub	sp, sp, #20
 602              	.LCFI18:
 603              		.cfi_def_cfa_offset 24
 604 0004 00AF     		add	r7, sp, #0
 605              	.LCFI19:
 606              		.cfi_def_cfa_register 7
 607 0006 7860     		str	r0, [r7, #4]
 608 0008 0B46     		mov	r3, r1
 609 000a FB70     		strb	r3, [r7, #3]
 394:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 610              		.loc 1 394 0
 611 000c 4FF00103 		mov	r3, #1
 612 0010 FB60     		str	r3, [r7, #12]
 395:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 396:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 397:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 613              		.loc 1 397 0
 614 0012 7B68     		ldr	r3, [r7, #4]
 615 0014 5B69     		ldr	r3, [r3, #20]
 616 0016 BB60     		str	r3, [r7, #8]
 398:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 399:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 400:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 401:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 617              		.loc 1 401 0
 618 0018 7B68     		ldr	r3, [r7, #4]
 619 001a DB68     		ldr	r3, [r3, #12]
 620 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 621 001e 012B     		cmp	r3, #1
 622 0020 17D1     		bne	.L20
 402:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 403:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 623              		.loc 1 403 0
 624 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 625 0024 032B     		cmp	r3, #3
 626 0026 11D8     		bhi	.L21
 404:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 405:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Deactivate the Group specific service request node */
 406:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_AGSR0_Pos + (uint32_t)Node));
 627              		.loc 1 406 0
 628 0028 BB68     		ldr	r3, [r7, #8]
 629 002a D3F8C821 		ldr	r2, [r3, #456]
 630 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 631 0030 4FF00101 		mov	r1, #1
 632 0034 01FA03F3 		lsl	r3, r1, r3
 633 0038 6FEA0303 		mvn	r3, r3
 634 003c 1A40     		ands	r2, r2, r3
 635 003e BB68     		ldr	r3, [r7, #8]
 636 0040 C3F8C821 		str	r2, [r3, #456]
 407:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;    
 637              		.loc 1 407 0
 638 0044 4FF00003 		mov	r3, #0
 639 0048 FB60     		str	r3, [r7, #12]
 640 004a 02E0     		b	.L20
 641              	.L21:
 408:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 409:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
 410:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 411:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 642              		.loc 1 411 0
 643 004c 4FF00203 		mov	r3, #2
 644 0050 FB60     		str	r3, [r7, #12]
 645              	.L20:
 412:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 413:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 414:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 415:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 416:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL); 
 417:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 418:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 419:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 420:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 646              		.loc 1 420 0
 647 0052 FB68     		ldr	r3, [r7, #12]
 421:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 648              		.loc 1 421 0
 649 0054 1846     		mov	r0, r3
 650 0056 07F11407 		add	r7, r7, #20
 651 005a BD46     		mov	sp, r7
 652 005c 80BC     		pop	{r7}
 653 005e 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE118:
 657              		.section	.text.ADCGROUP001_ActiveSharedServiceRequestNode,"ax",%progbits
 658              		.align	2
 659              		.global	ADCGROUP001_ActiveSharedServiceRequestNode
 660              		.thumb
 661              		.thumb_func
 663              	ADCGROUP001_ActiveSharedServiceRequestNode:
 664              	.LFB119:
 422:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 423:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function activates the shared service request node. */
 424:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_ActiveSharedServiceRequestNode(
 425:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 426:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 665              		.loc 1 426 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 16
 668              		@ frame_needed = 1, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670 0000 80B4     		push	{r7}
 671              	.LCFI20:
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 7, -4
 674 0002 85B0     		sub	sp, sp, #20
 675              	.LCFI21:
 676              		.cfi_def_cfa_offset 24
 677 0004 00AF     		add	r7, sp, #0
 678              	.LCFI22:
 679              		.cfi_def_cfa_register 7
 680 0006 7860     		str	r0, [r7, #4]
 681 0008 0B46     		mov	r3, r1
 682 000a FB70     		strb	r3, [r7, #3]
 427:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 683              		.loc 1 427 0
 684 000c 4FF00103 		mov	r3, #1
 685 0010 FB60     		str	r3, [r7, #12]
 428:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 429:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 430:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 686              		.loc 1 430 0
 687 0012 7B68     		ldr	r3, [r7, #4]
 688 0014 5B69     		ldr	r3, [r3, #20]
 689 0016 BB60     		str	r3, [r7, #8]
 431:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 432:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 433:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 434:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 690              		.loc 1 434 0
 691 0018 7B68     		ldr	r3, [r7, #4]
 692 001a DB68     		ldr	r3, [r3, #12]
 693 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 694 001e 012B     		cmp	r3, #1
 695 0020 27D1     		bne	.L24
 435:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 436:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 696              		.loc 1 436 0
 697 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 698 0024 032B     		cmp	r3, #3
 699 0026 21D8     		bhi	.L25
 437:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 438:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Activates the shared service request node. */
 439:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));
 700              		.loc 1 439 0
 701 0028 BB68     		ldr	r3, [r7, #8]
 702 002a D3F8C821 		ldr	r2, [r3, #456]
 703 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 704 0030 03F10803 		add	r3, r3, #8
 705 0034 4FF00101 		mov	r1, #1
 706 0038 01FA03F3 		lsl	r3, r1, r3
 707 003c 6FEA0303 		mvn	r3, r3
 708 0040 1A40     		ands	r2, r2, r3
 709 0042 BB68     		ldr	r3, [r7, #8]
 710 0044 C3F8C821 		str	r2, [r3, #456]
 440:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SET_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));    
 711              		.loc 1 440 0
 712 0048 BB68     		ldr	r3, [r7, #8]
 713 004a D3F8C821 		ldr	r2, [r3, #456]
 714 004e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 715 0050 03F10803 		add	r3, r3, #8
 716 0054 4FF00101 		mov	r1, #1
 717 0058 01FA03F3 		lsl	r3, r1, r3
 718 005c 1A43     		orrs	r2, r2, r3
 719 005e BB68     		ldr	r3, [r7, #8]
 720 0060 C3F8C821 		str	r2, [r3, #456]
 441:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 442:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 721              		.loc 1 442 0
 722 0064 4FF00003 		mov	r3, #0
 723 0068 FB60     		str	r3, [r7, #12]
 724 006a 02E0     		b	.L24
 725              	.L25:
 443:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 444:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
 445:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 446:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 726              		.loc 1 446 0
 727 006c 4FF00203 		mov	r3, #2
 728 0070 FB60     		str	r3, [r7, #12]
 729              	.L24:
 447:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 448:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 449:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 450:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 451:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);    
 452:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 453:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 454:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 455:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 730              		.loc 1 455 0
 731 0072 FB68     		ldr	r3, [r7, #12]
 456:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 732              		.loc 1 456 0
 733 0074 1846     		mov	r0, r3
 734 0076 07F11407 		add	r7, r7, #20
 735 007a BD46     		mov	sp, r7
 736 007c 80BC     		pop	{r7}
 737 007e 7047     		bx	lr
 738              		.cfi_endproc
 739              	.LFE119:
 741              		.section	.text.ADCGROUP001_DeActiveSharedServiceRequestNode,"ax",%progbits
 742              		.align	2
 743              		.global	ADCGROUP001_DeActiveSharedServiceRequestNode
 744              		.thumb
 745              		.thumb_func
 747              	ADCGROUP001_DeActiveSharedServiceRequestNode:
 748              	.LFB120:
 457:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 458:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This deactivates the shared service request node.*/
 459:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_DeActiveSharedServiceRequestNode(
 460:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                           const ADCGROUP001_HandleType *HandlePtr, uint8_t Node)
 461:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 749              		.loc 1 461 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 16
 752              		@ frame_needed = 1, uses_anonymous_args = 0
 753              		@ link register save eliminated.
 754 0000 80B4     		push	{r7}
 755              	.LCFI23:
 756              		.cfi_def_cfa_offset 4
 757              		.cfi_offset 7, -4
 758 0002 85B0     		sub	sp, sp, #20
 759              	.LCFI24:
 760              		.cfi_def_cfa_offset 24
 761 0004 00AF     		add	r7, sp, #0
 762              	.LCFI25:
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
 765 0008 0B46     		mov	r3, r1
 766 000a FB70     		strb	r3, [r7, #3]
 462:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 767              		.loc 1 462 0
 768 000c 4FF00103 		mov	r3, #1
 769 0010 FB60     		str	r3, [r7, #12]
 463:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 464:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 465:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 770              		.loc 1 465 0
 771 0012 7B68     		ldr	r3, [r7, #4]
 772 0014 5B69     		ldr	r3, [r3, #20]
 773 0016 BB60     		str	r3, [r7, #8]
 466:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 467:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 468:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 469:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 774              		.loc 1 469 0
 775 0018 7B68     		ldr	r3, [r7, #4]
 776 001a DB68     		ldr	r3, [r3, #12]
 777 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 778 001e 012B     		cmp	r3, #1
 779 0020 19D1     		bne	.L28
 470:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 471:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( Node <= (uint8_t)(ADCGROUP001_MAX_SERVICE_REQUEST_NODE - 1))
 780              		.loc 1 471 0
 781 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 782 0024 032B     		cmp	r3, #3
 783 0026 13D8     		bhi	.L29
 472:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 473:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Deactivate the shared service request node.*/
 474:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CLR_BIT(VADCGroupPtr->SRACT, ((uint32_t)VADC_G_SRACT_ASSR0_Pos + (uint32_t)Node));           
 784              		.loc 1 474 0
 785 0028 BB68     		ldr	r3, [r7, #8]
 786 002a D3F8C821 		ldr	r2, [r3, #456]
 787 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 788 0030 03F10803 		add	r3, r3, #8
 789 0034 4FF00101 		mov	r1, #1
 790 0038 01FA03F3 		lsl	r3, r1, r3
 791 003c 6FEA0303 		mvn	r3, r3
 792 0040 1A40     		ands	r2, r2, r3
 793 0042 BB68     		ldr	r3, [r7, #8]
 794 0044 C3F8C821 		str	r2, [r3, #456]
 475:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 476:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 795              		.loc 1 476 0
 796 0048 4FF00003 		mov	r3, #0
 797 004c FB60     		str	r3, [r7, #12]
 798 004e 02E0     		b	.L28
 799              	.L29:
 477:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 478:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
 479:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 480:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 800              		.loc 1 480 0
 801 0050 4FF00203 		mov	r3, #2
 802 0054 FB60     		str	r3, [r7, #12]
 803              	.L28:
 481:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 482:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 483:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 484:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 485:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);    
 486:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 487:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 488:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 489:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 804              		.loc 1 489 0
 805 0056 FB68     		ldr	r3, [r7, #12]
 490:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 806              		.loc 1 490 0
 807 0058 1846     		mov	r0, r3
 808 005a 07F11407 		add	r7, r7, #20
 809 005e BD46     		mov	sp, r7
 810 0060 80BC     		pop	{r7}
 811 0062 7047     		bx	lr
 812              		.cfi_endproc
 813              	.LFE120:
 815              		.section	.text.ADCGROUP001_EMUXStartSelection,"ax",%progbits
 816              		.align	2
 817              		.global	ADCGROUP001_EMUXStartSelection
 818              		.thumb
 819              		.thumb_func
 821              	ADCGROUP001_EMUXStartSelection:
 822              	.LFB121:
 491:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 492:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 493:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This Function sets the value of EMUX start selection. */
 494:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_EMUXStartSelection(
 495:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           const ADCGROUP001_HandleType *HandlePtr, uint8_t StartSelectionValue)
 496:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 823              		.loc 1 496 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 16
 826              		@ frame_needed = 1, uses_anonymous_args = 0
 827              		@ link register save eliminated.
 828 0000 80B4     		push	{r7}
 829              	.LCFI26:
 830              		.cfi_def_cfa_offset 4
 831              		.cfi_offset 7, -4
 832 0002 85B0     		sub	sp, sp, #20
 833              	.LCFI27:
 834              		.cfi_def_cfa_offset 24
 835 0004 00AF     		add	r7, sp, #0
 836              	.LCFI28:
 837              		.cfi_def_cfa_register 7
 838 0006 7860     		str	r0, [r7, #4]
 839 0008 0B46     		mov	r3, r1
 840 000a FB70     		strb	r3, [r7, #3]
 497:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 841              		.loc 1 497 0
 842 000c 4FF00103 		mov	r3, #1
 843 0010 FB60     		str	r3, [r7, #12]
 498:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 499:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 500:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 844              		.loc 1 500 0
 845 0012 7B68     		ldr	r3, [r7, #4]
 846 0014 5B69     		ldr	r3, [r3, #20]
 847 0016 BB60     		str	r3, [r7, #8]
 501:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 502:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 503:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 504:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 848              		.loc 1 504 0
 849 0018 7B68     		ldr	r3, [r7, #4]
 850 001a DB68     		ldr	r3, [r3, #12]
 851 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 852 001e 012B     		cmp	r3, #1
 853 0020 15D1     		bne	.L32
 505:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 506:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( StartSelectionValue <= (uint8_t)ADCGROUP001_MAX_ADC_GROUP_CHANNEL)
 854              		.loc 1 506 0
 855 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 856 0024 082B     		cmp	r3, #8
 857 0026 0FD8     		bhi	.L33
 507:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 508:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX start selection */
 509:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->EMUXCTR, VADC_G_EMUXCTR_EMUXSET_Msk,
 858              		.loc 1 509 0
 859 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 860 002a 03F00702 		and	r2, r3, #7
 861 002e BB68     		ldr	r3, [r7, #8]
 862 0030 D3F8F031 		ldr	r3, [r3, #496]
 863 0034 23F00703 		bic	r3, r3, #7
 864 0038 1A43     		orrs	r2, r2, r3
 865 003a BB68     		ldr	r3, [r7, #8]
 866 003c C3F8F021 		str	r2, [r3, #496]
 510:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                      VADC_G_EMUXCTR_EMUXSET_Pos, (uint32_t)StartSelectionValue);
 511:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 867              		.loc 1 511 0
 868 0040 4FF00003 		mov	r3, #0
 869 0044 FB60     		str	r3, [r7, #12]
 870 0046 02E0     		b	.L32
 871              	.L33:
 512:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 513:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
 514:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 515:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 872              		.loc 1 515 0
 873 0048 4FF00203 		mov	r3, #2
 874 004c FB60     		str	r3, [r7, #12]
 875              	.L32:
 516:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 517:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 518:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 519:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 520:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 521:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 522:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 523:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 524:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 876              		.loc 1 524 0
 877 004e FB68     		ldr	r3, [r7, #12]
 525:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 878              		.loc 1 525 0
 879 0050 1846     		mov	r0, r3
 880 0052 07F11407 		add	r7, r7, #20
 881 0056 BD46     		mov	sp, r7
 882 0058 80BC     		pop	{r7}
 883 005a 7047     		bx	lr
 884              		.cfi_endproc
 885              	.LFE121:
 887              		.section	.text.ADCGROUP001_GetEMUXStartSelection,"ax",%progbits
 888              		.align	2
 889              		.global	ADCGROUP001_GetEMUXStartSelection
 890              		.thumb
 891              		.thumb_func
 893              	ADCGROUP001_GetEMUXStartSelection:
 894              	.LFB122:
 526:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 527:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function gets the value of EMUX start selection. */
 528:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_GetEMUXStartSelection(
 529:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****        const ADCGROUP001_HandleType *HandlePtr, uint8_t *StartSelectionValuePtr)
 530:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 895              		.loc 1 530 0
 896              		.cfi_startproc
 897              		@ args = 0, pretend = 0, frame = 16
 898              		@ frame_needed = 1, uses_anonymous_args = 0
 899              		@ link register save eliminated.
 900 0000 80B4     		push	{r7}
 901              	.LCFI29:
 902              		.cfi_def_cfa_offset 4
 903              		.cfi_offset 7, -4
 904 0002 85B0     		sub	sp, sp, #20
 905              	.LCFI30:
 906              		.cfi_def_cfa_offset 24
 907 0004 00AF     		add	r7, sp, #0
 908              	.LCFI31:
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 911 0008 3960     		str	r1, [r7, #0]
 531:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 912              		.loc 1 531 0
 913 000a 4FF00103 		mov	r3, #1
 914 000e FB60     		str	r3, [r7, #12]
 532:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 533:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 534:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 915              		.loc 1 534 0
 916 0010 7B68     		ldr	r3, [r7, #4]
 917 0012 5B69     		ldr	r3, [r3, #20]
 918 0014 BB60     		str	r3, [r7, #8]
 535:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 536:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 537:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 538:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 919              		.loc 1 538 0
 920 0016 7B68     		ldr	r3, [r7, #4]
 921 0018 DB68     		ldr	r3, [r3, #12]
 922 001a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 923 001c 012B     		cmp	r3, #1
 924 001e 12D1     		bne	.L36
 539:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 540:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(StartSelectionValuePtr != NULL)
 925              		.loc 1 540 0
 926 0020 3B68     		ldr	r3, [r7, #0]
 927 0022 002B     		cmp	r3, #0
 928 0024 0CD0     		beq	.L37
 541:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 542:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Get the EMUX start selection*/
 543:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       *StartSelectionValuePtr = (uint8_t)RD_REG( VADCGroupPtr->EMUXCTR, 
 929              		.loc 1 543 0
 930 0026 BB68     		ldr	r3, [r7, #8]
 931 0028 D3F8F031 		ldr	r3, [r3, #496]
 932 002c DBB2     		uxtb	r3, r3
 933 002e 03F00703 		and	r3, r3, #7
 934 0032 DAB2     		uxtb	r2, r3
 935 0034 3B68     		ldr	r3, [r7, #0]
 936 0036 1A70     		strb	r2, [r3, #0]
 544:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                         VADC_G_EMUXCTR_EMUXSET_Msk, VADC_G_EMUXCTR_EMUXSET_Pos);
 545:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 937              		.loc 1 545 0
 938 0038 4FF00003 		mov	r3, #0
 939 003c FB60     		str	r3, [r7, #12]
 940 003e 02E0     		b	.L36
 941              	.L37:
 546:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 547:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
 548:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 549:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 942              		.loc 1 549 0
 943 0040 4FF00203 		mov	r3, #2
 944 0044 FB60     		str	r3, [r7, #12]
 945              	.L36:
 550:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 551:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 552:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 553:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 554:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 555:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 556:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 557:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 946              		.loc 1 557 0
 947 0046 FB68     		ldr	r3, [r7, #12]
 558:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 948              		.loc 1 558 0
 949 0048 1846     		mov	r0, r3
 950 004a 07F11407 		add	r7, r7, #20
 951 004e BD46     		mov	sp, r7
 952 0050 80BC     		pop	{r7}
 953 0052 7047     		bx	lr
 954              		.cfi_endproc
 955              	.LFE122:
 957              		.section	.text.ADCGROUP001_SetEMUXChannelSelect,"ax",%progbits
 958              		.align	2
 959              		.global	ADCGROUP001_SetEMUXChannelSelect
 960              		.thumb
 961              		.thumb_func
 963              	ADCGROUP001_SetEMUXChannelSelect:
 964              	.LFB123:
 559:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 560:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX channel select. */
 561:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXChannelSelect(
 562:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****           const ADCGROUP001_HandleType *HandlePtr, uint8_t ChannelSelectValue)
 563:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 965              		.loc 1 563 0
 966              		.cfi_startproc
 967              		@ args = 0, pretend = 0, frame = 16
 968              		@ frame_needed = 1, uses_anonymous_args = 0
 969              		@ link register save eliminated.
 970 0000 80B4     		push	{r7}
 971              	.LCFI32:
 972              		.cfi_def_cfa_offset 4
 973              		.cfi_offset 7, -4
 974 0002 85B0     		sub	sp, sp, #20
 975              	.LCFI33:
 976              		.cfi_def_cfa_offset 24
 977 0004 00AF     		add	r7, sp, #0
 978              	.LCFI34:
 979              		.cfi_def_cfa_register 7
 980 0006 7860     		str	r0, [r7, #4]
 981 0008 0B46     		mov	r3, r1
 982 000a FB70     		strb	r3, [r7, #3]
 564:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 983              		.loc 1 564 0
 984 000c 4FF00103 		mov	r3, #1
 985 0010 FB60     		str	r3, [r7, #12]
 565:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 566:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;                
 567:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 986              		.loc 1 567 0
 987 0012 7B68     		ldr	r3, [r7, #4]
 988 0014 5B69     		ldr	r3, [r3, #20]
 989 0016 BB60     		str	r3, [r7, #8]
 568:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 569:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 570:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 571:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 990              		.loc 1 571 0
 991 0018 7B68     		ldr	r3, [r7, #4]
 992 001a DB68     		ldr	r3, [r3, #12]
 993 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 994 001e 012B     		cmp	r3, #1
 995 0020 17D1     		bne	.L40
 572:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 573:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if( ChannelSelectValue <= (uint8_t)ADCGROUP001_TOTAL_ADC_CHANNEL )
 996              		.loc 1 573 0
 997 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 998 0024 202B     		cmp	r3, #32
 999 0026 11D8     		bhi	.L41
 574:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 575:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX channel select*/
 576:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->EMUXCTR, VADC_G_EMUXCTR_EMUXCH_Msk,
 1000              		.loc 1 576 0
 1001 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1002 002a 4FEA0343 		lsl	r3, r3, #16
 1003 002e 03F4F812 		and	r2, r3, #2031616
 1004 0032 BB68     		ldr	r3, [r7, #8]
 1005 0034 D3F8F031 		ldr	r3, [r3, #496]
 1006 0038 23F4F813 		bic	r3, r3, #2031616
 1007 003c 1A43     		orrs	r2, r2, r3
 1008 003e BB68     		ldr	r3, [r7, #8]
 1009 0040 C3F8F021 		str	r2, [r3, #496]
 577:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                        VADC_G_EMUXCTR_EMUXCH_Pos, (uint32_t)ChannelSelectValue);
 578:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 579:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1010              		.loc 1 579 0
 1011 0044 4FF00003 		mov	r3, #0
 1012 0048 FB60     		str	r3, [r7, #12]
 1013 004a 02E0     		b	.L40
 1014              	.L41:
 580:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 581:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 582:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 583:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1015              		.loc 1 583 0
 1016 004c 4FF00203 		mov	r3, #2
 1017 0050 FB60     		str	r3, [r7, #12]
 1018              	.L40:
 584:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 585:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 586:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 587:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 588:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 589:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 590:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 591:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 592:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1019              		.loc 1 592 0
 1020 0052 FB68     		ldr	r3, [r7, #12]
 593:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1021              		.loc 1 593 0
 1022 0054 1846     		mov	r0, r3
 1023 0056 07F11407 		add	r7, r7, #20
 1024 005a BD46     		mov	sp, r7
 1025 005c 80BC     		pop	{r7}
 1026 005e 7047     		bx	lr
 1027              		.cfi_endproc
 1028              	.LFE123:
 1030              		.section	.text.ADCGROUP001_SetEMUXMode,"ax",%progbits
 1031              		.align	2
 1032              		.global	ADCGROUP001_SetEMUXMode
 1033              		.thumb
 1034              		.thumb_func
 1036              	ADCGROUP001_SetEMUXMode:
 1037              	.LFB124:
 594:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 595:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX mode. */
 596:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXMode(const ADCGROUP001_HandleType *HandlePtr, 
 597:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                                   uint8_t Mode)
 598:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1038              		.loc 1 598 0
 1039              		.cfi_startproc
 1040              		@ args = 0, pretend = 0, frame = 24
 1041              		@ frame_needed = 1, uses_anonymous_args = 0
 1042              		@ link register save eliminated.
 1043 0000 80B4     		push	{r7}
 1044              	.LCFI35:
 1045              		.cfi_def_cfa_offset 4
 1046              		.cfi_offset 7, -4
 1047 0002 87B0     		sub	sp, sp, #28
 1048              	.LCFI36:
 1049              		.cfi_def_cfa_offset 32
 1050 0004 00AF     		add	r7, sp, #0
 1051              	.LCFI37:
 1052              		.cfi_def_cfa_register 7
 1053 0006 7860     		str	r0, [r7, #4]
 1054 0008 0B46     		mov	r3, r1
 1055 000a FB70     		strb	r3, [r7, #3]
 599:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1056              		.loc 1 599 0
 1057 000c 4FF00103 		mov	r3, #1
 1058 0010 7B61     		str	r3, [r7, #20]
 600:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t ModeTemp;
 601:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 602:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 603:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1059              		.loc 1 603 0
 1060 0012 7B68     		ldr	r3, [r7, #4]
 1061 0014 5B69     		ldr	r3, [r3, #20]
 1062 0016 3B61     		str	r3, [r7, #16]
 604:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 605:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 606:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 607:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1063              		.loc 1 607 0
 1064 0018 7B68     		ldr	r3, [r7, #4]
 1065 001a DB68     		ldr	r3, [r3, #12]
 1066 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1067 001e 012B     		cmp	r3, #1
 1068 0020 1FD1     		bne	.L44
 608:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 609:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(Mode <= (uint8_t)ADCGROUP001_SEQUENCEMODE)
 1069              		.loc 1 609 0
 1070 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1071 0024 032B     		cmp	r3, #3
 1072 0026 19D8     		bhi	.L45
 610:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 611:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX mode*/
 612:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp = VADCGroupPtr->EMUXCTR;
 1073              		.loc 1 612 0
 1074 0028 3B69     		ldr	r3, [r7, #16]
 1075 002a D3F8F031 		ldr	r3, [r3, #496]
 1076 002e FB60     		str	r3, [r7, #12]
 613:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp &= (uint32_t)~(VADC_G_EMUXCTR_EMUXMODE_Msk);
 1077              		.loc 1 613 0
 1078 0030 FB68     		ldr	r3, [r7, #12]
 1079 0032 23F04063 		bic	r3, r3, #201326592
 1080 0036 FB60     		str	r3, [r7, #12]
 614:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 615:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                       (((uint32_t)Mode << VADC_G_EMUXCTR_EMUXMODE_Pos) & VADC_G_EMUXCTR_EMUXMODE_Ms
 1081              		.loc 1 615 0
 1082 0038 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1083 003a 4FEA8363 		lsl	r3, r3, #26
 1084 003e 03F04062 		and	r2, r3, #201326592
 614:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       ModeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 1085              		.loc 1 614 0
 1086 0042 FB68     		ldr	r3, [r7, #12]
 1087 0044 1343     		orrs	r3, r3, r2
 1088 0046 43F00043 		orr	r3, r3, #-2147483648
 1089 004a FB60     		str	r3, [r7, #12]
 616:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = ModeTemp;
 1090              		.loc 1 616 0
 1091 004c 3B69     		ldr	r3, [r7, #16]
 1092 004e FA68     		ldr	r2, [r7, #12]
 1093 0050 C3F8F021 		str	r2, [r3, #496]
 617:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 618:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1094              		.loc 1 618 0
 1095 0054 4FF00003 		mov	r3, #0
 1096 0058 7B61     		str	r3, [r7, #20]
 1097 005a 02E0     		b	.L44
 1098              	.L45:
 619:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 620:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
 621:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 622:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1099              		.loc 1 622 0
 1100 005c 4FF00203 		mov	r3, #2
 1101 0060 7B61     		str	r3, [r7, #20]
 1102              	.L44:
 623:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 624:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 625:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 626:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 627:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 628:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 629:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 630:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 631:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1103              		.loc 1 631 0
 1104 0062 7B69     		ldr	r3, [r7, #20]
 632:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1105              		.loc 1 632 0
 1106 0064 1846     		mov	r0, r3
 1107 0066 07F11C07 		add	r7, r7, #28
 1108 006a BD46     		mov	sp, r7
 1109 006c 80BC     		pop	{r7}
 1110 006e 7047     		bx	lr
 1111              		.cfi_endproc
 1112              	.LFE124:
 1114              		.section	.text.ADCGROUP001_SetEMUXCodeScheme,"ax",%progbits
 1115              		.align	2
 1116              		.global	ADCGROUP001_SetEMUXCodeScheme
 1117              		.thumb
 1118              		.thumb_func
 1120              	ADCGROUP001_SetEMUXCodeScheme:
 1121              	.LFB125:
 633:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 634:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 635:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX coding scheme. */
 636:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXCodeScheme(const ADCGROUP001_HandleType *HandlePtr, 
 637:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                             uint8_t CodeScheme)
 638:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1122              		.loc 1 638 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 24
 1125              		@ frame_needed = 1, uses_anonymous_args = 0
 1126              		@ link register save eliminated.
 1127 0000 80B4     		push	{r7}
 1128              	.LCFI38:
 1129              		.cfi_def_cfa_offset 4
 1130              		.cfi_offset 7, -4
 1131 0002 87B0     		sub	sp, sp, #28
 1132              	.LCFI39:
 1133              		.cfi_def_cfa_offset 32
 1134 0004 00AF     		add	r7, sp, #0
 1135              	.LCFI40:
 1136              		.cfi_def_cfa_register 7
 1137 0006 7860     		str	r0, [r7, #4]
 1138 0008 0B46     		mov	r3, r1
 1139 000a FB70     		strb	r3, [r7, #3]
 639:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1140              		.loc 1 639 0
 1141 000c 4FF00103 		mov	r3, #1
 1142 0010 7B61     		str	r3, [r7, #20]
 640:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t CodeSchemeTemp = (uint32_t)0;
 1143              		.loc 1 640 0
 1144 0012 4FF00003 		mov	r3, #0
 1145 0016 3B61     		str	r3, [r7, #16]
 641:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 642:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 643:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1146              		.loc 1 643 0
 1147 0018 7B68     		ldr	r3, [r7, #4]
 1148 001a 5B69     		ldr	r3, [r3, #20]
 1149 001c FB60     		str	r3, [r7, #12]
 644:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 645:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 646:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 647:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1150              		.loc 1 647 0
 1151 001e 7B68     		ldr	r3, [r7, #4]
 1152 0020 DB68     		ldr	r3, [r3, #12]
 1153 0022 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1154 0024 012B     		cmp	r3, #1
 1155 0026 1FD1     		bne	.L48
 648:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 649:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(CodeScheme <= (uint8_t)ADCGROUP001_GRAYCODE)
 1156              		.loc 1 649 0
 1157 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1158 002a 012B     		cmp	r3, #1
 1159 002c 19D8     		bhi	.L49
 650:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 651:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX code scheme*/
 652:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp = VADCGroupPtr->EMUXCTR;
 1160              		.loc 1 652 0
 1161 002e FB68     		ldr	r3, [r7, #12]
 1162 0030 D3F8F031 		ldr	r3, [r3, #496]
 1163 0034 3B61     		str	r3, [r7, #16]
 653:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp &= (uint32_t)~(VADC_G_EMUXCTR_EMXCOD_Msk);
 1164              		.loc 1 653 0
 1165 0036 3B69     		ldr	r3, [r7, #16]
 1166 0038 23F08053 		bic	r3, r3, #268435456
 1167 003c 3B61     		str	r3, [r7, #16]
 654:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 655:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                     (((uint32_t)CodeScheme << VADC_G_EMUXCTR_EMXCOD_Pos) & VADC_G_EMUXCTR_EMXCOD_Ms
 1168              		.loc 1 655 0
 1169 003e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1170 0040 4FEA0373 		lsl	r3, r3, #28
 1171 0044 03F08052 		and	r2, r3, #268435456
 654:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       CodeSchemeTemp |= (VADC_G_EMUXCTR_EMXWC_Msk) |
 1172              		.loc 1 654 0
 1173 0048 3B69     		ldr	r3, [r7, #16]
 1174 004a 1343     		orrs	r3, r3, r2
 1175 004c 43F00043 		orr	r3, r3, #-2147483648
 1176 0050 3B61     		str	r3, [r7, #16]
 656:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = CodeSchemeTemp;
 1177              		.loc 1 656 0
 1178 0052 FB68     		ldr	r3, [r7, #12]
 1179 0054 3A69     		ldr	r2, [r7, #16]
 1180 0056 C3F8F021 		str	r2, [r3, #496]
 657:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 658:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1181              		.loc 1 658 0
 1182 005a 4FF00003 		mov	r3, #0
 1183 005e 7B61     		str	r3, [r7, #20]
 1184 0060 02E0     		b	.L48
 1185              	.L49:
 659:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 660:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
 661:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 662:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1186              		.loc 1 662 0
 1187 0062 4FF00203 		mov	r3, #2
 1188 0066 7B61     		str	r3, [r7, #20]
 1189              	.L48:
 663:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 664:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 665:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 666:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 667:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 668:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 669:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 670:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 671:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1190              		.loc 1 671 0
 1191 0068 7B69     		ldr	r3, [r7, #20]
 672:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1192              		.loc 1 672 0
 1193 006a 1846     		mov	r0, r3
 1194 006c 07F11C07 		add	r7, r7, #28
 1195 0070 BD46     		mov	sp, r7
 1196 0072 80BC     		pop	{r7}
 1197 0074 7047     		bx	lr
 1198              		.cfi_endproc
 1199              	.LFE125:
 1201 0076 00BF     		.section	.text.ADCGROUP001_SetGroupClass0SampleTime,"ax",%progbits
 1202              		.align	2
 1203              		.global	ADCGROUP001_SetGroupClass0SampleTime
 1204              		.thumb
 1205              		.thumb_func
 1207              	ADCGROUP001_SetGroupClass0SampleTime:
 1208              	.LFB126:
 673:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 674:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for standard conversion mode */
 675:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0SampleTime(
 676:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr, 
 677:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                              uint8_t SampleTime)
 678:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1209              		.loc 1 678 0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 16
 1212              		@ frame_needed = 1, uses_anonymous_args = 0
 1213              		@ link register save eliminated.
 1214 0000 80B4     		push	{r7}
 1215              	.LCFI41:
 1216              		.cfi_def_cfa_offset 4
 1217              		.cfi_offset 7, -4
 1218 0002 85B0     		sub	sp, sp, #20
 1219              	.LCFI42:
 1220              		.cfi_def_cfa_offset 24
 1221 0004 00AF     		add	r7, sp, #0
 1222              	.LCFI43:
 1223              		.cfi_def_cfa_register 7
 1224 0006 7860     		str	r0, [r7, #4]
 1225 0008 0B46     		mov	r3, r1
 1226 000a FB70     		strb	r3, [r7, #3]
 679:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1227              		.loc 1 679 0
 1228 000c 4FF00103 		mov	r3, #1
 1229 0010 FB60     		str	r3, [r7, #12]
 680:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 681:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 682:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1230              		.loc 1 682 0
 1231 0012 7B68     		ldr	r3, [r7, #4]
 1232 0014 5B69     		ldr	r3, [r3, #20]
 1233 0016 BB60     		str	r3, [r7, #8]
 683:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 684:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 685:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 686:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1234              		.loc 1 686 0
 1235 0018 7B68     		ldr	r3, [r7, #4]
 1236 001a DB68     		ldr	r3, [r3, #12]
 1237 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1238 001e 012B     		cmp	r3, #1
 1239 0020 15D1     		bne	.L52
 687:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 688:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1240              		.loc 1 688 0
 1241 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1242 0024 1F2B     		cmp	r3, #31
 1243 0026 0FD8     		bhi	.L53
 689:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 690:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set standard sample time control for class 0 */
 691:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_STCS_Msk,
 1244              		.loc 1 691 0
 1245 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1246 002a 03F01F02 		and	r2, r3, #31
 1247 002e BB68     		ldr	r3, [r7, #8]
 1248 0030 D3F8A030 		ldr	r3, [r3, #160]
 1249 0034 23F01F03 		bic	r3, r3, #31
 1250 0038 1A43     		orrs	r2, r2, r3
 1251 003a BB68     		ldr	r3, [r7, #8]
 1252 003c C3F8A020 		str	r2, [r3, #160]
 692:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCS_Pos, (uint32_t)SampleTime);
 693:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 694:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1253              		.loc 1 694 0
 1254 0040 4FF00003 		mov	r3, #0
 1255 0044 FB60     		str	r3, [r7, #12]
 1256 0046 02E0     		b	.L52
 1257              	.L53:
 695:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 696:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 697:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 698:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1258              		.loc 1 698 0
 1259 0048 4FF00203 		mov	r3, #2
 1260 004c FB60     		str	r3, [r7, #12]
 1261              	.L52:
 699:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }  
 700:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 701:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 702:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 703:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 704:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 705:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  
 706:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 707:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1262              		.loc 1 707 0
 1263 004e FB68     		ldr	r3, [r7, #12]
 708:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1264              		.loc 1 708 0
 1265 0050 1846     		mov	r0, r3
 1266 0052 07F11407 		add	r7, r7, #20
 1267 0056 BD46     		mov	sp, r7
 1268 0058 80BC     		pop	{r7}
 1269 005a 7047     		bx	lr
 1270              		.cfi_endproc
 1271              	.LFE126:
 1273              		.section	.text.ADCGROUP001_SetGroupClass1SampleTime,"ax",%progbits
 1274              		.align	2
 1275              		.global	ADCGROUP001_SetGroupClass1SampleTime
 1276              		.thumb
 1277              		.thumb_func
 1279              	ADCGROUP001_SetGroupClass1SampleTime:
 1280              	.LFB127:
 709:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 710:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 711:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for standard conversion mode */
 712:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1SampleTime(
 713:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr, 
 714:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                                              uint8_t SampleTime)
 715:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1281              		.loc 1 715 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 16
 1284              		@ frame_needed = 1, uses_anonymous_args = 0
 1285              		@ link register save eliminated.
 1286 0000 80B4     		push	{r7}
 1287              	.LCFI44:
 1288              		.cfi_def_cfa_offset 4
 1289              		.cfi_offset 7, -4
 1290 0002 85B0     		sub	sp, sp, #20
 1291              	.LCFI45:
 1292              		.cfi_def_cfa_offset 24
 1293 0004 00AF     		add	r7, sp, #0
 1294              	.LCFI46:
 1295              		.cfi_def_cfa_register 7
 1296 0006 7860     		str	r0, [r7, #4]
 1297 0008 0B46     		mov	r3, r1
 1298 000a FB70     		strb	r3, [r7, #3]
 716:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1299              		.loc 1 716 0
 1300 000c 4FF00103 		mov	r3, #1
 1301 0010 FB60     		str	r3, [r7, #12]
 717:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 718:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 719:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1302              		.loc 1 719 0
 1303 0012 7B68     		ldr	r3, [r7, #4]
 1304 0014 5B69     		ldr	r3, [r3, #20]
 1305 0016 BB60     		str	r3, [r7, #8]
 720:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 721:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 722:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 723:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1306              		.loc 1 723 0
 1307 0018 7B68     		ldr	r3, [r7, #4]
 1308 001a DB68     		ldr	r3, [r3, #12]
 1309 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1310 001e 012B     		cmp	r3, #1
 1311 0020 15D1     		bne	.L56
 724:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 725:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1312              		.loc 1 725 0
 1313 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1314 0024 1F2B     		cmp	r3, #31
 1315 0026 0FD8     		bhi	.L57
 726:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 727:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set standard sample time control for class 1 */
 728:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_STCS_Msk,
 1316              		.loc 1 728 0
 1317 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1318 002a 03F01F02 		and	r2, r3, #31
 1319 002e BB68     		ldr	r3, [r7, #8]
 1320 0030 D3F8A430 		ldr	r3, [r3, #164]
 1321 0034 23F01F03 		bic	r3, r3, #31
 1322 0038 1A43     		orrs	r2, r2, r3
 1323 003a BB68     		ldr	r3, [r7, #8]
 1324 003c C3F8A420 		str	r2, [r3, #164]
 729:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCS_Pos, (uint32_t)SampleTime);                    
 730:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 731:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1325              		.loc 1 731 0
 1326 0040 4FF00003 		mov	r3, #0
 1327 0044 FB60     		str	r3, [r7, #12]
 1328 0046 02E0     		b	.L56
 1329              	.L57:
 732:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 733:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 734:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 735:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1330              		.loc 1 735 0
 1331 0048 4FF00203 		mov	r3, #2
 1332 004c FB60     		str	r3, [r7, #12]
 1333              	.L56:
 736:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }    
 737:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 738:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 739:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 740:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 741:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 742:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 743:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 744:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1334              		.loc 1 744 0
 1335 004e FB68     		ldr	r3, [r7, #12]
 745:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1336              		.loc 1 745 0
 1337 0050 1846     		mov	r0, r3
 1338 0052 07F11407 		add	r7, r7, #20
 1339 0056 BD46     		mov	sp, r7
 1340 0058 80BC     		pop	{r7}
 1341 005a 7047     		bx	lr
 1342              		.cfi_endproc
 1343              	.LFE127:
 1345              		.section	.text.ADCGROUP001_SetGroupClass0EmuxSampleTime,"ax",%progbits
 1346              		.align	2
 1347              		.global	ADCGROUP001_SetGroupClass0EmuxSampleTime
 1348              		.thumb
 1349              		.thumb_func
 1351              	ADCGROUP001_SetGroupClass0EmuxSampleTime:
 1352              	.LFB128:
 746:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 747:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 748:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for EMUX conversion mode*/
 749:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0EmuxSampleTime(
 750:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr, 
 751:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t SampleTime)
 752:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1353              		.loc 1 752 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 16
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358 0000 80B4     		push	{r7}
 1359              	.LCFI47:
 1360              		.cfi_def_cfa_offset 4
 1361              		.cfi_offset 7, -4
 1362 0002 85B0     		sub	sp, sp, #20
 1363              	.LCFI48:
 1364              		.cfi_def_cfa_offset 24
 1365 0004 00AF     		add	r7, sp, #0
 1366              	.LCFI49:
 1367              		.cfi_def_cfa_register 7
 1368 0006 7860     		str	r0, [r7, #4]
 1369 0008 0B46     		mov	r3, r1
 1370 000a FB70     		strb	r3, [r7, #3]
 753:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1371              		.loc 1 753 0
 1372 000c 4FF00103 		mov	r3, #1
 1373 0010 FB60     		str	r3, [r7, #12]
 754:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 755:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 756:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1374              		.loc 1 756 0
 1375 0012 7B68     		ldr	r3, [r7, #4]
 1376 0014 5B69     		ldr	r3, [r3, #20]
 1377 0016 BB60     		str	r3, [r7, #8]
 757:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 758:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 759:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 760:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1378              		.loc 1 760 0
 1379 0018 7B68     		ldr	r3, [r7, #4]
 1380 001a DB68     		ldr	r3, [r3, #12]
 1381 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1382 001e 012B     		cmp	r3, #1
 1383 0020 17D1     		bne	.L60
 761:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 762:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1384              		.loc 1 762 0
 1385 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1386 0024 1F2B     		cmp	r3, #31
 1387 0026 11D8     		bhi	.L61
 763:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 764:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX sample time control for class 0 */
 765:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_STCE_Msk,
 1388              		.loc 1 765 0
 1389 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1390 002a 4FEA0343 		lsl	r3, r3, #16
 1391 002e 03F4F812 		and	r2, r3, #2031616
 1392 0032 BB68     		ldr	r3, [r7, #8]
 1393 0034 D3F8A030 		ldr	r3, [r3, #160]
 1394 0038 23F4F813 		bic	r3, r3, #2031616
 1395 003c 1A43     		orrs	r2, r2, r3
 1396 003e BB68     		ldr	r3, [r7, #8]
 1397 0040 C3F8A020 		str	r2, [r3, #160]
 766:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                  VADC_G_ICLASS_STCE_Pos, (uint32_t)SampleTime);
 767:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 768:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1398              		.loc 1 768 0
 1399 0044 4FF00003 		mov	r3, #0
 1400 0048 FB60     		str	r3, [r7, #12]
 1401 004a 02E0     		b	.L60
 1402              	.L61:
 769:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 770:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 771:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 772:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1403              		.loc 1 772 0
 1404 004c 4FF00203 		mov	r3, #2
 1405 0050 FB60     		str	r3, [r7, #12]
 1406              	.L60:
 773:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }  
 774:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 775:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 776:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 777:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);  
 778:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 779:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 780:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 781:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1407              		.loc 1 781 0
 1408 0052 FB68     		ldr	r3, [r7, #12]
 782:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1409              		.loc 1 782 0
 1410 0054 1846     		mov	r0, r3
 1411 0056 07F11407 		add	r7, r7, #20
 1412 005a BD46     		mov	sp, r7
 1413 005c 80BC     		pop	{r7}
 1414 005e 7047     		bx	lr
 1415              		.cfi_endproc
 1416              	.LFE128:
 1418              		.section	.text.ADCGROUP001_SetGroupClass1EmuxSampleTime,"ax",%progbits
 1419              		.align	2
 1420              		.global	ADCGROUP001_SetGroupClass1EmuxSampleTime
 1421              		.thumb
 1422              		.thumb_func
 1424              	ADCGROUP001_SetGroupClass1EmuxSampleTime:
 1425              	.LFB129:
 783:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 784:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 785:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the sample time for EMUX conversion mode*/
 786:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1EmuxSampleTime(
 787:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr, 
 788:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t SampleTime)
 789:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1426              		.loc 1 789 0
 1427              		.cfi_startproc
 1428              		@ args = 0, pretend = 0, frame = 16
 1429              		@ frame_needed = 1, uses_anonymous_args = 0
 1430              		@ link register save eliminated.
 1431 0000 80B4     		push	{r7}
 1432              	.LCFI50:
 1433              		.cfi_def_cfa_offset 4
 1434              		.cfi_offset 7, -4
 1435 0002 85B0     		sub	sp, sp, #20
 1436              	.LCFI51:
 1437              		.cfi_def_cfa_offset 24
 1438 0004 00AF     		add	r7, sp, #0
 1439              	.LCFI52:
 1440              		.cfi_def_cfa_register 7
 1441 0006 7860     		str	r0, [r7, #4]
 1442 0008 0B46     		mov	r3, r1
 1443 000a FB70     		strb	r3, [r7, #3]
 790:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1444              		.loc 1 790 0
 1445 000c 4FF00103 		mov	r3, #1
 1446 0010 FB60     		str	r3, [r7, #12]
 791:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 792:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 793:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1447              		.loc 1 793 0
 1448 0012 7B68     		ldr	r3, [r7, #4]
 1449 0014 5B69     		ldr	r3, [r3, #20]
 1450 0016 BB60     		str	r3, [r7, #8]
 794:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 795:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 796:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 797:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1451              		.loc 1 797 0
 1452 0018 7B68     		ldr	r3, [r7, #4]
 1453 001a DB68     		ldr	r3, [r3, #12]
 1454 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1455 001e 012B     		cmp	r3, #1
 1456 0020 17D1     		bne	.L64
 798:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 799:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(SampleTime < (uint8_t)ADCGROUP001_MAX_SAMPLE_TIME_CONTROL_VAL)
 1457              		.loc 1 799 0
 1458 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1459 0024 1F2B     		cmp	r3, #31
 1460 0026 11D8     		bhi	.L65
 800:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 801:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX sample time control for class 1 */
 802:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_STCE_Msk,
 1461              		.loc 1 802 0
 1462 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1463 002a 4FEA0343 		lsl	r3, r3, #16
 1464 002e 03F4F812 		and	r2, r3, #2031616
 1465 0032 BB68     		ldr	r3, [r7, #8]
 1466 0034 D3F8A430 		ldr	r3, [r3, #164]
 1467 0038 23F4F813 		bic	r3, r3, #2031616
 1468 003c 1A43     		orrs	r2, r2, r3
 1469 003e BB68     		ldr	r3, [r7, #8]
 1470 0040 C3F8A420 		str	r2, [r3, #164]
 803:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                   VADC_G_ICLASS_STCE_Pos, (uint32_t)SampleTime);
 804:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1471              		.loc 1 804 0
 1472 0044 4FF00003 		mov	r3, #0
 1473 0048 FB60     		str	r3, [r7, #12]
 1474 004a 02E0     		b	.L64
 1475              	.L65:
 805:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 806:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 807:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 808:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1476              		.loc 1 808 0
 1477 004c 4FF00203 		mov	r3, #2
 1478 0050 FB60     		str	r3, [r7, #12]
 1479              	.L64:
 809:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }    
 810:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 811:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 812:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 813:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
 814:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 815:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  
 816:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 817:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1480              		.loc 1 817 0
 1481 0052 FB68     		ldr	r3, [r7, #12]
 818:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1482              		.loc 1 818 0
 1483 0054 1846     		mov	r0, r3
 1484 0056 07F11407 		add	r7, r7, #20
 1485 005a BD46     		mov	sp, r7
 1486 005c 80BC     		pop	{r7}
 1487 005e 7047     		bx	lr
 1488              		.cfi_endproc
 1489              	.LFE129:
 1491              		.section	.text.ADCGROUP001_SetGroupClass0ConvMode,"ax",%progbits
 1492              		.align	2
 1493              		.global	ADCGROUP001_SetGroupClass0ConvMode
 1494              		.thumb
 1495              		.thumb_func
 1497              	ADCGROUP001_SetGroupClass0ConvMode:
 1498              	.LFB130:
 819:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 820:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 821:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the standard conversion mode in group class 0 */
 822:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0ConvMode(
 823:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       const ADCGROUP001_HandleType *HandlePtr, 
 824:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       uint8_t ConversionModeVal)
 825:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1499              		.loc 1 825 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 16
 1502              		@ frame_needed = 1, uses_anonymous_args = 0
 1503              		@ link register save eliminated.
 1504 0000 80B4     		push	{r7}
 1505              	.LCFI53:
 1506              		.cfi_def_cfa_offset 4
 1507              		.cfi_offset 7, -4
 1508 0002 85B0     		sub	sp, sp, #20
 1509              	.LCFI54:
 1510              		.cfi_def_cfa_offset 24
 1511 0004 00AF     		add	r7, sp, #0
 1512              	.LCFI55:
 1513              		.cfi_def_cfa_register 7
 1514 0006 7860     		str	r0, [r7, #4]
 1515 0008 0B46     		mov	r3, r1
 1516 000a FB70     		strb	r3, [r7, #3]
 826:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1517              		.loc 1 826 0
 1518 000c 4FF00103 		mov	r3, #1
 1519 0010 FB60     		str	r3, [r7, #12]
 827:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 828:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 829:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1520              		.loc 1 829 0
 1521 0012 7B68     		ldr	r3, [r7, #4]
 1522 0014 5B69     		ldr	r3, [r3, #20]
 1523 0016 BB60     		str	r3, [r7, #8]
 830:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 831:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 832:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 833:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1524              		.loc 1 833 0
 1525 0018 7B68     		ldr	r3, [r7, #4]
 1526 001a DB68     		ldr	r3, [r3, #12]
 1527 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1528 001e 012B     		cmp	r3, #1
 1529 0020 1AD1     		bne	.L68
 834:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 835:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1530              		.loc 1 835 0
 1531 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1532 0024 022B     		cmp	r3, #2
 1533 0026 02D9     		bls	.L69
 1534              		.loc 1 835 0 is_stmt 0 discriminator 1
 1535 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1536 002a 052B     		cmp	r3, #5
 1537 002c 11D1     		bne	.L70
 1538              	.L69:
 836:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 837:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 838:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set conversion mode for class 0 */
 839:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_CMS_Msk,
 1539              		.loc 1 839 0 is_stmt 1
 1540 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1541 0030 4FEA0323 		lsl	r3, r3, #8
 1542 0034 03F4E062 		and	r2, r3, #1792
 1543 0038 BB68     		ldr	r3, [r7, #8]
 1544 003a D3F8A030 		ldr	r3, [r3, #160]
 1545 003e 23F4E063 		bic	r3, r3, #1792
 1546 0042 1A43     		orrs	r2, r2, r3
 1547 0044 BB68     		ldr	r3, [r7, #8]
 1548 0046 C3F8A020 		str	r2, [r3, #160]
 840:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CMS_Pos, (uint32_t)ConversionModeVal);
 841:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 842:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1549              		.loc 1 842 0
 1550 004a 4FF00003 		mov	r3, #0
 1551 004e FB60     		str	r3, [r7, #12]
 1552 0050 02E0     		b	.L68
 1553              	.L70:
 843:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 844:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 845:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 846:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1554              		.loc 1 846 0
 1555 0052 4FF00203 		mov	r3, #2
 1556 0056 FB60     		str	r3, [r7, #12]
 1557              	.L68:
 847:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }  
 848:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 849:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 850:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 851:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);   
 852:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 853:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 854:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 855:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1558              		.loc 1 855 0
 1559 0058 FB68     		ldr	r3, [r7, #12]
 856:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1560              		.loc 1 856 0
 1561 005a 1846     		mov	r0, r3
 1562 005c 07F11407 		add	r7, r7, #20
 1563 0060 BD46     		mov	sp, r7
 1564 0062 80BC     		pop	{r7}
 1565 0064 7047     		bx	lr
 1566              		.cfi_endproc
 1567              	.LFE130:
 1569 0066 00BF     		.section	.text.ADCGROUP001_SetGroupClass1ConvMode,"ax",%progbits
 1570              		.align	2
 1571              		.global	ADCGROUP001_SetGroupClass1ConvMode
 1572              		.thumb
 1573              		.thumb_func
 1575              	ADCGROUP001_SetGroupClass1ConvMode:
 1576              	.LFB131:
 857:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 858:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 859:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the standard conversion mode */
 860:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1ConvMode(
 861:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       const ADCGROUP001_HandleType *HandlePtr, 
 862:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                       uint8_t ConversionModeVal)
 863:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1577              		.loc 1 863 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 16
 1580              		@ frame_needed = 1, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 1582 0000 80B4     		push	{r7}
 1583              	.LCFI56:
 1584              		.cfi_def_cfa_offset 4
 1585              		.cfi_offset 7, -4
 1586 0002 85B0     		sub	sp, sp, #20
 1587              	.LCFI57:
 1588              		.cfi_def_cfa_offset 24
 1589 0004 00AF     		add	r7, sp, #0
 1590              	.LCFI58:
 1591              		.cfi_def_cfa_register 7
 1592 0006 7860     		str	r0, [r7, #4]
 1593 0008 0B46     		mov	r3, r1
 1594 000a FB70     		strb	r3, [r7, #3]
 864:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1595              		.loc 1 864 0
 1596 000c 4FF00103 		mov	r3, #1
 1597 0010 FB60     		str	r3, [r7, #12]
 865:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 866:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 867:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1598              		.loc 1 867 0
 1599 0012 7B68     		ldr	r3, [r7, #4]
 1600 0014 5B69     		ldr	r3, [r3, #20]
 1601 0016 BB60     		str	r3, [r7, #8]
 868:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 869:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 870:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 871:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1602              		.loc 1 871 0
 1603 0018 7B68     		ldr	r3, [r7, #4]
 1604 001a DB68     		ldr	r3, [r3, #12]
 1605 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1606 001e 012B     		cmp	r3, #1
 1607 0020 1AD1     		bne	.L74
 872:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 873:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1608              		.loc 1 873 0
 1609 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1610 0024 022B     		cmp	r3, #2
 1611 0026 02D9     		bls	.L75
 1612              		.loc 1 873 0 is_stmt 0 discriminator 1
 1613 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1614 002a 052B     		cmp	r3, #5
 1615 002c 11D1     		bne	.L76
 1616              	.L75:
 874:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 875:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 876:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set conversion mode for class 1 */
 877:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_CMS_Msk,
 1617              		.loc 1 877 0 is_stmt 1
 1618 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1619 0030 4FEA0323 		lsl	r3, r3, #8
 1620 0034 03F4E062 		and	r2, r3, #1792
 1621 0038 BB68     		ldr	r3, [r7, #8]
 1622 003a D3F8A430 		ldr	r3, [r3, #164]
 1623 003e 23F4E063 		bic	r3, r3, #1792
 1624 0042 1A43     		orrs	r2, r2, r3
 1625 0044 BB68     		ldr	r3, [r7, #8]
 1626 0046 C3F8A420 		str	r2, [r3, #164]
 878:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CMS_Pos, (uint32_t)ConversionModeVal);
 879:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1627              		.loc 1 879 0
 1628 004a 4FF00003 		mov	r3, #0
 1629 004e FB60     		str	r3, [r7, #12]
 1630 0050 02E0     		b	.L74
 1631              	.L76:
 880:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 881:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 882:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 883:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1632              		.loc 1 883 0
 1633 0052 4FF00203 		mov	r3, #2
 1634 0056 FB60     		str	r3, [r7, #12]
 1635              	.L74:
 884:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }    
 885:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 886:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 887:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 888:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);    
 889:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 890:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 891:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 892:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1636              		.loc 1 892 0
 1637 0058 FB68     		ldr	r3, [r7, #12]
 893:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1638              		.loc 1 893 0
 1639 005a 1846     		mov	r0, r3
 1640 005c 07F11407 		add	r7, r7, #20
 1641 0060 BD46     		mov	sp, r7
 1642 0062 80BC     		pop	{r7}
 1643 0064 7047     		bx	lr
 1644              		.cfi_endproc
 1645              	.LFE131:
 1647 0066 00BF     		.section	.text.ADCGROUP001_SetGroupClass0EmuxConvMode,"ax",%progbits
 1648              		.align	2
 1649              		.global	ADCGROUP001_SetGroupClass0EmuxConvMode
 1650              		.thumb
 1651              		.thumb_func
 1653              	ADCGROUP001_SetGroupClass0EmuxConvMode:
 1654              	.LFB132:
 894:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 895:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 896:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the emux conversion mode */
 897:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass0EmuxConvMode(
 898:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr, 
 899:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t ConversionModeVal
 900:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           )
 901:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1655              		.loc 1 901 0
 1656              		.cfi_startproc
 1657              		@ args = 0, pretend = 0, frame = 16
 1658              		@ frame_needed = 1, uses_anonymous_args = 0
 1659              		@ link register save eliminated.
 1660 0000 80B4     		push	{r7}
 1661              	.LCFI59:
 1662              		.cfi_def_cfa_offset 4
 1663              		.cfi_offset 7, -4
 1664 0002 85B0     		sub	sp, sp, #20
 1665              	.LCFI60:
 1666              		.cfi_def_cfa_offset 24
 1667 0004 00AF     		add	r7, sp, #0
 1668              	.LCFI61:
 1669              		.cfi_def_cfa_register 7
 1670 0006 7860     		str	r0, [r7, #4]
 1671 0008 0B46     		mov	r3, r1
 1672 000a FB70     		strb	r3, [r7, #3]
 902:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1673              		.loc 1 902 0
 1674 000c 4FF00103 		mov	r3, #1
 1675 0010 FB60     		str	r3, [r7, #12]
 903:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 904:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 905:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1676              		.loc 1 905 0
 1677 0012 7B68     		ldr	r3, [r7, #4]
 1678 0014 5B69     		ldr	r3, [r3, #20]
 1679 0016 BB60     		str	r3, [r7, #8]
 906:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 907:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 908:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 909:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1680              		.loc 1 909 0
 1681 0018 7B68     		ldr	r3, [r7, #4]
 1682 001a DB68     		ldr	r3, [r3, #12]
 1683 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1684 001e 012B     		cmp	r3, #1
 1685 0020 1AD1     		bne	.L80
 910:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 911:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1686              		.loc 1 911 0
 1687 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1688 0024 022B     		cmp	r3, #2
 1689 0026 02D9     		bls	.L81
 1690              		.loc 1 911 0 is_stmt 0 discriminator 1
 1691 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1692 002a 052B     		cmp	r3, #5
 1693 002c 11D1     		bne	.L82
 1694              	.L81:
 912:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 913:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 914:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX conversion mode for class 0 */
 915:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[0], VADC_G_ICLASS_CME_Msk,
 1695              		.loc 1 915 0 is_stmt 1
 1696 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1697 0030 4FEA0363 		lsl	r3, r3, #24
 1698 0034 03F0E062 		and	r2, r3, #117440512
 1699 0038 BB68     		ldr	r3, [r7, #8]
 1700 003a D3F8A030 		ldr	r3, [r3, #160]
 1701 003e 23F0E063 		bic	r3, r3, #117440512
 1702 0042 1A43     		orrs	r2, r2, r3
 1703 0044 BB68     		ldr	r3, [r7, #8]
 1704 0046 C3F8A020 		str	r2, [r3, #160]
 916:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                             VADC_G_ICLASS_CME_Pos, (uint32_t)ConversionModeVal);
 917:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 918:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1705              		.loc 1 918 0
 1706 004a 4FF00003 		mov	r3, #0
 1707 004e FB60     		str	r3, [r7, #12]
 1708 0050 02E0     		b	.L80
 1709              	.L82:
 919:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 920:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 921:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 922:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1710              		.loc 1 922 0
 1711 0052 4FF00203 		mov	r3, #2
 1712 0056 FB60     		str	r3, [r7, #12]
 1713              	.L80:
 923:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }  
 924:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 925:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 926:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 927:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);    
 928:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 929:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 930:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 931:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1714              		.loc 1 931 0
 1715 0058 FB68     		ldr	r3, [r7, #12]
 932:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1716              		.loc 1 932 0
 1717 005a 1846     		mov	r0, r3
 1718 005c 07F11407 		add	r7, r7, #20
 1719 0060 BD46     		mov	sp, r7
 1720 0062 80BC     		pop	{r7}
 1721 0064 7047     		bx	lr
 1722              		.cfi_endproc
 1723              	.LFE132:
 1725 0066 00BF     		.section	.text.ADCGROUP001_SetGroupClass1EmuxConvMode,"ax",%progbits
 1726              		.align	2
 1727              		.global	ADCGROUP001_SetGroupClass1EmuxConvMode
 1728              		.thumb
 1729              		.thumb_func
 1731              	ADCGROUP001_SetGroupClass1EmuxConvMode:
 1732              	.LFB133:
 933:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 934:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 935:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the emux conversion mode */
 936:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetGroupClass1EmuxConvMode(
 937:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         const ADCGROUP001_HandleType *HandlePtr, 
 938:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                         uint8_t ConversionModeVal
 939:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                                           )
 940:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1733              		.loc 1 940 0
 1734              		.cfi_startproc
 1735              		@ args = 0, pretend = 0, frame = 16
 1736              		@ frame_needed = 1, uses_anonymous_args = 0
 1737              		@ link register save eliminated.
 1738 0000 80B4     		push	{r7}
 1739              	.LCFI62:
 1740              		.cfi_def_cfa_offset 4
 1741              		.cfi_offset 7, -4
 1742 0002 85B0     		sub	sp, sp, #20
 1743              	.LCFI63:
 1744              		.cfi_def_cfa_offset 24
 1745 0004 00AF     		add	r7, sp, #0
 1746              	.LCFI64:
 1747              		.cfi_def_cfa_register 7
 1748 0006 7860     		str	r0, [r7, #4]
 1749 0008 0B46     		mov	r3, r1
 1750 000a FB70     		strb	r3, [r7, #3]
 941:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1751              		.loc 1 941 0
 1752 000c 4FF00103 		mov	r3, #1
 1753 0010 FB60     		str	r3, [r7, #12]
 942:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 943:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 944:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1754              		.loc 1 944 0
 1755 0012 7B68     		ldr	r3, [r7, #4]
 1756 0014 5B69     		ldr	r3, [r3, #20]
 1757 0016 BB60     		str	r3, [r7, #8]
 945:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****  
 946:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 947:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 948:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1758              		.loc 1 948 0
 1759 0018 7B68     		ldr	r3, [r7, #4]
 1760 001a DB68     		ldr	r3, [r3, #12]
 1761 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1762 001e 012B     		cmp	r3, #1
 1763 0020 1AD1     		bne	.L86
 949:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 950:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if((ConversionModeVal <= (uint8_t)ADCGROUP001_8BIT) ||
 1764              		.loc 1 950 0
 1765 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1766 0024 022B     		cmp	r3, #2
 1767 0026 02D9     		bls	.L87
 1768              		.loc 1 950 0 is_stmt 0 discriminator 1
 1769 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1770 002a 052B     		cmp	r3, #5
 1771 002c 11D1     		bne	.L88
 1772              	.L87:
 951:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****         (ConversionModeVal == (uint8_t)ADCGROUP001_10BITFAST))
 952:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 953:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set EMUX conversion mode for class 1 */
 954:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       WR_REG(VADCGroupPtr->ICLASS[1], VADC_G_ICLASS_CME_Msk,
 1773              		.loc 1 954 0 is_stmt 1
 1774 002e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1775 0030 4FEA0363 		lsl	r3, r3, #24
 1776 0034 03F0E062 		and	r2, r3, #117440512
 1777 0038 BB68     		ldr	r3, [r7, #8]
 1778 003a D3F8A430 		ldr	r3, [r3, #164]
 1779 003e 23F0E063 		bic	r3, r3, #117440512
 1780 0042 1A43     		orrs	r2, r2, r3
 1781 0044 BB68     		ldr	r3, [r7, #8]
 1782 0046 C3F8A420 		str	r2, [r3, #164]
 955:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                            VADC_G_ICLASS_CME_Pos, (uint32_t)ConversionModeVal);
 956:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 957:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1783              		.loc 1 957 0
 1784 004a 4FF00003 		mov	r3, #0
 1785 004e FB60     		str	r3, [r7, #12]
 1786 0050 02E0     		b	.L86
 1787              	.L88:
 958:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 959:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else
 960:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 961:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1788              		.loc 1 961 0
 1789 0052 4FF00203 		mov	r3, #2
 1790 0056 FB60     		str	r3, [r7, #12]
 1791              	.L86:
 962:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 963:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 964:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
 965:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 966:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL); 
 967:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
 968:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 969:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
 970:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1792              		.loc 1 970 0
 1793 0058 FB68     		ldr	r3, [r7, #12]
 971:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1794              		.loc 1 971 0
 1795 005a 1846     		mov	r0, r3
 1796 005c 07F11407 		add	r7, r7, #20
 1797 0060 BD46     		mov	sp, r7
 1798 0062 80BC     		pop	{r7}
 1799 0064 7047     		bx	lr
 1800              		.cfi_endproc
 1801              	.LFE133:
 1803 0066 00BF     		.section	.text.ADCGROUP001_SetEMUXSampleTimeControl,"ax",%progbits
 1804              		.align	2
 1805              		.global	ADCGROUP001_SetEMUXSampleTimeControl
 1806              		.thumb
 1807              		.thumb_func
 1809              	ADCGROUP001_SetEMUXSampleTimeControl:
 1810              	.LFB134:
 972:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 973:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 974:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** /* This function sets the value of EMUX sample time control. */
 975:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** status_t ADCGROUP001_SetEMUXSampleTimeControl(
 976:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                   const ADCGROUP001_HandleType *HandlePtr, uint8_t ControlValue)
 977:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** {
 1811              		.loc 1 977 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 24
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815              		@ link register save eliminated.
 1816 0000 80B4     		push	{r7}
 1817              	.LCFI65:
 1818              		.cfi_def_cfa_offset 4
 1819              		.cfi_offset 7, -4
 1820 0002 87B0     		sub	sp, sp, #28
 1821              	.LCFI66:
 1822              		.cfi_def_cfa_offset 32
 1823 0004 00AF     		add	r7, sp, #0
 1824              	.LCFI67:
 1825              		.cfi_def_cfa_register 7
 1826 0006 7860     		str	r0, [r7, #4]
 1827 0008 0B46     		mov	r3, r1
 1828 000a FB70     		strb	r3, [r7, #3]
 978:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   status_t Status = (uint32_t)ADCGROUP001_OPER_NOT_ALLOWED_ERROR;
 1829              		.loc 1 978 0
 1830 000c 4FF00103 		mov	r3, #1
 1831 0010 7B61     		str	r3, [r7, #20]
 979:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   uint32_t SampleTimeCtrl;
 980:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   /*Pointer to the VADC Structure */
 981:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADC_G_TypeDef *VADCGroupPtr;              
 982:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   VADCGroupPtr = HandlePtr->VADCGroupPtr;
 1832              		.loc 1 982 0
 1833 0012 7B68     		ldr	r3, [r7, #4]
 1834 0014 5B69     		ldr	r3, [r3, #20]
 1835 0016 3B61     		str	r3, [r7, #16]
 983:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 984:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_ENTRY(GID_ADCGROUP001, ADCGROUP001_FUNCTION_ENTRY);
 985:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
 986:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   if((HandlePtr->DynamicHandlePtr->State == ADCGROUP001_INITIALIZED))
 1836              		.loc 1 986 0
 1837 0018 7B68     		ldr	r3, [r7, #4]
 1838 001a DB68     		ldr	r3, [r3, #12]
 1839 001c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1840 001e 012B     		cmp	r3, #1
 1841 0020 1FD1     		bne	.L92
 987:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
 988:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     if(ControlValue <= (uint8_t)SET)
 1842              		.loc 1 988 0
 1843 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1844 0024 012B     		cmp	r3, #1
 1845 0026 19D8     		bhi	.L93
 989:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
 990:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       /* Set the EMUX sample time control */
 991:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl = VADCGroupPtr->EMUXCTR;
 1846              		.loc 1 991 0
 1847 0028 3B69     		ldr	r3, [r7, #16]
 1848 002a D3F8F031 		ldr	r3, [r3, #496]
 1849 002e FB60     		str	r3, [r7, #12]
 992:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl &= (uint32_t)~(VADC_G_EMUXCTR_EMXST_Msk);
 1850              		.loc 1 992 0
 1851 0030 FB68     		ldr	r3, [r7, #12]
 1852 0032 23F00053 		bic	r3, r3, #536870912
 1853 0036 FB60     		str	r3, [r7, #12]
 993:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl |= (VADC_G_EMUXCTR_EMXWC_Msk) | \
 994:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****                     (((uint32_t)ControlValue << VADC_G_EMUXCTR_EMXST_Pos) & VADC_G_EMUXCTR_EMXST_Ms
 1854              		.loc 1 994 0
 1855 0038 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1856 003a 4FEA4373 		lsl	r3, r3, #29
 1857 003e 03F00052 		and	r2, r3, #536870912
 993:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       SampleTimeCtrl |= (VADC_G_EMUXCTR_EMXWC_Msk) | \
 1858              		.loc 1 993 0
 1859 0042 FB68     		ldr	r3, [r7, #12]
 1860 0044 1343     		orrs	r3, r3, r2
 1861 0046 43F00043 		orr	r3, r3, #-2147483648
 1862 004a FB60     		str	r3, [r7, #12]
 995:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       VADCGroupPtr->EMUXCTR = SampleTimeCtrl;
 1863              		.loc 1 995 0
 1864 004c 3B69     		ldr	r3, [r7, #16]
 1865 004e FA68     		ldr	r2, [r7, #12]
 1866 0050 C3F8F021 		str	r2, [r3, #496]
 996:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   
 997:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)DAVEApp_SUCCESS;
 1867              		.loc 1 997 0
 1868 0054 4FF00003 		mov	r3, #0
 1869 0058 7B61     		str	r3, [r7, #20]
 1870 005a 02E0     		b	.L92
 1871              	.L93:
 998:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
 999:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     else 
1000:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     {
1001:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****       Status = (uint32_t)ADCGROUP001_INVALID_PARAM_ERROR;
 1872              		.loc 1 1001 0
 1873 005c 4FF00203 		mov	r3, #2
 1874 0060 7B61     		str	r3, [r7, #20]
 1875              	.L92:
1002:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     }
1003:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
1004:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   else  
1005:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   {
1006:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****     ERROR(GID_ADCGROUP001, (uint8_t)Status, 0, (uint8_t*)NULL);
1007:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   }
1008:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** 
1009:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   FUNCTION_EXIT(GID_ADCGROUP001, ADCGROUP001_FUNCTION_EXIT);
1010:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c ****   return Status;
 1876              		.loc 1 1010 0
 1877 0062 7B69     		ldr	r3, [r7, #20]
1011:../Dave/Generated/src/ADCGROUP001/ADCGroup001.c **** }
 1878              		.loc 1 1011 0
 1879 0064 1846     		mov	r0, r3
 1880 0066 07F11C07 		add	r7, r7, #28
 1881 006a BD46     		mov	sp, r7
 1882 006c 80BC     		pop	{r7}
 1883 006e 7047     		bx	lr
 1884              		.cfi_endproc
 1885              	.LFE134:
 1887              		.text
 1888              	.Letext0:
 1889              		.file 2 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 1890              		.file 3 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 1891              		.file 4 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 1892              		.file 5 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
 1893              		.file 6 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
 1894              		.file 7 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/.
DEFINED SYMBOLS
                            *ABS*:00000000 ADCGroup001.c
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:20     .text.ADCGROUP001_Init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:25     .text.ADCGROUP001_Init:00000000 ADCGROUP001_Init
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:57     .text.ADCGROUP001_lInit:00000000 ADCGROUP001_lInit
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:52     .text.ADCGROUP001_lInit:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:266    .text.ADCGROUP001_Deinit:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:271    .text.ADCGROUP001_Deinit:00000000 ADCGROUP001_Deinit
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:353    .text.ADCGROUP001_SetGroupBound0:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:358    .text.ADCGROUP001_SetGroupBound0:00000000 ADCGROUP001_SetGroupBound0
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:427    .text.ADCGROUP001_SetGroupBound1:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:432    .text.ADCGROUP001_SetGroupBound1:00000000 ADCGROUP001_SetGroupBound1
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:503    .text.ADCGROUP001_ActiveGroupServiceRequestNode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:508    .text.ADCGROUP001_ActiveGroupServiceRequestNode:00000000 ADCGROUP001_ActiveGroupServiceRequestNode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:585    .text.ADCGROUP001_DeActiveGroupServiceRequestNode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:590    .text.ADCGROUP001_DeActiveGroupServiceRequestNode:00000000 ADCGROUP001_DeActiveGroupServiceRequestNode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:658    .text.ADCGROUP001_ActiveSharedServiceRequestNode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:663    .text.ADCGROUP001_ActiveSharedServiceRequestNode:00000000 ADCGROUP001_ActiveSharedServiceRequestNode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:742    .text.ADCGROUP001_DeActiveSharedServiceRequestNode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:747    .text.ADCGROUP001_DeActiveSharedServiceRequestNode:00000000 ADCGROUP001_DeActiveSharedServiceRequestNode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:816    .text.ADCGROUP001_EMUXStartSelection:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:821    .text.ADCGROUP001_EMUXStartSelection:00000000 ADCGROUP001_EMUXStartSelection
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:888    .text.ADCGROUP001_GetEMUXStartSelection:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:893    .text.ADCGROUP001_GetEMUXStartSelection:00000000 ADCGROUP001_GetEMUXStartSelection
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:958    .text.ADCGROUP001_SetEMUXChannelSelect:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:963    .text.ADCGROUP001_SetEMUXChannelSelect:00000000 ADCGROUP001_SetEMUXChannelSelect
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1031   .text.ADCGROUP001_SetEMUXMode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1036   .text.ADCGROUP001_SetEMUXMode:00000000 ADCGROUP001_SetEMUXMode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1115   .text.ADCGROUP001_SetEMUXCodeScheme:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1120   .text.ADCGROUP001_SetEMUXCodeScheme:00000000 ADCGROUP001_SetEMUXCodeScheme
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1202   .text.ADCGROUP001_SetGroupClass0SampleTime:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1207   .text.ADCGROUP001_SetGroupClass0SampleTime:00000000 ADCGROUP001_SetGroupClass0SampleTime
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1274   .text.ADCGROUP001_SetGroupClass1SampleTime:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1279   .text.ADCGROUP001_SetGroupClass1SampleTime:00000000 ADCGROUP001_SetGroupClass1SampleTime
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1346   .text.ADCGROUP001_SetGroupClass0EmuxSampleTime:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1351   .text.ADCGROUP001_SetGroupClass0EmuxSampleTime:00000000 ADCGROUP001_SetGroupClass0EmuxSampleTime
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1419   .text.ADCGROUP001_SetGroupClass1EmuxSampleTime:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1424   .text.ADCGROUP001_SetGroupClass1EmuxSampleTime:00000000 ADCGROUP001_SetGroupClass1EmuxSampleTime
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1492   .text.ADCGROUP001_SetGroupClass0ConvMode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1497   .text.ADCGROUP001_SetGroupClass0ConvMode:00000000 ADCGROUP001_SetGroupClass0ConvMode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1570   .text.ADCGROUP001_SetGroupClass1ConvMode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1575   .text.ADCGROUP001_SetGroupClass1ConvMode:00000000 ADCGROUP001_SetGroupClass1ConvMode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1648   .text.ADCGROUP001_SetGroupClass0EmuxConvMode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1653   .text.ADCGROUP001_SetGroupClass0EmuxConvMode:00000000 ADCGROUP001_SetGroupClass0EmuxConvMode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1726   .text.ADCGROUP001_SetGroupClass1EmuxConvMode:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1731   .text.ADCGROUP001_SetGroupClass1EmuxConvMode:00000000 ADCGROUP001_SetGroupClass1EmuxConvMode
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1804   .text.ADCGROUP001_SetEMUXSampleTimeControl:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccHwKpoV.s:1809   .text.ADCGROUP001_SetEMUXSampleTimeControl:00000000 ADCGROUP001_SetEMUXSampleTimeControl
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1791a5ae2e936ca1033c1c44be394cc7
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.55.0006b5fda1d606516f2dcaf4aca92b11
                           .group:00000000 wm4.MULTIPLEXER.h.43.4aa654be3ec80895f631b5281bbb9105
                           .group:00000000 wm4.CCU8PWMLIB.h.70.a5d6a5267902b8b4aea2a0224518259a
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.SYSTM001.h.63.668098b2213d40a5bd0db5fbe813cf05
                           .group:00000000 wm4.ETH002_Conf.h.56.5bd2b085b66f43d51abd69396be7f35f
                           .group:00000000 wm4.EthernetPHY.h.54.7af1709186b21e62a5f1d4049da3988b
                           .group:00000000 wm4.ETH001_Conf.h.71.1e151af1ba54dd023e1f942bdf922819
                           .group:00000000 wm4.synopGMAC_plat.h.78.7a90e072b497857344aea4ba1e994097
                           .group:00000000 wm4.synopGMAC_stack_interface.h.73.6be6aaee0ac6637432f4d0589044479b
                           .group:00000000 wm4.SynopGMAC_Dev.h.72.7c89c07cf666d37f5c9b615720d5e111
                           .group:00000000 wm4.synopGMAC_network_interface.h.73.4dd08316a11bc43c8c4a9da15277fb0f
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.ETH004_Conf.h.56.564c3f309c32b3c742fc91049cf66940
                           .group:00000000 wm4.lwipopts.h.73.a7a63bda1e8216abd1d90275eaaa0027
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.b213c7fd77614ebc3691cef18ad2ff22
                           .group:00000000 wm4.cc.h.66.ec134211c658dcc89de4610e4e7bab46
                           .group:00000000 wm4.arch.h.47.5153c52bfb94ee3b37299920afab6afd
                           .group:00000000 wm4.debug.h.43.557ecd6c90cc70b375bb8a29118be47b
                           .group:00000000 wm4.opt.h.94.d36882acafebb8726bce646fc8b2397b
                           .group:00000000 wm4.err.h.52.37c5d17538f8e8347a9c84196701e92d
                           .group:00000000 wm4.pbuf.h.43.e9a1ad12b97478787a109e22d5306820
                           .group:00000000 wm4.inet.h.46.b516065779826845d16d49f513869a2b
                           .group:00000000 wm4.ip_addr.h.79.9a0ce887ca8c88c22ad7686bcb5105df
                           .group:00000000 wm4.sys.h.65.4a0cd87b9e0d8bb4cd6b30e939b2ca7e
                           .group:00000000 wm4.mem.h.96.20770766e6c9e6c42af6bfa95ef5c63f
                           .group:00000000 wm4.def.h.33.049f911dab26023a266ed46ced0ce4bc
                           .group:00000000 wm4.netif.h.53.c13431a64f0e73a26710e71455725e84
                           .group:00000000 wm4.ip.h.48.ad46847692d4d729760949b27e48a442
                           .group:00000000 wm4.icmp.h.44.450dbf91f594cc26ad19d086cdc83713
                           .group:00000000 wm4.tcp.h.55.5c30b9432fa60afaa85cbdd225b0c683
                           .group:00000000 wm4.udp.h.48.1a8dde095cd0a13580afaba1443e5a3f
                           .group:00000000 wm4.SDMMC003_Conf.h.50.e707c07613fb4e6f2eaec982a892429d
                           .group:00000000 wm4.SDMMC003.h.85.b66055f6032a052f5173e3d123f9c61e
                           .group:00000000 wm4.SDMMC001.h.50.3e2fedc7e5ace33db4121d5cc027e8a4
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.diskio.h.7.93a3c8131d08770c060b04d2180fd09a
                           .group:00000000 wm4.diskio.h.42.a863614abe78d56d18ed7cb292d0028d
                           .group:00000000 wm4.ffconf.h.57.4ab321a2116d35ff7f28236ac31fad7c
                           .group:00000000 wm4.ff.h.82.8f05a37d35a49dba2681a7f047fee4ee
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.LMM001.h.42.c21fe9cbedc336738c3dc89405cad216
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.100.69cb08672bc6ab3f052aa9d5bd6dc5ca
                           .group:00000000 wm4._default_fcntl.h.6.d036cf640d0f9a06bcff1be55acd66be
                           .group:00000000 wm4.stat.h.2.a761b02482a54847ff0d09dfcff24a5c
                           .group:00000000 wm4.fcntl.h.9.9336f33d7f5028f694c75e6e224e0cf7
                           .group:00000000 wm4.SLTHA001.h.97.d7e87c19a31e3244bdd5839e7cc42a61
                           .group:00000000 wm4.WEBSERVER001_Conf.h.54.cd6d29aaa96a848cbc5321bab5d6cd90
                           .group:00000000 wm4.ADCGROUP001.h.48.081c7f952eb4b6ea2df7d05180ee1663
                           .group:00000000 wm4.IO001.h.49.1da965fb490206cf7cde64a90f6912e1
                           .group:00000000 wm4.MOTORLIBS.h.59.b2e97de0df555dedfa51e24447b57ab8
                           .group:00000000 wm4.uc_id.h.35.a6c4837fad81477ba31967683332b8cc
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.c5c972f6f634bc5116c171852aaab668
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9

UNDEFINED SYMBOLS
ADCGLOB001_Init
ADCGROUP001_Handle0
ADCGLOB001_StartUpCalibrationInit
