   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"ip_frag.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.bss
  20              		.align	2
  21              	reassdatagrams:
  22 0000 00000000 		.space	4
  23              		.align	1
  24              	ip_reass_pbufcount:
  25 0004 0000     		.space	2
  26              		.section	.text.ip_reass_tmr,"ax",%progbits
  27              		.align	2
  28              		.global	ip_reass_tmr
  29              		.thumb
  30              		.thumb_func
  32              	ip_reass_tmr:
  33              	.LFB0:
  34              		.file 1 "../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c"
   1:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
   2:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @file
   3:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * This is the IPv4 packet segmentation and reassembly implementation.
   4:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
   5:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
   6:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
   7:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /*
   8:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
   9:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * All rights reserved. 
  10:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * 
  11:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Redistribution and use in source and binary forms, with or without modification, 
  12:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * are permitted provided that the following conditions are met:
  13:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
  14:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  15:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *    this list of conditions and the following disclaimer.
  16:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  17:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *    this list of conditions and the following disclaimer in the documentation
  18:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *    and/or other materials provided with the distribution.
  19:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * 3. The name of the author may not be used to endorse or promote products
  20:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *    derived from this software without specific prior written permission. 
  21:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
  22:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED 
  23:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  24:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
  25:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
  26:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
  27:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
  28:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
  29:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
  30:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY 
  31:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * OF SUCH DAMAGE.
  32:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
  33:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * This file is part of the lwIP TCP/IP stack.
  34:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * 
  35:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Author: Jani Monoses <jani@iv.ro> 
  36:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *         Simon Goldschmidt
  37:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * original reassembly code by Adam Dunkels <adam@sics.se>
  38:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * 
  39:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
  40:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
  41:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/opt.h"
  42:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/ip_frag.h"
  43:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/ip.h"
  44:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/inet.h"
  45:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/inet_chksum.h"
  46:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/netif.h"
  47:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/snmp.h"
  48:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/stats.h"
  49:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include "lwip/icmp.h"
  50:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
  51:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #include <string.h>
  52:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
  53:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASSEMBLY
  54:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
  55:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * The IP reassembly code currently has the following limitations:
  56:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * - IP header options are not supported
  57:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * - fragments must not overlap (e.g. due to different routes),
  58:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *   currently, overlapping or duplicate fragments are thrown away
  59:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *   if IP_REASS_CHECK_OVERLAP=1 (the default)!
  60:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
  61:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @todo: work with IP header options
  62:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
  63:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
  64:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /** Setting this to 0, you can turn off checking the fragments for overlapping
  65:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * regions. The code gets a little smaller. Only use this if you know that
  66:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * overlapping won't occur on your network! */
  67:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #ifndef IP_REASS_CHECK_OVERLAP
  68:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #define IP_REASS_CHECK_OVERLAP 1
  69:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
  70:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
  71:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /** Set to 0 to prevent freeing the oldest datagram when the reassembly buffer is
  72:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * full (IP_REASS_MAX_PBUFS pbufs are enqueued). The code gets a little smaller.
  73:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Datagrams will be freed by timeout only. Especially useful when MEMP_NUM_REASSDATA
  74:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * is set to 1, so one datagram can be reassembled at a time, only. */
  75:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #ifndef IP_REASS_FREE_OLDEST
  76:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #define IP_REASS_FREE_OLDEST 1
  77:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_FREE_OLDEST */
  78:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
  79:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #define IP_REASS_FLAG_LASTFRAG 0x01
  80:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
  81:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /** This is a helper struct which holds the starting
  82:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * offset and the ending offset of this fragment to
  83:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * easily chain the fragments.
  84:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * It has to be packed since it has to fit inside the IP header.
  85:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
  86:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #ifdef PACK_STRUCT_USE_INCLUDES
  87:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #  include "arch/bpstruct.h"
  88:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif
  89:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** PACK_STRUCT_BEGIN
  90:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** struct ip_reass_helper {
  91:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   PACK_STRUCT_FIELD(struct pbuf *next_pbuf);
  92:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   PACK_STRUCT_FIELD(u16_t start);
  93:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   PACK_STRUCT_FIELD(u16_t end);
  94:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** } PACK_STRUCT_STRUCT;
  95:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** PACK_STRUCT_END
  96:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #ifdef PACK_STRUCT_USE_INCLUDES
  97:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #  include "arch/epstruct.h"
  98:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif
  99:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 100:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #define IP_ADDRESSES_AND_ID_MATCH(iphdrA, iphdrB)  \
 101:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   (ip_addr_cmp(&(iphdrA)->src, &(iphdrB)->src) && \
 102:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    ip_addr_cmp(&(iphdrA)->dest, &(iphdrB)->dest) && \
 103:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    IPH_ID(iphdrA) == IPH_ID(iphdrB)) ? 1 : 0
 104:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 105:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /* global variables */
 106:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static struct ip_reassdata *reassdatagrams;
 107:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static u16_t ip_reass_pbufcount;
 108:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 109:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /* function prototypes */
 110:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static void ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev);
 111:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static int ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev);
 112:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 113:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
 114:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Reassembly timer base function
 115:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * for both NO_SYS == 0 and 1 (!).
 116:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
 117:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 118:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
 119:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** void
 120:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** ip_reass_tmr(void)
 121:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** {
  35              		.loc 1 121 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 16
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              	.LCFI0:
  41              		.cfi_def_cfa_offset 8
  42              		.cfi_offset 7, -8
  43              		.cfi_offset 14, -4
  44 0002 84B0     		sub	sp, sp, #16
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 24
  47 0004 00AF     		add	r7, sp, #0
  48              	.LCFI2:
  49              		.cfi_def_cfa_register 7
 122:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_reassdata *r, *prev = NULL;
  50              		.loc 1 122 0
  51 0006 4FF00003 		mov	r3, #0
  52 000a BB60     		str	r3, [r7, #8]
 123:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 124:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   r = reassdatagrams;
  53              		.loc 1 124 0
  54 000c 40F20003 		movw	r3, #:lower16:reassdatagrams
  55 0010 C0F20003 		movt	r3, #:upper16:reassdatagrams
  56 0014 1B68     		ldr	r3, [r3, #0]
  57 0016 FB60     		str	r3, [r7, #12]
 125:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   while (r != NULL) {
  58              		.loc 1 125 0
  59 0018 19E0     		b	.L2
  60              	.L4:
 126:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Decrement the timer. Once it reaches 0,
 127:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * clean up the incomplete fragment assembly */
 128:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (r->timer > 0) {
  61              		.loc 1 128 0
  62 001a FB68     		ldr	r3, [r7, #12]
  63 001c DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
  64 001e 002B     		cmp	r3, #0
  65 0020 0CD0     		beq	.L3
 129:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       r->timer--;
  66              		.loc 1 129 0
  67 0022 FB68     		ldr	r3, [r7, #12]
  68 0024 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
  69 0026 03F1FF33 		add	r3, r3, #-1
  70 002a DAB2     		uxtb	r2, r3
  71 002c FB68     		ldr	r3, [r7, #12]
  72 002e DA77     		strb	r2, [r3, #31]
 130:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
 131:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       prev = r;
  73              		.loc 1 131 0
  74 0030 FB68     		ldr	r3, [r7, #12]
  75 0032 BB60     		str	r3, [r7, #8]
 132:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       r = r->next;
  76              		.loc 1 132 0
  77 0034 FB68     		ldr	r3, [r7, #12]
  78 0036 1B68     		ldr	r3, [r3, #0]
  79 0038 FB60     		str	r3, [r7, #12]
  80 003a 08E0     		b	.L2
  81              	.L3:
  82              	.LBB2:
 133:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     } else {
 134:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* reassembly timed out */
 135:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       struct ip_reassdata *tmp;
 136:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
 137:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       tmp = r;
  83              		.loc 1 137 0
  84 003c FB68     		ldr	r3, [r7, #12]
  85 003e 7B60     		str	r3, [r7, #4]
 138:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* get the next pointer before freeing */
 139:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       r = r->next;
  86              		.loc 1 139 0
  87 0040 FB68     		ldr	r3, [r7, #12]
  88 0042 1B68     		ldr	r3, [r3, #0]
  89 0044 FB60     		str	r3, [r7, #12]
 140:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* free the helper struct and all enqueued pbufs */
 141:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       ip_reass_free_complete_datagram(tmp, prev);
  90              		.loc 1 141 0
  91 0046 7868     		ldr	r0, [r7, #4]
  92 0048 B968     		ldr	r1, [r7, #8]
  93 004a FFF7FEFF 		bl	ip_reass_free_complete_datagram
  94              	.L2:
  95              	.LBE2:
 125:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   while (r != NULL) {
  96              		.loc 1 125 0 discriminator 1
  97 004e FB68     		ldr	r3, [r7, #12]
  98 0050 002B     		cmp	r3, #0
  99 0052 E2D1     		bne	.L4
 142:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      }
 143:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    }
 144:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** }
 100              		.loc 1 144 0
 101 0054 07F11007 		add	r7, r7, #16
 102 0058 BD46     		mov	sp, r7
 103 005a 80BD     		pop	{r7, pc}
 104              		.cfi_endproc
 105              	.LFE0:
 107              		.section	.text.ip_reass_free_complete_datagram,"ax",%progbits
 108              		.align	2
 109              		.thumb
 110              		.thumb_func
 112              	ip_reass_free_complete_datagram:
 113              	.LFB1:
 145:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 146:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
 147:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Free a datagram (struct ip_reassdata) and all its pbufs.
 148:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Updates the total count of enqueued pbufs (ip_reass_pbufcount),
 149:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * SNMP counters and sends an ICMP time exceeded packet.
 150:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
 151:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param ipr datagram to free
 152:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param prev the previous datagram in the linked list
 153:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @return the number of pbufs freed
 154:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
 155:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static int
 156:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
 157:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** {
 114              		.loc 1 157 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 24
 117              		@ frame_needed = 1, uses_anonymous_args = 0
 118 0000 80B5     		push	{r7, lr}
 119              	.LCFI3:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 7, -8
 122              		.cfi_offset 14, -4
 123 0002 86B0     		sub	sp, sp, #24
 124              	.LCFI4:
 125              		.cfi_def_cfa_offset 32
 126 0004 00AF     		add	r7, sp, #0
 127              	.LCFI5:
 128              		.cfi_def_cfa_register 7
 129 0006 7860     		str	r0, [r7, #4]
 130 0008 3960     		str	r1, [r7, #0]
 158:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   int pbufs_freed = 0;
 131              		.loc 1 158 0
 132 000a 4FF00003 		mov	r3, #0
 133 000e 7B61     		str	r3, [r7, #20]
 159:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct pbuf *p;
 160:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_reass_helper *iprh;
 161:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 162:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   LWIP_ASSERT("prev != ipr", prev != ipr);
 163:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if (prev != NULL) {
 134              		.loc 1 163 0
 135 0010 3B68     		ldr	r3, [r7, #0]
 136 0012 002B     		cmp	r3, #0
 164:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 165:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 166:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 167:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   snmp_inc_ipreasmfails();
 168:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if LWIP_ICMP
 169:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   iprh = (struct ip_reass_helper *)ipr->p->payload;
 137              		.loc 1 169 0
 138 0014 7B68     		ldr	r3, [r7, #4]
 139 0016 5B68     		ldr	r3, [r3, #4]
 140 0018 5B68     		ldr	r3, [r3, #4]
 141 001a FB60     		str	r3, [r7, #12]
 170:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if (iprh->start == 0) {
 142              		.loc 1 170 0
 143 001c FB68     		ldr	r3, [r7, #12]
 144 001e 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 145 0020 9BB2     		uxth	r3, r3
 146 0022 002B     		cmp	r3, #0
 147 0024 20D1     		bne	.L7
 171:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* The first fragment was received, send ICMP time exceeded. */
 172:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* First, de-queue the first pbuf from r->p. */
 173:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     p = ipr->p;
 148              		.loc 1 173 0
 149 0026 7B68     		ldr	r3, [r7, #4]
 150 0028 5B68     		ldr	r3, [r3, #4]
 151 002a 3B61     		str	r3, [r7, #16]
 174:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ipr->p = iprh->next_pbuf;
 152              		.loc 1 174 0
 153 002c FB68     		ldr	r3, [r7, #12]
 154 002e 1A68     		ldr	r2, [r3, #0]	@ unaligned
 155 0030 7B68     		ldr	r3, [r7, #4]
 156 0032 5A60     		str	r2, [r3, #4]
 175:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Then, copy the original header into it. */
 176:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 157              		.loc 1 176 0
 158 0034 3B69     		ldr	r3, [r7, #16]
 159 0036 5A68     		ldr	r2, [r3, #4]
 160 0038 7B68     		ldr	r3, [r7, #4]
 161 003a 03F10803 		add	r3, r3, #8
 162 003e 1046     		mov	r0, r2
 163 0040 1946     		mov	r1, r3
 164 0042 4FF01402 		mov	r2, #20
 165 0046 FFF7FEFF 		bl	memcpy
 177:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     icmp_time_exceeded(p, ICMP_TE_FRAG);
 166              		.loc 1 177 0
 167 004a 3869     		ldr	r0, [r7, #16]
 168 004c 4FF00101 		mov	r1, #1
 169 0050 FFF7FEFF 		bl	icmp_time_exceeded
 178:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     pbufs_freed += pbuf_clen(p);
 170              		.loc 1 178 0
 171 0054 3869     		ldr	r0, [r7, #16]
 172 0056 FFF7FEFF 		bl	pbuf_clen
 173 005a 0346     		mov	r3, r0
 174 005c 7A69     		ldr	r2, [r7, #20]
 175 005e D318     		adds	r3, r2, r3
 176 0060 7B61     		str	r3, [r7, #20]
 179:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     pbuf_free(p);
 177              		.loc 1 179 0
 178 0062 3869     		ldr	r0, [r7, #16]
 179 0064 FFF7FEFF 		bl	pbuf_free
 180              	.L7:
 180:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 181:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* LWIP_ICMP */
 182:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 183:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* First, free all received pbufs.  The individual pbufs need to be released 
 184:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      separately as they have not yet been chained */
 185:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   p = ipr->p;
 181              		.loc 1 185 0
 182 0068 7B68     		ldr	r3, [r7, #4]
 183 006a 5B68     		ldr	r3, [r3, #4]
 184 006c 3B61     		str	r3, [r7, #16]
 186:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   while (p != NULL) {
 185              		.loc 1 186 0
 186 006e 11E0     		b	.L8
 187              	.L9:
 188              	.LBB3:
 187:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     struct pbuf *pcur;
 188:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     iprh = (struct ip_reass_helper *)p->payload;
 189              		.loc 1 188 0
 190 0070 3B69     		ldr	r3, [r7, #16]
 191 0072 5B68     		ldr	r3, [r3, #4]
 192 0074 FB60     		str	r3, [r7, #12]
 189:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     pcur = p;
 193              		.loc 1 189 0
 194 0076 3B69     		ldr	r3, [r7, #16]
 195 0078 BB60     		str	r3, [r7, #8]
 190:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* get the next pointer before freeing */
 191:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     p = iprh->next_pbuf;
 196              		.loc 1 191 0
 197 007a FB68     		ldr	r3, [r7, #12]
 198 007c 1B68     		ldr	r3, [r3, #0]	@ unaligned
 199 007e 3B61     		str	r3, [r7, #16]
 192:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     pbufs_freed += pbuf_clen(pcur);
 200              		.loc 1 192 0
 201 0080 B868     		ldr	r0, [r7, #8]
 202 0082 FFF7FEFF 		bl	pbuf_clen
 203 0086 0346     		mov	r3, r0
 204 0088 7A69     		ldr	r2, [r7, #20]
 205 008a D318     		adds	r3, r2, r3
 206 008c 7B61     		str	r3, [r7, #20]
 193:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     pbuf_free(pcur);    
 207              		.loc 1 193 0
 208 008e B868     		ldr	r0, [r7, #8]
 209 0090 FFF7FEFF 		bl	pbuf_free
 210              	.L8:
 211              	.LBE3:
 186:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   while (p != NULL) {
 212              		.loc 1 186 0 discriminator 1
 213 0094 3B69     		ldr	r3, [r7, #16]
 214 0096 002B     		cmp	r3, #0
 215 0098 EAD1     		bne	.L9
 194:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 195:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Then, unchain the struct ip_reassdata from the list and free it. */
 196:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   ip_reass_dequeue_datagram(ipr, prev);
 216              		.loc 1 196 0
 217 009a 7868     		ldr	r0, [r7, #4]
 218 009c 3968     		ldr	r1, [r7, #0]
 219 009e FFF7FEFF 		bl	ip_reass_dequeue_datagram
 197:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 198:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   ip_reass_pbufcount -= pbufs_freed;
 220              		.loc 1 198 0
 221 00a2 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 222 00a6 C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 223 00aa 1A88     		ldrh	r2, [r3, #0]
 224 00ac 7B69     		ldr	r3, [r7, #20]
 225 00ae 9BB2     		uxth	r3, r3
 226 00b0 D31A     		subs	r3, r2, r3
 227 00b2 9AB2     		uxth	r2, r3
 228 00b4 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 229 00b8 C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 230 00bc 1A80     		strh	r2, [r3, #0]	@ movhi
 199:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 200:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   return pbufs_freed;
 231              		.loc 1 200 0
 232 00be 7B69     		ldr	r3, [r7, #20]
 201:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** }
 233              		.loc 1 201 0
 234 00c0 1846     		mov	r0, r3
 235 00c2 07F11807 		add	r7, r7, #24
 236 00c6 BD46     		mov	sp, r7
 237 00c8 80BD     		pop	{r7, pc}
 238              		.cfi_endproc
 239              	.LFE1:
 241 00ca 00BF     		.section	.text.ip_reass_remove_oldest_datagram,"ax",%progbits
 242              		.align	2
 243              		.thumb
 244              		.thumb_func
 246              	ip_reass_remove_oldest_datagram:
 247              	.LFB2:
 202:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 203:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASS_FREE_OLDEST
 204:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
 205:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Free the oldest datagram to make room for enqueueing new fragments.
 206:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * The datagram 'fraghdr' belongs to is not freed!
 207:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
 208:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param fraghdr IP header of the current fragment
 209:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param pbufs_needed number of pbufs needed to enqueue
 210:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *        (used for freeing other datagrams if not enough space)
 211:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @return the number of pbufs freed
 212:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
 213:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static int
 214:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
 215:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** {
 248              		.loc 1 215 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 32
 251              		@ frame_needed = 1, uses_anonymous_args = 0
 252 0000 80B5     		push	{r7, lr}
 253              	.LCFI6:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 7, -8
 256              		.cfi_offset 14, -4
 257 0002 88B0     		sub	sp, sp, #32
 258              	.LCFI7:
 259              		.cfi_def_cfa_offset 40
 260 0004 00AF     		add	r7, sp, #0
 261              	.LCFI8:
 262              		.cfi_def_cfa_register 7
 263 0006 7860     		str	r0, [r7, #4]
 264 0008 3960     		str	r1, [r7, #0]
 216:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* @todo Can't we simply remove the last datagram in the
 217:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    *       linked list behind reassdatagrams?
 218:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    */
 219:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_reassdata *r, *oldest, *prev;
 220:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   int pbufs_freed = 0, pbufs_freed_current;
 265              		.loc 1 220 0
 266 000a 4FF00003 		mov	r3, #0
 267 000e 3B61     		str	r3, [r7, #16]
 268              	.L20:
 221:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   int other_datagrams;
 222:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 223:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
 224:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    * but don't free the datagram that 'fraghdr' belongs to! */
 225:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   do {
 226:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     oldest = NULL;
 269              		.loc 1 226 0
 270 0010 4FF00003 		mov	r3, #0
 271 0014 BB61     		str	r3, [r7, #24]
 227:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     prev = NULL;
 272              		.loc 1 227 0
 273 0016 4FF00003 		mov	r3, #0
 274 001a 7B61     		str	r3, [r7, #20]
 228:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     other_datagrams = 0;
 275              		.loc 1 228 0
 276 001c 4FF00003 		mov	r3, #0
 277 0020 FB60     		str	r3, [r7, #12]
 229:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     r = reassdatagrams;
 278              		.loc 1 229 0
 279 0022 40F20003 		movw	r3, #:lower16:reassdatagrams
 280 0026 C0F20003 		movt	r3, #:upper16:reassdatagrams
 281 002a 1B68     		ldr	r3, [r3, #0]
 282 002c FB61     		str	r3, [r7, #28]
 230:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     while (r != NULL) {
 283              		.loc 1 230 0
 284 002e 2DE0     		b	.L12
 285              	.L17:
 231:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 286              		.loc 1 231 0
 287 0030 FB69     		ldr	r3, [r7, #28]
 288 0032 5A69     		ldr	r2, [r3, #20]
 289 0034 7B68     		ldr	r3, [r7, #4]
 290 0036 DB68     		ldr	r3, [r3, #12]	@ unaligned
 291 0038 9A42     		cmp	r2, r3
 292 003a 0CD1     		bne	.L13
 293              		.loc 1 231 0 is_stmt 0 discriminator 1
 294 003c FB69     		ldr	r3, [r7, #28]
 295 003e 9A69     		ldr	r2, [r3, #24]
 296 0040 7B68     		ldr	r3, [r7, #4]
 297 0042 1B69     		ldr	r3, [r3, #16]	@ unaligned
 298 0044 9A42     		cmp	r2, r3
 299 0046 06D1     		bne	.L13
 300 0048 FB69     		ldr	r3, [r7, #28]
 301 004a 9A89     		ldrh	r2, [r3, #12]
 302 004c 7B68     		ldr	r3, [r7, #4]
 303 004e 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 304 0050 9BB2     		uxth	r3, r3
 305 0052 9A42     		cmp	r2, r3
 306 0054 11D0     		beq	.L14
 307              	.L13:
 232:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         /* Not the same datagram as fraghdr */
 233:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         other_datagrams++;
 308              		.loc 1 233 0 is_stmt 1
 309 0056 FB68     		ldr	r3, [r7, #12]
 310 0058 03F10103 		add	r3, r3, #1
 311 005c FB60     		str	r3, [r7, #12]
 234:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         if (oldest == NULL) {
 312              		.loc 1 234 0
 313 005e BB69     		ldr	r3, [r7, #24]
 314 0060 002B     		cmp	r3, #0
 315 0062 02D1     		bne	.L15
 235:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           oldest = r;
 316              		.loc 1 235 0
 317 0064 FB69     		ldr	r3, [r7, #28]
 318 0066 BB61     		str	r3, [r7, #24]
 319 0068 07E0     		b	.L14
 320              	.L15:
 236:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         } else if (r->timer <= oldest->timer) {
 321              		.loc 1 236 0
 322 006a FB69     		ldr	r3, [r7, #28]
 323 006c DA7F     		ldrb	r2, [r3, #31]	@ zero_extendqisi2
 324 006e BB69     		ldr	r3, [r7, #24]
 325 0070 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 326 0072 9A42     		cmp	r2, r3
 327 0074 01D8     		bhi	.L14
 237:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           /* older than the previous oldest */
 238:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           oldest = r;
 328              		.loc 1 238 0
 329 0076 FB69     		ldr	r3, [r7, #28]
 330 0078 BB61     		str	r3, [r7, #24]
 331              	.L14:
 239:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         }
 240:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       }
 241:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (r->next != NULL) {
 332              		.loc 1 241 0
 333 007a FB69     		ldr	r3, [r7, #28]
 334 007c 1B68     		ldr	r3, [r3, #0]
 335 007e 002B     		cmp	r3, #0
 336 0080 01D0     		beq	.L16
 242:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         prev = r;
 337              		.loc 1 242 0
 338 0082 FB69     		ldr	r3, [r7, #28]
 339 0084 7B61     		str	r3, [r7, #20]
 340              	.L16:
 243:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       }
 244:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       r = r->next;
 341              		.loc 1 244 0
 342 0086 FB69     		ldr	r3, [r7, #28]
 343 0088 1B68     		ldr	r3, [r3, #0]
 344 008a FB61     		str	r3, [r7, #28]
 345              	.L12:
 230:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     while (r != NULL) {
 346              		.loc 1 230 0 discriminator 1
 347 008c FB69     		ldr	r3, [r7, #28]
 348 008e 002B     		cmp	r3, #0
 349 0090 CED1     		bne	.L17
 245:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 246:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (oldest != NULL) {
 350              		.loc 1 246 0
 351 0092 BB69     		ldr	r3, [r7, #24]
 352 0094 002B     		cmp	r3, #0
 353 0096 08D0     		beq	.L18
 247:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbufs_freed_current = ip_reass_free_complete_datagram(oldest, prev);
 354              		.loc 1 247 0
 355 0098 B869     		ldr	r0, [r7, #24]
 356 009a 7969     		ldr	r1, [r7, #20]
 357 009c FFF7FEFF 		bl	ip_reass_free_complete_datagram
 358 00a0 B860     		str	r0, [r7, #8]
 248:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbufs_freed += pbufs_freed_current;
 359              		.loc 1 248 0
 360 00a2 3A69     		ldr	r2, [r7, #16]
 361 00a4 BB68     		ldr	r3, [r7, #8]
 362 00a6 D318     		adds	r3, r2, r3
 363 00a8 3B61     		str	r3, [r7, #16]
 364              	.L18:
 249:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 250:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 365              		.loc 1 250 0
 366 00aa 3A69     		ldr	r2, [r7, #16]
 367 00ac 3B68     		ldr	r3, [r7, #0]
 368 00ae 9A42     		cmp	r2, r3
 369 00b0 02DA     		bge	.L19
 370              		.loc 1 250 0 is_stmt 0 discriminator 1
 371 00b2 FB68     		ldr	r3, [r7, #12]
 372 00b4 012B     		cmp	r3, #1
 373 00b6 ABDC     		bgt	.L20
 374              	.L19:
 251:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   return pbufs_freed;
 375              		.loc 1 251 0 is_stmt 1
 376 00b8 3B69     		ldr	r3, [r7, #16]
 252:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** }
 377              		.loc 1 252 0
 378 00ba 1846     		mov	r0, r3
 379 00bc 07F12007 		add	r7, r7, #32
 380 00c0 BD46     		mov	sp, r7
 381 00c2 80BD     		pop	{r7, pc}
 382              		.cfi_endproc
 383              	.LFE2:
 385              		.section	.text.ip_reass_enqueue_new_datagram,"ax",%progbits
 386              		.align	2
 387              		.thumb
 388              		.thumb_func
 390              	ip_reass_enqueue_new_datagram:
 391              	.LFB3:
 253:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_FREE_OLDEST */
 254:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 255:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
 256:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Enqueues a new fragment into the fragment queue
 257:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param fraghdr points to the new fragments IP hdr
 258:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough sp
 259:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @return A pointer to the queue location into which the fragment was enqueued
 260:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
 261:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static struct ip_reassdata*
 262:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
 263:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** {
 392              		.loc 1 263 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 16
 395              		@ frame_needed = 1, uses_anonymous_args = 0
 396 0000 80B5     		push	{r7, lr}
 397              	.LCFI9:
 398              		.cfi_def_cfa_offset 8
 399              		.cfi_offset 7, -8
 400              		.cfi_offset 14, -4
 401 0002 84B0     		sub	sp, sp, #16
 402              	.LCFI10:
 403              		.cfi_def_cfa_offset 24
 404 0004 00AF     		add	r7, sp, #0
 405              	.LCFI11:
 406              		.cfi_def_cfa_register 7
 407 0006 7860     		str	r0, [r7, #4]
 408 0008 3960     		str	r1, [r7, #0]
 264:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_reassdata* ipr;
 265:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* No matching previous fragment found, allocate a new reassdata struct */
 266:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   ipr = memp_malloc(MEMP_REASSDATA);
 409              		.loc 1 266 0
 410 000a 40F20003 		movw	r3, #:lower16:memp_sizes
 411 000e C0F20003 		movt	r3, #:upper16:memp_sizes
 412 0012 5B89     		ldrh	r3, [r3, #10]
 413 0014 1846     		mov	r0, r3
 414 0016 FFF7FEFF 		bl	mem_malloc
 415 001a F860     		str	r0, [r7, #12]
 267:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if (ipr == NULL) {
 416              		.loc 1 267 0
 417 001c FB68     		ldr	r3, [r7, #12]
 418 001e 002B     		cmp	r3, #0
 419 0020 16D1     		bne	.L23
 268:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASS_FREE_OLDEST
 269:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 420              		.loc 1 269 0
 421 0022 7868     		ldr	r0, [r7, #4]
 422 0024 3968     		ldr	r1, [r7, #0]
 423 0026 FFF7FEFF 		bl	ip_reass_remove_oldest_datagram
 424 002a 0246     		mov	r2, r0
 425 002c 3B68     		ldr	r3, [r7, #0]
 426 002e 9A42     		cmp	r2, r3
 427 0030 08DB     		blt	.L24
 270:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       ipr = memp_malloc(MEMP_REASSDATA);
 428              		.loc 1 270 0
 429 0032 40F20003 		movw	r3, #:lower16:memp_sizes
 430 0036 C0F20003 		movt	r3, #:upper16:memp_sizes
 431 003a 5B89     		ldrh	r3, [r3, #10]
 432 003c 1846     		mov	r0, r3
 433 003e FFF7FEFF 		bl	mem_malloc
 434 0042 F860     		str	r0, [r7, #12]
 435              	.L24:
 271:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 272:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (ipr == NULL)
 436              		.loc 1 272 0
 437 0044 FB68     		ldr	r3, [r7, #12]
 438 0046 002B     		cmp	r3, #0
 439 0048 02D1     		bne	.L23
 273:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_FREE_OLDEST */
 274:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     {
 275:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       IPFRAG_STATS_INC(ip_frag.memerr);
 276:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
 277:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       return NULL;
 440              		.loc 1 277 0
 441 004a 4FF00003 		mov	r3, #0
 442 004e 21E0     		b	.L25
 443              	.L23:
 278:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 279:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 280:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   memset(ipr, 0, sizeof(struct ip_reassdata));
 444              		.loc 1 280 0
 445 0050 F868     		ldr	r0, [r7, #12]
 446 0052 4FF00001 		mov	r1, #0
 447 0056 4FF02002 		mov	r2, #32
 448 005a FFF7FEFF 		bl	memset
 281:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   ipr->timer = IP_REASS_MAXAGE;
 449              		.loc 1 281 0
 450 005e FB68     		ldr	r3, [r7, #12]
 451 0060 4FF00302 		mov	r2, #3
 452 0064 DA77     		strb	r2, [r3, #31]
 282:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 283:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* enqueue the new structure to the front of the list */
 284:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   ipr->next = reassdatagrams;
 453              		.loc 1 284 0
 454 0066 40F20003 		movw	r3, #:lower16:reassdatagrams
 455 006a C0F20003 		movt	r3, #:upper16:reassdatagrams
 456 006e 1A68     		ldr	r2, [r3, #0]
 457 0070 FB68     		ldr	r3, [r7, #12]
 458 0072 1A60     		str	r2, [r3, #0]
 285:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   reassdatagrams = ipr;
 459              		.loc 1 285 0
 460 0074 40F20003 		movw	r3, #:lower16:reassdatagrams
 461 0078 C0F20003 		movt	r3, #:upper16:reassdatagrams
 462 007c FA68     		ldr	r2, [r7, #12]
 463 007e 1A60     		str	r2, [r3, #0]
 286:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* copy the ip header for later tests and input */
 287:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* @todo: no ip options supported? */
 288:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 464              		.loc 1 288 0
 465 0080 FB68     		ldr	r3, [r7, #12]
 466 0082 03F10803 		add	r3, r3, #8
 467 0086 1846     		mov	r0, r3
 468 0088 7968     		ldr	r1, [r7, #4]
 469 008a 4FF01402 		mov	r2, #20
 470 008e FFF7FEFF 		bl	memcpy
 289:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   return ipr;
 471              		.loc 1 289 0
 472 0092 FB68     		ldr	r3, [r7, #12]
 473              	.L25:
 290:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** }
 474              		.loc 1 290 0
 475 0094 1846     		mov	r0, r3
 476 0096 07F11007 		add	r7, r7, #16
 477 009a BD46     		mov	sp, r7
 478 009c 80BD     		pop	{r7, pc}
 479              		.cfi_endproc
 480              	.LFE3:
 482 009e 00BF     		.section	.text.ip_reass_dequeue_datagram,"ax",%progbits
 483              		.align	2
 484              		.thumb
 485              		.thumb_func
 487              	ip_reass_dequeue_datagram:
 488              	.LFB4:
 291:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 292:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
 293:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 294:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param ipr points to the queue entry to dequeue
 295:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
 296:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static void
 297:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
 298:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** {
 489              		.loc 1 298 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 8
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493 0000 80B5     		push	{r7, lr}
 494              	.LCFI12:
 495              		.cfi_def_cfa_offset 8
 496              		.cfi_offset 7, -8
 497              		.cfi_offset 14, -4
 498 0002 82B0     		sub	sp, sp, #8
 499              	.LCFI13:
 500              		.cfi_def_cfa_offset 16
 501 0004 00AF     		add	r7, sp, #0
 502              	.LCFI14:
 503              		.cfi_def_cfa_register 7
 504 0006 7860     		str	r0, [r7, #4]
 505 0008 3960     		str	r1, [r7, #0]
 299:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   
 300:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* dequeue the reass struct  */
 301:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if (reassdatagrams == ipr) {
 506              		.loc 1 301 0
 507 000a 40F20003 		movw	r3, #:lower16:reassdatagrams
 508 000e C0F20003 		movt	r3, #:upper16:reassdatagrams
 509 0012 1A68     		ldr	r2, [r3, #0]
 510 0014 7B68     		ldr	r3, [r7, #4]
 511 0016 9A42     		cmp	r2, r3
 512 0018 07D1     		bne	.L27
 302:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* it was the first in the list */
 303:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     reassdatagrams = ipr->next;
 513              		.loc 1 303 0
 514 001a 7B68     		ldr	r3, [r7, #4]
 515 001c 1A68     		ldr	r2, [r3, #0]
 516 001e 40F20003 		movw	r3, #:lower16:reassdatagrams
 517 0022 C0F20003 		movt	r3, #:upper16:reassdatagrams
 518 0026 1A60     		str	r2, [r3, #0]
 519 0028 03E0     		b	.L28
 520              	.L27:
 304:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   } else {
 305:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* it wasn't the first, so it must have a valid 'prev' */
 306:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     LWIP_ASSERT("sanity check linked list", prev != NULL);
 307:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     prev->next = ipr->next;
 521              		.loc 1 307 0
 522 002a 7B68     		ldr	r3, [r7, #4]
 523 002c 1A68     		ldr	r2, [r3, #0]
 524 002e 3B68     		ldr	r3, [r7, #0]
 525 0030 1A60     		str	r2, [r3, #0]
 526              	.L28:
 308:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 309:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 310:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* now we can free the ip_reass struct */
 311:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   memp_free(MEMP_REASSDATA, ipr);
 527              		.loc 1 311 0
 528 0032 7868     		ldr	r0, [r7, #4]
 529 0034 FFF7FEFF 		bl	mem_free
 312:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** }
 530              		.loc 1 312 0
 531 0038 07F10807 		add	r7, r7, #8
 532 003c BD46     		mov	sp, r7
 533 003e 80BD     		pop	{r7, pc}
 534              		.cfi_endproc
 535              	.LFE4:
 537              		.section	.text.ip_reass_chain_frag_into_datagram_and_validate,"ax",%progbits
 538              		.align	2
 539              		.thumb
 540              		.thumb_func
 542              	ip_reass_chain_frag_into_datagram_and_validate:
 543              	.LFB5:
 313:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 314:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
 315:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Chain a new pbuf into the pbuf list that composes the datagram.  The pbuf list
 316:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * will grow over time as  new pbufs are rx.
 317:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Also checks that the datagram passes basic continuity checks (if the last
 318:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * fragment was received at least once).
 319:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param root_p points to the 'root' pbuf for the current datagram being assembled.
 320:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param new_p points to the pbuf for the current fragment
 321:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @return 0 if invalid, >0 otherwise
 322:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
 323:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static int
 324:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p)
 325:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** {
 544              		.loc 1 325 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 40
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548 0000 90B5     		push	{r4, r7, lr}
 549              	.LCFI15:
 550              		.cfi_def_cfa_offset 12
 551              		.cfi_offset 4, -12
 552              		.cfi_offset 7, -8
 553              		.cfi_offset 14, -4
 554 0002 8BB0     		sub	sp, sp, #44
 555              	.LCFI16:
 556              		.cfi_def_cfa_offset 56
 557 0004 00AF     		add	r7, sp, #0
 558              	.LCFI17:
 559              		.cfi_def_cfa_register 7
 560 0006 7860     		str	r0, [r7, #4]
 561 0008 3960     		str	r1, [r7, #0]
 326:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 562              		.loc 1 326 0
 563 000a 4FF00003 		mov	r3, #0
 564 000e 3B62     		str	r3, [r7, #32]
 327:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct pbuf *q;
 328:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t offset,len;
 329:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_hdr *fraghdr;
 330:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   int valid = 1;
 565              		.loc 1 330 0
 566 0010 4FF00103 		mov	r3, #1
 567 0014 BB61     		str	r3, [r7, #24]
 331:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 332:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Extract length and fragment offset from current fragment */
 333:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   fraghdr = (struct ip_hdr*)new_p->payload; 
 568              		.loc 1 333 0
 569 0016 3B68     		ldr	r3, [r7, #0]
 570 0018 5B68     		ldr	r3, [r3, #4]
 571 001a 7B61     		str	r3, [r7, #20]
 334:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 572              		.loc 1 334 0
 573 001c 7B69     		ldr	r3, [r7, #20]
 574 001e 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 575 0020 9BB2     		uxth	r3, r3
 576 0022 1846     		mov	r0, r3
 577 0024 FFF7FEFF 		bl	ntohs
 578 0028 0346     		mov	r3, r0
 579 002a 1C46     		mov	r4, r3
 580 002c 7B69     		ldr	r3, [r7, #20]
 581 002e 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 582 0030 9BB2     		uxth	r3, r3
 583 0032 1846     		mov	r0, r3
 584 0034 FFF7FEFF 		bl	ntohs
 585 0038 0346     		mov	r3, r0
 586 003a 4FEA1323 		lsr	r3, r3, #8
 587 003e 9BB2     		uxth	r3, r3
 588 0040 03F00F03 		and	r3, r3, #15
 589 0044 9BB2     		uxth	r3, r3
 590 0046 1A46     		mov	r2, r3	@ movhi
 591 0048 4FEA8232 		lsl	r2, r2, #14
 592 004c D31A     		subs	r3, r2, r3
 593 004e 4FEA8303 		lsl	r3, r3, #2
 594 0052 9BB2     		uxth	r3, r3
 595 0054 E318     		adds	r3, r4, r3
 596 0056 7B82     		strh	r3, [r7, #18]	@ movhi
 335:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 597              		.loc 1 335 0
 598 0058 7B69     		ldr	r3, [r7, #20]
 599 005a DB88     		ldrh	r3, [r3, #6]	@ unaligned
 600 005c 9BB2     		uxth	r3, r3
 601 005e 1846     		mov	r0, r3
 602 0060 FFF7FEFF 		bl	ntohs
 603 0064 0346     		mov	r3, r0
 604 0066 4FEAC343 		lsl	r3, r3, #19
 605 006a 4FEAD343 		lsr	r3, r3, #19
 606 006e 9BB2     		uxth	r3, r3
 607 0070 4FEAC303 		lsl	r3, r3, #3
 608 0074 3B82     		strh	r3, [r7, #16]	@ movhi
 336:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 337:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* overwrite the fragment's ip header from the pbuf with our helper struct,
 338:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    * and setup the embedded helper structure. */
 339:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* make sure the struct ip_reass_helper fits into the IP header */
 340:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
 341:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****               sizeof(struct ip_reass_helper) <= IP_HLEN);
 342:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   iprh = (struct ip_reass_helper*)new_p->payload;
 609              		.loc 1 342 0
 610 0076 3B68     		ldr	r3, [r7, #0]
 611 0078 5B68     		ldr	r3, [r3, #4]
 612 007a 7B62     		str	r3, [r7, #36]
 343:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   iprh->next_pbuf = NULL;
 613              		.loc 1 343 0
 614 007c 7B6A     		ldr	r3, [r7, #36]
 615 007e 4FF00002 		mov	r2, #0
 616 0082 1A70     		strb	r2, [r3, #0]
 617 0084 4FF00002 		mov	r2, #0
 618 0088 5A70     		strb	r2, [r3, #1]
 619 008a 4FF00002 		mov	r2, #0
 620 008e 9A70     		strb	r2, [r3, #2]
 621 0090 4FF00002 		mov	r2, #0
 622 0094 DA70     		strb	r2, [r3, #3]
 344:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   iprh->start = offset;
 623              		.loc 1 344 0
 624 0096 7B6A     		ldr	r3, [r7, #36]
 625 0098 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 626 009a 9A80     		strh	r2, [r3, #4]	@ unaligned
 345:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   iprh->end = offset + len;
 627              		.loc 1 345 0
 628 009c 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 629 009e 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 630 00a0 D318     		adds	r3, r2, r3
 631 00a2 9AB2     		uxth	r2, r3
 632 00a4 7B6A     		ldr	r3, [r7, #36]
 633 00a6 DA80     		strh	r2, [r3, #6]	@ unaligned
 346:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 347:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Iterate through until we either get to the end of the list (append),
 348:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    * or we find on with a larger offset (insert). */
 349:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   for (q = ipr->p; q != NULL;) {
 634              		.loc 1 349 0
 635 00a8 7B68     		ldr	r3, [r7, #4]
 636 00aa 5B68     		ldr	r3, [r3, #4]
 637 00ac FB61     		str	r3, [r7, #28]
 638 00ae 4DE0     		b	.L30
 639              	.L39:
 350:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     iprh_tmp = (struct ip_reass_helper*)q->payload;
 640              		.loc 1 350 0
 641 00b0 FB69     		ldr	r3, [r7, #28]
 642 00b2 5B68     		ldr	r3, [r3, #4]
 643 00b4 FB60     		str	r3, [r7, #12]
 351:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (iprh->start < iprh_tmp->start) {
 644              		.loc 1 351 0
 645 00b6 7B6A     		ldr	r3, [r7, #36]
 646 00b8 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 647 00ba 9AB2     		uxth	r2, r3
 648 00bc FB68     		ldr	r3, [r7, #12]
 649 00be 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 650 00c0 9BB2     		uxth	r3, r3
 651 00c2 9A42     		cmp	r2, r3
 652 00c4 1FD2     		bcs	.L31
 352:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* the new pbuf should be inserted before this */
 353:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       iprh->next_pbuf = q;
 653              		.loc 1 353 0
 654 00c6 7B6A     		ldr	r3, [r7, #36]
 655 00c8 FA69     		ldr	r2, [r7, #28]
 656 00ca 1A60     		str	r2, [r3, #0]	@ unaligned
 354:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (iprh_prev != NULL) {
 657              		.loc 1 354 0
 658 00cc 3B6A     		ldr	r3, [r7, #32]
 659 00ce 002B     		cmp	r3, #0
 660 00d0 15D0     		beq	.L32
 355:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         /* not the fragment with the lowest offset */
 356:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 357:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 661              		.loc 1 357 0
 662 00d2 7B6A     		ldr	r3, [r7, #36]
 663 00d4 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 664 00d6 9AB2     		uxth	r2, r3
 665 00d8 3B6A     		ldr	r3, [r7, #32]
 666 00da DB88     		ldrh	r3, [r3, #6]	@ unaligned
 667 00dc 9BB2     		uxth	r3, r3
 668 00de 9A42     		cmp	r2, r3
 669 00e0 C0F09180 		bcc	.L33
 670              		.loc 1 357 0 is_stmt 0 discriminator 1
 671 00e4 7B6A     		ldr	r3, [r7, #36]
 672 00e6 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 673 00e8 9AB2     		uxth	r2, r3
 674 00ea FB68     		ldr	r3, [r7, #12]
 675 00ec 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 676 00ee 9BB2     		uxth	r3, r3
 677 00f0 9A42     		cmp	r2, r3
 678 00f2 00F28880 		bhi	.L33
 358:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           /* fragment overlaps with previous or following, throw away */
 359:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           goto freepbuf;
 360:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         }
 361:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 362:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         iprh_prev->next_pbuf = new_p;
 679              		.loc 1 362 0 is_stmt 1
 680 00f6 3B6A     		ldr	r3, [r7, #32]
 681 00f8 3A68     		ldr	r2, [r7, #0]
 682 00fa 1A60     		str	r2, [r3, #0]	@ unaligned
 363:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       } else {
 364:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         /* fragment with the lowest offset */
 365:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         ipr->p = new_p;
 366:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       }
 367:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       break;
 683              		.loc 1 367 0
 684 00fc 29E0     		b	.L35
 685              	.L32:
 365:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         ipr->p = new_p;
 686              		.loc 1 365 0
 687 00fe 7B68     		ldr	r3, [r7, #4]
 688 0100 3A68     		ldr	r2, [r7, #0]
 689 0102 5A60     		str	r2, [r3, #4]
 690              		.loc 1 367 0
 691 0104 25E0     		b	.L35
 692              	.L31:
 368:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     } else if(iprh->start == iprh_tmp->start) {
 693              		.loc 1 368 0
 694 0106 7B6A     		ldr	r3, [r7, #36]
 695 0108 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 696 010a 9AB2     		uxth	r2, r3
 697 010c FB68     		ldr	r3, [r7, #12]
 698 010e 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 699 0110 9BB2     		uxth	r3, r3
 700 0112 9A42     		cmp	r2, r3
 701 0114 74D0     		beq	.L50
 702              	.L36:
 369:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* received the same datagram twice: no need to keep the datagram */
 370:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       goto freepbuf;
 371:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 372:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     } else if(iprh->start < iprh_tmp->end) {
 703              		.loc 1 372 0
 704 0116 7B6A     		ldr	r3, [r7, #36]
 705 0118 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 706 011a 9AB2     		uxth	r2, r3
 707 011c FB68     		ldr	r3, [r7, #12]
 708 011e DB88     		ldrh	r3, [r3, #6]	@ unaligned
 709 0120 9BB2     		uxth	r3, r3
 710 0122 9A42     		cmp	r2, r3
 711 0124 6ED3     		bcc	.L51
 712              	.L37:
 373:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* overlap: no need to keep the new datagram */
 374:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       goto freepbuf;
 375:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 376:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     } else {
 377:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* Check if the fragments received so far have no wholes. */
 378:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (iprh_prev != NULL) {
 713              		.loc 1 378 0
 714 0126 3B6A     		ldr	r3, [r7, #32]
 715 0128 002B     		cmp	r3, #0
 716 012a 0AD0     		beq	.L38
 379:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         if (iprh_prev->end != iprh_tmp->start) {
 717              		.loc 1 379 0
 718 012c 3B6A     		ldr	r3, [r7, #32]
 719 012e DB88     		ldrh	r3, [r3, #6]	@ unaligned
 720 0130 9AB2     		uxth	r2, r3
 721 0132 FB68     		ldr	r3, [r7, #12]
 722 0134 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 723 0136 9BB2     		uxth	r3, r3
 724 0138 9A42     		cmp	r2, r3
 725 013a 02D0     		beq	.L38
 380:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           /* There is a fragment missing between the current
 381:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****            * and the previous fragment */
 382:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           valid = 0;
 726              		.loc 1 382 0
 727 013c 4FF00003 		mov	r3, #0
 728 0140 BB61     		str	r3, [r7, #24]
 729              	.L38:
 383:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         }
 384:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       }
 385:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 386:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     q = iprh_tmp->next_pbuf;
 730              		.loc 1 386 0
 731 0142 FB68     		ldr	r3, [r7, #12]
 732 0144 1B68     		ldr	r3, [r3, #0]	@ unaligned
 733 0146 FB61     		str	r3, [r7, #28]
 387:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     iprh_prev = iprh_tmp;
 734              		.loc 1 387 0
 735 0148 FB68     		ldr	r3, [r7, #12]
 736 014a 3B62     		str	r3, [r7, #32]
 737              	.L30:
 349:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   for (q = ipr->p; q != NULL;) {
 738              		.loc 1 349 0 discriminator 1
 739 014c FB69     		ldr	r3, [r7, #28]
 740 014e 002B     		cmp	r3, #0
 741 0150 AED1     		bne	.L39
 742              	.L35:
 388:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 389:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 390:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* If q is NULL, then we made it to the end of the list. Determine what to do now */
 391:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if (q == NULL) {
 743              		.loc 1 391 0
 744 0152 FB69     		ldr	r3, [r7, #28]
 745 0154 002B     		cmp	r3, #0
 746 0156 18D1     		bne	.L40
 392:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (iprh_prev != NULL) {
 747              		.loc 1 392 0
 748 0158 3B6A     		ldr	r3, [r7, #32]
 749 015a 002B     		cmp	r3, #0
 750 015c 12D0     		beq	.L41
 393:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* this is (for now), the fragment with the highest offset:
 394:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****        * chain it to the last fragment */
 395:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 396:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 751              		.loc 1 396 0
 752 015e 3B6A     		ldr	r3, [r7, #32]
 753 0160 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 754 0162 7B6A     		ldr	r3, [r7, #36]
 755 0164 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 397:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 398:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       iprh_prev->next_pbuf = new_p;
 756              		.loc 1 398 0
 757 0166 3B6A     		ldr	r3, [r7, #32]
 758 0168 3A68     		ldr	r2, [r7, #0]
 759 016a 1A60     		str	r2, [r3, #0]	@ unaligned
 399:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (iprh_prev->end != iprh->start) {
 760              		.loc 1 399 0
 761 016c 3B6A     		ldr	r3, [r7, #32]
 762 016e DB88     		ldrh	r3, [r3, #6]	@ unaligned
 763 0170 9AB2     		uxth	r2, r3
 764 0172 7B6A     		ldr	r3, [r7, #36]
 765 0174 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 766 0176 9BB2     		uxth	r3, r3
 767 0178 9A42     		cmp	r2, r3
 768 017a 06D0     		beq	.L40
 400:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         valid = 0;
 769              		.loc 1 400 0
 770 017c 4FF00003 		mov	r3, #0
 771 0180 BB61     		str	r3, [r7, #24]
 772 0182 02E0     		b	.L40
 773              	.L41:
 401:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       }
 402:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     } else {
 403:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 404:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 405:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         ipr->p == NULL);
 406:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 407:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* this is the first fragment we ever received for this ip datagram */
 408:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       ipr->p = new_p;
 774              		.loc 1 408 0
 775 0184 7B68     		ldr	r3, [r7, #4]
 776 0186 3A68     		ldr	r2, [r7, #0]
 777 0188 5A60     		str	r2, [r3, #4]
 778              	.L40:
 409:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 410:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 411:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 412:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* At this point, the validation part begins: */
 413:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* If we already received the last fragment */
 414:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0) {
 779              		.loc 1 414 0
 780 018a 7B68     		ldr	r3, [r7, #4]
 781 018c 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 782 018e 03F00103 		and	r3, r3, #1
 783 0192 002B     		cmp	r3, #0
 784 0194 31D0     		beq	.L42
 415:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* and had no wholes so far */
 416:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (valid) {
 785              		.loc 1 416 0
 786 0196 BB69     		ldr	r3, [r7, #24]
 787 0198 002B     		cmp	r3, #0
 788 019a 2CD0     		beq	.L43
 417:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* then check if the rest of the fragments is here */
 418:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* Check if the queue starts with the first datagram */
 419:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (((struct ip_reass_helper*)ipr->p->payload)->start != 0) {
 789              		.loc 1 419 0
 790 019c 7B68     		ldr	r3, [r7, #4]
 791 019e 5B68     		ldr	r3, [r3, #4]
 792 01a0 5B68     		ldr	r3, [r3, #4]
 793 01a2 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 794 01a4 9BB2     		uxth	r3, r3
 795 01a6 002B     		cmp	r3, #0
 796 01a8 03D0     		beq	.L44
 420:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         valid = 0;
 797              		.loc 1 420 0
 798 01aa 4FF00003 		mov	r3, #0
 799 01ae BB61     		str	r3, [r7, #24]
 800 01b0 21E0     		b	.L43
 801              	.L44:
 421:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       } else {
 422:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         /* and check that there are no wholes after this datagram */
 423:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         iprh_prev = iprh;
 802              		.loc 1 423 0
 803 01b2 7B6A     		ldr	r3, [r7, #36]
 804 01b4 3B62     		str	r3, [r7, #32]
 424:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         q = iprh->next_pbuf;
 805              		.loc 1 424 0
 806 01b6 7B6A     		ldr	r3, [r7, #36]
 807 01b8 1B68     		ldr	r3, [r3, #0]	@ unaligned
 808 01ba FB61     		str	r3, [r7, #28]
 425:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         while (q != NULL) {
 809              		.loc 1 425 0
 810 01bc 13E0     		b	.L45
 811              	.L48:
 426:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           iprh = (struct ip_reass_helper*)q->payload;
 812              		.loc 1 426 0
 813 01be FB69     		ldr	r3, [r7, #28]
 814 01c0 5B68     		ldr	r3, [r3, #4]
 815 01c2 7B62     		str	r3, [r7, #36]
 427:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           if (iprh_prev->end != iprh->start) {
 816              		.loc 1 427 0
 817 01c4 3B6A     		ldr	r3, [r7, #32]
 818 01c6 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 819 01c8 9AB2     		uxth	r2, r3
 820 01ca 7B6A     		ldr	r3, [r7, #36]
 821 01cc 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 822 01ce 9BB2     		uxth	r3, r3
 823 01d0 9A42     		cmp	r2, r3
 824 01d2 03D0     		beq	.L46
 428:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****             valid = 0;
 825              		.loc 1 428 0
 826 01d4 4FF00003 		mov	r3, #0
 827 01d8 BB61     		str	r3, [r7, #24]
 429:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****             break;
 828              		.loc 1 429 0
 829 01da 07E0     		b	.L47
 830              	.L46:
 430:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           }
 431:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           iprh_prev = iprh;
 831              		.loc 1 431 0
 832 01dc 7B6A     		ldr	r3, [r7, #36]
 833 01de 3B62     		str	r3, [r7, #32]
 432:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           q = iprh->next_pbuf;
 834              		.loc 1 432 0
 835 01e0 7B6A     		ldr	r3, [r7, #36]
 836 01e2 1B68     		ldr	r3, [r3, #0]	@ unaligned
 837 01e4 FB61     		str	r3, [r7, #28]
 838              	.L45:
 425:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         while (q != NULL) {
 839              		.loc 1 425 0 discriminator 1
 840 01e6 FB69     		ldr	r3, [r7, #28]
 841 01e8 002B     		cmp	r3, #0
 842 01ea E8D1     		bne	.L48
 843              	.L47:
 433:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         }
 434:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         /* if still valid, all fragments are received
 435:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****          * (because to the MF==0 already arrived */
 436:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         if (valid) {
 844              		.loc 1 436 0
 845 01ec BB69     		ldr	r3, [r7, #24]
 846 01ee 002B     		cmp	r3, #0
 847 01f0 01D0     		beq	.L43
 437:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           LWIP_ASSERT("sanity check", ipr->p != NULL);
 438:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           LWIP_ASSERT("sanity check",
 439:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****             ((struct ip_reass_helper*)ipr->p->payload) != iprh);
 440:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 441:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****             iprh->next_pbuf == NULL);
 442:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****           LWIP_ASSERT("validate_datagram:datagram end!=datagram len",
 848              		.loc 1 442 0
 849 01f2 7B6A     		ldr	r3, [r7, #36]
 850 01f4 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 851              	.L43:
 443:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****             iprh->end == ipr->datagram_len);
 444:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         }
 445:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       }
 446:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 447:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* If valid is 0 here, there are some fragments missing in the middle
 448:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * (since MF == 0 has already arrived). Such datagrams simply time out if
 449:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * no more fragments are received... */
 450:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     return valid;
 852              		.loc 1 450 0
 853 01f6 BB69     		ldr	r3, [r7, #24]
 854 01f8 1AE0     		b	.L49
 855              	.L42:
 451:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 452:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* If we come here, not all fragments were received, yet! */
 453:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   return 0; /* not yet valid! */
 856              		.loc 1 453 0
 857 01fa 4FF00003 		mov	r3, #0
 858 01fe 17E0     		b	.L49
 859              	.L50:
 370:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       goto freepbuf;
 860              		.loc 1 370 0
 861 0200 00BF     		nop
 862 0202 00E0     		b	.L33
 863              	.L51:
 374:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       goto freepbuf;
 864              		.loc 1 374 0
 865 0204 00BF     		nop
 866              	.L33:
 454:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASS_CHECK_OVERLAP
 455:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** freepbuf:
 456:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   ip_reass_pbufcount -= pbuf_clen(new_p);
 867              		.loc 1 456 0
 868 0206 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 869 020a C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 870 020e 1C88     		ldrh	r4, [r3, #0]
 871 0210 3868     		ldr	r0, [r7, #0]
 872 0212 FFF7FEFF 		bl	pbuf_clen
 873 0216 0346     		mov	r3, r0
 874 0218 E31A     		subs	r3, r4, r3
 875 021a 9AB2     		uxth	r2, r3
 876 021c 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 877 0220 C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 878 0224 1A80     		strh	r2, [r3, #0]	@ movhi
 457:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   pbuf_free(new_p);
 879              		.loc 1 457 0
 880 0226 3868     		ldr	r0, [r7, #0]
 881 0228 FFF7FEFF 		bl	pbuf_free
 458:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   return 0;
 882              		.loc 1 458 0
 883 022c 4FF00003 		mov	r3, #0
 884              	.L49:
 459:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_CHECK_OVERLAP */
 460:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** }
 885              		.loc 1 460 0
 886 0230 1846     		mov	r0, r3
 887 0232 07F12C07 		add	r7, r7, #44
 888 0236 BD46     		mov	sp, r7
 889 0238 90BD     		pop	{r4, r7, pc}
 890              		.cfi_endproc
 891              	.LFE5:
 893 023a 00BF     		.section	.text.ip_reass,"ax",%progbits
 894              		.align	2
 895              		.global	ip_reass
 896              		.thumb
 897              		.thumb_func
 899              	ip_reass:
 900              	.LFB6:
 461:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 462:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
 463:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Reassembles incoming IP fragments into an IP datagram.
 464:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
 465:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param p points to a pbuf chain of the fragment
 466:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @return NULL if reassembly is incomplete, ? otherwise
 467:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
 468:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** struct pbuf *
 469:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** ip_reass(struct pbuf *p)
 470:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** {
 901              		.loc 1 470 0
 902              		.cfi_startproc
 903              		@ args = 0, pretend = 0, frame = 40
 904              		@ frame_needed = 1, uses_anonymous_args = 0
 905 0000 90B5     		push	{r4, r7, lr}
 906              	.LCFI18:
 907              		.cfi_def_cfa_offset 12
 908              		.cfi_offset 4, -12
 909              		.cfi_offset 7, -8
 910              		.cfi_offset 14, -4
 911 0002 8BB0     		sub	sp, sp, #44
 912              	.LCFI19:
 913              		.cfi_def_cfa_offset 56
 914 0004 00AF     		add	r7, sp, #0
 915              	.LCFI20:
 916              		.cfi_def_cfa_register 7
 917 0006 7860     		str	r0, [r7, #4]
 471:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct pbuf *r;
 472:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_hdr *fraghdr;
 473:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_reassdata *ipr;
 474:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_reass_helper *iprh;
 475:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t offset, len;
 476:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u8_t clen;
 477:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_reassdata *ipr_prev = NULL;
 918              		.loc 1 477 0
 919 0008 4FF00003 		mov	r3, #0
 920 000c FB61     		str	r3, [r7, #28]
 478:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 479:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   IPFRAG_STATS_INC(ip_frag.recv);
 480:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   snmp_inc_ipreasmreqds();
 481:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 482:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   fraghdr = (struct ip_hdr*)p->payload;
 921              		.loc 1 482 0
 922 000e 7B68     		ldr	r3, [r7, #4]
 923 0010 5B68     		ldr	r3, [r3, #4]
 924 0012 BB61     		str	r3, [r7, #24]
 483:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 484:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 925              		.loc 1 484 0
 926 0014 BB69     		ldr	r3, [r7, #24]
 927 0016 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 928 0018 9BB2     		uxth	r3, r3
 929 001a 1846     		mov	r0, r3
 930 001c FFF7FEFF 		bl	ntohs
 931 0020 0346     		mov	r3, r0
 932 0022 4FEA1323 		lsr	r3, r3, #8
 933 0026 9BB2     		uxth	r3, r3
 934 0028 03F00F03 		and	r3, r3, #15
 935 002c 4FEA8303 		lsl	r3, r3, #2
 936 0030 142B     		cmp	r3, #20
 937 0032 40F03881 		bne	.L67
 938              	.L53:
 485:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: IP options currently not supported!\n"));
 486:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPFRAG_STATS_INC(ip_frag.err);
 487:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     goto nullreturn;
 488:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 489:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 490:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   offset = (ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 939              		.loc 1 490 0
 940 0036 BB69     		ldr	r3, [r7, #24]
 941 0038 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 942 003a 9BB2     		uxth	r3, r3
 943 003c 1846     		mov	r0, r3
 944 003e FFF7FEFF 		bl	ntohs
 945 0042 0346     		mov	r3, r0
 946 0044 4FEAC343 		lsl	r3, r3, #19
 947 0048 4FEAD343 		lsr	r3, r3, #19
 948 004c 9BB2     		uxth	r3, r3
 949 004e 4FEAC303 		lsl	r3, r3, #3
 950 0052 FB82     		strh	r3, [r7, #22]	@ movhi
 491:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   len = ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 951              		.loc 1 491 0
 952 0054 BB69     		ldr	r3, [r7, #24]
 953 0056 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 954 0058 9BB2     		uxth	r3, r3
 955 005a 1846     		mov	r0, r3
 956 005c FFF7FEFF 		bl	ntohs
 957 0060 0346     		mov	r3, r0
 958 0062 1C46     		mov	r4, r3
 959 0064 BB69     		ldr	r3, [r7, #24]
 960 0066 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 961 0068 9BB2     		uxth	r3, r3
 962 006a 1846     		mov	r0, r3
 963 006c FFF7FEFF 		bl	ntohs
 964 0070 0346     		mov	r3, r0
 965 0072 4FEA1323 		lsr	r3, r3, #8
 966 0076 9BB2     		uxth	r3, r3
 967 0078 03F00F03 		and	r3, r3, #15
 968 007c 9BB2     		uxth	r3, r3
 969 007e 1A46     		mov	r2, r3	@ movhi
 970 0080 4FEA8232 		lsl	r2, r2, #14
 971 0084 D31A     		subs	r3, r2, r3
 972 0086 4FEA8303 		lsl	r3, r3, #2
 973 008a 9BB2     		uxth	r3, r3
 974 008c E318     		adds	r3, r4, r3
 975 008e BB82     		strh	r3, [r7, #20]	@ movhi
 492:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 493:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Check if we are allowed to enqueue more datagrams. */
 494:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   clen = pbuf_clen(p);
 976              		.loc 1 494 0
 977 0090 7868     		ldr	r0, [r7, #4]
 978 0092 FFF7FEFF 		bl	pbuf_clen
 979 0096 0346     		mov	r3, r0
 980 0098 FB74     		strb	r3, [r7, #19]
 495:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 981              		.loc 1 495 0
 982 009a 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 983 009e C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 984 00a2 1B88     		ldrh	r3, [r3, #0]
 985 00a4 1A46     		mov	r2, r3
 986 00a6 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 987 00a8 D318     		adds	r3, r2, r3
 988 00aa 0A2B     		cmp	r3, #10
 989 00ac 13DD     		ble	.L55
 496:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_REASS_FREE_OLDEST
 497:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 990              		.loc 1 497 0
 991 00ae FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 992 00b0 B869     		ldr	r0, [r7, #24]
 993 00b2 1946     		mov	r1, r3
 994 00b4 FFF7FEFF 		bl	ip_reass_remove_oldest_datagram
 995 00b8 0346     		mov	r3, r0
 996 00ba 002B     		cmp	r3, #0
 997 00bc 00F0F480 		beq	.L54
 498:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 998              		.loc 1 498 0 discriminator 1
 999 00c0 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 1000 00c4 C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 1001 00c8 1B88     		ldrh	r3, [r3, #0]
 1002 00ca 1A46     		mov	r2, r3
 1003 00cc FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1004 00ce D318     		adds	r3, r2, r3
 497:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 1005              		.loc 1 497 0 discriminator 1
 1006 00d0 0A2B     		cmp	r3, #10
 1007 00d2 00F3E980 		bgt	.L54
 1008              	.L55:
 499:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASS_FREE_OLDEST */
 500:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     {
 501:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* No datagram could be freed and still too many pbufs enqueued */
 502:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
 503:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
 504:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       IPFRAG_STATS_INC(ip_frag.memerr);
 505:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* @todo: send ICMP time exceeded here? */
 506:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* drop this pbuf */
 507:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       goto nullreturn;
 508:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 509:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 510:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 511:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Look for the datagram the fragment belongs to in the current datagram queue,
 512:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    * remembering the previous in the queue for later dequeueing. */
 513:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 1009              		.loc 1 513 0
 1010 00d6 40F20003 		movw	r3, #:lower16:reassdatagrams
 1011 00da C0F20003 		movt	r3, #:upper16:reassdatagrams
 1012 00de 1B68     		ldr	r3, [r3, #0]
 1013 00e0 3B62     		str	r3, [r7, #32]
 1014 00e2 17E0     		b	.L56
 1015              	.L59:
 514:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Check if the incoming fragment matches the one currently present
 515:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****        in the reassembly buffer. If so, we proceed with copying the
 516:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****        fragment into the buffer. */
 517:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 1016              		.loc 1 517 0
 1017 00e4 3B6A     		ldr	r3, [r7, #32]
 1018 00e6 5A69     		ldr	r2, [r3, #20]
 1019 00e8 BB69     		ldr	r3, [r7, #24]
 1020 00ea DB68     		ldr	r3, [r3, #12]	@ unaligned
 1021 00ec 9A42     		cmp	r2, r3
 1022 00ee 0CD1     		bne	.L57
 1023              		.loc 1 517 0 is_stmt 0 discriminator 1
 1024 00f0 3B6A     		ldr	r3, [r7, #32]
 1025 00f2 9A69     		ldr	r2, [r3, #24]
 1026 00f4 BB69     		ldr	r3, [r7, #24]
 1027 00f6 1B69     		ldr	r3, [r3, #16]	@ unaligned
 1028 00f8 9A42     		cmp	r2, r3
 1029 00fa 06D1     		bne	.L57
 1030 00fc 3B6A     		ldr	r3, [r7, #32]
 1031 00fe 9A89     		ldrh	r2, [r3, #12]
 1032 0100 BB69     		ldr	r3, [r7, #24]
 1033 0102 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1034 0104 9BB2     		uxth	r3, r3
 1035 0106 9A42     		cmp	r2, r3
 1036 0108 08D0     		beq	.L68
 1037              	.L57:
 518:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass: matching previous fragment ID=%"X16_F"\n",
 519:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         ntohs(IPH_ID(fraghdr))));
 520:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       IPFRAG_STATS_INC(ip_frag.cachehit);
 521:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       break;
 522:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 523:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ipr_prev = ipr;
 1038              		.loc 1 523 0 is_stmt 1
 1039 010a 3B6A     		ldr	r3, [r7, #32]
 1040 010c FB61     		str	r3, [r7, #28]
 513:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 1041              		.loc 1 513 0
 1042 010e 3B6A     		ldr	r3, [r7, #32]
 1043 0110 1B68     		ldr	r3, [r3, #0]
 1044 0112 3B62     		str	r3, [r7, #32]
 1045              	.L56:
 513:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 1046              		.loc 1 513 0 is_stmt 0 discriminator 1
 1047 0114 3B6A     		ldr	r3, [r7, #32]
 1048 0116 002B     		cmp	r3, #0
 1049 0118 E4D1     		bne	.L59
 1050 011a 00E0     		b	.L58
 1051              	.L68:
 521:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       break;
 1052              		.loc 1 521 0 is_stmt 1
 1053 011c 00BF     		nop
 1054              	.L58:
 524:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 525:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 526:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if (ipr == NULL) {
 1055              		.loc 1 526 0
 1056 011e 3B6A     		ldr	r3, [r7, #32]
 1057 0120 002B     		cmp	r3, #0
 1058 0122 09D1     		bne	.L60
 527:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Enqueue a new datagram into the datagram queue */
 528:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 1059              		.loc 1 528 0
 1060 0124 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1061 0126 B869     		ldr	r0, [r7, #24]
 1062 0128 1946     		mov	r1, r3
 1063 012a FFF7FEFF 		bl	ip_reass_enqueue_new_datagram
 1064 012e 3862     		str	r0, [r7, #32]
 529:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Bail if unable to enqueue */
 530:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if(ipr == NULL) {
 1065              		.loc 1 530 0
 1066 0130 3B6A     		ldr	r3, [r7, #32]
 1067 0132 002B     		cmp	r3, #0
 1068 0134 22D1     		bne	.L61
 531:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       goto nullreturn;
 1069              		.loc 1 531 0
 1070 0136 B7E0     		b	.L54
 1071              	.L60:
 532:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 533:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   } else {
 534:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 1072              		.loc 1 534 0
 1073 0138 BB69     		ldr	r3, [r7, #24]
 1074 013a DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1075 013c 9BB2     		uxth	r3, r3
 1076 013e 1846     		mov	r0, r3
 1077 0140 FFF7FEFF 		bl	ntohs
 1078 0144 0346     		mov	r3, r0
 1079 0146 4FEAC343 		lsl	r3, r3, #19
 1080 014a 4FEAD343 		lsr	r3, r3, #19
 1081 014e 002B     		cmp	r3, #0
 1082 0150 14D1     		bne	.L61
 535:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       ((ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 1083              		.loc 1 535 0 discriminator 1
 1084 0152 3B6A     		ldr	r3, [r7, #32]
 1085 0154 DB89     		ldrh	r3, [r3, #14]
 1086 0156 1846     		mov	r0, r3
 1087 0158 FFF7FEFF 		bl	ntohs
 1088 015c 0346     		mov	r3, r0
 1089 015e 4FEAC343 		lsl	r3, r3, #19
 1090 0162 4FEAD343 		lsr	r3, r3, #19
 534:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (((ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) && 
 1091              		.loc 1 534 0 discriminator 1
 1092 0166 002B     		cmp	r3, #0
 1093 0168 08D0     		beq	.L61
 536:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* ipr->iphdr is not the header from the first fragment, but fraghdr is
 537:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****        * -> copy fraghdr into ipr->iphdr since we want to have the header
 538:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****        * of the first fragment (for ICMP time exceeded and later, for copying
 539:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****        * all options, if supported)*/
 540:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 1094              		.loc 1 540 0
 1095 016a 3B6A     		ldr	r3, [r7, #32]
 1096 016c 03F10803 		add	r3, r3, #8
 1097 0170 1846     		mov	r0, r3
 1098 0172 B969     		ldr	r1, [r7, #24]
 1099 0174 4FF01402 		mov	r2, #20
 1100 0178 FFF7FEFF 		bl	memcpy
 1101              	.L61:
 541:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 542:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 543:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Track the current number of pbufs current 'in-flight', in order to limit 
 544:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   the number of fragments that may be enqueued at any one time */
 545:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   ip_reass_pbufcount += clen;
 1102              		.loc 1 545 0
 1103 017c FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1104 017e 9AB2     		uxth	r2, r3
 1105 0180 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 1106 0184 C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 1107 0188 1B88     		ldrh	r3, [r3, #0]
 1108 018a D318     		adds	r3, r2, r3
 1109 018c 9AB2     		uxth	r2, r3
 1110 018e 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 1111 0192 C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 1112 0196 1A80     		strh	r2, [r3, #0]	@ movhi
 546:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 547:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* At this point, we have either created a new entry or pointing 
 548:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    * to an existing one */
 549:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 550:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* check for 'no more fragments', and update queue entry*/
 551:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if ((ntohs(IPH_OFFSET(fraghdr)) & IP_MF) == 0) {
 1113              		.loc 1 551 0
 1114 0198 BB69     		ldr	r3, [r7, #24]
 1115 019a DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1116 019c 9BB2     		uxth	r3, r3
 1117 019e 1846     		mov	r0, r3
 1118 01a0 FFF7FEFF 		bl	ntohs
 1119 01a4 0346     		mov	r3, r0
 1120 01a6 03F40053 		and	r3, r3, #8192
 1121 01aa 002B     		cmp	r3, #0
 1122 01ac 0CD1     		bne	.L62
 552:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 1123              		.loc 1 552 0
 1124 01ae 3B6A     		ldr	r3, [r7, #32]
 1125 01b0 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1126 01b2 43F00103 		orr	r3, r3, #1
 1127 01b6 DAB2     		uxtb	r2, r3
 1128 01b8 3B6A     		ldr	r3, [r7, #32]
 1129 01ba 9A77     		strb	r2, [r3, #30]
 553:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ipr->datagram_len = offset + len;
 1130              		.loc 1 553 0
 1131 01bc FA8A     		ldrh	r2, [r7, #22]	@ movhi
 1132 01be BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1133 01c0 D318     		adds	r3, r2, r3
 1134 01c2 9AB2     		uxth	r2, r3
 1135 01c4 3B6A     		ldr	r3, [r7, #32]
 1136 01c6 9A83     		strh	r2, [r3, #28]	@ movhi
 1137              	.L62:
 554:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     LWIP_DEBUGF(IP_REASS_DEBUG,
 555:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      ("ip_reass: last fragment seen, total len %"S16_F"\n",
 556:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       ipr->datagram_len));
 557:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 558:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* find the right place to insert this pbuf */
 559:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* @todo: trim pbufs if fragments are overlapping */
 560:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if (ip_reass_chain_frag_into_datagram_and_validate(ipr, p)) {
 1138              		.loc 1 560 0
 1139 01c8 386A     		ldr	r0, [r7, #32]
 1140 01ca 7968     		ldr	r1, [r7, #4]
 1141 01cc FFF7FEFF 		bl	ip_reass_chain_frag_into_datagram_and_validate
 1142 01d0 0346     		mov	r3, r0
 1143 01d2 002B     		cmp	r3, #0
 1144 01d4 64D0     		beq	.L63
 561:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* the totally last fragment (flag more fragments = 0) was received at least
 562:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * once AND all fragments are received */
 563:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ipr->datagram_len += IP_HLEN;
 1145              		.loc 1 563 0
 1146 01d6 3B6A     		ldr	r3, [r7, #32]
 1147 01d8 9B8B     		ldrh	r3, [r3, #28]
 1148 01da 03F11403 		add	r3, r3, #20
 1149 01de 9AB2     		uxth	r2, r3
 1150 01e0 3B6A     		ldr	r3, [r7, #32]
 1151 01e2 9A83     		strh	r2, [r3, #28]	@ movhi
 564:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 565:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* save the second pbuf before copying the header over the pointer */
 566:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 1152              		.loc 1 566 0
 1153 01e4 3B6A     		ldr	r3, [r7, #32]
 1154 01e6 5B68     		ldr	r3, [r3, #4]
 1155 01e8 5B68     		ldr	r3, [r3, #4]
 1156 01ea 1B68     		ldr	r3, [r3, #0]	@ unaligned
 1157 01ec 7B62     		str	r3, [r7, #36]
 567:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 568:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* copy the original ip header back to the first pbuf */
 569:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     fraghdr = (struct ip_hdr*)(ipr->p->payload);
 1158              		.loc 1 569 0
 1159 01ee 3B6A     		ldr	r3, [r7, #32]
 1160 01f0 5B68     		ldr	r3, [r3, #4]
 1161 01f2 5B68     		ldr	r3, [r3, #4]
 1162 01f4 BB61     		str	r3, [r7, #24]
 570:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 1163              		.loc 1 570 0
 1164 01f6 3B6A     		ldr	r3, [r7, #32]
 1165 01f8 03F10803 		add	r3, r3, #8
 1166 01fc B869     		ldr	r0, [r7, #24]
 1167 01fe 1946     		mov	r1, r3
 1168 0200 4FF01402 		mov	r2, #20
 1169 0204 FFF7FEFF 		bl	memcpy
 571:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPH_LEN_SET(fraghdr, htons(ipr->datagram_len));
 1170              		.loc 1 571 0
 1171 0208 3B6A     		ldr	r3, [r7, #32]
 1172 020a 9B8B     		ldrh	r3, [r3, #28]
 1173 020c 1846     		mov	r0, r3
 1174 020e FFF7FEFF 		bl	htons
 1175 0212 0346     		mov	r3, r0
 1176 0214 1A46     		mov	r2, r3
 1177 0216 BB69     		ldr	r3, [r7, #24]
 1178 0218 5A80     		strh	r2, [r3, #2]	@ unaligned
 572:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPH_OFFSET_SET(fraghdr, 0);
 1179              		.loc 1 572 0
 1180 021a BB69     		ldr	r3, [r7, #24]
 1181 021c 4FF00002 		mov	r2, #0
 1182 0220 9A71     		strb	r2, [r3, #6]
 1183 0222 4FF00002 		mov	r2, #0
 1184 0226 DA71     		strb	r2, [r3, #7]
 573:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPH_CHKSUM_SET(fraghdr, 0);
 1185              		.loc 1 573 0
 1186 0228 BB69     		ldr	r3, [r7, #24]
 1187 022a 4FF00002 		mov	r2, #0
 1188 022e 9A72     		strb	r2, [r3, #10]
 1189 0230 4FF00002 		mov	r2, #0
 1190 0234 DA72     		strb	r2, [r3, #11]
 574:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* @todo: do we need to set calculate the correct checksum? */
 575:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 1191              		.loc 1 575 0
 1192 0236 B869     		ldr	r0, [r7, #24]
 1193 0238 4FF01401 		mov	r1, #20
 1194 023c FFF7FEFF 		bl	inet_chksum
 1195 0240 0346     		mov	r3, r0
 1196 0242 1A46     		mov	r2, r3
 1197 0244 BB69     		ldr	r3, [r7, #24]
 1198 0246 5A81     		strh	r2, [r3, #10]	@ unaligned
 576:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 577:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     p = ipr->p;
 1199              		.loc 1 577 0
 1200 0248 3B6A     		ldr	r3, [r7, #32]
 1201 024a 5B68     		ldr	r3, [r3, #4]
 1202 024c 7B60     		str	r3, [r7, #4]
 578:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 579:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* chain together the pbufs contained within the reass_data list. */
 580:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     while(r != NULL) {
 1203              		.loc 1 580 0
 1204 024e 0EE0     		b	.L64
 1205              	.L65:
 581:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       iprh = (struct ip_reass_helper*)r->payload;
 1206              		.loc 1 581 0
 1207 0250 7B6A     		ldr	r3, [r7, #36]
 1208 0252 5B68     		ldr	r3, [r3, #4]
 1209 0254 FB60     		str	r3, [r7, #12]
 582:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 583:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* hide the ip header for every succeding fragment */
 584:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbuf_header(r, -IP_HLEN);
 1210              		.loc 1 584 0
 1211 0256 786A     		ldr	r0, [r7, #36]
 1212 0258 6FF01301 		mvn	r1, #19
 1213 025c FFF7FEFF 		bl	pbuf_header
 585:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbuf_cat(p, r);
 1214              		.loc 1 585 0
 1215 0260 7868     		ldr	r0, [r7, #4]
 1216 0262 796A     		ldr	r1, [r7, #36]
 1217 0264 FFF7FEFF 		bl	pbuf_cat
 586:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       r = iprh->next_pbuf;
 1218              		.loc 1 586 0
 1219 0268 FB68     		ldr	r3, [r7, #12]
 1220 026a 1B68     		ldr	r3, [r3, #0]	@ unaligned
 1221 026c 7B62     		str	r3, [r7, #36]
 1222              	.L64:
 580:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     while(r != NULL) {
 1223              		.loc 1 580 0 discriminator 1
 1224 026e 7B6A     		ldr	r3, [r7, #36]
 1225 0270 002B     		cmp	r3, #0
 1226 0272 EDD1     		bne	.L65
 587:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 588:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* release the sources allocate for the fragment queue entry */
 589:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ip_reass_dequeue_datagram(ipr, ipr_prev);
 1227              		.loc 1 589 0
 1228 0274 386A     		ldr	r0, [r7, #32]
 1229 0276 F969     		ldr	r1, [r7, #28]
 1230 0278 FFF7FEFF 		bl	ip_reass_dequeue_datagram
 590:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 591:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* and adjust the number of pbufs currently queued for reassembly. */
 592:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ip_reass_pbufcount -= pbuf_clen(p);
 1231              		.loc 1 592 0
 1232 027c 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 1233 0280 C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 1234 0284 1C88     		ldrh	r4, [r3, #0]
 1235 0286 7868     		ldr	r0, [r7, #4]
 1236 0288 FFF7FEFF 		bl	pbuf_clen
 1237 028c 0346     		mov	r3, r0
 1238 028e E31A     		subs	r3, r4, r3
 1239 0290 9AB2     		uxth	r2, r3
 1240 0292 40F20003 		movw	r3, #:lower16:ip_reass_pbufcount
 1241 0296 C0F20003 		movt	r3, #:upper16:ip_reass_pbufcount
 1242 029a 1A80     		strh	r2, [r3, #0]	@ movhi
 593:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 594:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Return the pbuf chain */
 595:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     return p;
 1243              		.loc 1 595 0
 1244 029c 7B68     		ldr	r3, [r7, #4]
 1245 029e 08E0     		b	.L66
 1246              	.L63:
 596:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 597:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* the datagram is not (yet?) reassembled completely */
 598:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
 599:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   return NULL;
 1247              		.loc 1 599 0
 1248 02a0 4FF00003 		mov	r3, #0
 1249 02a4 05E0     		b	.L66
 1250              	.L67:
 487:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     goto nullreturn;
 1251              		.loc 1 487 0
 1252 02a6 00BF     		nop
 1253              	.L54:
 600:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 601:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** nullreturn:
 602:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass: nullreturn\n"));
 603:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   IPFRAG_STATS_INC(ip_frag.drop);
 604:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   pbuf_free(p);
 1254              		.loc 1 604 0
 1255 02a8 7868     		ldr	r0, [r7, #4]
 1256 02aa FFF7FEFF 		bl	pbuf_free
 605:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   return NULL;
 1257              		.loc 1 605 0
 1258 02ae 4FF00003 		mov	r3, #0
 1259              	.L66:
 606:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** }
 1260              		.loc 1 606 0
 1261 02b2 1846     		mov	r0, r3
 1262 02b4 07F12C07 		add	r7, r7, #44
 1263 02b8 BD46     		mov	sp, r7
 1264 02ba 90BD     		pop	{r4, r7, pc}
 1265              		.cfi_endproc
 1266              	.LFE6:
 1268              		.bss
 1269 0006 0000     		.align	2
 1270              	buf:
 1271 0008 00000000 		.space	1504
 1271      00000000 
 1271      00000000 
 1271      00000000 
 1271      00000000 
 1272              		.section	.text.ip_frag,"ax",%progbits
 1273              		.align	2
 1274              		.global	ip_frag
 1275              		.thumb
 1276              		.thumb_func
 1278              	ip_frag:
 1279              	.LFB7:
 607:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_REASSEMBLY */
 608:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 609:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_FRAG
 610:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 611:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** static u8_t buf[LWIP_MEM_ALIGN_SIZE(IP_FRAG_MAX_MTU + MEM_ALIGNMENT - 1)];
 612:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 613:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 614:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** /**
 615:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Fragment an IP datagram if too large for the netif.
 616:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
 617:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * Chop the datagram in MTU sized chunks and send them in order
 618:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * by using a fixed size static memory buffer (PBUF_REF) or
 619:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * point PBUF_REFs into p (depending on IP_FRAG_USES_STATIC_BUF).
 620:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
 621:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param p ip packet to send
 622:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param netif the netif on which to send
 623:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @param dest destination ip address to which to send
 624:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  *
 625:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  * @return ERR_OK if sent successfully, err_t otherwise
 626:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****  */
 627:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** err_t 
 628:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** ip_frag(struct pbuf *p, struct netif *netif, struct ip_addr *dest)
 629:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** {
 1280              		.loc 1 629 0
 1281              		.cfi_startproc
 1282              		@ args = 0, pretend = 0, frame = 48
 1283              		@ frame_needed = 1, uses_anonymous_args = 0
 1284 0000 80B5     		push	{r7, lr}
 1285              	.LCFI21:
 1286              		.cfi_def_cfa_offset 8
 1287              		.cfi_offset 7, -8
 1288              		.cfi_offset 14, -4
 1289 0002 8CB0     		sub	sp, sp, #48
 1290              	.LCFI22:
 1291              		.cfi_def_cfa_offset 56
 1292 0004 00AF     		add	r7, sp, #0
 1293              	.LCFI23:
 1294              		.cfi_def_cfa_register 7
 1295 0006 F860     		str	r0, [r7, #12]
 1296 0008 B960     		str	r1, [r7, #8]
 1297 000a 7A60     		str	r2, [r7, #4]
 630:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct pbuf *rambuf;
 631:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 632:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct pbuf *header;
 633:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #else
 634:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct pbuf *newpbuf;
 635:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_hdr *original_iphdr;
 636:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif
 637:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   struct ip_hdr *iphdr;
 638:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t nfb;
 639:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t left, cop;
 640:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t mtu = netif->mtu;
 1298              		.loc 1 640 0
 1299 000c BB68     		ldr	r3, [r7, #8]
 1300 000e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1301 0010 FB84     		strh	r3, [r7, #38]	@ movhi
 641:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t ofo, omf;
 642:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t last;
 643:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t poff = IP_HLEN;
 1302              		.loc 1 643 0
 1303 0012 4FF01403 		mov	r3, #20
 1304 0016 7B85     		strh	r3, [r7, #42]	@ movhi
 644:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t tmp;
 645:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if !IP_FRAG_USES_STATIC_BUF
 646:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t newpbuflen = 0;
 647:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   u16_t left_to_copy;
 648:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif
 649:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 650:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Get a RAM based MTU sized pbuf */
 651:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 652:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* When using a static buffer, we use a PBUF_REF, which we will
 653:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    * use to reference the packet (without link header).
 654:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    * Layer and length is irrelevant.
 655:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****    */
 656:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   rambuf = pbuf_alloc(PBUF_LINK, 0, PBUF_REF);
 1305              		.loc 1 656 0
 1306 0018 4FF00200 		mov	r0, #2
 1307 001c 4FF00001 		mov	r1, #0
 1308 0020 4FF00202 		mov	r2, #2
 1309 0024 FFF7FEFF 		bl	pbuf_alloc
 1310 0028 3862     		str	r0, [r7, #32]
 657:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   if (rambuf == NULL) {
 1311              		.loc 1 657 0
 1312 002a 3B6A     		ldr	r3, [r7, #32]
 1313 002c 002B     		cmp	r3, #0
 1314 002e 02D1     		bne	.L70
 658:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc(PBUF_LINK, 0, PBUF_REF) failed\n"));
 659:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     return ERR_MEM;
 1315              		.loc 1 659 0
 1316 0030 4FF0FF03 		mov	r3, #255
 1317 0034 CEE0     		b	.L71
 1318              	.L70:
 660:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 661:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   rambuf->tot_len = rambuf->len = mtu;
 1319              		.loc 1 661 0
 1320 0036 3B6A     		ldr	r3, [r7, #32]
 1321 0038 FA8C     		ldrh	r2, [r7, #38]	@ movhi
 1322 003a 5A81     		strh	r2, [r3, #10]	@ movhi
 1323 003c 3B6A     		ldr	r3, [r7, #32]
 1324 003e 5A89     		ldrh	r2, [r3, #10]
 1325 0040 3B6A     		ldr	r3, [r7, #32]
 1326 0042 1A81     		strh	r2, [r3, #8]	@ movhi
 662:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   rambuf->payload = LWIP_MEM_ALIGN((void *)buf);
 1327              		.loc 1 662 0
 1328 0044 40F20003 		movw	r3, #:lower16:buf
 1329 0048 C0F20003 		movt	r3, #:upper16:buf
 1330 004c 03F10303 		add	r3, r3, #3
 1331 0050 23F00303 		bic	r3, r3, #3
 1332 0054 1A46     		mov	r2, r3
 1333 0056 3B6A     		ldr	r3, [r7, #32]
 1334 0058 5A60     		str	r2, [r3, #4]
 663:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 664:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Copy the IP header in it */
 665:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   iphdr = rambuf->payload;
 1335              		.loc 1 665 0
 1336 005a 3B6A     		ldr	r3, [r7, #32]
 1337 005c 5B68     		ldr	r3, [r3, #4]
 1338 005e FB61     		str	r3, [r7, #28]
 666:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   SMEMCPY(iphdr, p->payload, IP_HLEN);
 1339              		.loc 1 666 0
 1340 0060 FB68     		ldr	r3, [r7, #12]
 1341 0062 5B68     		ldr	r3, [r3, #4]
 1342 0064 F869     		ldr	r0, [r7, #28]
 1343 0066 1946     		mov	r1, r3
 1344 0068 4FF01402 		mov	r2, #20
 1345 006c FFF7FEFF 		bl	memcpy
 667:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #else /* IP_FRAG_USES_STATIC_BUF */
 668:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   original_iphdr = p->payload;
 669:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   iphdr = original_iphdr;
 670:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 671:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 672:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   /* Save original offset */
 673:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   tmp = ntohs(IPH_OFFSET(iphdr));
 1346              		.loc 1 673 0
 1347 0070 FB69     		ldr	r3, [r7, #28]
 1348 0072 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1349 0074 9BB2     		uxth	r3, r3
 1350 0076 1846     		mov	r0, r3
 1351 0078 FFF7FEFF 		bl	ntohs
 1352 007c 0346     		mov	r3, r0
 1353 007e 3B85     		strh	r3, [r7, #40]	@ movhi
 674:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   ofo = tmp & IP_OFFMASK;
 1354              		.loc 1 674 0
 1355 0080 3B8D     		ldrh	r3, [r7, #40]	@ movhi
 1356 0082 4FEAC343 		lsl	r3, r3, #19
 1357 0086 4FEAD343 		lsr	r3, r3, #19
 1358 008a BB85     		strh	r3, [r7, #44]	@ movhi
 675:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   omf = tmp & IP_MF;
 1359              		.loc 1 675 0
 1360 008c 3B8D     		ldrh	r3, [r7, #40]	@ movhi
 1361 008e 03F40053 		and	r3, r3, #8192
 1362 0092 7B83     		strh	r3, [r7, #26]	@ movhi
 676:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 677:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   left = p->tot_len - IP_HLEN;
 1363              		.loc 1 677 0
 1364 0094 FB68     		ldr	r3, [r7, #12]
 1365 0096 1B89     		ldrh	r3, [r3, #8]
 1366 0098 A3F11403 		sub	r3, r3, #20
 1367 009c FB85     		strh	r3, [r7, #46]	@ movhi
 678:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 679:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   nfb = (mtu - IP_HLEN) / 8;
 1368              		.loc 1 679 0
 1369 009e FB8C     		ldrh	r3, [r7, #38]
 1370 00a0 A3F11403 		sub	r3, r3, #20
 1371 00a4 002B     		cmp	r3, #0
 1372 00a6 01DA     		bge	.L72
 1373 00a8 03F10703 		add	r3, r3, #7
 1374              	.L72:
 1375 00ac 4FEAE303 		asr	r3, r3, #3
 1376 00b0 3B83     		strh	r3, [r7, #24]	@ movhi
 680:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 681:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   while (left) {
 1377              		.loc 1 681 0
 1378 00b2 86E0     		b	.L73
 1379              	.L79:
 682:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     last = (left <= mtu - IP_HLEN);
 1380              		.loc 1 682 0
 1381 00b4 FA8D     		ldrh	r2, [r7, #46]
 1382 00b6 FB8C     		ldrh	r3, [r7, #38]
 1383 00b8 A3F11403 		sub	r3, r3, #20
 1384 00bc 9A42     		cmp	r2, r3
 1385 00be CCBF     		ite	gt
 1386 00c0 0023     		movgt	r3, #0
 1387 00c2 0123     		movle	r3, #1
 1388 00c4 DBB2     		uxtb	r3, r3
 1389 00c6 FB82     		strh	r3, [r7, #22]	@ movhi
 683:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 684:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Set new offset and MF flag */
 685:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     tmp = omf | (IP_OFFMASK & (ofo));
 1390              		.loc 1 685 0
 1391 00c8 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 1392 00ca 4FEAC343 		lsl	r3, r3, #19
 1393 00ce 4FEAD343 		lsr	r3, r3, #19
 1394 00d2 9AB2     		uxth	r2, r3
 1395 00d4 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 1396 00d6 1343     		orrs	r3, r3, r2
 1397 00d8 3B85     		strh	r3, [r7, #40]	@ movhi
 686:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (!last)
 1398              		.loc 1 686 0
 1399 00da FB8A     		ldrh	r3, [r7, #22]
 1400 00dc 002B     		cmp	r3, #0
 1401 00de 03D1     		bne	.L74
 687:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       tmp = tmp | IP_MF;
 1402              		.loc 1 687 0
 1403 00e0 3B8D     		ldrh	r3, [r7, #40]	@ movhi
 1404 00e2 43F40053 		orr	r3, r3, #8192
 1405 00e6 3B85     		strh	r3, [r7, #40]	@ movhi
 1406              	.L74:
 688:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 689:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Fill this fragment */
 690:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     cop = last ? left : nfb * 8;
 1407              		.loc 1 690 0
 1408 00e8 FB8A     		ldrh	r3, [r7, #22]
 1409 00ea 002B     		cmp	r3, #0
 1410 00ec 04D1     		bne	.L75
 1411              		.loc 1 690 0 is_stmt 0 discriminator 1
 1412 00ee 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 1413 00f0 4FEAC303 		lsl	r3, r3, #3
 1414 00f4 9BB2     		uxth	r3, r3
 1415 00f6 00E0     		b	.L76
 1416              	.L75:
 1417              		.loc 1 690 0 discriminator 2
 1418 00f8 FB8D     		ldrh	r3, [r7, #46]
 1419              	.L76:
 1420              		.loc 1 690 0 discriminator 3
 1421 00fa BB82     		strh	r3, [r7, #20]	@ movhi
 691:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 692:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 693:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     poff += pbuf_copy_partial(p, (u8_t*)iphdr + IP_HLEN, cop, poff);
 1422              		.loc 1 693 0 is_stmt 1 discriminator 3
 1423 00fc FB69     		ldr	r3, [r7, #28]
 1424 00fe 03F11401 		add	r1, r3, #20
 1425 0102 BA8A     		ldrh	r2, [r7, #20]
 1426 0104 7B8D     		ldrh	r3, [r7, #42]
 1427 0106 F868     		ldr	r0, [r7, #12]
 1428 0108 FFF7FEFF 		bl	pbuf_copy_partial
 1429 010c 0346     		mov	r3, r0
 1430 010e 1A46     		mov	r2, r3
 1431 0110 7B8D     		ldrh	r3, [r7, #42]	@ movhi
 1432 0112 D318     		adds	r3, r2, r3
 1433 0114 7B85     		strh	r3, [r7, #42]	@ movhi
 694:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #else /* IP_FRAG_USES_STATIC_BUF */
 695:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* When not using a static buffer, create a chain of pbufs.
 696:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * The first will be a PBUF_RAM holding the link and IP header.
 697:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
 698:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * but limited to the size of an mtu.
 699:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      */
 700:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 701:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (rambuf == NULL) {
 702:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       return ERR_MEM;
 703:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 704:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     LWIP_ASSERT("this needs a pbuf in one piece!",
 705:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****                 (p->len >= (IP_HLEN)));
 706:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 707:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     iphdr = rambuf->payload;
 708:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 709:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Can just adjust p directly for needed offset. */
 710:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     p->payload = (u8_t *)p->payload + poff;
 711:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     p->len -= poff;
 712:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 713:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     left_to_copy = cop;
 714:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     while (left_to_copy) {
 715:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       newpbuflen = (left_to_copy < p->len) ? left_to_copy : p->len;
 716:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* Is this pbuf already empty? */
 717:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (!newpbuflen) {
 718:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         p = p->next;
 719:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         continue;
 720:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       }
 721:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       newpbuf = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 722:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (newpbuf == NULL) {
 723:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         pbuf_free(rambuf);
 724:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         return ERR_MEM;
 725:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       }
 726:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* Mirror this pbuf, although we might not need all of it. */
 727:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       newpbuf->payload = p->payload;
 728:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       newpbuf->len = newpbuf->tot_len = newpbuflen;
 729:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
 730:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****        * so that it is removed when pbuf_dechain is later called on rambuf.
 731:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****        */
 732:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbuf_cat(rambuf, newpbuf);
 733:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       left_to_copy -= newpbuflen;
 734:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       if (left_to_copy)
 735:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****         p = p->next;
 736:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 737:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     poff = newpbuflen;
 738:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 739:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 740:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Correct header */
 741:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPH_OFFSET_SET(iphdr, htons(tmp));
 1434              		.loc 1 741 0 discriminator 3
 1435 0116 3B8D     		ldrh	r3, [r7, #40]
 1436 0118 1846     		mov	r0, r3
 1437 011a FFF7FEFF 		bl	htons
 1438 011e 0346     		mov	r3, r0
 1439 0120 1A46     		mov	r2, r3
 1440 0122 FB69     		ldr	r3, [r7, #28]
 1441 0124 DA80     		strh	r2, [r3, #6]	@ unaligned
 742:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPH_LEN_SET(iphdr, htons(cop + IP_HLEN));
 1442              		.loc 1 742 0 discriminator 3
 1443 0126 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1444 0128 03F11403 		add	r3, r3, #20
 1445 012c 9BB2     		uxth	r3, r3
 1446 012e 1846     		mov	r0, r3
 1447 0130 FFF7FEFF 		bl	htons
 1448 0134 0346     		mov	r3, r0
 1449 0136 1A46     		mov	r2, r3
 1450 0138 FB69     		ldr	r3, [r7, #28]
 1451 013a 5A80     		strh	r2, [r3, #2]	@ unaligned
 743:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPH_CHKSUM_SET(iphdr, 0);
 1452              		.loc 1 743 0 discriminator 3
 1453 013c FB69     		ldr	r3, [r7, #28]
 1454 013e 4FF00002 		mov	r2, #0
 1455 0142 9A72     		strb	r2, [r3, #10]
 1456 0144 4FF00002 		mov	r2, #0
 1457 0148 DA72     		strb	r2, [r3, #11]
 744:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 1458              		.loc 1 744 0 discriminator 3
 1459 014a F869     		ldr	r0, [r7, #28]
 1460 014c 4FF01401 		mov	r1, #20
 1461 0150 FFF7FEFF 		bl	inet_chksum
 1462 0154 0346     		mov	r3, r0
 1463 0156 1A46     		mov	r2, r3
 1464 0158 FB69     		ldr	r3, [r7, #28]
 1465 015a 5A81     		strh	r2, [r3, #10]	@ unaligned
 745:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 746:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 747:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (last)
 1466              		.loc 1 747 0 discriminator 3
 1467 015c FB8A     		ldrh	r3, [r7, #22]
 1468 015e 002B     		cmp	r3, #0
 1469 0160 07D0     		beq	.L77
 748:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbuf_realloc(rambuf, left + IP_HLEN);
 1470              		.loc 1 748 0
 1471 0162 FB8D     		ldrh	r3, [r7, #46]	@ movhi
 1472 0164 03F11403 		add	r3, r3, #20
 1473 0168 9BB2     		uxth	r3, r3
 1474 016a 386A     		ldr	r0, [r7, #32]
 1475 016c 1946     		mov	r1, r3
 1476 016e FFF7FEFF 		bl	pbuf_realloc
 1477              	.L77:
 749:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 750:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* This part is ugly: we alloc a RAM based pbuf for 
 751:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * the link level header for each chunk and then 
 752:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * free it.A PBUF_ROM style pbuf for which pbuf_header
 753:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * worked would make things simpler.
 754:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      */
 755:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     header = pbuf_alloc(PBUF_LINK, 0, PBUF_RAM);
 1478              		.loc 1 755 0
 1479 0172 4FF00200 		mov	r0, #2
 1480 0176 4FF00001 		mov	r1, #0
 1481 017a 4FF00002 		mov	r2, #0
 1482 017e FFF7FEFF 		bl	pbuf_alloc
 1483 0182 3861     		str	r0, [r7, #16]
 756:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     if (header != NULL) {
 1484              		.loc 1 756 0
 1485 0184 3B69     		ldr	r3, [r7, #16]
 1486 0186 002B     		cmp	r3, #0
 1487 0188 15D0     		beq	.L78
 757:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbuf_chain(header, rambuf);
 1488              		.loc 1 757 0
 1489 018a 3869     		ldr	r0, [r7, #16]
 1490 018c 396A     		ldr	r1, [r7, #32]
 1491 018e FFF7FEFF 		bl	pbuf_chain
 758:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       netif->output(netif, header, dest);
 1492              		.loc 1 758 0
 1493 0192 BB68     		ldr	r3, [r7, #8]
 1494 0194 5B69     		ldr	r3, [r3, #20]
 1495 0196 B868     		ldr	r0, [r7, #8]
 1496 0198 3969     		ldr	r1, [r7, #16]
 1497 019a 7A68     		ldr	r2, [r7, #4]
 1498 019c 9847     		blx	r3
 759:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       IPFRAG_STATS_INC(ip_frag.xmit);
 760:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       snmp_inc_ipfragcreates();
 761:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbuf_free(header);
 1499              		.loc 1 761 0
 1500 019e 3869     		ldr	r0, [r7, #16]
 1501 01a0 FFF7FEFF 		bl	pbuf_free
 762:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     } else {
 763:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_frag: pbuf_alloc() for header failed\n"));
 764:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbuf_free(rambuf);
 765:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       return ERR_MEM;
 766:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     }
 767:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #else /* IP_FRAG_USES_STATIC_BUF */
 768:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* No need for separate header pbuf - we allowed room for it in rambuf
 769:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * when allocated.
 770:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      */
 771:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     netif->output(netif, rambuf, dest);
 772:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     IPFRAG_STATS_INC(ip_frag.xmit);
 773:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** 
 774:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     /* Unfortunately we can't reuse rambuf - the hardware may still be
 775:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * using the buffer. Instead we free it (and the ensuing chain) and
 776:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * recreate it next time round the loop. If we're lucky the hardware
 777:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * will have already sent the packet, the free will really free, and
 778:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      * there will be zero memory penalty.
 779:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****      */
 780:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     
 781:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     pbuf_free(rambuf);
 782:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 783:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     left -= cop;
 1502              		.loc 1 783 0
 1503 01a4 FA8D     		ldrh	r2, [r7, #46]	@ movhi
 1504 01a6 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1505 01a8 D31A     		subs	r3, r2, r3
 1506 01aa FB85     		strh	r3, [r7, #46]	@ movhi
 784:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****     ofo += nfb;
 1507              		.loc 1 784 0
 1508 01ac BA8D     		ldrh	r2, [r7, #44]	@ movhi
 1509 01ae 3B8B     		ldrh	r3, [r7, #24]	@ movhi
 1510 01b0 D318     		adds	r3, r2, r3
 1511 01b2 BB85     		strh	r3, [r7, #44]	@ movhi
 1512 01b4 05E0     		b	.L73
 1513              	.L78:
 764:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       pbuf_free(rambuf);
 1514              		.loc 1 764 0
 1515 01b6 386A     		ldr	r0, [r7, #32]
 1516 01b8 FFF7FEFF 		bl	pbuf_free
 765:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****       return ERR_MEM;
 1517              		.loc 1 765 0
 1518 01bc 4FF0FF03 		mov	r3, #255
 1519 01c0 08E0     		b	.L71
 1520              	.L73:
 681:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   while (left) {
 1521              		.loc 1 681 0 discriminator 1
 1522 01c2 FB8D     		ldrh	r3, [r7, #46]
 1523 01c4 002B     		cmp	r3, #0
 1524 01c6 7FF475AF 		bne	.L79
 785:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   }
 786:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #if IP_FRAG_USES_STATIC_BUF
 787:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   pbuf_free(rambuf);
 1525              		.loc 1 787 0
 1526 01ca 386A     		ldr	r0, [r7, #32]
 1527 01cc FFF7FEFF 		bl	pbuf_free
 788:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** #endif /* IP_FRAG_USES_STATIC_BUF */
 789:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   snmp_inc_ipfragoks();
 790:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c ****   return ERR_OK;
 1528              		.loc 1 790 0
 1529 01d0 4FF00003 		mov	r3, #0
 1530              	.L71:
 1531 01d4 5BB2     		sxtb	r3, r3
 791:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/core/ipv4/ip_frag.c **** }
 1532              		.loc 1 791 0
 1533 01d6 1846     		mov	r0, r3
 1534 01d8 07F13007 		add	r7, r7, #48
 1535 01dc BD46     		mov	sp, r7
 1536 01de 80BD     		pop	{r7, pc}
 1537              		.cfi_endproc
 1538              	.LFE7:
 1540              		.text
 1541              	.Letext0:
 1542              		.file 2 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 1543              		.file 3 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 1544              		.file 4 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 1545              		.file 5 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 1546              		.file 6 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 1547              		.file 7 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 1548              		.file 8 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 1549              		.file 9 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 1550              		.file 10 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_l
DEFINED SYMBOLS
                            *ABS*:00000000 ip_frag.c
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:20     .bss:00000000 $d
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:21     .bss:00000000 reassdatagrams
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:24     .bss:00000004 ip_reass_pbufcount
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:27     .text.ip_reass_tmr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:32     .text.ip_reass_tmr:00000000 ip_reass_tmr
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:112    .text.ip_reass_free_complete_datagram:00000000 ip_reass_free_complete_datagram
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:108    .text.ip_reass_free_complete_datagram:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:487    .text.ip_reass_dequeue_datagram:00000000 ip_reass_dequeue_datagram
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:242    .text.ip_reass_remove_oldest_datagram:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:246    .text.ip_reass_remove_oldest_datagram:00000000 ip_reass_remove_oldest_datagram
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:386    .text.ip_reass_enqueue_new_datagram:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:390    .text.ip_reass_enqueue_new_datagram:00000000 ip_reass_enqueue_new_datagram
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:483    .text.ip_reass_dequeue_datagram:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:538    .text.ip_reass_chain_frag_into_datagram_and_validate:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:542    .text.ip_reass_chain_frag_into_datagram_and_validate:00000000 ip_reass_chain_frag_into_datagram_and_validate
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:894    .text.ip_reass:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:899    .text.ip_reass:00000000 ip_reass
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:1270   .bss:00000008 buf
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:1273   .text.ip_frag:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccOfNhy5.s:1278   .text.ip_frag:00000000 ip_frag
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1791a5ae2e936ca1033c1c44be394cc7
                           .group:00000000 wm4.ETH004_Conf.h.56.59591edbd6ce1f089c3d2789404b9485
                           .group:00000000 wm4.lwipopts.h.73.a7a63bda1e8216abd1d90275eaaa0027
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.b213c7fd77614ebc3691cef18ad2ff22
                           .group:00000000 wm4.cc.h.66.ec134211c658dcc89de4610e4e7bab46
                           .group:00000000 wm4.arch.h.47.5153c52bfb94ee3b37299920afab6afd
                           .group:00000000 wm4.debug.h.43.557ecd6c90cc70b375bb8a29118be47b
                           .group:00000000 wm4.opt.h.94.d36882acafebb8726bce646fc8b2397b
                           .group:00000000 wm4.err.h.52.37c5d17538f8e8347a9c84196701e92d
                           .group:00000000 wm4.pbuf.h.43.e9a1ad12b97478787a109e22d5306820
                           .group:00000000 wm4.inet.h.46.b516065779826845d16d49f513869a2b
                           .group:00000000 wm4.ip_addr.h.79.9a0ce887ca8c88c22ad7686bcb5105df
                           .group:00000000 wm4.netif.h.77.eb641fb35cae7e4880920e0acf78586f
                           .group:00000000 wm4.def.h.33.f5df81959e69d85e6b3a0a040438efaf
                           .group:00000000 wm4.ip.h.48.ad46847692d4d729760949b27e48a442
                           .group:00000000 wm4.udp.h.48.1a8dde095cd0a13580afaba1443e5a3f
                           .group:00000000 wm4.snmp.h.231.ffb5dc2779dd945785c887dfa42d86eb
                           .group:00000000 wm4.mem.h.96.20770766e6c9e6c42af6bfa95ef5c63f
                           .group:00000000 wm4.memp_std.h.15.aec196dc1c3fb1142dd450db0c167cbf
                           .group:00000000 wm4.memp.h.86.dbc4cb1b8d6b9ea113f04174f716e4c0
                           .group:00000000 wm4.stats.h.147.58ec5b890fad5bbc2a7711ad8105f087
                           .group:00000000 wm4.icmp.h.44.450dbf91f594cc26ad19d086cdc83713
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c

UNDEFINED SYMBOLS
memcpy
icmp_time_exceeded
pbuf_clen
pbuf_free
memp_sizes
mem_malloc
memset
mem_free
ntohs
htons
inet_chksum
pbuf_header
pbuf_cat
pbuf_alloc
pbuf_copy_partial
pbuf_realloc
pbuf_chain
