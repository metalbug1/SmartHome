   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"etharp.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ethbroadcast
  20              		.section	.rodata
  21              		.align	2
  24              	ethbroadcast:
  25 0000 FF       		.byte	-1
  26 0001 FF       		.byte	-1
  27 0002 FF       		.byte	-1
  28 0003 FF       		.byte	-1
  29 0004 FF       		.byte	-1
  30 0005 FF       		.byte	-1
  31              		.global	ethzero
  32 0006 0000     		.align	2
  35              	ethzero:
  36 0008 00000000 		.space	6
  36      0000
  37 000e 0000     		.bss
  38              		.align	2
  39              	arp_table:
  40 0000 00000000 		.space	200
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              	etharp_cached_entry:
  42 00c8 00       		.space	1
  43 00c9 000000   		.section	.text.free_etharp_q,"ax",%progbits
  44              		.align	2
  45              		.thumb
  46              		.thumb_func
  48              	free_etharp_q:
  49              	.LFB117:
  50              		.file 1 "../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c"
   1:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
   2:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @file
   3:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Address Resolution Protocol module for IP over Ethernet
   4:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
   5:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Functionally, ARP is divided into two parts. The first maps an IP address
   6:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * to a physical address when sending a packet, and the second part answers
   7:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * requests from other machines for our physical address.
   8:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
   9:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * This implementation complies with RFC 826 (Ethernet ARP). It supports
  10:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Gratuitious ARP from RFC3220 (IP Mobility Support for IPv4) section 4.6
  11:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * if an interface calls etharp_gratuitous(our_netif) upon address change.
  12:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
  13:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  14:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /*
  15:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Copyright (c) 2001-2003 Swedish Institute of Computer Science.
  16:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Copyright (c) 2003-2004 Leon Woestenberg <leon.woestenberg@axon.tv>
  17:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Copyright (c) 2003-2004 Axon Digital Design B.V., The Netherlands.
  18:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * All rights reserved.
  19:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
  20:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Redistribution and use in source and binary forms, with or without modification,
  21:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * are permitted provided that the following conditions are met:
  22:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
  23:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  24:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *    this list of conditions and the following disclaimer.
  25:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  26:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *    this list of conditions and the following disclaimer in the documentation
  27:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *    and/or other materials provided with the distribution.
  28:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 3. The name of the author may not be used to endorse or promote products
  29:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *    derived from this software without specific prior written permission.
  30:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
  31:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  32:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  34:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  35:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  36:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  37:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  38:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  39:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  40:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * OF SUCH DAMAGE.
  41:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
  42:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * This file is part of the lwIP TCP/IP stack.
  43:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
  44:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
  45:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  
  46:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "lwip/opt.h"
  47:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  48:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_ARP /* don't build if not configured for use in lwipopts.h */
  49:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  50:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "lwip/inet.h"
  51:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "lwip/ip.h"
  52:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "lwip/stats.h"
  53:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "lwip/snmp.h"
  54:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "lwip/dhcp.h"
  55:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "lwip/autoip.h"
  56:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "netif/etharp.h"
  57:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  58:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if PPPOE_SUPPORT
  59:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include "netif/ppp_oe.h"
  60:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* PPPOE_SUPPORT */
  61:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  62:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include <string.h>
  63:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  64:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #include <DAVE3.h>
  65:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  66:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /** the time an ARP entry stays valid after its last update,
  67:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *  for ARP_TMR_INTERVAL = 5000, this is
  68:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *  (240 * 5) seconds = 20 minutes.
  69:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
  70:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define ARP_MAXAGE 240
  71:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /** the time an ARP entry stays pending after first request,
  72:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *  for ARP_TMR_INTERVAL = 5000, this is
  73:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *  (2 * 5) seconds = 10 seconds.
  74:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 
  75:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *  @internal Keep this number at least 2, otherwise it might
  76:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *  run out instantly if the timeout occurs directly after a request.
  77:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
  78:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define ARP_MAXPENDING 2
  79:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  80:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define HWTYPE_ETHERNET 1
  81:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  82:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define ARPH_HWLEN(hdr) (ntohs((hdr)->_hwlen_protolen) >> 8)
  83:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define ARPH_PROTOLEN(hdr) (ntohs((hdr)->_hwlen_protolen) & 0xff)
  84:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  85:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define ARPH_HWLEN_SET(hdr, len) (hdr)->_hwlen_protolen = htons(ARPH_PROTOLEN(hdr) | ((len) << 8))
  86:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define ARPH_PROTOLEN_SET(hdr, len) (hdr)->_hwlen_protolen = htons((len) | (ARPH_HWLEN(hdr) << 8))
  87:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  88:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** enum etharp_state {
  89:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ETHARP_STATE_EMPTY = 0,
  90:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ETHARP_STATE_PENDING,
  91:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ETHARP_STATE_STABLE
  92:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** };
  93:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
  94:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** struct etharp_entry {
  95:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
  96:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /** 
  97:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * Pointer to queue of pending outgoing packets on this ARP entry.
  98:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    */
  99:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct etharp_q_entry *q;
 100:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 101:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct ip_addr ipaddr;
 102:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct eth_addr ethaddr;
 103:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   enum etharp_state state;
 104:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t ctime;
 105:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct netif *netif;
 106:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** };
 107:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 108:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** const struct eth_addr ethbroadcast = {{0xff,0xff,0xff,0xff,0xff,0xff}};
 109:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** const struct eth_addr ethzero = {{0,0,0,0,0,0}};
 110:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static struct etharp_entry arp_table[ARP_TABLE_SIZE];
 111:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if !LWIP_NETIF_HWADDRHINT
 112:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static u8_t etharp_cached_entry;
 113:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 114:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 115:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 116:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Try hard to create a new entry - we want the IP address to appear in
 117:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * the cache (even if this means removing an active entry or so). */
 118:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define ETHARP_TRY_HARD 1
 119:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define ETHARP_FIND_ONLY  2
 120:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 121:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 122:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #define NETIF_SET_HINT(netif, hint)  if (((netif) != NULL) && ((netif)->addr_hint != NULL))  \
 123:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****                                       *((netif)->addr_hint) = (hint);
 124:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static s8_t find_entry(struct ip_addr *ipaddr, u8_t flags, struct netif *netif);
 125:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 126:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static s8_t find_entry(struct ip_addr *ipaddr, u8_t flags);
 127:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 128:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 129:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static err_t update_arp_entry(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr
 130:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 131:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 132:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /* Some checks, instead of etharp_init(): */
 133:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if (LWIP_ARP && (ARP_TABLE_SIZE > 0x7f))
 134:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   #error "If you want to use ARP, ARP_TABLE_SIZE must fit in an s8_t, so, you have to reduce it in 
 135:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 136:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 137:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 138:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
 139:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 140:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Free a complete queue of etharp entries
 141:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 142:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param q a qeueue of etharp_q_entry's to free
 143:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 144:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static void
 145:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** free_etharp_q(struct etharp_q_entry *q)
 146:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
  51              		.loc 1 146 0
  52              		.cfi_startproc
  53              		@ args = 0, pretend = 0, frame = 16
  54              		@ frame_needed = 1, uses_anonymous_args = 0
  55 0000 80B5     		push	{r7, lr}
  56              	.LCFI0:
  57              		.cfi_def_cfa_offset 8
  58              		.cfi_offset 7, -8
  59              		.cfi_offset 14, -4
  60 0002 84B0     		sub	sp, sp, #16
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 24
  63 0004 00AF     		add	r7, sp, #0
  64              	.LCFI2:
  65              		.cfi_def_cfa_register 7
  66 0006 7860     		str	r0, [r7, #4]
 147:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct etharp_q_entry *r;
 148:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ASSERT("q != NULL", q != NULL);
 149:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ASSERT("q->p != NULL", q->p != NULL);
 150:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while (q) {
  67              		.loc 1 150 0
  68 0008 0CE0     		b	.L2
  69              	.L3:
 151:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     r = q;
  70              		.loc 1 151 0
  71 000a 7B68     		ldr	r3, [r7, #4]
  72 000c FB60     		str	r3, [r7, #12]
 152:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     q = q->next;
  73              		.loc 1 152 0
  74 000e 7B68     		ldr	r3, [r7, #4]
  75 0010 1B68     		ldr	r3, [r3, #0]
  76 0012 7B60     		str	r3, [r7, #4]
 153:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 154:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     pbuf_free(r->p);
  77              		.loc 1 154 0
  78 0014 FB68     		ldr	r3, [r7, #12]
  79 0016 5B68     		ldr	r3, [r3, #4]
  80 0018 1846     		mov	r0, r3
  81 001a FFF7FEFF 		bl	pbuf_free
 155:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     memp_free(MEMP_ARP_QUEUE, r);
  82              		.loc 1 155 0
  83 001e F868     		ldr	r0, [r7, #12]
  84 0020 FFF7FEFF 		bl	mem_free
  85              	.L2:
 150:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while (q) {
  86              		.loc 1 150 0 discriminator 1
  87 0024 7B68     		ldr	r3, [r7, #4]
  88 0026 002B     		cmp	r3, #0
  89 0028 EFD1     		bne	.L3
 156:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 157:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
  90              		.loc 1 157 0
  91 002a 07F11007 		add	r7, r7, #16
  92 002e BD46     		mov	sp, r7
  93 0030 80BD     		pop	{r7, pc}
  94              		.cfi_endproc
  95              	.LFE117:
  97 0032 00BF     		.section	.text.etharp_tmr,"ax",%progbits
  98              		.align	2
  99              		.global	etharp_tmr
 100              		.thumb
 101              		.thumb_func
 103              	etharp_tmr:
 104              	.LFB118:
 158:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 159:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 160:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 161:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Clears expired entries in the ARP table.
 162:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 163:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * This function should be called every ETHARP_TMR_INTERVAL microseconds (5 seconds),
 164:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * in order to expire entries in the ARP table.
 165:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 166:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** void
 167:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_tmr(void)
 168:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 105              		.loc 1 168 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 8
 108              		@ frame_needed = 1, uses_anonymous_args = 0
 109 0000 80B5     		push	{r7, lr}
 110              	.LCFI3:
 111              		.cfi_def_cfa_offset 8
 112              		.cfi_offset 7, -8
 113              		.cfi_offset 14, -4
 114 0002 82B0     		sub	sp, sp, #8
 115              	.LCFI4:
 116              		.cfi_def_cfa_offset 16
 117 0004 00AF     		add	r7, sp, #0
 118              	.LCFI5:
 119              		.cfi_def_cfa_register 7
 169:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t i;
 170:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 171:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 172:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* remove expired entries from the ARP table */
 173:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 120              		.loc 1 173 0
 121 0006 4FF00003 		mov	r3, #0
 122 000a FB71     		strb	r3, [r7, #7]
 123 000c AEE0     		b	.L5
 124              	.L10:
 174:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     arp_table[i].ctime++;
 125              		.loc 1 174 0
 126 000e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 127 0010 40F20001 		movw	r1, #:lower16:arp_table
 128 0014 C0F20001 		movt	r1, #:upper16:arp_table
 129 0018 1346     		mov	r3, r2
 130 001a 4FEA8303 		lsl	r3, r3, #2
 131 001e 9B18     		adds	r3, r3, r2
 132 0020 4FEA8303 		lsl	r3, r3, #2
 133 0024 CB18     		adds	r3, r1, r3
 134 0026 03F10803 		add	r3, r3, #8
 135 002a DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 136 002c 03F10103 		add	r3, r3, #1
 137 0030 D8B2     		uxtb	r0, r3
 138 0032 40F20001 		movw	r1, #:lower16:arp_table
 139 0036 C0F20001 		movt	r1, #:upper16:arp_table
 140 003a 1346     		mov	r3, r2
 141 003c 4FEA8303 		lsl	r3, r3, #2
 142 0040 9B18     		adds	r3, r3, r2
 143 0042 4FEA8303 		lsl	r3, r3, #2
 144 0046 CB18     		adds	r3, r1, r3
 145 0048 03F10803 		add	r3, r3, #8
 146 004c 0246     		mov	r2, r0
 147 004e DA71     		strb	r2, [r3, #7]
 175:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (((arp_table[i].state == ETHARP_STATE_STABLE) &&
 148              		.loc 1 175 0
 149 0050 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 150 0052 40F20002 		movw	r2, #:lower16:arp_table
 151 0056 C0F20002 		movt	r2, #:upper16:arp_table
 152 005a 0B46     		mov	r3, r1
 153 005c 4FEA8303 		lsl	r3, r3, #2
 154 0060 5B18     		adds	r3, r3, r1
 155 0062 4FEA8303 		lsl	r3, r3, #2
 156 0066 D318     		adds	r3, r2, r3
 157 0068 03F10803 		add	r3, r3, #8
 158 006c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 159 006e 022B     		cmp	r3, #2
 160 0070 10D1     		bne	.L6
 176:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          (arp_table[i].ctime >= ARP_MAXAGE)) ||
 161              		.loc 1 176 0 discriminator 1
 162 0072 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 163 0074 40F20002 		movw	r2, #:lower16:arp_table
 164 0078 C0F20002 		movt	r2, #:upper16:arp_table
 165 007c 0B46     		mov	r3, r1
 166 007e 4FEA8303 		lsl	r3, r3, #2
 167 0082 5B18     		adds	r3, r3, r1
 168 0084 4FEA8303 		lsl	r3, r3, #2
 169 0088 D318     		adds	r3, r2, r3
 170 008a 03F10803 		add	r3, r3, #8
 171 008e DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 175:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (((arp_table[i].state == ETHARP_STATE_STABLE) &&
 172              		.loc 1 175 0 discriminator 1
 173 0090 EF2B     		cmp	r3, #239
 174 0092 21D8     		bhi	.L7
 175              	.L6:
 177:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 176              		.loc 1 177 0
 177 0094 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 178 0096 40F20002 		movw	r2, #:lower16:arp_table
 179 009a C0F20002 		movt	r2, #:upper16:arp_table
 180 009e 0B46     		mov	r3, r1
 181 00a0 4FEA8303 		lsl	r3, r3, #2
 182 00a4 5B18     		adds	r3, r3, r1
 183 00a6 4FEA8303 		lsl	r3, r3, #2
 184 00aa D318     		adds	r3, r2, r3
 185 00ac 03F10803 		add	r3, r3, #8
 186 00b0 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 176:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          (arp_table[i].ctime >= ARP_MAXAGE)) ||
 187              		.loc 1 176 0
 188 00b2 012B     		cmp	r3, #1
 189 00b4 4FD1     		bne	.L8
 178:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          (arp_table[i].ctime >= ARP_MAXPENDING))) {
 190              		.loc 1 178 0
 191 00b6 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 192 00b8 40F20002 		movw	r2, #:lower16:arp_table
 193 00bc C0F20002 		movt	r2, #:upper16:arp_table
 194 00c0 0B46     		mov	r3, r1
 195 00c2 4FEA8303 		lsl	r3, r3, #2
 196 00c6 5B18     		adds	r3, r3, r1
 197 00c8 4FEA8303 		lsl	r3, r3, #2
 198 00cc D318     		adds	r3, r2, r3
 199 00ce 03F10803 		add	r3, r3, #8
 200 00d2 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 177:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 201              		.loc 1 177 0
 202 00d4 012B     		cmp	r3, #1
 203 00d6 3ED9     		bls	.L8
 204              	.L7:
 179:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          /* pending or stable entry has become old! */
 180:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
 181:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****            arp_table[i].state == ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
 182:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* clean up entries that have just been expired */
 183:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* remove from SNMP ARP index tree */
 184:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
 185:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
 186:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* and empty packet queue */
 187:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if (arp_table[i].q != NULL) {
 205              		.loc 1 187 0
 206 00d8 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 207 00da 40F20002 		movw	r2, #:lower16:arp_table
 208 00de C0F20002 		movt	r2, #:upper16:arp_table
 209 00e2 0B46     		mov	r3, r1
 210 00e4 4FEA8303 		lsl	r3, r3, #2
 211 00e8 5B18     		adds	r3, r3, r1
 212 00ea 4FEA8303 		lsl	r3, r3, #2
 213 00ee D318     		adds	r3, r2, r3
 214 00f0 1B68     		ldr	r3, [r3, #0]
 215 00f2 002B     		cmp	r3, #0
 216 00f4 1ED0     		beq	.L9
 188:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* remove all queued packets */
 189:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: freeing entry %"U16_F", packet queue %p.\n", (u16
 190:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         free_etharp_q(arp_table[i].q);
 217              		.loc 1 190 0
 218 00f6 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 219 00f8 40F20002 		movw	r2, #:lower16:arp_table
 220 00fc C0F20002 		movt	r2, #:upper16:arp_table
 221 0100 0B46     		mov	r3, r1
 222 0102 4FEA8303 		lsl	r3, r3, #2
 223 0106 5B18     		adds	r3, r3, r1
 224 0108 4FEA8303 		lsl	r3, r3, #2
 225 010c D318     		adds	r3, r2, r3
 226 010e 1B68     		ldr	r3, [r3, #0]
 227 0110 1846     		mov	r0, r3
 228 0112 FFF7FEFF 		bl	free_etharp_q
 191:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         arp_table[i].q = NULL;
 229              		.loc 1 191 0
 230 0116 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 231 0118 40F20002 		movw	r2, #:lower16:arp_table
 232 011c C0F20002 		movt	r2, #:upper16:arp_table
 233 0120 0B46     		mov	r3, r1
 234 0122 4FEA8303 		lsl	r3, r3, #2
 235 0126 5B18     		adds	r3, r3, r1
 236 0128 4FEA8303 		lsl	r3, r3, #2
 237 012c D318     		adds	r3, r2, r3
 238 012e 4FF00002 		mov	r2, #0
 239 0132 1A60     		str	r2, [r3, #0]
 240              	.L9:
 192:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
 193:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 194:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* recycle entry for re-use */      
 195:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       arp_table[i].state = ETHARP_STATE_EMPTY;
 241              		.loc 1 195 0
 242 0134 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 243 0136 40F20002 		movw	r2, #:lower16:arp_table
 244 013a C0F20002 		movt	r2, #:upper16:arp_table
 245 013e 0B46     		mov	r3, r1
 246 0140 4FEA8303 		lsl	r3, r3, #2
 247 0144 5B18     		adds	r3, r3, r1
 248 0146 4FEA8303 		lsl	r3, r3, #2
 249 014a D318     		adds	r3, r2, r3
 250 014c 03F10803 		add	r3, r3, #8
 251 0150 4FF00002 		mov	r2, #0
 252 0154 9A71     		strb	r2, [r3, #6]
 253              	.L8:
 196:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 197:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
 198:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* still pending entry? (not expired) */
 199:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (arp_table[i].state == ETHARP_STATE_PENDING) {
 254              		.loc 1 199 0
 255 0156 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 256 0158 1346     		mov	r3, r2
 257 015a 4FEA8303 		lsl	r3, r3, #2
 258 015e 9B18     		adds	r3, r3, r2
 259 0160 4FEA8303 		lsl	r3, r3, #2
 173:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 260              		.loc 1 173 0
 261 0164 FB79     		ldrb	r3, [r7, #7]
 262 0166 03F10103 		add	r3, r3, #1
 263 016a FB71     		strb	r3, [r7, #7]
 264              	.L5:
 173:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 265              		.loc 1 173 0 is_stmt 0 discriminator 1
 266 016c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 267 016e 092B     		cmp	r3, #9
 268 0170 7FF64DAF 		bls	.L10
 200:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* resend an ARP query here? */
 201:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 202:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 203:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 204:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 269              		.loc 1 204 0 is_stmt 1
 270 0174 07F10807 		add	r7, r7, #8
 271 0178 BD46     		mov	sp, r7
 272 017a 80BD     		pop	{r7, pc}
 273              		.cfi_endproc
 274              	.LFE118:
 276              		.section	.text.find_entry,"ax",%progbits
 277              		.align	2
 278              		.thumb
 279              		.thumb_func
 281              	find_entry:
 282              	.LFB119:
 205:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 206:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 207:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Search the ARP table for a matching or new entry.
 208:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 
 209:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * If an IP address is given, return a pending or stable ARP entry that matches
 210:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * the address. If no match is found, create a new entry with this address set,
 211:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * but in state ETHARP_EMPTY. The caller must check and possibly change the
 212:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * state of the returned entry.
 213:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 
 214:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * If ipaddr is NULL, return a initialized new entry in state ETHARP_EMPTY.
 215:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 
 216:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * In all cases, attempt to create new entries from an empty entry. If no
 217:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * empty entries are available and ETHARP_TRY_HARD flag is set, recycle
 218:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * old entries. Heuristic choose the least important entry for recycling.
 219:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 220:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ipaddr IP address to find in ARP cache, or to add if not found.
 221:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param flags
 222:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ETHARP_TRY_HARD: Try hard to create a entry by allowing recycling of
 223:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * active (stable or pending) entries.
 224:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *  
 225:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return The ARP entry index that matched or is created, ERR_MEM if no
 226:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * entry is found or could be recycled.
 227:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 228:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static s8_t
 229:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 230:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** find_entry(struct ip_addr *ipaddr, u8_t flags, struct netif *netif)
 231:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 232:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** find_entry(struct ip_addr *ipaddr, u8_t flags)
 233:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 234:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 283              		.loc 1 234 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 16
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287 0000 80B5     		push	{r7, lr}
 288              	.LCFI6:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 7, -8
 291              		.cfi_offset 14, -4
 292 0002 84B0     		sub	sp, sp, #16
 293              	.LCFI7:
 294              		.cfi_def_cfa_offset 24
 295 0004 00AF     		add	r7, sp, #0
 296              	.LCFI8:
 297              		.cfi_def_cfa_register 7
 298 0006 7860     		str	r0, [r7, #4]
 299 0008 0B46     		mov	r3, r1
 300 000a FB70     		strb	r3, [r7, #3]
 235:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 301              		.loc 1 235 0
 302 000c 4FF00A03 		mov	r3, #10
 303 0010 FB73     		strb	r3, [r7, #15]
 304 0012 4FF00A03 		mov	r3, #10
 305 0016 BB73     		strb	r3, [r7, #14]
 236:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   s8_t empty = ARP_TABLE_SIZE;
 306              		.loc 1 236 0
 307 0018 4FF00A03 		mov	r3, #10
 308 001c 7B73     		strb	r3, [r7, #13]
 237:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t i = 0, age_pending = 0, age_stable = 0;
 309              		.loc 1 237 0
 310 001e 4FF00003 		mov	r3, #0
 311 0022 3B73     		strb	r3, [r7, #12]
 312 0024 4FF00003 		mov	r3, #0
 313 0028 FB72     		strb	r3, [r7, #11]
 314 002a 4FF00003 		mov	r3, #0
 315 002e BB72     		strb	r3, [r7, #10]
 238:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
 239:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* oldest entry with packets on queue */
 240:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   s8_t old_queue = ARP_TABLE_SIZE;
 316              		.loc 1 240 0
 317 0030 4FF00A03 		mov	r3, #10
 318 0034 7B72     		strb	r3, [r7, #9]
 241:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* its age */
 242:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t age_queue = 0;
 319              		.loc 1 242 0
 320 0036 4FF00003 		mov	r3, #0
 321 003a 3B72     		strb	r3, [r7, #8]
 243:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 244:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 245:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* First, test if the last call to this function asked for the
 246:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * same address. If so, we're really fast! */
 247:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ipaddr) {
 322              		.loc 1 247 0
 323 003c 7B68     		ldr	r3, [r7, #4]
 324 003e 002B     		cmp	r3, #0
 325 0040 34D0     		beq	.L12
 248:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* ipaddr to search for was given */
 249:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 250:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if ((netif != NULL) && (netif->addr_hint != NULL)) {
 251:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* per-pcb cached entry was given */
 252:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       u8_t per_pcb_cache = *(netif->addr_hint);
 253:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if ((per_pcb_cache < ARP_TABLE_SIZE) && arp_table[per_pcb_cache].state == ETHARP_STATE_STABLE
 254:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* the per-pcb-cached entry is stable */
 255:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         if (ip_addr_cmp(ipaddr, &arp_table[per_pcb_cache].ipaddr)) {
 256:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           /* per-pcb cached entry was the right one! */
 257:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           ETHARP_STATS_INC(etharp.cachehit);
 258:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           return per_pcb_cache;
 259:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         }
 260:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
 261:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 262:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* #if LWIP_NETIF_HWADDRHINT */
 263:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (arp_table[etharp_cached_entry].state == ETHARP_STATE_STABLE) {
 326              		.loc 1 263 0
 327 0042 40F20003 		movw	r3, #:lower16:etharp_cached_entry
 328 0046 C0F20003 		movt	r3, #:upper16:etharp_cached_entry
 329 004a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 330 004c 1946     		mov	r1, r3
 331 004e 40F20002 		movw	r2, #:lower16:arp_table
 332 0052 C0F20002 		movt	r2, #:upper16:arp_table
 333 0056 0B46     		mov	r3, r1
 334 0058 4FEA8303 		lsl	r3, r3, #2
 335 005c 5B18     		adds	r3, r3, r1
 336 005e 4FEA8303 		lsl	r3, r3, #2
 337 0062 D318     		adds	r3, r2, r3
 338 0064 03F10803 		add	r3, r3, #8
 339 0068 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 340 006a 022B     		cmp	r3, #2
 341 006c 1ED1     		bne	.L12
 264:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* the cached entry is stable */
 265:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if (ip_addr_cmp(ipaddr, &arp_table[etharp_cached_entry].ipaddr)) {
 342              		.loc 1 265 0
 343 006e 7B68     		ldr	r3, [r7, #4]
 344 0070 1868     		ldr	r0, [r3, #0]	@ unaligned
 345 0072 40F20003 		movw	r3, #:lower16:etharp_cached_entry
 346 0076 C0F20003 		movt	r3, #:upper16:etharp_cached_entry
 347 007a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 348 007c 1946     		mov	r1, r3
 349 007e 40F20002 		movw	r2, #:lower16:arp_table
 350 0082 C0F20002 		movt	r2, #:upper16:arp_table
 351 0086 0B46     		mov	r3, r1
 352 0088 4FEA8303 		lsl	r3, r3, #2
 353 008c 5B18     		adds	r3, r3, r1
 354 008e 4FEA8303 		lsl	r3, r3, #2
 355 0092 D318     		adds	r3, r2, r3
 356 0094 03F10403 		add	r3, r3, #4
 357 0098 1B68     		ldr	r3, [r3, #0]
 358 009a 9842     		cmp	r0, r3
 359 009c 06D1     		bne	.L12
 266:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* cached entry was the right one! */
 267:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ETHARP_STATS_INC(etharp.cachehit);
 268:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         return etharp_cached_entry;
 360              		.loc 1 268 0
 361 009e 40F20003 		movw	r3, #:lower16:etharp_cached_entry
 362 00a2 C0F20003 		movt	r3, #:upper16:etharp_cached_entry
 363 00a6 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 364 00a8 DBB2     		uxtb	r3, r3
 365 00aa 9FE1     		b	.L13
 366              	.L12:
 269:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
 270:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 271:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* #if LWIP_NETIF_HWADDRHINT */
 272:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 273:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 274:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /**
 275:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * a) do a search through the cache, remember candidates
 276:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * b) select candidate entry
 277:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * c) create new entry
 278:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    */
 279:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 280:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* a) in a single search sweep, do all of this
 281:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 1) remember the first empty entry (if any)
 282:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 2) remember the oldest stable entry (if any)
 283:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 3) remember the oldest pending entry without queued packets (if any)
 284:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 4) remember the oldest pending entry with queued packets (if any)
 285:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 5) search for a matching IP entry, either pending or stable
 286:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    *    until 5 matches, or all entries are searched for.
 287:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    */
 288:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 289:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 367              		.loc 1 289 0
 368 00ac 4FF00003 		mov	r3, #0
 369 00b0 3B73     		strb	r3, [r7, #12]
 370 00b2 F7E0     		b	.L14
 371              	.L21:
 290:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* no empty entry found yet and now we do find one? */
 291:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if ((empty == ARP_TABLE_SIZE) && (arp_table[i].state == ETHARP_STATE_EMPTY)) {
 372              		.loc 1 291 0
 373 00b4 97F90D30 		ldrsb	r3, [r7, #13]
 374 00b8 0A2B     		cmp	r3, #10
 375 00ba 13D1     		bne	.L15
 376              		.loc 1 291 0 is_stmt 0 discriminator 1
 377 00bc 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 378 00be 40F20002 		movw	r2, #:lower16:arp_table
 379 00c2 C0F20002 		movt	r2, #:upper16:arp_table
 380 00c6 0B46     		mov	r3, r1
 381 00c8 4FEA8303 		lsl	r3, r3, #2
 382 00cc 5B18     		adds	r3, r3, r1
 383 00ce 4FEA8303 		lsl	r3, r3, #2
 384 00d2 D318     		adds	r3, r2, r3
 385 00d4 03F10803 		add	r3, r3, #8
 386 00d8 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 387 00da 002B     		cmp	r3, #0
 388 00dc 02D1     		bne	.L15
 292:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG, ("find_entry: found empty entry %"U16_F"\n", (u16_t)i));
 293:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* remember first empty entry */
 294:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       empty = i;
 389              		.loc 1 294 0 is_stmt 1
 390 00de 3B7B     		ldrb	r3, [r7, #12]
 391 00e0 7B73     		strb	r3, [r7, #13]
 392 00e2 DBE0     		b	.L16
 393              	.L15:
 295:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 296:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* pending entry? */
 297:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 394              		.loc 1 297 0
 395 00e4 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 396 00e6 40F20002 		movw	r2, #:lower16:arp_table
 397 00ea C0F20002 		movt	r2, #:upper16:arp_table
 398 00ee 0B46     		mov	r3, r1
 399 00f0 4FEA8303 		lsl	r3, r3, #2
 400 00f4 5B18     		adds	r3, r3, r1
 401 00f6 4FEA8303 		lsl	r3, r3, #2
 402 00fa D318     		adds	r3, r2, r3
 403 00fc 03F10803 		add	r3, r3, #8
 404 0100 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 405 0102 012B     		cmp	r3, #1
 406 0104 77D1     		bne	.L17
 298:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* if given, does IP address match IP address in ARP entry? */
 299:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 407              		.loc 1 299 0
 408 0106 7B68     		ldr	r3, [r7, #4]
 409 0108 002B     		cmp	r3, #0
 410 010a 1AD0     		beq	.L18
 411              		.loc 1 299 0 is_stmt 0 discriminator 1
 412 010c 7B68     		ldr	r3, [r7, #4]
 413 010e 1868     		ldr	r0, [r3, #0]	@ unaligned
 414 0110 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 415 0112 40F20002 		movw	r2, #:lower16:arp_table
 416 0116 C0F20002 		movt	r2, #:upper16:arp_table
 417 011a 0B46     		mov	r3, r1
 418 011c 4FEA8303 		lsl	r3, r3, #2
 419 0120 5B18     		adds	r3, r3, r1
 420 0122 4FEA8303 		lsl	r3, r3, #2
 421 0126 D318     		adds	r3, r2, r3
 422 0128 03F10403 		add	r3, r3, #4
 423 012c 1B68     		ldr	r3, [r3, #0]
 424 012e 9842     		cmp	r0, r3
 425 0130 07D1     		bne	.L18
 300:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: found matching pending entry %"U16
 301:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* found exact IP address match, simply bail out */
 302:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 303:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         NETIF_SET_HINT(netif, i);
 304:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* #if LWIP_NETIF_HWADDRHINT */
 305:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         etharp_cached_entry = i;
 426              		.loc 1 305 0 is_stmt 1
 427 0132 40F20003 		movw	r3, #:lower16:etharp_cached_entry
 428 0136 C0F20003 		movt	r3, #:upper16:etharp_cached_entry
 429 013a 3A7B     		ldrb	r2, [r7, #12]
 430 013c 1A70     		strb	r2, [r3, #0]
 306:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* #if LWIP_NETIF_HWADDRHINT */
 307:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         return i;
 431              		.loc 1 307 0
 432 013e 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 433 0140 54E1     		b	.L13
 434              	.L18:
 308:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
 309:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* pending with queued packets? */
 310:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       } else if (arp_table[i].q != NULL) {
 435              		.loc 1 310 0
 436 0142 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 437 0144 40F20002 		movw	r2, #:lower16:arp_table
 438 0148 C0F20002 		movt	r2, #:upper16:arp_table
 439 014c 0B46     		mov	r3, r1
 440 014e 4FEA8303 		lsl	r3, r3, #2
 441 0152 5B18     		adds	r3, r3, r1
 442 0154 4FEA8303 		lsl	r3, r3, #2
 443 0158 D318     		adds	r3, r2, r3
 444 015a 1B68     		ldr	r3, [r3, #0]
 445 015c 002B     		cmp	r3, #0
 446 015e 25D0     		beq	.L19
 311:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         if (arp_table[i].ctime >= age_queue) {
 447              		.loc 1 311 0
 448 0160 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 449 0162 40F20002 		movw	r2, #:lower16:arp_table
 450 0166 C0F20002 		movt	r2, #:upper16:arp_table
 451 016a 0B46     		mov	r3, r1
 452 016c 4FEA8303 		lsl	r3, r3, #2
 453 0170 5B18     		adds	r3, r3, r1
 454 0172 4FEA8303 		lsl	r3, r3, #2
 455 0176 D318     		adds	r3, r2, r3
 456 0178 03F10803 		add	r3, r3, #8
 457 017c DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 458 017e 3A7A     		ldrb	r2, [r7, #8]	@ zero_extendqisi2
 459 0180 9A42     		cmp	r2, r3
 460 0182 00F28B80 		bhi	.L16
 312:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           old_queue = i;
 461              		.loc 1 312 0
 462 0186 3B7B     		ldrb	r3, [r7, #12]
 463 0188 7B72     		strb	r3, [r7, #9]
 313:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           age_queue = arp_table[i].ctime;
 464              		.loc 1 313 0
 465 018a 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 466 018c 40F20002 		movw	r2, #:lower16:arp_table
 467 0190 C0F20002 		movt	r2, #:upper16:arp_table
 468 0194 0B46     		mov	r3, r1
 469 0196 4FEA8303 		lsl	r3, r3, #2
 470 019a 5B18     		adds	r3, r3, r1
 471 019c 4FEA8303 		lsl	r3, r3, #2
 472 01a0 D318     		adds	r3, r2, r3
 473 01a2 03F10803 		add	r3, r3, #8
 474 01a6 DB79     		ldrb	r3, [r3, #7]
 475 01a8 3B72     		strb	r3, [r7, #8]
 476 01aa 77E0     		b	.L16
 477              	.L19:
 314:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         }
 315:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 316:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* pending without queued packets? */
 317:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       } else {
 318:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         if (arp_table[i].ctime >= age_pending) {
 478              		.loc 1 318 0
 479 01ac 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 480 01ae 40F20002 		movw	r2, #:lower16:arp_table
 481 01b2 C0F20002 		movt	r2, #:upper16:arp_table
 482 01b6 0B46     		mov	r3, r1
 483 01b8 4FEA8303 		lsl	r3, r3, #2
 484 01bc 5B18     		adds	r3, r3, r1
 485 01be 4FEA8303 		lsl	r3, r3, #2
 486 01c2 D318     		adds	r3, r2, r3
 487 01c4 03F10803 		add	r3, r3, #8
 488 01c8 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 489 01ca FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 490 01cc 9A42     		cmp	r2, r3
 491 01ce 65D8     		bhi	.L16
 319:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           old_pending = i;
 492              		.loc 1 319 0
 493 01d0 3B7B     		ldrb	r3, [r7, #12]
 494 01d2 FB73     		strb	r3, [r7, #15]
 320:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           age_pending = arp_table[i].ctime;
 495              		.loc 1 320 0
 496 01d4 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 497 01d6 40F20002 		movw	r2, #:lower16:arp_table
 498 01da C0F20002 		movt	r2, #:upper16:arp_table
 499 01de 0B46     		mov	r3, r1
 500 01e0 4FEA8303 		lsl	r3, r3, #2
 501 01e4 5B18     		adds	r3, r3, r1
 502 01e6 4FEA8303 		lsl	r3, r3, #2
 503 01ea D318     		adds	r3, r2, r3
 504 01ec 03F10803 		add	r3, r3, #8
 505 01f0 DB79     		ldrb	r3, [r3, #7]
 506 01f2 FB72     		strb	r3, [r7, #11]
 507 01f4 52E0     		b	.L16
 508              	.L17:
 321:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         }
 322:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }        
 323:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 324:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* stable entry? */
 325:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     else if (arp_table[i].state == ETHARP_STATE_STABLE) {
 509              		.loc 1 325 0
 510 01f6 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 511 01f8 40F20002 		movw	r2, #:lower16:arp_table
 512 01fc C0F20002 		movt	r2, #:upper16:arp_table
 513 0200 0B46     		mov	r3, r1
 514 0202 4FEA8303 		lsl	r3, r3, #2
 515 0206 5B18     		adds	r3, r3, r1
 516 0208 4FEA8303 		lsl	r3, r3, #2
 517 020c D318     		adds	r3, r2, r3
 518 020e 03F10803 		add	r3, r3, #8
 519 0212 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 520 0214 022B     		cmp	r3, #2
 521 0216 41D1     		bne	.L16
 326:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* if given, does IP address match IP address in ARP entry? */
 327:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if (ipaddr && ip_addr_cmp(ipaddr, &arp_table[i].ipaddr)) {
 522              		.loc 1 327 0
 523 0218 7B68     		ldr	r3, [r7, #4]
 524 021a 002B     		cmp	r3, #0
 525 021c 1AD0     		beq	.L20
 526              		.loc 1 327 0 is_stmt 0 discriminator 1
 527 021e 7B68     		ldr	r3, [r7, #4]
 528 0220 1868     		ldr	r0, [r3, #0]	@ unaligned
 529 0222 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 530 0224 40F20002 		movw	r2, #:lower16:arp_table
 531 0228 C0F20002 		movt	r2, #:upper16:arp_table
 532 022c 0B46     		mov	r3, r1
 533 022e 4FEA8303 		lsl	r3, r3, #2
 534 0232 5B18     		adds	r3, r3, r1
 535 0234 4FEA8303 		lsl	r3, r3, #2
 536 0238 D318     		adds	r3, r2, r3
 537 023a 03F10403 		add	r3, r3, #4
 538 023e 1B68     		ldr	r3, [r3, #0]
 539 0240 9842     		cmp	r0, r3
 540 0242 07D1     		bne	.L20
 328:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: found matching stable entry %"U16_
 329:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* found exact IP address match, simply bail out */
 330:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 331:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         NETIF_SET_HINT(netif, i);
 332:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* #if LWIP_NETIF_HWADDRHINT */
 333:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         etharp_cached_entry = i;
 541              		.loc 1 333 0 is_stmt 1
 542 0244 40F20003 		movw	r3, #:lower16:etharp_cached_entry
 543 0248 C0F20003 		movt	r3, #:upper16:etharp_cached_entry
 544 024c 3A7B     		ldrb	r2, [r7, #12]
 545 024e 1A70     		strb	r2, [r3, #0]
 334:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* #if LWIP_NETIF_HWADDRHINT */
 335:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         return i;
 546              		.loc 1 335 0
 547 0250 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 548 0252 CBE0     		b	.L13
 549              	.L20:
 336:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* remember entry with oldest stable entry in oldest, its age in maxtime */
 337:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       } else if (arp_table[i].ctime >= age_stable) {
 550              		.loc 1 337 0
 551 0254 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 552 0256 40F20002 		movw	r2, #:lower16:arp_table
 553 025a C0F20002 		movt	r2, #:upper16:arp_table
 554 025e 0B46     		mov	r3, r1
 555 0260 4FEA8303 		lsl	r3, r3, #2
 556 0264 5B18     		adds	r3, r3, r1
 557 0266 4FEA8303 		lsl	r3, r3, #2
 558 026a D318     		adds	r3, r2, r3
 559 026c 03F10803 		add	r3, r3, #8
 560 0270 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 561 0272 BA7A     		ldrb	r2, [r7, #10]	@ zero_extendqisi2
 562 0274 9A42     		cmp	r2, r3
 563 0276 11D8     		bhi	.L16
 338:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         old_stable = i;
 564              		.loc 1 338 0
 565 0278 3B7B     		ldrb	r3, [r7, #12]
 566 027a BB73     		strb	r3, [r7, #14]
 339:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         age_stable = arp_table[i].ctime;
 567              		.loc 1 339 0
 568 027c 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 569 027e 40F20002 		movw	r2, #:lower16:arp_table
 570 0282 C0F20002 		movt	r2, #:upper16:arp_table
 571 0286 0B46     		mov	r3, r1
 572 0288 4FEA8303 		lsl	r3, r3, #2
 573 028c 5B18     		adds	r3, r3, r1
 574 028e 4FEA8303 		lsl	r3, r3, #2
 575 0292 D318     		adds	r3, r2, r3
 576 0294 03F10803 		add	r3, r3, #8
 577 0298 DB79     		ldrb	r3, [r3, #7]
 578 029a BB72     		strb	r3, [r7, #10]
 579              	.L16:
 289:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 580              		.loc 1 289 0
 581 029c 3B7B     		ldrb	r3, [r7, #12]
 582 029e 03F10103 		add	r3, r3, #1
 583 02a2 3B73     		strb	r3, [r7, #12]
 584              	.L14:
 289:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 585              		.loc 1 289 0 is_stmt 0 discriminator 1
 586 02a4 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 587 02a6 092B     		cmp	r3, #9
 588 02a8 7FF604AF 		bls	.L21
 340:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
 341:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 342:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 343:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* { we have no match } => try to create a new entry */
 344:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    
 345:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* no empty entry found and not allowed to recycle? */
 346:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_TRY_HARD) == 0))
 589              		.loc 1 346 0 is_stmt 1
 590 02ac 97F90D30 		ldrsb	r3, [r7, #13]
 591 02b0 0A2B     		cmp	r3, #10
 592 02b2 04D1     		bne	.L22
 593              		.loc 1 346 0 is_stmt 0 discriminator 1
 594 02b4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 595 02b6 03F00103 		and	r3, r3, #1
 596 02ba 002B     		cmp	r3, #0
 597 02bc 04D0     		beq	.L23
 598              	.L22:
 347:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* or don't create new entry, only search? */
 348:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       || ((flags & ETHARP_FIND_ONLY) != 0)) {
 599              		.loc 1 348 0 is_stmt 1
 600 02be FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 601 02c0 03F00203 		and	r3, r3, #2
 602 02c4 002B     		cmp	r3, #0
 603 02c6 02D0     		beq	.L24
 604              	.L23:
 349:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: no empty entry found and not allowed t
 350:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return (s8_t)ERR_MEM;
 605              		.loc 1 350 0
 606 02c8 4FF0FF03 		mov	r3, #255
 607 02cc 8EE0     		b	.L13
 608              	.L24:
 351:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 352:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   
 353:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* b) choose the least destructive entry to recycle:
 354:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 1) empty entry
 355:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 2) oldest stable entry
 356:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 3) oldest pending entry without queued packets
 357:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 4) oldest pending entry with queued packets
 358:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * 
 359:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * { ETHARP_TRY_HARD is set at this point }
 360:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    */ 
 361:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 362:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* 1) empty entry available? */
 363:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (empty < ARP_TABLE_SIZE) {
 609              		.loc 1 363 0
 610 02ce 97F90D30 		ldrsb	r3, [r7, #13]
 611 02d2 092B     		cmp	r3, #9
 612 02d4 02DC     		bgt	.L25
 364:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     i = empty;
 613              		.loc 1 364 0
 614 02d6 7B7B     		ldrb	r3, [r7, #13]
 615 02d8 3B73     		strb	r3, [r7, #12]
 616 02da 3DE0     		b	.L26
 617              	.L25:
 365:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting empty entry %"U16_F"\n", (u1
 366:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 367:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* 2) found recyclable stable entry? */
 368:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   else if (old_stable < ARP_TABLE_SIZE) {
 618              		.loc 1 368 0
 619 02dc 97F90E30 		ldrsb	r3, [r7, #14]
 620 02e0 092B     		cmp	r3, #9
 621 02e2 09DC     		bgt	.L27
 369:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* recycle oldest stable*/
 370:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     i = old_stable;
 622              		.loc 1 370 0
 623 02e4 BB7B     		ldrb	r3, [r7, #14]
 624 02e6 3B73     		strb	r3, [r7, #12]
 371:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest stable entry %"U16_F"
 372:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
 373:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* no queued packets should exist on stable entries */
 374:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 625              		.loc 1 374 0
 626 02e8 3A7B     		ldrb	r2, [r7, #12]	@ zero_extendqisi2
 627 02ea 1346     		mov	r3, r2
 628 02ec 4FEA8303 		lsl	r3, r3, #2
 629 02f0 9B18     		adds	r3, r3, r2
 630 02f2 4FEA8303 		lsl	r3, r3, #2
 631 02f6 2FE0     		b	.L26
 632              	.L27:
 375:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 376:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* 3) found recyclable pending entry without queued packets? */
 377:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   } else if (old_pending < ARP_TABLE_SIZE) {
 633              		.loc 1 377 0
 634 02f8 97F90F30 		ldrsb	r3, [r7, #15]
 635 02fc 092B     		cmp	r3, #9
 636 02fe 02DC     		bgt	.L28
 378:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* recycle oldest pending */
 379:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     i = old_pending;
 637              		.loc 1 379 0
 638 0300 FB7B     		ldrb	r3, [r7, #15]
 639 0302 3B73     		strb	r3, [r7, #12]
 640 0304 28E0     		b	.L26
 641              	.L28:
 380:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F
 381:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
 382:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* 4) found recyclable pending entry with queued packets? */
 383:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   } else if (old_queue < ARP_TABLE_SIZE) {
 642              		.loc 1 383 0
 643 0306 97F90930 		ldrsb	r3, [r7, #9]
 644 030a 092B     		cmp	r3, #9
 645 030c 21DC     		bgt	.L29
 384:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* recycle oldest pending */
 385:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     i = old_queue;
 646              		.loc 1 385 0
 647 030e 7B7A     		ldrb	r3, [r7, #9]
 648 0310 3B73     		strb	r3, [r7, #12]
 386:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("find_entry: selecting oldest pending entry %"U16_F
 387:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     free_etharp_q(arp_table[i].q);
 649              		.loc 1 387 0
 650 0312 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 651 0314 40F20002 		movw	r2, #:lower16:arp_table
 652 0318 C0F20002 		movt	r2, #:upper16:arp_table
 653 031c 0B46     		mov	r3, r1
 654 031e 4FEA8303 		lsl	r3, r3, #2
 655 0322 5B18     		adds	r3, r3, r1
 656 0324 4FEA8303 		lsl	r3, r3, #2
 657 0328 D318     		adds	r3, r2, r3
 658 032a 1B68     		ldr	r3, [r3, #0]
 659 032c 1846     		mov	r0, r3
 660 032e FFF7FEFF 		bl	free_etharp_q
 388:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     arp_table[i].q = NULL;
 661              		.loc 1 388 0
 662 0332 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 663 0334 40F20002 		movw	r2, #:lower16:arp_table
 664 0338 C0F20002 		movt	r2, #:upper16:arp_table
 665 033c 0B46     		mov	r3, r1
 666 033e 4FEA8303 		lsl	r3, r3, #2
 667 0342 5B18     		adds	r3, r3, r1
 668 0344 4FEA8303 		lsl	r3, r3, #2
 669 0348 D318     		adds	r3, r2, r3
 670 034a 4FF00002 		mov	r2, #0
 671 034e 1A60     		str	r2, [r3, #0]
 672 0350 02E0     		b	.L26
 673              	.L29:
 389:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 390:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* no empty or recyclable entries found */
 391:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   } else {
 392:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return (s8_t)ERR_MEM;
 674              		.loc 1 392 0
 675 0352 4FF0FF03 		mov	r3, #255
 676 0356 49E0     		b	.L13
 677              	.L26:
 393:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 394:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 395:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* { empty or recyclable entry found } */
 396:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 397:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 398:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (arp_table[i].state != ETHARP_STATE_EMPTY)
 678              		.loc 1 398 0
 679 0358 3A7B     		ldrb	r2, [r7, #12]	@ zero_extendqisi2
 680 035a 1346     		mov	r3, r2
 681 035c 4FEA8303 		lsl	r3, r3, #2
 682 0360 9B18     		adds	r3, r3, r2
 683 0362 4FEA8303 		lsl	r3, r3, #2
 399:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   {
 400:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     snmp_delete_arpidx_tree(arp_table[i].netif, &arp_table[i].ipaddr);
 401:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 402:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* recycle entry (no-op for an already empty entry) */
 403:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   arp_table[i].state = ETHARP_STATE_EMPTY;
 684              		.loc 1 403 0
 685 0366 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 686 0368 40F20002 		movw	r2, #:lower16:arp_table
 687 036c C0F20002 		movt	r2, #:upper16:arp_table
 688 0370 0B46     		mov	r3, r1
 689 0372 4FEA8303 		lsl	r3, r3, #2
 690 0376 5B18     		adds	r3, r3, r1
 691 0378 4FEA8303 		lsl	r3, r3, #2
 692 037c D318     		adds	r3, r2, r3
 693 037e 03F10803 		add	r3, r3, #8
 694 0382 4FF00002 		mov	r2, #0
 695 0386 9A71     		strb	r2, [r3, #6]
 404:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 405:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* IP address given? */
 406:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ipaddr != NULL) {
 696              		.loc 1 406 0
 697 0388 7B68     		ldr	r3, [r7, #4]
 698 038a 002B     		cmp	r3, #0
 699 038c 16D0     		beq	.L30
 407:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* set IP address */
 408:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ip_addr_set(&arp_table[i].ipaddr, ipaddr);
 700              		.loc 1 408 0
 701 038e 387B     		ldrb	r0, [r7, #12]	@ zero_extendqisi2
 702 0390 7B68     		ldr	r3, [r7, #4]
 703 0392 002B     		cmp	r3, #0
 704 0394 02D0     		beq	.L31
 705              		.loc 1 408 0 is_stmt 0 discriminator 1
 706 0396 7B68     		ldr	r3, [r7, #4]
 707 0398 1968     		ldr	r1, [r3, #0]	@ unaligned
 708 039a 01E0     		b	.L32
 709              	.L31:
 710              		.loc 1 408 0 discriminator 2
 711 039c 4FF00001 		mov	r1, #0
 712              	.L32:
 713              		.loc 1 408 0 discriminator 3
 714 03a0 40F20002 		movw	r2, #:lower16:arp_table
 715 03a4 C0F20002 		movt	r2, #:upper16:arp_table
 716 03a8 0346     		mov	r3, r0
 717 03aa 4FEA8303 		lsl	r3, r3, #2
 718 03ae 1B18     		adds	r3, r3, r0
 719 03b0 4FEA8303 		lsl	r3, r3, #2
 720 03b4 D318     		adds	r3, r2, r3
 721 03b6 03F10403 		add	r3, r3, #4
 722 03ba 1960     		str	r1, [r3, #0]
 723              	.L30:
 409:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 410:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   arp_table[i].ctime = 0;
 724              		.loc 1 410 0 is_stmt 1
 725 03bc 397B     		ldrb	r1, [r7, #12]	@ zero_extendqisi2
 726 03be 40F20002 		movw	r2, #:lower16:arp_table
 727 03c2 C0F20002 		movt	r2, #:upper16:arp_table
 728 03c6 0B46     		mov	r3, r1
 729 03c8 4FEA8303 		lsl	r3, r3, #2
 730 03cc 5B18     		adds	r3, r3, r1
 731 03ce 4FEA8303 		lsl	r3, r3, #2
 732 03d2 D318     		adds	r3, r2, r3
 733 03d4 03F10803 		add	r3, r3, #8
 734 03d8 4FF00002 		mov	r2, #0
 735 03dc DA71     		strb	r2, [r3, #7]
 411:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 412:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   NETIF_SET_HINT(netif, i);
 413:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* #if LWIP_NETIF_HWADDRHINT */
 414:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   etharp_cached_entry = i;
 736              		.loc 1 414 0
 737 03de 40F20003 		movw	r3, #:lower16:etharp_cached_entry
 738 03e2 C0F20003 		movt	r3, #:upper16:etharp_cached_entry
 739 03e6 3A7B     		ldrb	r2, [r7, #12]
 740 03e8 1A70     		strb	r2, [r3, #0]
 415:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* #if LWIP_NETIF_HWADDRHINT */
 416:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return (err_t)i;
 741              		.loc 1 416 0
 742 03ea 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 743              	.L13:
 744 03ec 5BB2     		sxtb	r3, r3
 417:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 745              		.loc 1 417 0
 746 03ee 1846     		mov	r0, r3
 747 03f0 07F11007 		add	r7, r7, #16
 748 03f4 BD46     		mov	sp, r7
 749 03f6 80BD     		pop	{r7, pc}
 750              		.cfi_endproc
 751              	.LFE119:
 753              		.section	.text.etharp_send_ip,"ax",%progbits
 754              		.align	2
 755              		.thumb
 756              		.thumb_func
 758              	etharp_send_ip:
 759              	.LFB120:
 418:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 419:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 420:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Send an IP packet on the network using netif->linkoutput
 421:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * The ethernet header is filled in before sending.
 422:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 423:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @params netif the lwIP network interface on which to send the packet
 424:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @params p the packet to send, p->payload pointing to the (uninitialized) ethernet header
 425:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @params src the source MAC address to be copied into the ethernet header
 426:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @params dst the destination MAC address to be copied into the ethernet header
 427:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return ERR_OK if the packet was sent, any other err_t on failure
 428:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 429:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static err_t
 430:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_send_ip(struct netif *netif, struct pbuf *p, struct eth_addr *src, struct eth_addr *dst)
 431:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 760              		.loc 1 431 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 24
 763              		@ frame_needed = 1, uses_anonymous_args = 0
 764 0000 80B5     		push	{r7, lr}
 765              	.LCFI9:
 766              		.cfi_def_cfa_offset 8
 767              		.cfi_offset 7, -8
 768              		.cfi_offset 14, -4
 769 0002 86B0     		sub	sp, sp, #24
 770              	.LCFI10:
 771              		.cfi_def_cfa_offset 32
 772 0004 00AF     		add	r7, sp, #0
 773              	.LCFI11:
 774              		.cfi_def_cfa_register 7
 775 0006 F860     		str	r0, [r7, #12]
 776 0008 B960     		str	r1, [r7, #8]
 777 000a 7A60     		str	r2, [r7, #4]
 778 000c 3B60     		str	r3, [r7, #0]
 432:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct eth_hdr *ethhdr = p->payload;
 779              		.loc 1 432 0
 780 000e BB68     		ldr	r3, [r7, #8]
 781 0010 5B68     		ldr	r3, [r3, #4]
 782 0012 3B61     		str	r3, [r7, #16]
 433:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t k;
 434:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 435:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
 436:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****               (netif->hwaddr_len == ETHARP_HWADDR_LEN));
 437:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   k = ETHARP_HWADDR_LEN;
 783              		.loc 1 437 0
 784 0014 4FF00603 		mov	r3, #6
 785 0018 FB75     		strb	r3, [r7, #23]
 438:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while(k > 0) {
 786              		.loc 1 438 0
 787 001a 10E0     		b	.L34
 788              	.L35:
 439:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     k--;
 789              		.loc 1 439 0
 790 001c FB7D     		ldrb	r3, [r7, #23]
 791 001e 03F1FF33 		add	r3, r3, #-1
 792 0022 FB75     		strb	r3, [r7, #23]
 440:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ethhdr->dest.addr[k] = dst->addr[k];
 793              		.loc 1 440 0
 794 0024 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 795 0026 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 796 0028 3968     		ldr	r1, [r7, #0]
 797 002a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 798 002c 3A69     		ldr	r2, [r7, #16]
 799 002e D154     		strb	r1, [r2, r3]
 441:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ethhdr->src.addr[k]  = src->addr[k];
 800              		.loc 1 441 0
 801 0030 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 802 0032 FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 803 0034 7968     		ldr	r1, [r7, #4]
 804 0036 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 805 0038 3969     		ldr	r1, [r7, #16]
 806 003a CB18     		adds	r3, r1, r3
 807 003c 9A71     		strb	r2, [r3, #6]
 808              	.L34:
 438:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while(k > 0) {
 809              		.loc 1 438 0 discriminator 1
 810 003e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 811 0040 002B     		cmp	r3, #0
 812 0042 EBD1     		bne	.L35
 442:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 443:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ethhdr->type = htons(ETHTYPE_IP);
 813              		.loc 1 443 0
 814 0044 4FF40060 		mov	r0, #2048
 815 0048 FFF7FEFF 		bl	htons
 816 004c 0346     		mov	r3, r0
 817 004e 1A46     		mov	r2, r3
 818 0050 3B69     		ldr	r3, [r7, #16]
 819 0052 9A81     		strh	r2, [r3, #12]	@ unaligned
 444:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_send_ip: sending packet %p\n", (void *)p));
 445:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* send the packet */
 446:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return netif->linkoutput(netif, p);
 820              		.loc 1 446 0
 821 0054 FB68     		ldr	r3, [r7, #12]
 822 0056 9B69     		ldr	r3, [r3, #24]
 823 0058 F868     		ldr	r0, [r7, #12]
 824 005a B968     		ldr	r1, [r7, #8]
 825 005c 9847     		blx	r3
 826 005e 0346     		mov	r3, r0
 447:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 827              		.loc 1 447 0
 828 0060 1846     		mov	r0, r3
 829 0062 07F11807 		add	r7, r7, #24
 830 0066 BD46     		mov	sp, r7
 831 0068 80BD     		pop	{r7, pc}
 832              		.cfi_endproc
 833              	.LFE120:
 835 006a 00BF     		.section	.text.update_arp_entry,"ax",%progbits
 836              		.align	2
 837              		.thumb
 838              		.thumb_func
 840              	update_arp_entry:
 841              	.LFB121:
 448:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 449:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 450:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Update (or insert) a IP/MAC address pair in the ARP cache.
 451:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 452:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * If a pending entry is resolved, any queued packets will be sent
 453:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * at this point.
 454:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 
 455:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ipaddr IP address of the inserted ARP entry.
 456:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ethaddr Ethernet address of the inserted ARP entry.
 457:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param flags Defines behaviour:
 458:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ETHARP_TRY_HARD Allows ARP to insert this as a new item. If not specified,
 459:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * only existing ARP entries will be updated.
 460:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 461:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return
 462:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_OK Succesfully updated ARP cache.
 463:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_MEM If we could not add a new ARP entry when ETHARP_TRY_HARD was set.
 464:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 465:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 466:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @see pbuf_free()
 467:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 468:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static err_t
 469:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** update_arp_entry(struct netif *netif, struct ip_addr *ipaddr, struct eth_addr *ethaddr, u8_t flags)
 470:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 842              		.loc 1 470 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 32
 845              		@ frame_needed = 1, uses_anonymous_args = 0
 846 0000 90B5     		push	{r4, r7, lr}
 847              	.LCFI12:
 848              		.cfi_def_cfa_offset 12
 849              		.cfi_offset 4, -12
 850              		.cfi_offset 7, -8
 851              		.cfi_offset 14, -4
 852 0002 89B0     		sub	sp, sp, #36
 853              	.LCFI13:
 854              		.cfi_def_cfa_offset 48
 855 0004 00AF     		add	r7, sp, #0
 856              	.LCFI14:
 857              		.cfi_def_cfa_register 7
 858 0006 F860     		str	r0, [r7, #12]
 859 0008 B960     		str	r1, [r7, #8]
 860 000a 7A60     		str	r2, [r7, #4]
 861 000c FB70     		strb	r3, [r7, #3]
 471:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   s8_t i;
 472:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t k;
 473:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry()\n"));
 474:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ASSERT("netif->hwaddr_len == ETHARP_HWADDR_LEN", netif->hwaddr_len == ETHARP_HWADDR_LEN);
 475:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F
 476:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****                                         ip4_addr1(ipaddr), ip4_addr2(ipaddr), ip4_addr3(ipaddr), ip
 477:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****                                         ethaddr->addr[0], ethaddr->addr[1], ethaddr->addr[2],
 478:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****                                         ethaddr->addr[3], ethaddr->addr[4], ethaddr->addr[5]));
 479:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* non-unicast address? */
 480:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ip_addr_isany(ipaddr) ||
 862              		.loc 1 480 0
 863 000e BB68     		ldr	r3, [r7, #8]
 864 0010 002B     		cmp	r3, #0
 865 0012 19D0     		beq	.L38
 866              		.loc 1 480 0 is_stmt 0 discriminator 1
 867 0014 BB68     		ldr	r3, [r7, #8]
 868 0016 1B68     		ldr	r3, [r3, #0]	@ unaligned
 869 0018 002B     		cmp	r3, #0
 870 001a 15D0     		beq	.L38
 481:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ip_addr_isbroadcast(ipaddr, netif) ||
 871              		.loc 1 481 0 is_stmt 1 discriminator 1
 872 001c B868     		ldr	r0, [r7, #8]
 873 001e F968     		ldr	r1, [r7, #12]
 874 0020 FFF7FEFF 		bl	ip_addr_isbroadcast
 875 0024 0346     		mov	r3, r0
 480:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ip_addr_isany(ipaddr) ||
 876              		.loc 1 480 0 discriminator 1
 877 0026 002B     		cmp	r3, #0
 878 0028 0ED1     		bne	.L38
 482:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ip_addr_ismulticast(ipaddr)) {
 879              		.loc 1 482 0
 880 002a BB68     		ldr	r3, [r7, #8]
 881 002c 1C68     		ldr	r4, [r3, #0]	@ unaligned
 882 002e 4FF07040 		mov	r0, #-268435456
 883 0032 FFF7FEFF 		bl	ntohl
 884 0036 0346     		mov	r3, r0
 885 0038 1C40     		ands	r4, r4, r3
 886 003a 4FF06040 		mov	r0, #-536870912
 887 003e FFF7FEFF 		bl	ntohl
 888 0042 0346     		mov	r3, r0
 481:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ip_addr_isbroadcast(ipaddr, netif) ||
 889              		.loc 1 481 0
 890 0044 9C42     		cmp	r4, r3
 891 0046 02D1     		bne	.L39
 892              	.L38:
 483:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: will not add non-unicast IP addr
 484:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return ERR_ARG;
 893              		.loc 1 484 0
 894 0048 4FF0F603 		mov	r3, #246
 895 004c A6E0     		b	.L40
 896              	.L39:
 485:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 486:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* find or create ARP entry */
 487:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 488:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   i = find_entry(ipaddr, flags, netif);
 489:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 490:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   i = find_entry(ipaddr, flags);
 897              		.loc 1 490 0
 898 004e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 899 0050 B868     		ldr	r0, [r7, #8]
 900 0052 1946     		mov	r1, r3
 901 0054 FFF7FEFF 		bl	find_entry
 902 0058 0346     		mov	r3, r0
 903 005a BB77     		strb	r3, [r7, #30]
 491:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 492:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* bail out if no entry could be found */
 493:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (i < 0)
 904              		.loc 1 493 0
 905 005c 97F91E30 		ldrsb	r3, [r7, #30]
 906 0060 002B     		cmp	r3, #0
 907 0062 01DA     		bge	.L41
 494:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return (err_t)i;
 908              		.loc 1 494 0
 909 0064 BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 910 0066 99E0     		b	.L40
 911              	.L41:
 495:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   
 496:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* mark it stable */
 497:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   arp_table[i].state = ETHARP_STATE_STABLE;
 912              		.loc 1 497 0
 913 0068 97F91E10 		ldrsb	r1, [r7, #30]
 914 006c 40F20002 		movw	r2, #:lower16:arp_table
 915 0070 C0F20002 		movt	r2, #:upper16:arp_table
 916 0074 0B46     		mov	r3, r1
 917 0076 4FEA8303 		lsl	r3, r3, #2
 918 007a 5B18     		adds	r3, r3, r1
 919 007c 4FEA8303 		lsl	r3, r3, #2
 920 0080 D318     		adds	r3, r2, r3
 921 0082 03F10803 		add	r3, r3, #8
 922 0086 4FF00202 		mov	r2, #2
 923 008a 9A71     		strb	r2, [r3, #6]
 498:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* record network interface */
 499:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   arp_table[i].netif = netif;
 924              		.loc 1 499 0
 925 008c 97F91E10 		ldrsb	r1, [r7, #30]
 926 0090 40F20002 		movw	r2, #:lower16:arp_table
 927 0094 C0F20002 		movt	r2, #:upper16:arp_table
 928 0098 0B46     		mov	r3, r1
 929 009a 4FEA8303 		lsl	r3, r3, #2
 930 009e 5B18     		adds	r3, r3, r1
 931 00a0 4FEA8303 		lsl	r3, r3, #2
 932 00a4 D318     		adds	r3, r2, r3
 933 00a6 03F11003 		add	r3, r3, #16
 934 00aa FA68     		ldr	r2, [r7, #12]
 935 00ac 1A60     		str	r2, [r3, #0]
 500:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 501:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* insert in SNMP ARP index tree */
 502:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   snmp_insert_arpidx_tree(netif, &arp_table[i].ipaddr);
 503:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 504:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("update_arp_entry: updating stable entry %"S16_F"\n",
 505:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* update address */
 506:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   k = ETHARP_HWADDR_LEN;
 936              		.loc 1 506 0
 937 00ae 4FF00603 		mov	r3, #6
 938 00b2 FB77     		strb	r3, [r7, #31]
 507:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while (k > 0) {
 939              		.loc 1 507 0
 940 00b4 19E0     		b	.L42
 941              	.L43:
 508:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     k--;
 942              		.loc 1 508 0
 943 00b6 FB7F     		ldrb	r3, [r7, #31]
 944 00b8 03F1FF33 		add	r3, r3, #-1
 945 00bc FB77     		strb	r3, [r7, #31]
 509:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     arp_table[i].ethaddr.addr[k] = ethaddr->addr[k];
 946              		.loc 1 509 0
 947 00be 97F91E10 		ldrsb	r1, [r7, #30]
 948 00c2 FC7F     		ldrb	r4, [r7, #31]	@ zero_extendqisi2
 949 00c4 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 950 00c6 7A68     		ldr	r2, [r7, #4]
 951 00c8 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 952 00ca 40F20002 		movw	r2, #:lower16:arp_table
 953 00ce C0F20002 		movt	r2, #:upper16:arp_table
 954 00d2 0B46     		mov	r3, r1
 955 00d4 4FEA8303 		lsl	r3, r3, #2
 956 00d8 5B18     		adds	r3, r3, r1
 957 00da 4FEA8303 		lsl	r3, r3, #2
 958 00de D318     		adds	r3, r2, r3
 959 00e0 1B19     		adds	r3, r3, r4
 960 00e2 03F10803 		add	r3, r3, #8
 961 00e6 0246     		mov	r2, r0
 962 00e8 1A70     		strb	r2, [r3, #0]
 963              	.L42:
 507:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while (k > 0) {
 964              		.loc 1 507 0 discriminator 1
 965 00ea FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 966 00ec 002B     		cmp	r3, #0
 967 00ee E2D1     		bne	.L43
 510:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 511:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* reset time stamp */
 512:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   arp_table[i].ctime = 0;
 968              		.loc 1 512 0
 969 00f0 97F91E10 		ldrsb	r1, [r7, #30]
 970 00f4 40F20002 		movw	r2, #:lower16:arp_table
 971 00f8 C0F20002 		movt	r2, #:upper16:arp_table
 972 00fc 0B46     		mov	r3, r1
 973 00fe 4FEA8303 		lsl	r3, r3, #2
 974 0102 5B18     		adds	r3, r3, r1
 975 0104 4FEA8303 		lsl	r3, r3, #2
 976 0108 D318     		adds	r3, r2, r3
 977 010a 03F10803 		add	r3, r3, #8
 978 010e 4FF00002 		mov	r2, #0
 979 0112 DA71     		strb	r2, [r3, #7]
 513:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING
 514:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* this is where we will send out queued packets! */
 515:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while (arp_table[i].q != NULL) {
 980              		.loc 1 515 0
 981 0114 30E0     		b	.L44
 982              	.L45:
 983              	.LBB2:
 516:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     struct pbuf *p;
 517:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* remember remainder of queue */
 518:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     struct etharp_q_entry *q = arp_table[i].q;
 984              		.loc 1 518 0
 985 0116 97F91E10 		ldrsb	r1, [r7, #30]
 986 011a 40F20002 		movw	r2, #:lower16:arp_table
 987 011e C0F20002 		movt	r2, #:upper16:arp_table
 988 0122 0B46     		mov	r3, r1
 989 0124 4FEA8303 		lsl	r3, r3, #2
 990 0128 5B18     		adds	r3, r3, r1
 991 012a 4FEA8303 		lsl	r3, r3, #2
 992 012e D318     		adds	r3, r2, r3
 993 0130 1B68     		ldr	r3, [r3, #0]
 994 0132 BB61     		str	r3, [r7, #24]
 519:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* pop first item off the queue */
 520:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     arp_table[i].q = q->next;
 995              		.loc 1 520 0
 996 0134 97F91E10 		ldrsb	r1, [r7, #30]
 997 0138 BB69     		ldr	r3, [r7, #24]
 998 013a 1868     		ldr	r0, [r3, #0]
 999 013c 40F20002 		movw	r2, #:lower16:arp_table
 1000 0140 C0F20002 		movt	r2, #:upper16:arp_table
 1001 0144 0B46     		mov	r3, r1
 1002 0146 4FEA8303 		lsl	r3, r3, #2
 1003 014a 5B18     		adds	r3, r3, r1
 1004 014c 4FEA8303 		lsl	r3, r3, #2
 1005 0150 D318     		adds	r3, r2, r3
 1006 0152 1860     		str	r0, [r3, #0]
 521:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* get the packet pointer */
 522:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     p = q->p;
 1007              		.loc 1 522 0
 1008 0154 BB69     		ldr	r3, [r7, #24]
 1009 0156 5B68     		ldr	r3, [r3, #4]
 1010 0158 7B61     		str	r3, [r7, #20]
 523:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* now queue entry can be freed */
 524:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     memp_free(MEMP_ARP_QUEUE, q);
 1011              		.loc 1 524 0
 1012 015a B869     		ldr	r0, [r7, #24]
 1013 015c FFF7FEFF 		bl	mem_free
 525:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* send the queued IP packet */
 526:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     etharp_send_ip(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr);
 1014              		.loc 1 526 0
 1015 0160 FB68     		ldr	r3, [r7, #12]
 1016 0162 03F12303 		add	r3, r3, #35
 1017 0166 F868     		ldr	r0, [r7, #12]
 1018 0168 7969     		ldr	r1, [r7, #20]
 1019 016a 1A46     		mov	r2, r3
 1020 016c 7B68     		ldr	r3, [r7, #4]
 1021 016e FFF7FEFF 		bl	etharp_send_ip
 527:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* free the queued IP packet */
 528:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     pbuf_free(p);
 1022              		.loc 1 528 0
 1023 0172 7869     		ldr	r0, [r7, #20]
 1024 0174 FFF7FEFF 		bl	pbuf_free
 1025              	.L44:
 1026              	.LBE2:
 515:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while (arp_table[i].q != NULL) {
 1027              		.loc 1 515 0 discriminator 1
 1028 0178 97F91E10 		ldrsb	r1, [r7, #30]
 1029 017c 40F20002 		movw	r2, #:lower16:arp_table
 1030 0180 C0F20002 		movt	r2, #:upper16:arp_table
 1031 0184 0B46     		mov	r3, r1
 1032 0186 4FEA8303 		lsl	r3, r3, #2
 1033 018a 5B18     		adds	r3, r3, r1
 1034 018c 4FEA8303 		lsl	r3, r3, #2
 1035 0190 D318     		adds	r3, r2, r3
 1036 0192 1B68     		ldr	r3, [r3, #0]
 1037 0194 002B     		cmp	r3, #0
 1038 0196 BED1     		bne	.L45
 529:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 530:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 531:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return ERR_OK;
 1039              		.loc 1 531 0
 1040 0198 4FF00003 		mov	r3, #0
 1041              	.L40:
 1042 019c 5BB2     		sxtb	r3, r3
 532:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 1043              		.loc 1 532 0
 1044 019e 1846     		mov	r0, r3
 1045 01a0 07F12407 		add	r7, r7, #36
 1046 01a4 BD46     		mov	sp, r7
 1047 01a6 90BD     		pop	{r4, r7, pc}
 1048              		.cfi_endproc
 1049              	.LFE121:
 1051              		.section	.text.etharp_find_addr,"ax",%progbits
 1052              		.align	2
 1053              		.global	etharp_find_addr
 1054              		.thumb
 1055              		.thumb_func
 1057              	etharp_find_addr:
 1058              	.LFB122:
 533:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 534:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 535:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Finds (stable) ethernet/IP address pair from ARP table
 536:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * using interface and IP address index.
 537:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @note the addresses in the ARP table are in network order!
 538:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 539:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param netif points to interface index
 540:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ipaddr points to the (network order) IP address index
 541:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param eth_ret points to return pointer
 542:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ip_ret points to return pointer
 543:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return table index if found, -1 otherwise
 544:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 545:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** s8_t
 546:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_find_addr(struct netif *netif, struct ip_addr *ipaddr,
 547:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          struct eth_addr **eth_ret, struct ip_addr **ip_ret)
 548:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 1059              		.loc 1 548 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 24
 1062              		@ frame_needed = 1, uses_anonymous_args = 0
 1063 0000 80B5     		push	{r7, lr}
 1064              	.LCFI15:
 1065              		.cfi_def_cfa_offset 8
 1066              		.cfi_offset 7, -8
 1067              		.cfi_offset 14, -4
 1068 0002 86B0     		sub	sp, sp, #24
 1069              	.LCFI16:
 1070              		.cfi_def_cfa_offset 32
 1071 0004 00AF     		add	r7, sp, #0
 1072              	.LCFI17:
 1073              		.cfi_def_cfa_register 7
 1074 0006 F860     		str	r0, [r7, #12]
 1075 0008 B960     		str	r1, [r7, #8]
 1076 000a 7A60     		str	r2, [r7, #4]
 1077 000c 3B60     		str	r3, [r7, #0]
 549:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   s8_t i;
 550:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 551:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_UNUSED_ARG(netif);
 552:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 553:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 554:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   i = find_entry(ipaddr, ETHARP_FIND_ONLY, NULL);
 555:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 556:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   i = find_entry(ipaddr, ETHARP_FIND_ONLY);
 1078              		.loc 1 556 0
 1079 000e B868     		ldr	r0, [r7, #8]
 1080 0010 4FF00201 		mov	r1, #2
 1081 0014 FFF7FEFF 		bl	find_entry
 1082 0018 0346     		mov	r3, r0
 1083 001a FB75     		strb	r3, [r7, #23]
 557:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 558:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if((i >= 0) && arp_table[i].state == ETHARP_STATE_STABLE) {
 1084              		.loc 1 558 0
 1085 001c 97F91730 		ldrsb	r3, [r7, #23]
 1086 0020 002B     		cmp	r3, #0
 1087 0022 35DB     		blt	.L47
 1088              		.loc 1 558 0 is_stmt 0 discriminator 1
 1089 0024 97F91710 		ldrsb	r1, [r7, #23]
 1090 0028 40F20002 		movw	r2, #:lower16:arp_table
 1091 002c C0F20002 		movt	r2, #:upper16:arp_table
 1092 0030 0B46     		mov	r3, r1
 1093 0032 4FEA8303 		lsl	r3, r3, #2
 1094 0036 5B18     		adds	r3, r3, r1
 1095 0038 4FEA8303 		lsl	r3, r3, #2
 1096 003c D318     		adds	r3, r2, r3
 1097 003e 03F10803 		add	r3, r3, #8
 1098 0042 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1099 0044 022B     		cmp	r3, #2
 1100 0046 23D1     		bne	.L47
 559:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       *eth_ret = &arp_table[i].ethaddr;
 1101              		.loc 1 559 0 is_stmt 1
 1102 0048 97F91720 		ldrsb	r2, [r7, #23]
 1103 004c 1346     		mov	r3, r2
 1104 004e 4FEA8303 		lsl	r3, r3, #2
 1105 0052 9B18     		adds	r3, r3, r2
 1106 0054 4FEA8303 		lsl	r3, r3, #2
 1107 0058 03F10802 		add	r2, r3, #8
 1108 005c 40F20003 		movw	r3, #:lower16:arp_table
 1109 0060 C0F20003 		movt	r3, #:upper16:arp_table
 1110 0064 D218     		adds	r2, r2, r3
 1111 0066 7B68     		ldr	r3, [r7, #4]
 1112 0068 1A60     		str	r2, [r3, #0]
 560:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       *ip_ret = &arp_table[i].ipaddr;
 1113              		.loc 1 560 0
 1114 006a 97F91720 		ldrsb	r2, [r7, #23]
 1115 006e 1346     		mov	r3, r2
 1116 0070 4FEA8303 		lsl	r3, r3, #2
 1117 0074 9B18     		adds	r3, r3, r2
 1118 0076 4FEA8303 		lsl	r3, r3, #2
 1119 007a 40F20002 		movw	r2, #:lower16:arp_table
 1120 007e C0F20002 		movt	r2, #:upper16:arp_table
 1121 0082 9B18     		adds	r3, r3, r2
 1122 0084 03F10402 		add	r2, r3, #4
 1123 0088 3B68     		ldr	r3, [r7, #0]
 1124 008a 1A60     		str	r2, [r3, #0]
 561:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       return i;
 1125              		.loc 1 561 0
 1126 008c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1127 008e 01E0     		b	.L48
 1128              	.L47:
 562:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 563:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return -1;
 1129              		.loc 1 563 0
 1130 0090 4FF0FF03 		mov	r3, #255
 1131              	.L48:
 1132 0094 5BB2     		sxtb	r3, r3
 564:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 1133              		.loc 1 564 0
 1134 0096 1846     		mov	r0, r3
 1135 0098 07F11807 		add	r7, r7, #24
 1136 009c BD46     		mov	sp, r7
 1137 009e 80BD     		pop	{r7, pc}
 1138              		.cfi_endproc
 1139              	.LFE122:
 1141              		.section	.text.etharp_ip_input,"ax",%progbits
 1142              		.align	2
 1143              		.global	etharp_ip_input
 1144              		.thumb
 1145              		.thumb_func
 1147              	etharp_ip_input:
 1148              	.LFB123:
 565:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 566:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 567:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Updates the ARP table using the given IP packet.
 568:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 569:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Uses the incoming IP packet's source address to update the
 570:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * ARP cache for the local network. The function does not alter
 571:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * or free the packet. This function must be called before the
 572:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * packet p is passed to the IP layer.
 573:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 574:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param netif The lwIP network interface on which the IP packet pbuf arrived.
 575:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param p The IP packet that arrived on netif.
 576:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 577:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return NULL
 578:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 579:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @see pbuf_free()
 580:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 581:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** void
 582:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_ip_input(struct netif *netif, struct pbuf *p)
 583:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 1149              		.loc 1 583 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 16
 1152              		@ frame_needed = 1, uses_anonymous_args = 0
 1153 0000 80B5     		push	{r7, lr}
 1154              	.LCFI18:
 1155              		.cfi_def_cfa_offset 8
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158 0002 84B0     		sub	sp, sp, #16
 1159              	.LCFI19:
 1160              		.cfi_def_cfa_offset 24
 1161 0004 00AF     		add	r7, sp, #0
 1162              	.LCFI20:
 1163              		.cfi_def_cfa_register 7
 1164 0006 7860     		str	r0, [r7, #4]
 1165 0008 3960     		str	r1, [r7, #0]
 584:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct eth_hdr *ethhdr;
 585:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct ip_hdr *iphdr;
 586:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1166              		.loc 1 586 0
 1167 000a 7B68     		ldr	r3, [r7, #4]
 1168 000c 002B     		cmp	r3, #0
 1169 000e 1FD0     		beq	.L49
 1170              	.L50:
 587:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* Only insert an entry if the source IP address of the
 588:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      incoming IP packet comes from a host on the local network. */
 589:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ethhdr = p->payload;
 1171              		.loc 1 589 0
 1172 0010 3B68     		ldr	r3, [r7, #0]
 1173 0012 5B68     		ldr	r3, [r3, #4]
 1174 0014 FB60     		str	r3, [r7, #12]
 590:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 1175              		.loc 1 590 0
 1176 0016 FB68     		ldr	r3, [r7, #12]
 1177 0018 03F10E03 		add	r3, r3, #14
 1178 001c BB60     		str	r3, [r7, #8]
 591:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ETHARP_SUPPORT_VLAN
 592:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ethhdr->type == ETHTYPE_VLAN) {
 593:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     iphdr = (struct ip_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
 594:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 595:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* ETHARP_SUPPORT_VLAN */
 596:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 597:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* source is not on the local network? */
 598:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (!ip_addr_netcmp(&(iphdr->src), &(netif->ip_addr), &(netif->netmask))) {
 1179              		.loc 1 598 0
 1180 001e BB68     		ldr	r3, [r7, #8]
 1181 0020 DA68     		ldr	r2, [r3, #12]	@ unaligned
 1182 0022 7B68     		ldr	r3, [r7, #4]
 1183 0024 5B68     		ldr	r3, [r3, #4]
 1184 0026 5A40     		eors	r2, r2, r3
 1185 0028 7B68     		ldr	r3, [r7, #4]
 1186 002a 9B68     		ldr	r3, [r3, #8]
 1187 002c 1340     		ands	r3, r3, r2
 1188 002e 002B     		cmp	r3, #0
 1189 0030 0DD1     		bne	.L53
 1190              	.L52:
 599:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* do nothing */
 600:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return;
 601:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 602:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 603:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_ip_input: updating ETHARP table.\n"));
 604:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* update ARP table */
 605:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* @todo We could use ETHARP_TRY_HARD if we think we are going to talk
 606:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * back soon (for example, if the destination IP address is ours. */
 607:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   update_arp_entry(netif, &(iphdr->src), &(ethhdr->src), 0);
 1191              		.loc 1 607 0
 1192 0032 BB68     		ldr	r3, [r7, #8]
 1193 0034 03F10C02 		add	r2, r3, #12
 1194 0038 FB68     		ldr	r3, [r7, #12]
 1195 003a 03F10603 		add	r3, r3, #6
 1196 003e 7868     		ldr	r0, [r7, #4]
 1197 0040 1146     		mov	r1, r2
 1198 0042 1A46     		mov	r2, r3
 1199 0044 4FF00003 		mov	r3, #0
 1200 0048 FFF7FEFF 		bl	update_arp_entry
 1201 004c 00E0     		b	.L49
 1202              	.L53:
 600:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return;
 1203              		.loc 1 600 0
 1204 004e 00BF     		nop
 1205              	.L49:
 608:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 1206              		.loc 1 608 0
 1207 0050 07F11007 		add	r7, r7, #16
 1208 0054 BD46     		mov	sp, r7
 1209 0056 80BD     		pop	{r7, pc}
 1210              		.cfi_endproc
 1211              	.LFE123:
 1213              		.section	.text.etharp_arp_input,"ax",%progbits
 1214              		.align	2
 1215              		.global	etharp_arp_input
 1216              		.thumb
 1217              		.thumb_func
 1219              	etharp_arp_input:
 1220              	.LFB124:
 609:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 610:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 611:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 612:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Responds to ARP requests to us. Upon ARP replies to us, add entry to cache  
 613:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * send out queued IP packets. Updates cache with snooped address pairs.
 614:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 615:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Should be called for incoming ARP packets. The pbuf in the argument
 616:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * is freed by this function.
 617:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 618:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param netif The lwIP network interface on which the ARP packet pbuf arrived.
 619:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ethaddr Ethernet address of netif.
 620:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param p The ARP packet that arrived on netif. Is freed by this function.
 621:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 622:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return NULL
 623:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 624:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @see pbuf_free()
 625:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 626:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** void
 627:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_arp_input(struct netif *netif, struct eth_addr *ethaddr, struct pbuf *p)
 628:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 1221              		.loc 1 628 0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 40
 1224              		@ frame_needed = 1, uses_anonymous_args = 0
 1225 0000 90B5     		push	{r4, r7, lr}
 1226              	.LCFI21:
 1227              		.cfi_def_cfa_offset 12
 1228              		.cfi_offset 4, -12
 1229              		.cfi_offset 7, -8
 1230              		.cfi_offset 14, -4
 1231 0002 8BB0     		sub	sp, sp, #44
 1232              	.LCFI22:
 1233              		.cfi_def_cfa_offset 56
 1234 0004 00AF     		add	r7, sp, #0
 1235              	.LCFI23:
 1236              		.cfi_def_cfa_register 7
 1237 0006 F860     		str	r0, [r7, #12]
 1238 0008 B960     		str	r1, [r7, #8]
 1239 000a 7A60     		str	r2, [r7, #4]
 629:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct etharp_hdr *hdr;
 630:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct eth_hdr *ethhdr;
 631:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* these are aligned properly, whereas the ARP header fields might not be */
 632:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct ip_addr sipaddr, dipaddr;
 633:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t i;
 634:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t for_us;
 635:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_AUTOIP
 636:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   const u8_t * ethdst_hwaddr;
 637:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
 638:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 639:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 1240              		.loc 1 639 0
 1241 000c FB68     		ldr	r3, [r7, #12]
 1242 000e 002B     		cmp	r3, #0
 1243 0010 00F0E680 		beq	.L54
 640:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   
 641:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* drop short ARP packets: we have to check for p->len instead of p->tot_len here
 642:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      since a struct etharp_hdr is pointed to p->payload, so it musn't be chained! */
 643:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (p->len < SIZEOF_ETHARP_PACKET) {
 1244              		.loc 1 643 0
 1245 0014 7B68     		ldr	r3, [r7, #4]
 1246 0016 5B89     		ldrh	r3, [r3, #10]
 1247 0018 292B     		cmp	r3, #41
 1248 001a 03D8     		bhi	.L56
 644:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 645:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ("etharp_arp_input: packet dropped, too short (%"S16_F"/%"S16_F")\n", p->tot_len,
 646:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       (s16_t)SIZEOF_ETHARP_PACKET));
 647:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.lenerr);
 648:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.drop);
 649:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     pbuf_free(p);
 1249              		.loc 1 649 0
 1250 001c 7868     		ldr	r0, [r7, #4]
 1251 001e FFF7FEFF 		bl	pbuf_free
 1252 0022 DDE0     		b	.L54
 1253              	.L56:
 650:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return;
 651:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 652:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 653:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ethhdr = p->payload;
 1254              		.loc 1 653 0
 1255 0024 7B68     		ldr	r3, [r7, #4]
 1256 0026 5B68     		ldr	r3, [r3, #4]
 1257 0028 3B62     		str	r3, [r7, #32]
 654:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 1258              		.loc 1 654 0
 1259 002a 3B6A     		ldr	r3, [r7, #32]
 1260 002c 03F10E03 		add	r3, r3, #14
 1261 0030 FB61     		str	r3, [r7, #28]
 655:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ETHARP_SUPPORT_VLAN
 656:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ethhdr->type == ETHTYPE_VLAN) {
 657:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     hdr = (struct etharp_hdr *)(((u8_t*)ethhdr) + SIZEOF_ETH_HDR + SIZEOF_VLAN_HDR);
 658:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 659:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* ETHARP_SUPPORT_VLAN */
 660:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 661:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* RFC 826 "Packet Reception": */
 662:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if ((hdr->hwtype != htons(HWTYPE_ETHERNET)) ||
 1262              		.loc 1 662 0
 1263 0032 FB69     		ldr	r3, [r7, #28]
 1264 0034 1B88     		ldrh	r3, [r3, #0]	@ unaligned
 1265 0036 9CB2     		uxth	r4, r3
 1266 0038 4FF00100 		mov	r0, #1
 1267 003c FFF7FEFF 		bl	htons
 1268 0040 0346     		mov	r3, r0
 1269 0042 9C42     		cmp	r4, r3
 1270 0044 1DD1     		bne	.L57
 663:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       (hdr->_hwlen_protolen != htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr))) ||
 1271              		.loc 1 663 0 discriminator 1
 1272 0046 FB69     		ldr	r3, [r7, #28]
 1273 0048 9B88     		ldrh	r3, [r3, #4]	@ unaligned
 1274 004a 9CB2     		uxth	r4, r3
 1275 004c 40F20460 		movw	r0, #1540
 1276 0050 FFF7FEFF 		bl	htons
 1277 0054 0346     		mov	r3, r0
 662:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if ((hdr->hwtype != htons(HWTYPE_ETHERNET)) ||
 1278              		.loc 1 662 0 discriminator 1
 1279 0056 9C42     		cmp	r4, r3
 1280 0058 13D1     		bne	.L57
 664:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       (hdr->proto != htons(ETHTYPE_IP)) ||
 1281              		.loc 1 664 0
 1282 005a FB69     		ldr	r3, [r7, #28]
 1283 005c 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1284 005e 9CB2     		uxth	r4, r3
 1285 0060 4FF40060 		mov	r0, #2048
 1286 0064 FFF7FEFF 		bl	htons
 1287 0068 0346     		mov	r3, r0
 663:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       (hdr->_hwlen_protolen != htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr))) ||
 1288              		.loc 1 663 0
 1289 006a 9C42     		cmp	r4, r3
 1290 006c 09D1     		bne	.L57
 665:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       (ethhdr->type != htons(ETHTYPE_ARP)))  {
 1291              		.loc 1 665 0
 1292 006e 3B6A     		ldr	r3, [r7, #32]
 1293 0070 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 1294 0072 9CB2     		uxth	r4, r3
 1295 0074 40F60600 		movw	r0, #2054
 1296 0078 FFF7FEFF 		bl	htons
 1297 007c 0346     		mov	r3, r0
 664:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       (hdr->proto != htons(ETHTYPE_IP)) ||
 1298              		.loc 1 664 0
 1299 007e 9C42     		cmp	r4, r3
 1300 0080 03D0     		beq	.L58
 1301              	.L57:
 666:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 667:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ("etharp_arp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%
 668:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       hdr->hwtype, ARPH_HWLEN(hdr), hdr->proto, ARPH_PROTOLEN(hdr), ethhdr->type));
 669:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.proterr);
 670:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.drop);
 671:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     pbuf_free(p);
 1302              		.loc 1 671 0
 1303 0082 7868     		ldr	r0, [r7, #4]
 1304 0084 FFF7FEFF 		bl	pbuf_free
 1305 0088 AAE0     		b	.L54
 1306              	.L58:
 672:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return;
 673:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 674:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ETHARP_STATS_INC(etharp.recv);
 675:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 676:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_AUTOIP
 677:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* We have to check if a host already has configured our random
 678:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * created link local address and continously check if there is
 679:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * a host with this IP-address so we can detect collisions */
 680:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   autoip_arp_reply(netif, hdr);
 681:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
 682:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 683:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* Copy struct ip_addr2 to aligned ip_addr, to support compilers without
 684:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * structure packing (not using structure copy which breaks strict-aliasing rules). */
 685:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   SMEMCPY(&sipaddr, &hdr->sipaddr, sizeof(sipaddr));
 1307              		.loc 1 685 0
 1308 008a FA69     		ldr	r2, [r7, #28]
 1309 008c 07F11803 		add	r3, r7, #24
 1310 0090 02F10E02 		add	r2, r2, #14
 1311 0094 1068     		ldr	r0, [r2, #0]	@ unaligned
 1312 0096 1860     		str	r0, [r3, #0]	@ unaligned
 686:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   SMEMCPY(&dipaddr, &hdr->dipaddr, sizeof(dipaddr));
 1313              		.loc 1 686 0
 1314 0098 FA69     		ldr	r2, [r7, #28]
 1315 009a 07F11403 		add	r3, r7, #20
 1316 009e 02F11802 		add	r2, r2, #24
 1317 00a2 1068     		ldr	r0, [r2, #0]	@ unaligned
 1318 00a4 1860     		str	r0, [r3, #0]	@ unaligned
 687:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 688:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* this interface is not configured? */
 689:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (netif->ip_addr.addr == 0) {
 1319              		.loc 1 689 0
 1320 00a6 FB68     		ldr	r3, [r7, #12]
 1321 00a8 5B68     		ldr	r3, [r3, #4]
 1322 00aa 002B     		cmp	r3, #0
 1323 00ac 04D1     		bne	.L59
 690:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     for_us = 0;
 1324              		.loc 1 690 0
 1325 00ae 4FF00003 		mov	r3, #0
 1326 00b2 87F82630 		strb	r3, [r7, #38]
 1327 00b6 09E0     		b	.L60
 1328              	.L59:
 691:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   } else {
 692:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* ARP packet directed to us? */
 693:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     for_us = ip_addr_cmp(&dipaddr, &(netif->ip_addr));
 1329              		.loc 1 693 0
 1330 00b8 7A69     		ldr	r2, [r7, #20]
 1331 00ba FB68     		ldr	r3, [r7, #12]
 1332 00bc 5B68     		ldr	r3, [r3, #4]
 1333 00be 9A42     		cmp	r2, r3
 1334 00c0 14BF     		ite	ne
 1335 00c2 0023     		movne	r3, #0
 1336 00c4 0123     		moveq	r3, #1
 1337 00c6 DBB2     		uxtb	r3, r3
 1338 00c8 87F82630 		strb	r3, [r7, #38]
 1339              	.L60:
 694:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 695:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 696:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* ARP message directed to us? */
 697:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (for_us) {
 1340              		.loc 1 697 0
 1341 00cc 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 1342 00d0 002B     		cmp	r3, #0
 1343 00d2 0CD0     		beq	.L61
 698:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* add IP address in ARP cache; assume requester wants to talk to us.
 699:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      * can result in directly sending the queued packets for this host. */
 700:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), ETHARP_TRY_HARD);
 1344              		.loc 1 700 0
 1345 00d4 FB69     		ldr	r3, [r7, #28]
 1346 00d6 03F10803 		add	r3, r3, #8
 1347 00da 07F11802 		add	r2, r7, #24
 1348 00de F868     		ldr	r0, [r7, #12]
 1349 00e0 1146     		mov	r1, r2
 1350 00e2 1A46     		mov	r2, r3
 1351 00e4 4FF00103 		mov	r3, #1
 1352 00e8 FFF7FEFF 		bl	update_arp_entry
 1353 00ec 0BE0     		b	.L62
 1354              	.L61:
 701:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* ARP message not directed to us? */
 702:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   } else {
 703:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* update the source IP address in the cache, if present */
 704:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     update_arp_entry(netif, &sipaddr, &(hdr->shwaddr), 0);
 1355              		.loc 1 704 0
 1356 00ee FB69     		ldr	r3, [r7, #28]
 1357 00f0 03F10803 		add	r3, r3, #8
 1358 00f4 07F11802 		add	r2, r7, #24
 1359 00f8 F868     		ldr	r0, [r7, #12]
 1360 00fa 1146     		mov	r1, r2
 1361 00fc 1A46     		mov	r2, r3
 1362 00fe 4FF00003 		mov	r3, #0
 1363 0102 FFF7FEFF 		bl	update_arp_entry
 1364              	.L62:
 705:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 706:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 707:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* now act on the message itself */
 708:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   switch (htons(hdr->opcode)) {
 1365              		.loc 1 708 0
 1366 0106 FB69     		ldr	r3, [r7, #28]
 1367 0108 DB88     		ldrh	r3, [r3, #6]	@ unaligned
 1368 010a 9BB2     		uxth	r3, r3
 1369 010c 1846     		mov	r0, r3
 1370 010e FFF7FEFF 		bl	htons
 1371 0112 0346     		mov	r3, r0
 1372 0114 012B     		cmp	r3, #1
 1373 0116 02D0     		beq	.L64
 1374 0118 022B     		cmp	r3, #2
 1375 011a 5BD0     		beq	.L73
 1376 011c 59E0     		b	.L72
 1377              	.L64:
 709:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* ARP request? */
 710:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   case ARP_REQUEST:
 711:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* ARP request. If it asked for our address, we send out a
 712:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      * reply. In any case, we time-stamp any existing ARP entry,
 713:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      * and possiby send out an IP packet that was queued on it. */
 714:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 715:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP request\n"));
 716:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* ARP request for our address? */
 717:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (for_us) {
 1378              		.loc 1 717 0
 1379 011e 97F82630 		ldrb	r3, [r7, #38]	@ zero_extendqisi2
 1380 0122 002B     		cmp	r3, #0
 1381 0124 58D0     		beq	.L74
 718:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 719:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: replying to ARP request for ou
 720:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* Re-use pbuf to send ARP reply.
 721:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          Since we are re-using an existing pbuf, we can't call etharp_raw since
 722:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          that would allocate a new pbuf. */
 723:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       hdr->opcode = htons(ARP_REPLY);
 1382              		.loc 1 723 0
 1383 0126 4FF00200 		mov	r0, #2
 1384 012a FFF7FEFF 		bl	htons
 1385 012e 0346     		mov	r3, r0
 1386 0130 1A46     		mov	r2, r3
 1387 0132 FB69     		ldr	r3, [r7, #28]
 1388 0134 DA80     		strh	r2, [r3, #6]	@ unaligned
 724:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 725:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       hdr->dipaddr = hdr->sipaddr;
 1389              		.loc 1 725 0
 1390 0136 FB69     		ldr	r3, [r7, #28]
 1391 0138 FA69     		ldr	r2, [r7, #28]
 1392 013a 03F11803 		add	r3, r3, #24
 1393 013e 02F10E02 		add	r2, r2, #14
 1394 0142 1268     		ldr	r2, [r2, #0]	@ unaligned
 1395 0144 1A60     		str	r2, [r3, #0]	@ unaligned
 726:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       SMEMCPY(&hdr->sipaddr, &netif->ip_addr, sizeof(hdr->sipaddr));
 1396              		.loc 1 726 0
 1397 0146 FB69     		ldr	r3, [r7, #28]
 1398 0148 03F10E02 		add	r2, r3, #14
 1399 014c FB68     		ldr	r3, [r7, #12]
 1400 014e 03F10403 		add	r3, r3, #4
 1401 0152 1046     		mov	r0, r2
 1402 0154 1946     		mov	r1, r3
 1403 0156 4FF00402 		mov	r2, #4
 1404 015a FFF7FEFF 		bl	memcpy
 727:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 728:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
 729:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****                   (netif->hwaddr_len == ETHARP_HWADDR_LEN));
 730:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       i = ETHARP_HWADDR_LEN;
 1405              		.loc 1 730 0
 1406 015e 4FF00603 		mov	r3, #6
 1407 0162 87F82730 		strb	r3, [r7, #39]
 731:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_AUTOIP
 732:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* If we are using Link-Local, ARP packets must be broadcast on the
 733:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****        * link layer. (See RFC3927 Section 2.5) */
 734:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8
 735:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
 736:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 737:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       while(i > 0) {
 1408              		.loc 1 737 0
 1409 0166 2AE0     		b	.L67
 1410              	.L68:
 738:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         i--;
 1411              		.loc 1 738 0
 1412 0168 97F82730 		ldrb	r3, [r7, #39]
 1413 016c 03F1FF33 		add	r3, r3, #-1
 1414 0170 87F82730 		strb	r3, [r7, #39]
 739:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         hdr->dhwaddr.addr[i] = hdr->shwaddr.addr[i];
 1415              		.loc 1 739 0
 1416 0174 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1417 0178 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 1418 017c F969     		ldr	r1, [r7, #28]
 1419 017e 8A18     		adds	r2, r1, r2
 1420 0180 127A     		ldrb	r2, [r2, #8]	@ zero_extendqisi2
 1421 0182 F969     		ldr	r1, [r7, #28]
 1422 0184 CB18     		adds	r3, r1, r3
 1423 0186 9A74     		strb	r2, [r3, #18]
 740:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_AUTOIP
 741:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ethhdr->dest.addr[i] = ethdst_hwaddr[i];
 742:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else  /* LWIP_AUTOIP */
 743:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ethhdr->dest.addr[i] = hdr->shwaddr.addr[i];
 1424              		.loc 1 743 0
 1425 0188 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1426 018c 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 1427 0190 F969     		ldr	r1, [r7, #28]
 1428 0192 8A18     		adds	r2, r1, r2
 1429 0194 117A     		ldrb	r1, [r2, #8]	@ zero_extendqisi2
 1430 0196 3A6A     		ldr	r2, [r7, #32]
 1431 0198 D154     		strb	r1, [r2, r3]
 744:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
 745:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         hdr->shwaddr.addr[i] = ethaddr->addr[i];
 1432              		.loc 1 745 0
 1433 019a 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1434 019e 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 1435 01a2 B968     		ldr	r1, [r7, #8]
 1436 01a4 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1437 01a6 F969     		ldr	r1, [r7, #28]
 1438 01a8 CB18     		adds	r3, r1, r3
 1439 01aa 1A72     		strb	r2, [r3, #8]
 746:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ethhdr->src.addr[i] = ethaddr->addr[i];
 1440              		.loc 1 746 0
 1441 01ac 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1442 01b0 97F82720 		ldrb	r2, [r7, #39]	@ zero_extendqisi2
 1443 01b4 B968     		ldr	r1, [r7, #8]
 1444 01b6 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 1445 01b8 396A     		ldr	r1, [r7, #32]
 1446 01ba CB18     		adds	r3, r1, r3
 1447 01bc 9A71     		strb	r2, [r3, #6]
 1448              	.L67:
 737:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       while(i > 0) {
 1449              		.loc 1 737 0 discriminator 1
 1450 01be 97F82730 		ldrb	r3, [r7, #39]	@ zero_extendqisi2
 1451 01c2 002B     		cmp	r3, #0
 1452 01c4 D0D1     		bne	.L68
 747:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
 748:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 749:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* hwtype, hwaddr_len, proto, protolen and the type in the ethernet header
 750:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          are already correct, we tested that before */
 751:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 752:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* return ARP reply */
 753:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       netif->linkoutput(netif, p);
 1453              		.loc 1 753 0
 1454 01c6 FB68     		ldr	r3, [r7, #12]
 1455 01c8 9B69     		ldr	r3, [r3, #24]
 1456 01ca F868     		ldr	r0, [r7, #12]
 1457 01cc 7968     		ldr	r1, [r7, #4]
 1458 01ce 9847     		blx	r3
 754:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* we are not configured? */
 755:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     } else if (netif->ip_addr.addr == 0) {
 756:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* { for_us == 0 and netif->ip_addr.addr == 0 } */
 757:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: we are unconfigured, ARP reque
 758:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* request was not directed to us */
 759:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     } else {
 760:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* { for_us == 0 and netif->ip_addr.addr != 0 } */
 761:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP request was not for us.\n"
 762:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 763:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     break;
 1459              		.loc 1 763 0
 1460 01d0 02E0     		b	.L74
 1461              	.L72:
 764:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   case ARP_REPLY:
 765:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* ARP reply. We already updated the ARP cache earlier. */
 766:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: incoming ARP reply\n"));
 767:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
 768:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* DHCP wants to know about ARP replies from any host with an
 769:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      * IP address also offered to us by the DHCP server. We do not
 770:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      * want to take a duplicate IP address on a single network.
 771:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      * @todo How should we handle redundant (fail-over) interfaces? */
 772:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     dhcp_arp_reply(netif, &sipaddr);
 773:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
 774:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     break;
 775:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   default:
 776:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_arp_input: ARP unknown opcode type %"S16_F"
 777:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.err);
 778:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     break;
 1462              		.loc 1 778 0
 1463 01d2 02E0     		b	.L70
 1464              	.L73:
 774:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     break;
 1465              		.loc 1 774 0
 1466 01d4 00BF     		nop
 1467 01d6 00E0     		b	.L70
 1468              	.L74:
 763:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     break;
 1469              		.loc 1 763 0
 1470 01d8 00BF     		nop
 1471              	.L70:
 779:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 780:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* free ARP packet */
 781:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   pbuf_free(p);
 1472              		.loc 1 781 0
 1473 01da 7868     		ldr	r0, [r7, #4]
 1474 01dc FFF7FEFF 		bl	pbuf_free
 1475              	.L54:
 782:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 1476              		.loc 1 782 0
 1477 01e0 07F12C07 		add	r7, r7, #44
 1478 01e4 BD46     		mov	sp, r7
 1479 01e6 90BD     		pop	{r4, r7, pc}
 1480              		.cfi_endproc
 1481              	.LFE124:
 1483              		.section	.text.etharp_output,"ax",%progbits
 1484              		.align	2
 1485              		.global	etharp_output
 1486              		.thumb
 1487              		.thumb_func
 1489              	etharp_output:
 1490              	.LFB125:
 783:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 784:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 785:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Resolve and fill-in Ethernet address header for outgoing IP packet.
 786:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 787:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * For IP multicast and broadcast, corresponding Ethernet addresses
 788:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * are selected and the packet is transmitted on the link.
 789:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 790:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * For unicast addresses, the packet is submitted to etharp_query(). In
 791:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * case the IP address is outside the local network, the IP address of
 792:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * the gateway is used.
 793:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 794:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param netif The lwIP network interface which the IP packet will be sent on.
 795:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param q The pbuf(s) containing the IP packet to be sent.
 796:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ipaddr The IP address of the packet destination.
 797:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 798:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return
 799:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_RTE No route to destination (no gateway to external networks),
 800:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * or the return type of either etharp_query() or etharp_send_ip().
 801:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 802:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** err_t
 803:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_output(struct netif *netif, struct pbuf *q, struct ip_addr *ipaddr)
 804:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 1491              		.loc 1 804 0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 32
 1494              		@ frame_needed = 1, uses_anonymous_args = 0
 1495 0000 90B5     		push	{r4, r7, lr}
 1496              	.LCFI24:
 1497              		.cfi_def_cfa_offset 12
 1498              		.cfi_offset 4, -12
 1499              		.cfi_offset 7, -8
 1500              		.cfi_offset 14, -4
 1501 0002 89B0     		sub	sp, sp, #36
 1502              	.LCFI25:
 1503              		.cfi_def_cfa_offset 48
 1504 0004 00AF     		add	r7, sp, #0
 1505              	.LCFI26:
 1506              		.cfi_def_cfa_register 7
 1507 0006 F860     		str	r0, [r7, #12]
 1508 0008 B960     		str	r1, [r7, #8]
 1509 000a 7A60     		str	r2, [r7, #4]
 805:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct eth_addr *dest, mcastaddr;
 806:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 807:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* make room for Ethernet header - should not fail */
 808:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (pbuf_header(q, sizeof(struct eth_hdr)) != 0) {
 1510              		.loc 1 808 0
 1511 000c B868     		ldr	r0, [r7, #8]
 1512 000e 4FF00E01 		mov	r1, #14
 1513 0012 FFF7FEFF 		bl	pbuf_header
 1514 0016 0346     		mov	r3, r0
 1515 0018 002B     		cmp	r3, #0
 1516 001a 02D0     		beq	.L76
 809:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* bail out */
 810:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 811:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ("etharp_output: could not allocate room for header.\n"));
 812:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LINK_STATS_INC(link.lenerr);
 813:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return ERR_BUF;
 1517              		.loc 1 813 0
 1518 001c 4FF0FE03 		mov	r3, #254
 1519 0020 71E0     		b	.L83
 1520              	.L76:
 814:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 815:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 816:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* assume unresolved Ethernet address */
 817:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   dest = NULL;
 1521              		.loc 1 817 0
 1522 0022 4FF00003 		mov	r3, #0
 1523 0026 FB61     		str	r3, [r7, #28]
 818:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* Determine on destination hardware address. Broadcasts and multicasts
 819:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * are special, other IP addresses are looked up in the ARP table. */
 820:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 821:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* broadcast destination IP address? */
 822:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ip_addr_isbroadcast(ipaddr, netif)) {
 1524              		.loc 1 822 0
 1525 0028 7868     		ldr	r0, [r7, #4]
 1526 002a F968     		ldr	r1, [r7, #12]
 1527 002c FFF7FEFF 		bl	ip_addr_isbroadcast
 1528 0030 0346     		mov	r3, r0
 1529 0032 002B     		cmp	r3, #0
 1530 0034 05D0     		beq	.L78
 823:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* broadcast on Ethernet also */
 824:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     dest = (struct eth_addr *)&ethbroadcast;
 1531              		.loc 1 824 0
 1532 0036 40F20003 		movw	r3, #:lower16:ethbroadcast
 1533 003a C0F20003 		movt	r3, #:upper16:ethbroadcast
 1534 003e FB61     		str	r3, [r7, #28]
 1535 0040 57E0     		b	.L79
 1536              	.L78:
 825:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* multicast destination IP address? */
 826:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   } else if (ip_addr_ismulticast(ipaddr)) {
 1537              		.loc 1 826 0
 1538 0042 7B68     		ldr	r3, [r7, #4]
 1539 0044 1C68     		ldr	r4, [r3, #0]	@ unaligned
 1540 0046 4FF07040 		mov	r0, #-268435456
 1541 004a FFF7FEFF 		bl	ntohl
 1542 004e 0346     		mov	r3, r0
 1543 0050 1C40     		ands	r4, r4, r3
 1544 0052 4FF06040 		mov	r0, #-536870912
 1545 0056 FFF7FEFF 		bl	ntohl
 1546 005a 0346     		mov	r3, r0
 1547 005c 9C42     		cmp	r4, r3
 1548 005e 2BD1     		bne	.L80
 827:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* Hash IP multicast address to MAC address.*/
 828:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     mcastaddr.addr[0] = 0x01;
 1549              		.loc 1 828 0
 1550 0060 4FF00103 		mov	r3, #1
 1551 0064 3B75     		strb	r3, [r7, #20]
 829:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     mcastaddr.addr[1] = 0x00;
 1552              		.loc 1 829 0
 1553 0066 4FF00003 		mov	r3, #0
 1554 006a 7B75     		strb	r3, [r7, #21]
 830:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     mcastaddr.addr[2] = 0x5e;
 1555              		.loc 1 830 0
 1556 006c 4FF05E03 		mov	r3, #94
 1557 0070 BB75     		strb	r3, [r7, #22]
 831:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 1558              		.loc 1 831 0
 1559 0072 7B68     		ldr	r3, [r7, #4]
 1560 0074 1B68     		ldr	r3, [r3, #0]	@ unaligned
 1561 0076 1846     		mov	r0, r3
 1562 0078 FFF7FEFF 		bl	ntohl
 1563 007c 0346     		mov	r3, r0
 1564 007e 4FEA1343 		lsr	r3, r3, #16
 1565 0082 DBB2     		uxtb	r3, r3
 1566 0084 03F07F03 		and	r3, r3, #127
 1567 0088 DBB2     		uxtb	r3, r3
 1568 008a FB75     		strb	r3, [r7, #23]
 832:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     mcastaddr.addr[4] = ip4_addr3(ipaddr);
 1569              		.loc 1 832 0
 1570 008c 7B68     		ldr	r3, [r7, #4]
 1571 008e 1B68     		ldr	r3, [r3, #0]	@ unaligned
 1572 0090 1846     		mov	r0, r3
 1573 0092 FFF7FEFF 		bl	ntohl
 1574 0096 0346     		mov	r3, r0
 1575 0098 4FEA1323 		lsr	r3, r3, #8
 1576 009c DBB2     		uxtb	r3, r3
 1577 009e 3B76     		strb	r3, [r7, #24]
 833:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     mcastaddr.addr[5] = ip4_addr4(ipaddr);
 1578              		.loc 1 833 0
 1579 00a0 7B68     		ldr	r3, [r7, #4]
 1580 00a2 1B68     		ldr	r3, [r3, #0]	@ unaligned
 1581 00a4 1846     		mov	r0, r3
 1582 00a6 FFF7FEFF 		bl	ntohl
 1583 00aa 0346     		mov	r3, r0
 1584 00ac DBB2     		uxtb	r3, r3
 1585 00ae 7B76     		strb	r3, [r7, #25]
 834:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* destination Ethernet address is multicast */
 835:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     dest = &mcastaddr;
 1586              		.loc 1 835 0
 1587 00b0 07F11403 		add	r3, r7, #20
 1588 00b4 FB61     		str	r3, [r7, #28]
 1589 00b6 1CE0     		b	.L79
 1590              	.L80:
 836:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* unicast destination IP address? */
 837:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   } else {
 838:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* outside local network? */
 839:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (!ip_addr_netcmp(ipaddr, &(netif->ip_addr), &(netif->netmask))) {
 1591              		.loc 1 839 0
 1592 00b8 7B68     		ldr	r3, [r7, #4]
 1593 00ba 1A68     		ldr	r2, [r3, #0]	@ unaligned
 1594 00bc FB68     		ldr	r3, [r7, #12]
 1595 00be 5B68     		ldr	r3, [r3, #4]
 1596 00c0 5A40     		eors	r2, r2, r3
 1597 00c2 FB68     		ldr	r3, [r7, #12]
 1598 00c4 9B68     		ldr	r3, [r3, #8]
 1599 00c6 1340     		ands	r3, r3, r2
 1600 00c8 002B     		cmp	r3, #0
 1601 00ca 0BD0     		beq	.L81
 840:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* interface has default gateway? */
 841:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if (netif->gw.addr != 0) {
 1602              		.loc 1 841 0
 1603 00cc FB68     		ldr	r3, [r7, #12]
 1604 00ce DB68     		ldr	r3, [r3, #12]
 1605 00d0 002B     		cmp	r3, #0
 1606 00d2 04D0     		beq	.L82
 842:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* send to hardware address of default gateway IP address */
 843:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ipaddr = &(netif->gw);
 1607              		.loc 1 843 0
 1608 00d4 FB68     		ldr	r3, [r7, #12]
 1609 00d6 03F10C03 		add	r3, r3, #12
 1610 00da 7B60     		str	r3, [r7, #4]
 1611 00dc 02E0     		b	.L81
 1612              	.L82:
 844:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* no default gateway available */
 845:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       } else {
 846:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* no route to destination error (default gateway missing) */
 847:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         return ERR_RTE;
 1613              		.loc 1 847 0
 1614 00de 4FF0FC03 		mov	r3, #252
 1615 00e2 10E0     		b	.L83
 1616              	.L81:
 848:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
 849:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 850:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* queue on destination Ethernet address belonging to ipaddr */
 851:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return etharp_query(netif, ipaddr, q);
 1617              		.loc 1 851 0
 1618 00e4 F868     		ldr	r0, [r7, #12]
 1619 00e6 7968     		ldr	r1, [r7, #4]
 1620 00e8 BA68     		ldr	r2, [r7, #8]
 1621 00ea FFF7FEFF 		bl	etharp_query
 1622 00ee 0346     		mov	r3, r0
 1623 00f0 09E0     		b	.L83
 1624              	.L79:
 852:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 853:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 854:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* continuation for multicast/broadcast destinations */
 855:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* obtain source Ethernet address of the given interface */
 856:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* send packet directly on the link */
 857:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return etharp_send_ip(netif, q, (struct eth_addr*)(netif->hwaddr), dest);
 1625              		.loc 1 857 0
 1626 00f2 FB68     		ldr	r3, [r7, #12]
 1627 00f4 03F12303 		add	r3, r3, #35
 1628 00f8 F868     		ldr	r0, [r7, #12]
 1629 00fa B968     		ldr	r1, [r7, #8]
 1630 00fc 1A46     		mov	r2, r3
 1631 00fe FB69     		ldr	r3, [r7, #28]
 1632 0100 FFF7FEFF 		bl	etharp_send_ip
 1633 0104 0346     		mov	r3, r0
 1634              	.L83:
 1635 0106 5BB2     		sxtb	r3, r3
 858:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 1636              		.loc 1 858 0
 1637 0108 1846     		mov	r0, r3
 1638 010a 07F12407 		add	r7, r7, #36
 1639 010e BD46     		mov	sp, r7
 1640 0110 90BD     		pop	{r4, r7, pc}
 1641              		.cfi_endproc
 1642              	.LFE125:
 1644 0112 00BF     		.section	.text.etharp_query,"ax",%progbits
 1645              		.align	2
 1646              		.global	etharp_query
 1647              		.thumb
 1648              		.thumb_func
 1650              	etharp_query:
 1651              	.LFB126:
 859:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 860:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
 861:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Send an ARP request for the given IP address and/or queue a packet.
 862:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 863:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * If the IP address was not yet in the cache, a pending ARP cache entry
 864:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * is added and an ARP request is sent for the given address. The packet
 865:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * is queued on this entry.
 866:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 867:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * If the IP address was already pending in the cache, a new ARP request
 868:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * is sent for the given address. The packet is queued on this entry.
 869:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 870:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * If the IP address was already stable in the cache, and a packet is
 871:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * given, it is directly sent and no ARP request is sent out. 
 872:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 
 873:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * If the IP address was already stable in the cache, and no packet is
 874:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * given, an ARP request is sent out.
 875:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * 
 876:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param netif The lwIP network interface on which ipaddr
 877:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * must be queried for.
 878:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ipaddr The IP address to be resolved.
 879:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param q If non-NULL, a pbuf that must be delivered to the IP address.
 880:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * q is not freed by this function.
 881:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 882:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @note q must only be ONE packet, not a packet queue!
 883:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 884:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return
 885:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_BUF Could not make room for Ethernet header.
 886:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_MEM Hardware address unknown, and no more ARP entries available
 887:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *   to query for address or queue the packet.
 888:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_MEM Could not queue packet due to memory shortage.
 889:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_RTE No route to destination (no gateway to external networks).
 890:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 891:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
 892:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
 893:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** err_t
 894:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_query(struct netif *netif, struct ip_addr *ipaddr, struct pbuf *q)
 895:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 1652              		.loc 1 895 0
 1653              		.cfi_startproc
 1654              		@ args = 0, pretend = 0, frame = 48
 1655              		@ frame_needed = 1, uses_anonymous_args = 0
 1656 0000 90B5     		push	{r4, r7, lr}
 1657              	.LCFI27:
 1658              		.cfi_def_cfa_offset 12
 1659              		.cfi_offset 4, -12
 1660              		.cfi_offset 7, -8
 1661              		.cfi_offset 14, -4
 1662 0002 8DB0     		sub	sp, sp, #52
 1663              	.LCFI28:
 1664              		.cfi_def_cfa_offset 64
 1665 0004 00AF     		add	r7, sp, #0
 1666              	.LCFI29:
 1667              		.cfi_def_cfa_register 7
 1668 0006 F860     		str	r0, [r7, #12]
 1669 0008 B960     		str	r1, [r7, #8]
 1670 000a 7A60     		str	r2, [r7, #4]
 896:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 1671              		.loc 1 896 0
 1672 000c FB68     		ldr	r3, [r7, #12]
 1673 000e 03F12303 		add	r3, r3, #35
 1674 0012 FB61     		str	r3, [r7, #28]
 897:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   err_t result = ERR_MEM;
 1675              		.loc 1 897 0
 1676 0014 4FF0FF03 		mov	r3, #255
 1677 0018 87F82F30 		strb	r3, [r7, #47]
 898:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   s8_t i; /* ARP entry index */
 899:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 900:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* non-unicast address? */
 901:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ip_addr_isbroadcast(ipaddr, netif) ||
 1678              		.loc 1 901 0
 1679 001c B868     		ldr	r0, [r7, #8]
 1680 001e F968     		ldr	r1, [r7, #12]
 1681 0020 FFF7FEFF 		bl	ip_addr_isbroadcast
 1682 0024 0346     		mov	r3, r0
 1683 0026 002B     		cmp	r3, #0
 1684 0028 15D1     		bne	.L85
 902:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ip_addr_ismulticast(ipaddr) ||
 1685              		.loc 1 902 0 discriminator 1
 1686 002a BB68     		ldr	r3, [r7, #8]
 1687 002c 1C68     		ldr	r4, [r3, #0]	@ unaligned
 1688 002e 4FF07040 		mov	r0, #-268435456
 1689 0032 FFF7FEFF 		bl	ntohl
 1690 0036 0346     		mov	r3, r0
 1691 0038 1C40     		ands	r4, r4, r3
 1692 003a 4FF06040 		mov	r0, #-536870912
 1693 003e FFF7FEFF 		bl	ntohl
 1694 0042 0346     		mov	r3, r0
 901:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (ip_addr_isbroadcast(ipaddr, netif) ||
 1695              		.loc 1 901 0 discriminator 1
 1696 0044 9C42     		cmp	r4, r3
 1697 0046 06D0     		beq	.L85
 1698              		.loc 1 902 0
 1699 0048 BB68     		ldr	r3, [r7, #8]
 1700 004a 002B     		cmp	r3, #0
 1701 004c 03D0     		beq	.L85
 903:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ip_addr_isany(ipaddr)) {
 1702              		.loc 1 903 0
 1703 004e BB68     		ldr	r3, [r7, #8]
 1704 0050 1B68     		ldr	r3, [r3, #0]	@ unaligned
 1705 0052 002B     		cmp	r3, #0
 1706 0054 02D1     		bne	.L86
 1707              	.L85:
 904:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address 
 905:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return ERR_ARG;
 1708              		.loc 1 905 0
 1709 0056 4FF0F603 		mov	r3, #246
 1710 005a 3DE1     		b	.L87
 1711              	.L86:
 906:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 907:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 908:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* find entry in ARP cache, ask to create entry if queueing packet */
 909:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_NETIF_HWADDRHINT
 910:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   i = find_entry(ipaddr, ETHARP_TRY_HARD, netif);
 911:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* LWIP_NETIF_HWADDRHINT */
 912:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   i = find_entry(ipaddr, ETHARP_TRY_HARD);
 1712              		.loc 1 912 0
 1713 005c B868     		ldr	r0, [r7, #8]
 1714 005e 4FF00101 		mov	r1, #1
 1715 0062 FFF7FEFF 		bl	find_entry
 1716 0066 0346     		mov	r3, r0
 1717 0068 FB76     		strb	r3, [r7, #27]
 913:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_NETIF_HWADDRHINT */
 914:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 915:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* could not find or create entry? */
 916:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (i < 0) {
 1718              		.loc 1 916 0
 1719 006a 97F91B30 		ldrsb	r3, [r7, #27]
 1720 006e 002B     		cmp	r3, #0
 1721 0070 01DA     		bge	.L88
 917:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 918:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (q) {
 919:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 920:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ETHARP_STATS_INC(etharp.memerr);
 921:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 922:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return (err_t)i;
 1722              		.loc 1 922 0
 1723 0072 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1724 0074 30E1     		b	.L87
 1725              	.L88:
 923:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 924:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 925:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* mark a fresh entry as pending (we just sent a request) */
 926:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 1726              		.loc 1 926 0
 1727 0076 97F91B10 		ldrsb	r1, [r7, #27]
 1728 007a 40F20002 		movw	r2, #:lower16:arp_table
 1729 007e C0F20002 		movt	r2, #:upper16:arp_table
 1730 0082 0B46     		mov	r3, r1
 1731 0084 4FEA8303 		lsl	r3, r3, #2
 1732 0088 5B18     		adds	r3, r3, r1
 1733 008a 4FEA8303 		lsl	r3, r3, #2
 1734 008e D318     		adds	r3, r2, r3
 1735 0090 03F10803 		add	r3, r3, #8
 1736 0094 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1737 0096 002B     		cmp	r3, #0
 1738 0098 11D1     		bne	.L89
 927:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     arp_table[i].state = ETHARP_STATE_PENDING;
 1739              		.loc 1 927 0
 1740 009a 97F91B10 		ldrsb	r1, [r7, #27]
 1741 009e 40F20002 		movw	r2, #:lower16:arp_table
 1742 00a2 C0F20002 		movt	r2, #:upper16:arp_table
 1743 00a6 0B46     		mov	r3, r1
 1744 00a8 4FEA8303 		lsl	r3, r3, #2
 1745 00ac 5B18     		adds	r3, r3, r1
 1746 00ae 4FEA8303 		lsl	r3, r3, #2
 1747 00b2 D318     		adds	r3, r2, r3
 1748 00b4 03F10803 		add	r3, r3, #8
 1749 00b8 4FF00102 		mov	r2, #1
 1750 00bc 9A71     		strb	r2, [r3, #6]
 1751              	.L89:
 928:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 929:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 930:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* { i is either a STABLE or (new or existing) PENDING entry } */
 931:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 1752              		.loc 1 931 0
 1753 00be 97F91B10 		ldrsb	r1, [r7, #27]
 1754 00c2 40F20002 		movw	r2, #:lower16:arp_table
 1755 00c6 C0F20002 		movt	r2, #:upper16:arp_table
 1756 00ca 0B46     		mov	r3, r1
 1757 00cc 4FEA8303 		lsl	r3, r3, #2
 1758 00d0 5B18     		adds	r3, r3, r1
 1759 00d2 4FEA8303 		lsl	r3, r3, #2
 1760 00d6 D318     		adds	r3, r2, r3
 1761 00d8 03F10803 		add	r3, r3, #8
 1762 00dc 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1763 00de 012B     		cmp	r3, #1
 1764 00e0 07D0     		beq	.L90
 1765              		.loc 1 931 0 is_stmt 0 discriminator 1
 1766 00e2 97F91B20 		ldrsb	r2, [r7, #27]
 1767 00e6 1346     		mov	r3, r2
 1768 00e8 4FEA8303 		lsl	r3, r3, #2
 1769 00ec 9B18     		adds	r3, r3, r2
 1770 00ee 4FEA8303 		lsl	r3, r3, #2
 1771              	.L90:
 932:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ((arp_table[i].state == ETHARP_STATE_PENDING) ||
 933:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    (arp_table[i].state == ETHARP_STATE_STABLE)));
 934:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
 935:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* do we have a pending entry? or an implicit query request? */
 936:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if ((arp_table[i].state == ETHARP_STATE_PENDING) || (q == NULL)) {
 1772              		.loc 1 936 0 is_stmt 1
 1773 00f2 97F91B10 		ldrsb	r1, [r7, #27]
 1774 00f6 40F20002 		movw	r2, #:lower16:arp_table
 1775 00fa C0F20002 		movt	r2, #:upper16:arp_table
 1776 00fe 0B46     		mov	r3, r1
 1777 0100 4FEA8303 		lsl	r3, r3, #2
 1778 0104 5B18     		adds	r3, r3, r1
 1779 0106 4FEA8303 		lsl	r3, r3, #2
 1780 010a D318     		adds	r3, r2, r3
 1781 010c 03F10803 		add	r3, r3, #8
 1782 0110 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1783 0112 012B     		cmp	r3, #1
 1784 0114 02D0     		beq	.L91
 1785              		.loc 1 936 0 is_stmt 0 discriminator 1
 1786 0116 7B68     		ldr	r3, [r7, #4]
 1787 0118 002B     		cmp	r3, #0
 1788 011a 06D1     		bne	.L92
 1789              	.L91:
 937:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* try to resolve it; send out ARP request */
 938:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     result = etharp_request(netif, ipaddr);
 1790              		.loc 1 938 0 is_stmt 1
 1791 011c F868     		ldr	r0, [r7, #12]
 1792 011e B968     		ldr	r1, [r7, #8]
 1793 0120 FFF7FEFF 		bl	etharp_request
 1794 0124 0346     		mov	r3, r0
 1795 0126 87F82F30 		strb	r3, [r7, #47]
 1796              	.L92:
 939:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (result != ERR_OK) {
 940:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* ARP request couldn't be sent */
 941:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* We don't re-send arp request in etharp_tmr, but we still queue packets,
 942:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          since this failure could be temporary, and the next packet calling
 943:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****          etharp_query again could lead to sending the queued packets. */
 944:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
 945:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
 946:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   
 947:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* packet given? */
 948:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (q != NULL) {
 1797              		.loc 1 948 0
 1798 012a 7B68     		ldr	r3, [r7, #4]
 1799 012c 002B     		cmp	r3, #0
 1800 012e 00F0D180 		beq	.L93
 949:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* stable entry? */
 950:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (arp_table[i].state == ETHARP_STATE_STABLE) {
 1801              		.loc 1 950 0
 1802 0132 97F91B10 		ldrsb	r1, [r7, #27]
 1803 0136 40F20002 		movw	r2, #:lower16:arp_table
 1804 013a C0F20002 		movt	r2, #:upper16:arp_table
 1805 013e 0B46     		mov	r3, r1
 1806 0140 4FEA8303 		lsl	r3, r3, #2
 1807 0144 5B18     		adds	r3, r3, r1
 1808 0146 4FEA8303 		lsl	r3, r3, #2
 1809 014a D318     		adds	r3, r2, r3
 1810 014c 03F10803 		add	r3, r3, #8
 1811 0150 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1812 0152 022B     		cmp	r3, #2
 1813 0154 17D1     		bne	.L94
 951:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* we have a valid IP->Ethernet address mapping */
 952:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* send the packet */
 953:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       result = etharp_send_ip(netif, q, srcaddr, &(arp_table[i].ethaddr));
 1814              		.loc 1 953 0
 1815 0156 97F91B20 		ldrsb	r2, [r7, #27]
 1816 015a 1346     		mov	r3, r2
 1817 015c 4FEA8303 		lsl	r3, r3, #2
 1818 0160 9B18     		adds	r3, r3, r2
 1819 0162 4FEA8303 		lsl	r3, r3, #2
 1820 0166 03F10802 		add	r2, r3, #8
 1821 016a 40F20003 		movw	r3, #:lower16:arp_table
 1822 016e C0F20003 		movt	r3, #:upper16:arp_table
 1823 0172 D318     		adds	r3, r2, r3
 1824 0174 F868     		ldr	r0, [r7, #12]
 1825 0176 7968     		ldr	r1, [r7, #4]
 1826 0178 FA69     		ldr	r2, [r7, #28]
 1827 017a FFF7FEFF 		bl	etharp_send_ip
 1828 017e 0346     		mov	r3, r0
 1829 0180 87F82F30 		strb	r3, [r7, #47]
 1830 0184 A6E0     		b	.L93
 1831              	.L94:
 954:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* pending entry? (either just created or already pending */
 955:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 1832              		.loc 1 955 0
 1833 0186 97F91B10 		ldrsb	r1, [r7, #27]
 1834 018a 40F20002 		movw	r2, #:lower16:arp_table
 1835 018e C0F20002 		movt	r2, #:upper16:arp_table
 1836 0192 0B46     		mov	r3, r1
 1837 0194 4FEA8303 		lsl	r3, r3, #2
 1838 0198 5B18     		adds	r3, r3, r1
 1839 019a 4FEA8303 		lsl	r3, r3, #2
 1840 019e D318     		adds	r3, r2, r3
 1841 01a0 03F10803 		add	r3, r3, #8
 1842 01a4 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1843 01a6 012B     		cmp	r3, #1
 1844 01a8 40F09480 		bne	.L93
 1845              	.LBB3:
 956:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ARP_QUEUEING /* queue the given q packet */
 957:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       struct pbuf *p;
 958:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       int copy_needed = 0;
 1846              		.loc 1 958 0
 1847 01ac 4FF00003 		mov	r3, #0
 1848 01b0 7B62     		str	r3, [r7, #36]
 959:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
 960:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****        * to copy the whole queue into a new PBUF_RAM (see bug #11400) 
 961:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****        * PBUF_ROMs can be left as they are, since ROM must not get changed. */
 962:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       p = q;
 1849              		.loc 1 962 0
 1850 01b2 7B68     		ldr	r3, [r7, #4]
 1851 01b4 BB62     		str	r3, [r7, #40]
 963:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       while (p) {
 1852              		.loc 1 963 0
 1853 01b6 0FE0     		b	.L95
 1854              	.L99:
 964:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 1855              		.loc 1 964 0
 1856 01b8 BB6A     		ldr	r3, [r7, #40]
 1857 01ba 5A89     		ldrh	r2, [r3, #10]
 1858 01bc BB6A     		ldr	r3, [r7, #40]
 1859 01be 1B89     		ldrh	r3, [r3, #8]
 1860 01c0 9A42     		cmp	r2, r3
 965:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         if(p->type != PBUF_ROM) {
 1861              		.loc 1 965 0
 1862 01c2 BB6A     		ldr	r3, [r7, #40]
 1863 01c4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1864 01c6 012B     		cmp	r3, #1
 1865 01c8 03D0     		beq	.L97
 966:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           copy_needed = 1;
 1866              		.loc 1 966 0
 1867 01ca 4FF00103 		mov	r3, #1
 1868 01ce 7B62     		str	r3, [r7, #36]
 967:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           break;
 1869              		.loc 1 967 0
 1870 01d0 05E0     		b	.L98
 1871              	.L97:
 968:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         }
 969:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         p = p->next;
 1872              		.loc 1 969 0
 1873 01d2 BB6A     		ldr	r3, [r7, #40]
 1874 01d4 1B68     		ldr	r3, [r3, #0]
 1875 01d6 BB62     		str	r3, [r7, #40]
 1876              	.L95:
 963:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       while (p) {
 1877              		.loc 1 963 0 discriminator 1
 1878 01d8 BB6A     		ldr	r3, [r7, #40]
 1879 01da 002B     		cmp	r3, #0
 1880 01dc ECD1     		bne	.L99
 1881              	.L98:
 970:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
 971:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if(copy_needed) {
 1882              		.loc 1 971 0
 1883 01de 7B6A     		ldr	r3, [r7, #36]
 1884 01e0 002B     		cmp	r3, #0
 1885 01e2 1AD0     		beq	.L100
 972:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* copy the whole packet into new pbufs */
 973:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         p = pbuf_alloc(PBUF_RAW, p->tot_len, PBUF_RAM);
 1886              		.loc 1 973 0
 1887 01e4 BB6A     		ldr	r3, [r7, #40]
 1888 01e6 1B89     		ldrh	r3, [r3, #8]
 1889 01e8 4FF00300 		mov	r0, #3
 1890 01ec 1946     		mov	r1, r3
 1891 01ee 4FF00002 		mov	r2, #0
 1892 01f2 FFF7FEFF 		bl	pbuf_alloc
 1893 01f6 B862     		str	r0, [r7, #40]
 974:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         if(p != NULL) {
 1894              		.loc 1 974 0
 1895 01f8 BB6A     		ldr	r3, [r7, #40]
 1896 01fa 002B     		cmp	r3, #0
 1897 01fc 12D0     		beq	.L101
 975:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           if (pbuf_copy(p, q) != ERR_OK) {
 1898              		.loc 1 975 0
 1899 01fe B86A     		ldr	r0, [r7, #40]
 1900 0200 7968     		ldr	r1, [r7, #4]
 1901 0202 FFF7FEFF 		bl	pbuf_copy
 1902 0206 0346     		mov	r3, r0
 1903 0208 002B     		cmp	r3, #0
 1904 020a 0BD0     		beq	.L101
 976:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             pbuf_free(p);
 1905              		.loc 1 976 0
 1906 020c B86A     		ldr	r0, [r7, #40]
 1907 020e FFF7FEFF 		bl	pbuf_free
 977:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             p = NULL;
 1908              		.loc 1 977 0
 1909 0212 4FF00003 		mov	r3, #0
 1910 0216 BB62     		str	r3, [r7, #40]
 1911 0218 04E0     		b	.L101
 1912              	.L100:
 978:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           }
 979:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         }
 980:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       } else {
 981:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* referencing the old pbuf is enough */
 982:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         p = q;
 1913              		.loc 1 982 0
 1914 021a 7B68     		ldr	r3, [r7, #4]
 1915 021c BB62     		str	r3, [r7, #40]
 983:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         pbuf_ref(p);
 1916              		.loc 1 983 0
 1917 021e B86A     		ldr	r0, [r7, #40]
 1918 0220 FFF7FEFF 		bl	pbuf_ref
 1919              	.L101:
 984:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
 985:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* packet could be taken over? */
 986:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if (p != NULL) {
 1920              		.loc 1 986 0
 1921 0224 BB6A     		ldr	r3, [r7, #40]
 1922 0226 002B     		cmp	r3, #0
 1923 0228 54D0     		beq	.L93
 1924              	.LBB4:
 987:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* queue packet ... */
 988:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         struct etharp_q_entry *new_entry;
 989:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* allocate a new arp queue entry */
 990:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         new_entry = memp_malloc(MEMP_ARP_QUEUE);
 1925              		.loc 1 990 0
 1926 022a 40F20003 		movw	r3, #:lower16:memp_sizes
 1927 022e C0F20003 		movt	r3, #:upper16:memp_sizes
 1928 0232 9B89     		ldrh	r3, [r3, #12]
 1929 0234 1846     		mov	r0, r3
 1930 0236 FFF7FEFF 		bl	mem_malloc
 1931 023a 7861     		str	r0, [r7, #20]
 991:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         if (new_entry != NULL) {
 1932              		.loc 1 991 0
 1933 023c 7B69     		ldr	r3, [r7, #20]
 1934 023e 002B     		cmp	r3, #0
 1935 0240 45D0     		beq	.L102
 992:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           new_entry->next = 0;
 1936              		.loc 1 992 0
 1937 0242 7B69     		ldr	r3, [r7, #20]
 1938 0244 4FF00002 		mov	r2, #0
 1939 0248 1A60     		str	r2, [r3, #0]
 993:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           new_entry->p = p;
 1940              		.loc 1 993 0
 1941 024a 7B69     		ldr	r3, [r7, #20]
 1942 024c BA6A     		ldr	r2, [r7, #40]
 1943 024e 5A60     		str	r2, [r3, #4]
 994:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           if(arp_table[i].q != NULL) {
 1944              		.loc 1 994 0
 1945 0250 97F91B10 		ldrsb	r1, [r7, #27]
 1946 0254 40F20002 		movw	r2, #:lower16:arp_table
 1947 0258 C0F20002 		movt	r2, #:upper16:arp_table
 1948 025c 0B46     		mov	r3, r1
 1949 025e 4FEA8303 		lsl	r3, r3, #2
 1950 0262 5B18     		adds	r3, r3, r1
 1951 0264 4FEA8303 		lsl	r3, r3, #2
 1952 0268 D318     		adds	r3, r2, r3
 1953 026a 1B68     		ldr	r3, [r3, #0]
 1954 026c 002B     		cmp	r3, #0
 1955 026e 1AD0     		beq	.L103
 1956              	.LBB5:
 995:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             /* queue was already existent, append the new entry to the end */
 996:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             struct etharp_q_entry *r;
 997:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             r = arp_table[i].q;
 1957              		.loc 1 997 0
 1958 0270 97F91B10 		ldrsb	r1, [r7, #27]
 1959 0274 40F20002 		movw	r2, #:lower16:arp_table
 1960 0278 C0F20002 		movt	r2, #:upper16:arp_table
 1961 027c 0B46     		mov	r3, r1
 1962 027e 4FEA8303 		lsl	r3, r3, #2
 1963 0282 5B18     		adds	r3, r3, r1
 1964 0284 4FEA8303 		lsl	r3, r3, #2
 1965 0288 D318     		adds	r3, r2, r3
 1966 028a 1B68     		ldr	r3, [r3, #0]
 1967 028c 3B62     		str	r3, [r7, #32]
 998:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             while (r->next != NULL) {
 1968              		.loc 1 998 0
 1969 028e 02E0     		b	.L104
 1970              	.L105:
 999:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****               r = r->next;
 1971              		.loc 1 999 0
 1972 0290 3B6A     		ldr	r3, [r7, #32]
 1973 0292 1B68     		ldr	r3, [r3, #0]
 1974 0294 3B62     		str	r3, [r7, #32]
 1975              	.L104:
 998:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             while (r->next != NULL) {
 1976              		.loc 1 998 0 discriminator 1
 1977 0296 3B6A     		ldr	r3, [r7, #32]
 1978 0298 1B68     		ldr	r3, [r3, #0]
 1979 029a 002B     		cmp	r3, #0
 1980 029c F8D1     		bne	.L105
1000:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             }
1001:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             r->next = new_entry;
 1981              		.loc 1 1001 0
 1982 029e 3B6A     		ldr	r3, [r7, #32]
 1983 02a0 7A69     		ldr	r2, [r7, #20]
 1984 02a2 1A60     		str	r2, [r3, #0]
 1985 02a4 0EE0     		b	.L106
 1986              	.L103:
 1987              	.LBE5:
1002:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           } else {
1003:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             /* queue did not exist, first item in queue */
1004:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****             arp_table[i].q = new_entry;
 1988              		.loc 1 1004 0
 1989 02a6 97F91B10 		ldrsb	r1, [r7, #27]
 1990 02aa 40F20002 		movw	r2, #:lower16:arp_table
 1991 02ae C0F20002 		movt	r2, #:upper16:arp_table
 1992 02b2 0B46     		mov	r3, r1
 1993 02b4 4FEA8303 		lsl	r3, r3, #2
 1994 02b8 5B18     		adds	r3, r3, r1
 1995 02ba 4FEA8303 		lsl	r3, r3, #2
 1996 02be D318     		adds	r3, r2, r3
 1997 02c0 7A69     		ldr	r2, [r7, #20]
 1998 02c2 1A60     		str	r2, [r3, #0]
 1999              	.L106:
1005:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           }
1006:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry 
1007:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           result = ERR_OK;
 2000              		.loc 1 1007 0
 2001 02c4 4FF00003 		mov	r3, #0
 2002 02c8 87F82F30 		strb	r3, [r7, #47]
 2003 02cc 02E0     		b	.L93
 2004              	.L102:
1008:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         } else {
1009:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           /* the pool MEMP_ARP_QUEUE is empty */
1010:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           pbuf_free(p);
 2005              		.loc 1 1010 0
 2006 02ce B86A     		ldr	r0, [r7, #40]
 2007 02d0 FFF7FEFF 		bl	pbuf_free
 2008              	.L93:
 2009              	.LBE4:
 2010              	.LBE3:
1011:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF
1012:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****           /* { result == ERR_MEM } through initialization */
1013:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         }
1014:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       } else {
1015:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ETHARP_STATS_INC(etharp.memerr);
1016:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_R
1017:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* { result == ERR_MEM } through initialization */
1018:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
1019:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else /* ARP_QUEUEING == 0 */
1020:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* q && state == PENDING && ARP_QUEUEING == 0 => result = ERR_MEM */
1021:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* { result == ERR_MEM } through initialization */
1022:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: Ethernet destination address unkno
1023:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif
1024:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
1025:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
1026:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return result;
 2011              		.loc 1 1026 0
 2012 02d4 97F82F30 		ldrb	r3, [r7, #47]	@ zero_extendqisi2
 2013              	.L87:
 2014 02d8 5BB2     		sxtb	r3, r3
1027:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 2015              		.loc 1 1027 0
 2016 02da 1846     		mov	r0, r3
 2017 02dc 07F13407 		add	r7, r7, #52
 2018 02e0 BD46     		mov	sp, r7
 2019 02e2 90BD     		pop	{r4, r7, pc}
 2020              		.cfi_endproc
 2021              	.LFE126:
 2023              		.section	.text.etharp_raw,"ax",%progbits
 2024              		.align	2
 2025              		.thumb
 2026              		.thumb_func
 2028              	etharp_raw:
 2029              	.LFB127:
1028:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1029:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
1030:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Send a raw ARP packet (opcode and all addresses can be modified)
1031:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
1032:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param netif the lwip network interface on which to send the ARP packet
1033:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ethsrc_addr the source MAC address for the ethernet header
1034:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ethdst_addr the destination MAC address for the ethernet header
1035:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param hwsrc_addr the source MAC address for the ARP protocol header
1036:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ipsrc_addr the source IP address for the ARP protocol header
1037:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param hwdst_addr the destination MAC address for the ARP protocol header
1038:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ipdst_addr the destination IP address for the ARP protocol header
1039:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param opcode the type of the ARP packet
1040:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return ERR_OK if the ARP packet has been sent
1041:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *         ERR_MEM if the ARP packet couldn't be allocated
1042:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *         any other err_t on failure
1043:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
1044:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if !LWIP_AUTOIP
1045:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** static
1046:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
1047:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** err_t
1048:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
1049:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****            const struct eth_addr *ethdst_addr,
1050:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****            const struct eth_addr *hwsrc_addr, const struct ip_addr *ipsrc_addr,
1051:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****            const struct eth_addr *hwdst_addr, const struct ip_addr *ipdst_addr,
1052:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****            const u16_t opcode)
1053:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 2030              		.loc 1 1053 0
 2031              		.cfi_startproc
 2032              		@ args = 16, pretend = 0, frame = 32
 2033              		@ frame_needed = 1, uses_anonymous_args = 0
 2034 0000 80B5     		push	{r7, lr}
 2035              	.LCFI30:
 2036              		.cfi_def_cfa_offset 8
 2037              		.cfi_offset 7, -8
 2038              		.cfi_offset 14, -4
 2039 0002 88B0     		sub	sp, sp, #32
 2040              	.LCFI31:
 2041              		.cfi_def_cfa_offset 40
 2042 0004 00AF     		add	r7, sp, #0
 2043              	.LCFI32:
 2044              		.cfi_def_cfa_register 7
 2045 0006 F860     		str	r0, [r7, #12]
 2046 0008 B960     		str	r1, [r7, #8]
 2047 000a 7A60     		str	r2, [r7, #4]
 2048 000c 3B60     		str	r3, [r7, #0]
1054:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct pbuf *p;
1055:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   err_t result = ERR_OK;
 2049              		.loc 1 1055 0
 2050 000e 4FF00003 		mov	r3, #0
 2051 0012 BB77     		strb	r3, [r7, #30]
1056:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u8_t k; /* ARP entry index */
1057:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct eth_hdr *ethhdr;
1058:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct etharp_hdr *hdr;
1059:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_AUTOIP
1060:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   const u8_t * ethdst_hwaddr;
1061:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
1062:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1063:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* allocate a pbuf for the outgoing ARP request packet */
1064:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   p = pbuf_alloc(PBUF_RAW, SIZEOF_ETHARP_PACKET, PBUF_RAM);
 2052              		.loc 1 1064 0
 2053 0014 4FF00300 		mov	r0, #3
 2054 0018 4FF02A01 		mov	r1, #42
 2055 001c 4FF00002 		mov	r2, #0
 2056 0020 FFF7FEFF 		bl	pbuf_alloc
 2057 0024 B861     		str	r0, [r7, #24]
1065:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* could allocate a pbuf for an ARP request? */
1066:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (p == NULL) {
 2058              		.loc 1 1066 0
 2059 0026 BB69     		ldr	r3, [r7, #24]
 2060 0028 002B     		cmp	r3, #0
 2061 002a 02D1     		bne	.L108
1067:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
1068:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ("etharp_raw: could not allocate pbuf for ARP request.\n"));
1069:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ETHARP_STATS_INC(etharp.memerr);
1070:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     return ERR_MEM;
 2062              		.loc 1 1070 0
 2063 002c 4FF0FF03 		mov	r3, #255
 2064 0030 6EE0     		b	.L109
 2065              	.L108:
1071:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
1072:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
1073:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****               (p->len >= SIZEOF_ETHARP_PACKET));
1074:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1075:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ethhdr = p->payload;
 2066              		.loc 1 1075 0
 2067 0032 BB69     		ldr	r3, [r7, #24]
 2068 0034 5B68     		ldr	r3, [r3, #4]
 2069 0036 7B61     		str	r3, [r7, #20]
1076:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   hdr = (struct etharp_hdr *)((u8_t*)ethhdr + SIZEOF_ETH_HDR);
 2070              		.loc 1 1076 0
 2071 0038 7B69     		ldr	r3, [r7, #20]
 2072 003a 03F10E03 		add	r3, r3, #14
 2073 003e 3B61     		str	r3, [r7, #16]
1077:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
1078:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   hdr->opcode = htons(opcode);
 2074              		.loc 1 1078 0
 2075 0040 BB8E     		ldrh	r3, [r7, #52]
 2076 0042 1846     		mov	r0, r3
 2077 0044 FFF7FEFF 		bl	htons
 2078 0048 0346     		mov	r3, r0
 2079 004a 1A46     		mov	r2, r3
 2080 004c 3B69     		ldr	r3, [r7, #16]
 2081 004e DA80     		strh	r2, [r3, #6]	@ unaligned
1079:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1080:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_ASSERT("netif->hwaddr_len must be the same as ETHARP_HWADDR_LEN for etharp!",
1081:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****               (netif->hwaddr_len == ETHARP_HWADDR_LEN));
1082:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   k = ETHARP_HWADDR_LEN;
 2082              		.loc 1 1082 0
 2083 0050 4FF00603 		mov	r3, #6
 2084 0054 FB77     		strb	r3, [r7, #31]
1083:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_AUTOIP
1084:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* If we are using Link-Local, ARP packets must be broadcast on the
1085:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****    * link layer. (See RFC3927 Section 2.5) */
1086:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ethdst_hwaddr = ((netif->autoip != NULL) && (netif->autoip->state != AUTOIP_STATE_OFF)) ? (u8_t*)
1087:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
1088:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* Write MAC-Addresses (combined loop for both headers) */
1089:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while(k > 0) {
 2085              		.loc 1 1089 0
 2086 0056 1EE0     		b	.L110
 2087              	.L111:
1090:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     k--;
 2088              		.loc 1 1090 0
 2089 0058 FB7F     		ldrb	r3, [r7, #31]
 2090 005a 03F1FF33 		add	r3, r3, #-1
 2091 005e FB77     		strb	r3, [r7, #31]
1091:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* Write the ARP MAC-Addresses */
1092:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     hdr->shwaddr.addr[k] = hwsrc_addr->addr[k];
 2092              		.loc 1 1092 0
 2093 0060 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2094 0062 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 2095 0064 3968     		ldr	r1, [r7, #0]
 2096 0066 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2097 0068 3969     		ldr	r1, [r7, #16]
 2098 006a CB18     		adds	r3, r1, r3
 2099 006c 1A72     		strb	r2, [r3, #8]
1093:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     hdr->dhwaddr.addr[k] = hwdst_addr->addr[k];
 2100              		.loc 1 1093 0
 2101 006e FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2102 0070 FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 2103 0072 F96A     		ldr	r1, [r7, #44]
 2104 0074 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2105 0076 3969     		ldr	r1, [r7, #16]
 2106 0078 CB18     		adds	r3, r1, r3
 2107 007a 9A74     		strb	r2, [r3, #18]
1094:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* Write the Ethernet MAC-Addresses */
1095:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if LWIP_AUTOIP
1096:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ethhdr->dest.addr[k] = ethdst_hwaddr[k];
1097:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #else  /* LWIP_AUTOIP */
1098:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ethhdr->dest.addr[k] = ethdst_addr->addr[k];
 2108              		.loc 1 1098 0
 2109 007c FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2110 007e FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 2111 0080 7968     		ldr	r1, [r7, #4]
 2112 0082 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 2113 0084 7A69     		ldr	r2, [r7, #20]
 2114 0086 D154     		strb	r1, [r2, r3]
1099:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* LWIP_AUTOIP */
1100:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ethhdr->src.addr[k]  = ethsrc_addr->addr[k];
 2115              		.loc 1 1100 0
 2116 0088 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2117 008a FA7F     		ldrb	r2, [r7, #31]	@ zero_extendqisi2
 2118 008c B968     		ldr	r1, [r7, #8]
 2119 008e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 2120 0090 7969     		ldr	r1, [r7, #20]
 2121 0092 CB18     		adds	r3, r1, r3
 2122 0094 9A71     		strb	r2, [r3, #6]
 2123              	.L110:
1089:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   while(k > 0) {
 2124              		.loc 1 1089 0 discriminator 1
 2125 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 2126 0098 002B     		cmp	r3, #0
 2127 009a DDD1     		bne	.L111
1101:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
1102:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   hdr->dipaddr = *(struct ip_addr2 *)ipdst_addr;
 2128              		.loc 1 1102 0
 2129 009c 3B69     		ldr	r3, [r7, #16]
 2130 009e 3A6B     		ldr	r2, [r7, #48]
 2131 00a0 03F11803 		add	r3, r3, #24
 2132 00a4 1268     		ldr	r2, [r2, #0]	@ unaligned
 2133 00a6 1A60     		str	r2, [r3, #0]	@ unaligned
1103:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   hdr->sipaddr = *(struct ip_addr2 *)ipsrc_addr;
 2134              		.loc 1 1103 0
 2135 00a8 3B69     		ldr	r3, [r7, #16]
 2136 00aa BA6A     		ldr	r2, [r7, #40]
 2137 00ac 03F10E03 		add	r3, r3, #14
 2138 00b0 1268     		ldr	r2, [r2, #0]	@ unaligned
 2139 00b2 1A60     		str	r2, [r3, #0]	@ unaligned
1104:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   
1105:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1106:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   hdr->hwtype = htons(HWTYPE_ETHERNET);
 2140              		.loc 1 1106 0
 2141 00b4 4FF00100 		mov	r0, #1
 2142 00b8 FFF7FEFF 		bl	htons
 2143 00bc 0346     		mov	r3, r0
 2144 00be 1A46     		mov	r2, r3
 2145 00c0 3B69     		ldr	r3, [r7, #16]
 2146 00c2 1A80     		strh	r2, [r3, #0]	@ unaligned
1107:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   hdr->proto = htons(ETHTYPE_IP);
 2147              		.loc 1 1107 0
 2148 00c4 4FF40060 		mov	r0, #2048
 2149 00c8 FFF7FEFF 		bl	htons
 2150 00cc 0346     		mov	r3, r0
 2151 00ce 1A46     		mov	r2, r3
 2152 00d0 3B69     		ldr	r3, [r7, #16]
 2153 00d2 5A80     		strh	r2, [r3, #2]	@ unaligned
1108:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* set hwlen and protolen together */
1109:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   hdr->_hwlen_protolen = htons((ETHARP_HWADDR_LEN << 8) | sizeof(struct ip_addr));
 2154              		.loc 1 1109 0
 2155 00d4 40F20460 		movw	r0, #1540
 2156 00d8 FFF7FEFF 		bl	htons
 2157 00dc 0346     		mov	r3, r0
 2158 00de 1A46     		mov	r2, r3
 2159 00e0 3B69     		ldr	r3, [r7, #16]
 2160 00e2 9A80     		strh	r2, [r3, #4]	@ unaligned
1110:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1111:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ethhdr->type = htons(ETHTYPE_ARP);
 2161              		.loc 1 1111 0
 2162 00e4 40F60600 		movw	r0, #2054
 2163 00e8 FFF7FEFF 		bl	htons
 2164 00ec 0346     		mov	r3, r0
 2165 00ee 1A46     		mov	r2, r3
 2166 00f0 7B69     		ldr	r3, [r7, #20]
 2167 00f2 9A81     		strh	r2, [r3, #12]	@ unaligned
1112:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* send ARP query */
1113:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   result = netif->linkoutput(netif, p);
 2168              		.loc 1 1113 0
 2169 00f4 FB68     		ldr	r3, [r7, #12]
 2170 00f6 9B69     		ldr	r3, [r3, #24]
 2171 00f8 F868     		ldr	r0, [r7, #12]
 2172 00fa B969     		ldr	r1, [r7, #24]
 2173 00fc 9847     		blx	r3
 2174 00fe 0346     		mov	r3, r0
 2175 0100 BB77     		strb	r3, [r7, #30]
1114:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ETHARP_STATS_INC(etharp.xmit);
1115:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* free ARP query packet */
1116:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   pbuf_free(p);
 2176              		.loc 1 1116 0
 2177 0102 B869     		ldr	r0, [r7, #24]
 2178 0104 FFF7FEFF 		bl	pbuf_free
1117:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   p = NULL;
 2179              		.loc 1 1117 0
 2180 0108 4FF00003 		mov	r3, #0
 2181 010c BB61     		str	r3, [r7, #24]
1118:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* could not allocate pbuf for ARP request */
1119:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1120:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return result;
 2182              		.loc 1 1120 0
 2183 010e BB7F     		ldrb	r3, [r7, #30]	@ zero_extendqisi2
 2184              	.L109:
 2185 0110 5BB2     		sxtb	r3, r3
1121:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 2186              		.loc 1 1121 0
 2187 0112 1846     		mov	r0, r3
 2188 0114 07F12007 		add	r7, r7, #32
 2189 0118 BD46     		mov	sp, r7
 2190 011a 80BD     		pop	{r7, pc}
 2191              		.cfi_endproc
 2192              	.LFE127:
 2194              		.section	.text.etharp_request,"ax",%progbits
 2195              		.align	2
 2196              		.global	etharp_request
 2197              		.thumb
 2198              		.thumb_func
 2200              	etharp_request:
 2201              	.LFB128:
1122:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1123:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
1124:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Send an ARP request packet asking for ipaddr.
1125:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
1126:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param netif the lwip network interface on which to send the request
1127:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param ipaddr the IP address for which to ask
1128:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @return ERR_OK if the request has been sent
1129:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *         ERR_MEM if the ARP packet couldn't be allocated
1130:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *         any other err_t on failure
1131:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
1132:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** err_t
1133:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** etharp_request(struct netif *netif, struct ip_addr *ipaddr)
1134:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 2202              		.loc 1 1134 0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 8
 2205              		@ frame_needed = 1, uses_anonymous_args = 0
 2206 0000 90B5     		push	{r4, r7, lr}
 2207              	.LCFI33:
 2208              		.cfi_def_cfa_offset 12
 2209              		.cfi_offset 4, -12
 2210              		.cfi_offset 7, -8
 2211              		.cfi_offset 14, -4
 2212 0002 87B0     		sub	sp, sp, #28
 2213              	.LCFI34:
 2214              		.cfi_def_cfa_offset 40
 2215 0004 04AF     		add	r7, sp, #16
 2216              	.LCFI35:
 2217              		.cfi_def_cfa 7, 24
 2218 0006 7860     		str	r0, [r7, #4]
 2219 0008 3960     		str	r1, [r7, #0]
1135:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 2220              		.loc 1 1135 0
 2221 000a 7B68     		ldr	r3, [r7, #4]
 2222 000c 03F12302 		add	r2, r3, #35
1136:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****                     (struct eth_addr *)netif->hwaddr, &netif->ip_addr, &ethzero,
 2223              		.loc 1 1136 0
 2224 0010 7B68     		ldr	r3, [r7, #4]
 2225 0012 03F12304 		add	r4, r3, #35
 2226 0016 7B68     		ldr	r3, [r7, #4]
 2227 0018 03F10403 		add	r3, r3, #4
1135:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, &ethbroadcast,
 2228              		.loc 1 1135 0
 2229 001c 0093     		str	r3, [sp, #0]
 2230 001e 40F20003 		movw	r3, #:lower16:ethzero
 2231 0022 C0F20003 		movt	r3, #:upper16:ethzero
 2232 0026 0193     		str	r3, [sp, #4]
 2233 0028 3B68     		ldr	r3, [r7, #0]
 2234 002a 0293     		str	r3, [sp, #8]
 2235 002c 4FF00103 		mov	r3, #1
 2236 0030 0393     		str	r3, [sp, #12]
 2237 0032 7868     		ldr	r0, [r7, #4]
 2238 0034 1146     		mov	r1, r2
 2239 0036 40F20002 		movw	r2, #:lower16:ethbroadcast
 2240 003a C0F20002 		movt	r2, #:upper16:ethbroadcast
 2241 003e 2346     		mov	r3, r4
 2242 0040 FFF7FEFF 		bl	etharp_raw
 2243 0044 0346     		mov	r3, r0
1137:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****                     ipaddr, ARP_REQUEST);
1138:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 2244              		.loc 1 1138 0
 2245 0046 1846     		mov	r0, r3
 2246 0048 07F10C07 		add	r7, r7, #12
 2247 004c BD46     		mov	sp, r7
 2248 004e 90BD     		pop	{r4, r7, pc}
 2249              		.cfi_endproc
 2250              	.LFE128:
 2252              		.section	.text.ethernet_input,"ax",%progbits
 2253              		.align	2
 2254              		.global	ethernet_input
 2255              		.thumb
 2256              		.thumb_func
 2258              	ethernet_input:
 2259              	.LFB129:
1139:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1140:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** /**
1141:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * Process received ethernet frames. Using this function instead of directly
1142:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * calling ip_input and passing ARP frames through etharp in ethernetif_input,
1143:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * the ARP cache is protected from concurrent access.
1144:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  *
1145:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param p the recevied packet, p->payload pointing to the ethernet header
1146:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  * @param netif the network interface on which the packet was received
1147:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****  */
1148:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** err_t
1149:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** ethernet_input(struct pbuf *p, struct netif *netif)
1150:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** {
 2260              		.loc 1 1150 0
 2261              		.cfi_startproc
 2262              		@ args = 0, pretend = 0, frame = 16
 2263              		@ frame_needed = 1, uses_anonymous_args = 0
 2264 0000 80B5     		push	{r7, lr}
 2265              	.LCFI36:
 2266              		.cfi_def_cfa_offset 8
 2267              		.cfi_offset 7, -8
 2268              		.cfi_offset 14, -4
 2269 0002 84B0     		sub	sp, sp, #16
 2270              	.LCFI37:
 2271              		.cfi_def_cfa_offset 24
 2272 0004 00AF     		add	r7, sp, #0
 2273              	.LCFI38:
 2274              		.cfi_def_cfa_register 7
 2275 0006 7860     		str	r0, [r7, #4]
 2276 0008 3960     		str	r1, [r7, #0]
1151:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   struct eth_hdr* ethhdr;
1152:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   u16_t type;
1153:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1154:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* points to packet payload, which starts with an Ethernet header */
1155:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   ethhdr = p->payload;
 2277              		.loc 1 1155 0
 2278 000a 7B68     		ldr	r3, [r7, #4]
 2279 000c 5B68     		ldr	r3, [r3, #4]
 2280 000e FB60     		str	r3, [r7, #12]
1156:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
1157:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     ("ethernet_input: dest:%02x:%02x:%02x:%02x:%02x:%02x, src:%02x:%02x:%02x:%02x:%02x:%02x, type:%
1158:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      (unsigned)ethhdr->dest.addr[0], (unsigned)ethhdr->dest.addr[1], (unsigned)ethhdr->dest.addr[2]
1159:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5]
1160:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      (unsigned)ethhdr->src.addr[0], (unsigned)ethhdr->src.addr[1], (unsigned)ethhdr->src.addr[2],
1161:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      (unsigned)ethhdr->src.addr[3], (unsigned)ethhdr->src.addr[4], (unsigned)ethhdr->src.addr[5],
1162:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      (unsigned)htons(ethhdr->type)));
1163:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1164:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   type = htons(ethhdr->type);
 2281              		.loc 1 1164 0
 2282 0010 FB68     		ldr	r3, [r7, #12]
 2283 0012 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 2284 0014 9BB2     		uxth	r3, r3
 2285 0016 1846     		mov	r0, r3
 2286 0018 FFF7FEFF 		bl	htons
 2287 001c 0346     		mov	r3, r0
 2288 001e 7B81     		strh	r3, [r7, #10]	@ movhi
1165:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ETHARP_SUPPORT_VLAN
1166:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   if (type == ETHTYPE_VLAN) {
1167:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     struct eth_vlan_hdr *vlan = (struct eth_vlan_hdr*)(((char*)ethhdr) + SIZEOF_ETH_HDR);
1168:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #ifdef ETHARP_VLAN_CHECK /* if not, allow all VLANs */
1169:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     if (VLAN_ID(vlan) != ETHARP_VLAN_CHECK) {
1170:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* silently ignore this packet: not for our VLAN */
1171:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       pbuf_free(p);
1172:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       return ERR_OK;
1173:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     }
1174:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* ETHARP_VLAN_CHECK */
1175:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     type = htons(vlan->tpid);
1176:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
1177:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* ETHARP_SUPPORT_VLAN */
1178:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1179:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   switch (type) {
 2289              		.loc 1 1179 0
 2290 0020 7B89     		ldrh	r3, [r7, #10]
 2291 0022 B3F5006F 		cmp	r3, #2048
 2292 0026 04D0     		beq	.L116
 2293 0028 40F60602 		movw	r2, #2054
 2294 002c 9342     		cmp	r3, r2
 2295 002e 18D0     		beq	.L117
 2296 0030 20E0     		b	.L122
 2297              	.L116:
1180:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     /* IP packet? */
1181:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     case ETHTYPE_IP:
1182:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if ETHARP_TRUST_IP_MAC
1183:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* update ARP table */
1184:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       etharp_ip_input(netif, p);
 2298              		.loc 1 1184 0
 2299 0032 3868     		ldr	r0, [r7, #0]
 2300 0034 7968     		ldr	r1, [r7, #4]
 2301 0036 FFF7FEFF 		bl	etharp_ip_input
1185:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* ETHARP_TRUST_IP_MAC */
1186:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* skip Ethernet header */
1187:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       if(pbuf_header(p, -(s16_t)SIZEOF_ETH_HDR)) {
 2302              		.loc 1 1187 0
 2303 003a 7868     		ldr	r0, [r7, #4]
 2304 003c 6FF00D01 		mvn	r1, #13
 2305 0040 FFF7FEFF 		bl	pbuf_header
 2306 0044 0346     		mov	r3, r0
 2307 0046 002B     		cmp	r3, #0
 2308 0048 06D0     		beq	.L118
1188:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         LWIP_ASSERT("Can't move over header in packet", 0);
1189:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         pbuf_free(p);
 2309              		.loc 1 1189 0
 2310 004a 7868     		ldr	r0, [r7, #4]
 2311 004c FFF7FEFF 		bl	pbuf_free
1190:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         p = NULL;
 2312              		.loc 1 1190 0
 2313 0050 4FF00003 		mov	r3, #0
 2314 0054 7B60     		str	r3, [r7, #4]
1191:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       } else {
1192:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         /* pass to IP layer */
1193:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ip_input(p, netif);
1194:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       }
1195:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       break;
 2315              		.loc 1 1195 0
 2316 0056 14E0     		b	.L120
 2317              	.L118:
1193:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****         ip_input(p, netif);
 2318              		.loc 1 1193 0
 2319 0058 7868     		ldr	r0, [r7, #4]
 2320 005a 3968     		ldr	r1, [r7, #0]
 2321 005c FFF7FEFF 		bl	ip_input
 2322              		.loc 1 1195 0
 2323 0060 0FE0     		b	.L120
 2324              	.L117:
1196:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       
1197:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     case ETHTYPE_ARP:
1198:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       /* pass p to ARP module */
1199:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       etharp_arp_input(netif, (struct eth_addr*)(netif->hwaddr), p);
 2325              		.loc 1 1199 0
 2326 0062 3B68     		ldr	r3, [r7, #0]
 2327 0064 03F12303 		add	r3, r3, #35
 2328 0068 3868     		ldr	r0, [r7, #0]
 2329 006a 1946     		mov	r1, r3
 2330 006c 7A68     		ldr	r2, [r7, #4]
 2331 006e FFF7FEFF 		bl	etharp_arp_input
1200:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       break;
 2332              		.loc 1 1200 0
 2333 0072 06E0     		b	.L120
 2334              	.L122:
1201:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1202:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #if PPPOE_SUPPORT
1203:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     case ETHTYPE_PPPOEDISC: /* PPP Over Ethernet Discovery Stage */
1204:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       pppoe_disc_input(netif, p);
1205:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       break;
1206:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1207:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     case ETHTYPE_PPPOE: /* PPP Over Ethernet Session Stage */
1208:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       pppoe_data_input(netif, p);
1209:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       break;
1210:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** #endif /* PPPOE_SUPPORT */
1211:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1212:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****     default:
1213:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ETHARP_STATS_INC(etharp.proterr);
1214:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       ETHARP_STATS_INC(etharp.drop);
1215:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       pbuf_free(p);
 2335              		.loc 1 1215 0
 2336 0074 7868     		ldr	r0, [r7, #4]
 2337 0076 FFF7FEFF 		bl	pbuf_free
1216:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       p = NULL;
 2338              		.loc 1 1216 0
 2339 007a 4FF00003 		mov	r3, #0
 2340 007e 7B60     		str	r3, [r7, #4]
1217:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****       break;
 2341              		.loc 1 1217 0
 2342 0080 00BF     		nop
 2343              	.L120:
1218:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   }
1219:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** 
1220:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   /* This means the pbuf is freed or consumed,
1221:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****      so the caller doesn't have to free it again */
1222:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c ****   return ERR_OK;
 2344              		.loc 1 1222 0
 2345 0082 4FF00003 		mov	r3, #0
 2346 0086 5BB2     		sxtb	r3, r3
1223:../Dave/Generated/src/ETH004/01_lwIP_Stack/src/netif/etharp.c **** }
 2347              		.loc 1 1223 0
 2348 0088 1846     		mov	r0, r3
 2349 008a 07F11007 		add	r7, r7, #16
 2350 008e BD46     		mov	sp, r7
 2351 0090 80BD     		pop	{r7, pc}
 2352              		.cfi_endproc
 2353              	.LFE129:
 2355 0092 00BF     		.text
 2356              	.Letext0:
 2357              		.file 2 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 2358              		.file 3 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 2359              		.file 4 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 2360              		.file 5 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 2361              		.file 6 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 2362              		.file 7 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 2363              		.file 8 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 2364              		.file 9 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\src\\ETH004\\01_lw
 2365              		.file 10 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/
 2366              		.file 11 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/
 2367              		.file 12 "F:\\WORK\\SmartHome_checkout1\\XMC4500_RK_HTTPserver\\Dave\\Generated\\inc\\DAVESupport/
 2368              		.file 13 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 etharp.c
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:24     .rodata:00000000 ethbroadcast
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:21     .rodata:00000000 $d
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:35     .rodata:00000008 ethzero
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:38     .bss:00000000 $d
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:39     .bss:00000000 arp_table
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:41     .bss:000000c8 etharp_cached_entry
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:44     .text.free_etharp_q:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:48     .text.free_etharp_q:00000000 free_etharp_q
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:98     .text.etharp_tmr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:103    .text.etharp_tmr:00000000 etharp_tmr
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:277    .text.find_entry:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:281    .text.find_entry:00000000 find_entry
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:754    .text.etharp_send_ip:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:758    .text.etharp_send_ip:00000000 etharp_send_ip
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:836    .text.update_arp_entry:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:840    .text.update_arp_entry:00000000 update_arp_entry
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1052   .text.etharp_find_addr:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1057   .text.etharp_find_addr:00000000 etharp_find_addr
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1142   .text.etharp_ip_input:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1147   .text.etharp_ip_input:00000000 etharp_ip_input
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1214   .text.etharp_arp_input:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1219   .text.etharp_arp_input:00000000 etharp_arp_input
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1484   .text.etharp_output:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1489   .text.etharp_output:00000000 etharp_output
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1650   .text.etharp_query:00000000 etharp_query
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:1645   .text.etharp_query:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:2200   .text.etharp_request:00000000 etharp_request
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:2024   .text.etharp_raw:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:2028   .text.etharp_raw:00000000 etharp_raw
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:2195   .text.etharp_request:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:2253   .text.ethernet_input:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccPPBrxd.s:2258   .text.ethernet_input:00000000 ethernet_input
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1791a5ae2e936ca1033c1c44be394cc7
                           .group:00000000 wm4.ETH004_Conf.h.56.59591edbd6ce1f089c3d2789404b9485
                           .group:00000000 wm4.lwipopts.h.73.a7a63bda1e8216abd1d90275eaaa0027
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.b213c7fd77614ebc3691cef18ad2ff22
                           .group:00000000 wm4.cc.h.66.ec134211c658dcc89de4610e4e7bab46
                           .group:00000000 wm4.arch.h.47.5153c52bfb94ee3b37299920afab6afd
                           .group:00000000 wm4.debug.h.43.557ecd6c90cc70b375bb8a29118be47b
                           .group:00000000 wm4.opt.h.94.d36882acafebb8726bce646fc8b2397b
                           .group:00000000 wm4.inet.h.46.b516065779826845d16d49f513869a2b
                           .group:00000000 wm4.def.h.33.f5df81959e69d85e6b3a0a040438efaf
                           .group:00000000 wm4.err.h.52.37c5d17538f8e8347a9c84196701e92d
                           .group:00000000 wm4.pbuf.h.43.e9a1ad12b97478787a109e22d5306820
                           .group:00000000 wm4.ip_addr.h.79.9a0ce887ca8c88c22ad7686bcb5105df
                           .group:00000000 wm4.netif.h.53.c13431a64f0e73a26710e71455725e84
                           .group:00000000 wm4.ip.h.48.ad46847692d4d729760949b27e48a442
                           .group:00000000 wm4.mem.h.96.20770766e6c9e6c42af6bfa95ef5c63f
                           .group:00000000 wm4.memp_std.h.15.aec196dc1c3fb1142dd450db0c167cbf
                           .group:00000000 wm4.memp.h.86.dbc4cb1b8d6b9ea113f04174f716e4c0
                           .group:00000000 wm4.stats.h.147.58ec5b890fad5bbc2a7711ad8105f087
                           .group:00000000 wm4.udp.h.48.1a8dde095cd0a13580afaba1443e5a3f
                           .group:00000000 wm4.snmp.h.231.ffb5dc2779dd945785c887dfa42d86eb
                           .group:00000000 wm4.etharp.h.52.95fd625a46d8a56126e59f92e1dd6365
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.cf962ebbec441b3ac67502735f0765db
                           .group:00000000 wm4.types.h.55.0006b5fda1d606516f2dcaf4aca92b11
                           .group:00000000 wm4.MULTIPLEXER.h.43.4aa654be3ec80895f631b5281bbb9105
                           .group:00000000 wm4.CCU8PWMLIB.h.70.a5d6a5267902b8b4aea2a0224518259a
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.SYSTM001.h.63.668098b2213d40a5bd0db5fbe813cf05
                           .group:00000000 wm4.ETH002_Conf.h.56.5bd2b085b66f43d51abd69396be7f35f
                           .group:00000000 wm4.EthernetPHY.h.54.7af1709186b21e62a5f1d4049da3988b
                           .group:00000000 wm4.ETH001_Conf.h.71.1e151af1ba54dd023e1f942bdf922819
                           .group:00000000 wm4.synopGMAC_plat.h.78.7a90e072b497857344aea4ba1e994097
                           .group:00000000 wm4.synopGMAC_stack_interface.h.73.6be6aaee0ac6637432f4d0589044479b
                           .group:00000000 wm4.SynopGMAC_Dev.h.72.7c89c07cf666d37f5c9b615720d5e111
                           .group:00000000 wm4.synopGMAC_network_interface.h.73.4dd08316a11bc43c8c4a9da15277fb0f
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.sys.h.65.4a0cd87b9e0d8bb4cd6b30e939b2ca7e
                           .group:00000000 wm4.icmp.h.44.450dbf91f594cc26ad19d086cdc83713
                           .group:00000000 wm4.tcp.h.55.5c30b9432fa60afaa85cbdd225b0c683
                           .group:00000000 wm4.SDMMC003_Conf.h.50.e707c07613fb4e6f2eaec982a892429d
                           .group:00000000 wm4.SDMMC003.h.85.b66055f6032a052f5173e3d123f9c61e
                           .group:00000000 wm4.SDMMC001.h.50.3e2fedc7e5ace33db4121d5cc027e8a4
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.diskio.h.7.93a3c8131d08770c060b04d2180fd09a
                           .group:00000000 wm4.diskio.h.42.a863614abe78d56d18ed7cb292d0028d
                           .group:00000000 wm4.ffconf.h.57.4ab321a2116d35ff7f28236ac31fad7c
                           .group:00000000 wm4.ff.h.82.8f05a37d35a49dba2681a7f047fee4ee
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.LMM001.h.42.c21fe9cbedc336738c3dc89405cad216
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.100.69cb08672bc6ab3f052aa9d5bd6dc5ca
                           .group:00000000 wm4._default_fcntl.h.6.d036cf640d0f9a06bcff1be55acd66be
                           .group:00000000 wm4.stat.h.2.a761b02482a54847ff0d09dfcff24a5c
                           .group:00000000 wm4.fcntl.h.9.9336f33d7f5028f694c75e6e224e0cf7
                           .group:00000000 wm4.SLTHA001.h.97.d7e87c19a31e3244bdd5839e7cc42a61
                           .group:00000000 wm4.WEBSERVER001_Conf.h.54.cd6d29aaa96a848cbc5321bab5d6cd90
                           .group:00000000 wm4.IO004.h.51.dbf9dd216c57d6a7f14a22b2cb7e5626
                           .group:00000000 wm4.MOTORLIBS.h.59.b2e97de0df555dedfa51e24447b57ab8
                           .group:00000000 wm4.uc_id.h.35.a6c4837fad81477ba31967683332b8cc
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.c5c972f6f634bc5116c171852aaab668
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.4809ded45954a78aa476d1e9f44d110e
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d

UNDEFINED SYMBOLS
pbuf_free
mem_free
htons
ip_addr_isbroadcast
ntohl
memcpy
pbuf_header
pbuf_alloc
pbuf_copy
pbuf_ref
memp_sizes
mem_malloc
ip_input
