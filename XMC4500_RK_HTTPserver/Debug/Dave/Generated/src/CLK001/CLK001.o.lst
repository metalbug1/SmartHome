   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"CLK001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Delay,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	Delay:
  25              	.LFB117:
  26              		.file 1 "../Dave/Generated/src/CLK001/CLK001.c"
   1:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
   2:../Dave/Generated/src/CLK001/CLK001.c **** **  DAVE App Name : CLK001       App Version: 1.0.28               
   3:../Dave/Generated/src/CLK001/CLK001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/CLK001/CLK001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
   6:../Dave/Generated/src/CLK001/CLK001.c **** 
   7:../Dave/Generated/src/CLK001/CLK001.c **** 
   8:../Dave/Generated/src/CLK001/CLK001.c **** 
   9:../Dave/Generated/src/CLK001/CLK001.c **** 
  10:../Dave/Generated/src/CLK001/CLK001.c **** /*CODE_BLOCK_BEGIN[CLK001.c]*/
  11:../Dave/Generated/src/CLK001/CLK001.c **** 
  12:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
  13:../Dave/Generated/src/CLK001/CLK001.c ****  Copyright (c) 2012, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/CLK001/CLK001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  16:../Dave/Generated/src/CLK001/CLK001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/CLK001/CLK001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  19:../Dave/Generated/src/CLK001/CLK001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/CLK001/CLK001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/CLK001/CLK001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/CLK001/CLK001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/CLK001/CLK001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/CLK001/CLK001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/CLK001/CLK001.c ****  may be used to endorse or promote products derived from this software without** 
  26:../Dave/Generated/src/CLK001/CLK001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  28:../Dave/Generated/src/CLK001/CLK001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/CLK001/CLK001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/CLK001/CLK001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/CLK001/CLK001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/CLK001/CLK001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/CLK001/CLK001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/CLK001/CLK001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/CLK001/CLK001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/CLK001/CLK001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/CLK001/CLK001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/CLK001/CLK001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  40:../Dave/Generated/src/CLK001/CLK001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/CLK001/CLK001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/CLK001/CLK001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  44:../Dave/Generated/src/CLK001/CLK001.c **** ********************************************************************************
  45:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  46:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  47:../Dave/Generated/src/CLK001/CLK001.c **** ** PLATFORM : Infineon XMC4000 Series                                         **
  48:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  49:../Dave/Generated/src/CLK001/CLK001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  51:../Dave/Generated/src/CLK001/CLK001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  53:../Dave/Generated/src/CLK001/CLK001.c **** ** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
  54:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  55:../Dave/Generated/src/CLK001/CLK001.c **** ** MODIFICATION DATE : Oct 31, 2012                                           **
  56:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  57:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
  58:../Dave/Generated/src/CLK001/CLK001.c **** /**
  59:../Dave/Generated/src/CLK001/CLK001.c ****  * @file   CLK001.c
  60:../Dave/Generated/src/CLK001/CLK001.c ****  *
  61:../Dave/Generated/src/CLK001/CLK001.c ****  * @brief  SCU_Clock_CLK001 App
  62:../Dave/Generated/src/CLK001/CLK001.c ****  *         
  63:../Dave/Generated/src/CLK001/CLK001.c ****  *  CLK001 App is a singleton app which is used by all applications to configure 
  64:../Dave/Generated/src/CLK001/CLK001.c ****  *  the PLL as well as enable the Clock of Peripheral Units.
  65:../Dave/Generated/src/CLK001/CLK001.c ****  
  66:../Dave/Generated/src/CLK001/CLK001.c ****  * Revision History
  67:../Dave/Generated/src/CLK001/CLK001.c ****  * 12 Dec 2012   v1.0.1    modified to take care java.utils and basecode updates
  68:../Dave/Generated/src/CLK001/CLK001.c ****  
  69:../Dave/Generated/src/CLK001/CLK001.c ****  *
  70:../Dave/Generated/src/CLK001/CLK001.c ****  */
  71:../Dave/Generated/src/CLK001/CLK001.c **** 
  72:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
  73:../Dave/Generated/src/CLK001/CLK001.c **** **                      Author(s) Identity                                    **
  74:../Dave/Generated/src/CLK001/CLK001.c **** ********************************************************************************
  75:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  76:../Dave/Generated/src/CLK001/CLK001.c **** ** Initials     Name                                                          **
  77:../Dave/Generated/src/CLK001/CLK001.c **** ** ---------------------------------------------------------------------------**
  78:../Dave/Generated/src/CLK001/CLK001.c **** ** RS           App Developer                                                 **
  79:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
  80:../Dave/Generated/src/CLK001/CLK001.c **** 
  81:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
  82:../Dave/Generated/src/CLK001/CLK001.c ****  ** INCLUDE FILES                                                             **
  83:../Dave/Generated/src/CLK001/CLK001.c ****  ******************************************************************************/
  84:../Dave/Generated/src/CLK001/CLK001.c **** /** Inclusion of header file */
  85:../Dave/Generated/src/CLK001/CLK001.c **** #include <DAVE3.h>
  86:../Dave/Generated/src/CLK001/CLK001.c **** 
  87:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
  88:../Dave/Generated/src/CLK001/CLK001.c **** **                      Private Macro Definitions                             **
  89:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
  90:../Dave/Generated/src/CLK001/CLK001.c **** 
  91:../Dave/Generated/src/CLK001/CLK001.c **** /* Various options for CLK tree settings*/
  92:../Dave/Generated/src/CLK001/CLK001.c **** 
  93:../Dave/Generated/src/CLK001/CLK001.c **** /*Main PLL input clock options*/
  94:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_CRYSTAL                1U
  95:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_EXT_CLOCK              2U
  96:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_BACK_UP_CLOCK          3U
  97:../Dave/Generated/src/CLK001/CLK001.c **** 
  98:../Dave/Generated/src/CLK001/CLK001.c **** /*Options for back up clock trimming*/
  99:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_TRIM_FACTORY           1U
 100:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_TRIM_AUTOMATIC         2U
 101:../Dave/Generated/src/CLK001/CLK001.c **** 
 102:../Dave/Generated/src/CLK001/CLK001.c **** /*options for system clock source*/
 103:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_SRC_PLL            1U
 104:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_SRC_BACKUP         2U
 105:../Dave/Generated/src/CLK001/CLK001.c **** 
 106:../Dave/Generated/src/CLK001/CLK001.c **** /*options for PLL modes*/
 107:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_PLL_NORMAL         1U
 108:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_PLL_PRESCALER      2U
 109:../Dave/Generated/src/CLK001/CLK001.c **** 
 110:../Dave/Generated/src/CLK001/CLK001.c **** /*options for STDBY clock source*/
 111:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_HIB_CLOCK_FOSI          1U
 112:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_HIB_CLOCK_OSCULP        2U
 113:../Dave/Generated/src/CLK001/CLK001.c **** 
 114:../Dave/Generated/src/CLK001/CLK001.c **** 
 115:../Dave/Generated/src/CLK001/CLK001.c **** /* MAIN PLL setup parameters */  
 116:../Dave/Generated/src/CLK001/CLK001.c **** 
 117:../Dave/Generated/src/CLK001/CLK001.c **** 
 118:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K1DIV        0U
 119:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K2DIV        3U      
 120:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_PDIV         0U    
 121:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_NDIV         39U  
 122:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K2DIV_STEP_1    19  /*PLL output is 24Mhz*/  
 123:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K2DIV_STEP_2    7  /*PLL output to 60Mhz*/  
 124:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K2DIV_STEP_3    4  /*PLL output to 96Mhz*/  
 125:../Dave/Generated/src/CLK001/CLK001.c **** 
 126:../Dave/Generated/src/CLK001/CLK001.c **** /* USB PLL setup parameters */
 127:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_USBPLL_PDIV      1U
 128:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_USBPLL_NDIV      63U
 129:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_USBDIV           3U
 130:../Dave/Generated/src/CLK001/CLK001.c **** 
 131:../Dave/Generated/src/CLK001/CLK001.c **** 
 132:../Dave/Generated/src/CLK001/CLK001.c **** 
 133:../Dave/Generated/src/CLK001/CLK001.c **** /*Main PLL input clock configuration*/
 134:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_PLL_CLOCK_INPUT  CLK001_CLOCK_CRYSTAL
 135:../Dave/Generated/src/CLK001/CLK001.c **** 
 136:../Dave/Generated/src/CLK001/CLK001.c **** /*Oscillator mode = External Crystal Mode*/
 137:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_OSC_HP_MODE  0x0U
 138:../Dave/Generated/src/CLK001/CLK001.c **** 
 139:../Dave/Generated/src/CLK001/CLK001.c **** /*Standby clock source configuration*/
 140:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_STANDBY_CLOCK  CLK001_HIB_CLOCK_FOSI
 141:../Dave/Generated/src/CLK001/CLK001.c **** 
 142:../Dave/Generated/src/CLK001/CLK001.c **** /*Back up clock trimming option*/
 143:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_TRIM_OPTION CLK001_CLOCK_TRIM_AUTOMATIC
 144:../Dave/Generated/src/CLK001/CLK001.c **** 
 145:../Dave/Generated/src/CLK001/CLK001.c **** /*System clock source configuration*/
 146:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_SYS_SRC CLK001_CLOCK_SRC_PLL 
 147:../Dave/Generated/src/CLK001/CLK001.c **** 
 148:../Dave/Generated/src/CLK001/CLK001.c **** /*PLL mode configuration*/
 149:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_PLL_MODE CLK001_CLOCK_PLL_NORMAL
 150:../Dave/Generated/src/CLK001/CLK001.c **** 
 151:../Dave/Generated/src/CLK001/CLK001.c **** /*Values of various parameters based on UI selction*/
 152:../Dave/Generated/src/CLK001/CLK001.c **** 
 153:../Dave/Generated/src/CLK001/CLK001.c **** /*system clock frequency*/
 154:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_FSYS                    120000000U
 155:../Dave/Generated/src/CLK001/CLK001.c **** 
 156:../Dave/Generated/src/CLK001/CLK001.c **** /*crystal or digital clock input frequency*/
 157:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_CLOCK_CRYSTAL_FREQUENCY      12000000U     
 158:../Dave/Generated/src/CLK001/CLK001.c **** 
 159:../Dave/Generated/src/CLK001/CLK001.c **** /*back up clock frequency*/
 160:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_CLOCK_BACK_UP                24000000U
 161:../Dave/Generated/src/CLK001/CLK001.c **** 
 162:../Dave/Generated/src/CLK001/CLK001.c **** /*Reference frequency for sytem oscillator watch dog - 2.5 MHz*/
 163:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_SOSCWDG_FREF                 2500000U
 164:../Dave/Generated/src/CLK001/CLK001.c **** 
 165:../Dave/Generated/src/CLK001/CLK001.c **** /*Regiser bit field mask to check if Oscillator is usable*/
 166:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_PLLSTAT_OSC_USABLE_MASK       (SCU_PLL_PLLSTAT_PLLHV_Msk | \
 167:../Dave/Generated/src/CLK001/CLK001.c ****                                               SCU_PLL_PLLSTAT_PLLLV_Msk | \
 168:../Dave/Generated/src/CLK001/CLK001.c ****                                               SCU_PLL_PLLSTAT_PLLSP_Msk)
 169:../Dave/Generated/src/CLK001/CLK001.c **** 
 170:../Dave/Generated/src/CLK001/CLK001.c **** /*delay values used in the below calculation
 171:../Dave/Generated/src/CLK001/CLK001.c **** these are to be used with the delay function defined in this file
 172:../Dave/Generated/src/CLK001/CLK001.c **** they are approximate values based on measurement*/
 173:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_DELAY_CNT_50US_50MHZ        100U
 174:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_DELAY_CNT_50US_90MHZ        150U
 175:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_DELAY_CNT_8US_50MHZ         10U
 176:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_LOOP_CNT_150MS              18000U /*150ms / 8us*/
 177:../Dave/Generated/src/CLK001/CLK001.c **** 
 178:../Dave/Generated/src/CLK001/CLK001.c **** /*values for PLL frequency stepping*/
 179:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_PLL_FREQ_STEP1               (24U * 1000U * 1000U)
 180:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_PLL_FREQ_STEP2               (60U * 1000U * 1000U)
 181:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_PLL_FREQ_STEP3               (90U * 1000U * 1000U)
 182:../Dave/Generated/src/CLK001/CLK001.c **** 
 183:../Dave/Generated/src/CLK001/CLK001.c **** 
 184:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 185:../Dave/Generated/src/CLK001/CLK001.c **** **                      Private Type Definitions                              **
 186:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 187:../Dave/Generated/src/CLK001/CLK001.c **** 
 188:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 189:../Dave/Generated/src/CLK001/CLK001.c **** **                 Private Function Declarations:
 190:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 191:../Dave/Generated/src/CLK001/CLK001.c **** static void Delay(uint32_t time_1);
 192:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t System_Clock_valid(void);
 193:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t System_Clock_init(void);     
 194:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t	USB_Clock_valid(void);
 195:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t	USB_Clock_init(void);
 196:../Dave/Generated/src/CLK001/CLK001.c **** 
 197:../Dave/Generated/src/CLK001/CLK001.c **** 
 198:../Dave/Generated/src/CLK001/CLK001.c **** 
 199:../Dave/Generated/src/CLK001/CLK001.c **** static void MMC_Clock_init(void);
 200:../Dave/Generated/src/CLK001/CLK001.c ****  
 201:../Dave/Generated/src/CLK001/CLK001.c **** static void RTC_Clock_init(void);
 202:../Dave/Generated/src/CLK001/CLK001.c **** 
 203:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 204:../Dave/Generated/src/CLK001/CLK001.c **** **                      Extern Declarations                                   **
 205:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 206:../Dave/Generated/src/CLK001/CLK001.c **** extern void SystemCoreClockUpdate(void);
 207:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 208:../Dave/Generated/src/CLK001/CLK001.c **** **                      Global Variable Definitions                           **
 209:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 210:../Dave/Generated/src/CLK001/CLK001.c **** 
 211:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 212:../Dave/Generated/src/CLK001/CLK001.c **** **                      Private Constant Definitions                          **
 213:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 214:../Dave/Generated/src/CLK001/CLK001.c **** 
 215:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 216:../Dave/Generated/src/CLK001/CLK001.c **** **                 Function like macro definitions                            **
 217:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 218:../Dave/Generated/src/CLK001/CLK001.c **** 
 219:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 220:../Dave/Generated/src/CLK001/CLK001.c **** **                      Private Function Definitions                          **
 221:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 222:../Dave/Generated/src/CLK001/CLK001.c **** /**
 223:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to delay  
 224:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 225:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  number of loops
 226:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval None
 227:../Dave/Generated/src/CLK001/CLK001.c ****   */
 228:../Dave/Generated/src/CLK001/CLK001.c **** static void Delay(uint32_t time_1)
 229:../Dave/Generated/src/CLK001/CLK001.c **** {
  27              		.loc 1 229 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 85B0     		sub	sp, sp, #20
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 230:../Dave/Generated/src/CLK001/CLK001.c **** 	uint32_t i = 0U;
  43              		.loc 1 230 0
  44 0008 4FF00003 		mov	r3, #0
  45 000c FB60     		str	r3, [r7, #12]
 231:../Dave/Generated/src/CLK001/CLK001.c **** 	for(i=0U; i < time_1;i++)
  46              		.loc 1 231 0
  47 000e 4FF00003 		mov	r3, #0
  48 0012 FB60     		str	r3, [r7, #12]
  49 0014 07E0     		b	.L2
  50              	.L3:
  51              	.LBB10:
  52              	.LBB11:
  53              		.file 2 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.10\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
  54              		.loc 2 327 0
  55              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
  56 0016 00BF     		nop
  57              	@ 0 "" 2
  58              		.thumb
  59              	.LBE11:
  60              	.LBE10:
  61              	.LBB12:
  62              	.LBB13:
  63              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
  64 0018 00BF     		nop
  65              	@ 0 "" 2
  66              		.thumb
  67              	.LBE13:
  68              	.LBE12:
  69              	.LBB14:
  70              	.LBB15:
  71              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
  72 001a 00BF     		nop
  73              	@ 0 "" 2
  74              		.thumb
  75              	.LBE15:
  76              	.LBE14:
  77              	.LBB16:
  78              	.LBB17:
  79              	@ 327 "C:\DAVE-3.1.10\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
  80 001c 00BF     		nop
  81              	@ 0 "" 2
  82              		.thumb
  83              	.LBE17:
  84              	.LBE16:
  85              		.loc 1 231 0
  86 001e FB68     		ldr	r3, [r7, #12]
  87 0020 03F10103 		add	r3, r3, #1
  88 0024 FB60     		str	r3, [r7, #12]
  89              	.L2:
  90              		.loc 1 231 0 is_stmt 0 discriminator 1
  91 0026 FA68     		ldr	r2, [r7, #12]
  92 0028 7B68     		ldr	r3, [r7, #4]
  93 002a 9A42     		cmp	r2, r3
  94 002c F3D3     		bcc	.L3
 232:../Dave/Generated/src/CLK001/CLK001.c **** 	{
 233:../Dave/Generated/src/CLK001/CLK001.c **** 		__NOP();__NOP();__NOP();__NOP();
 234:../Dave/Generated/src/CLK001/CLK001.c **** 	}
 235:../Dave/Generated/src/CLK001/CLK001.c **** 
 236:../Dave/Generated/src/CLK001/CLK001.c **** } 
  95              		.loc 1 236 0 is_stmt 1
  96 002e 07F11407 		add	r7, r7, #20
  97 0032 BD46     		mov	sp, r7
  98 0034 80BC     		pop	{r7}
  99 0036 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE117:
 103              		.section	.text.System_Clock_valid,"ax",%progbits
 104              		.align	2
 105              		.thumb
 106              		.thumb_func
 108              	System_Clock_valid:
 109              	.LFB118:
 237:../Dave/Generated/src/CLK001/CLK001.c **** /**
 238:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to check current MAIN Clock setting based on UI configuration 
 239:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 240:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 241:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval PASS/FAIL
 242:../Dave/Generated/src/CLK001/CLK001.c ****   */
 243:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t System_Clock_valid(void)
 244:../Dave/Generated/src/CLK001/CLK001.c **** {
 110              		.loc 1 244 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 8
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115 0000 80B4     		push	{r7}
 116              	.LCFI3:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 7, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI4:
 121              		.cfi_def_cfa_offset 16
 122 0004 00AF     		add	r7, sp, #0
 123              	.LCFI5:
 124              		.cfi_def_cfa_register 7
 245:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t MAIN_clock_status = 1U;
 125              		.loc 1 245 0
 126 0006 4FF00103 		mov	r3, #1
 127 000a 7B60     		str	r3, [r7, #4]
 246:../Dave/Generated/src/CLK001/CLK001.c **** 
 247:../Dave/Generated/src/CLK001/CLK001.c ****   /* check if PLL is switched on */
 248:../Dave/Generated/src/CLK001/CLK001.c ****   if((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk))!= 0U)
 128              		.loc 1 248 0
 129 000c 44F21073 		movw	r3, #18192
 130 0010 C5F20003 		movt	r3, 20480
 131 0014 5A68     		ldr	r2, [r3, #4]
 132 0016 4FF00203 		mov	r3, #2
 133 001a C0F20103 		movt	r3, 1
 134 001e 1340     		ands	r3, r3, r2
 135 0020 002B     		cmp	r3, #0
 136 0022 02D0     		beq	.L5
 249:../Dave/Generated/src/CLK001/CLK001.c ****   {
 250:../Dave/Generated/src/CLK001/CLK001.c ****     MAIN_clock_status=0U;
 137              		.loc 1 250 0
 138 0024 4FF00003 		mov	r3, #0
 139 0028 7B60     		str	r3, [r7, #4]
 140              	.L5:
 251:../Dave/Generated/src/CLK001/CLK001.c ****   }
 252:../Dave/Generated/src/CLK001/CLK001.c ****   return(MAIN_clock_status);
 141              		.loc 1 252 0
 142 002a 7B68     		ldr	r3, [r7, #4]
 253:../Dave/Generated/src/CLK001/CLK001.c **** }
 143              		.loc 1 253 0
 144 002c 1846     		mov	r0, r3
 145 002e 07F10C07 		add	r7, r7, #12
 146 0032 BD46     		mov	sp, r7
 147 0034 80BC     		pop	{r7}
 148 0036 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE118:
 152              		.section	.text.System_Clock_init,"ax",%progbits
 153              		.align	2
 154              		.thumb
 155              		.thumb_func
 157              	System_Clock_init:
 158              	.LFB119:
 254:../Dave/Generated/src/CLK001/CLK001.c **** 
 255:../Dave/Generated/src/CLK001/CLK001.c **** /**
 256:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to initialize the Main Clock based on UI configuration 
 257:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 258:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 259:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval PASS/FAIL
 260:../Dave/Generated/src/CLK001/CLK001.c ****   */
 261:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t System_Clock_init(void)
 262:../Dave/Generated/src/CLK001/CLK001.c **** {
 159              		.loc 1 262 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 16
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI6:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 7, -8
 167              		.cfi_offset 14, -4
 168 0002 84B0     		sub	sp, sp, #16
 169              	.LCFI7:
 170              		.cfi_def_cfa_offset 24
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI8:
 173              		.cfi_def_cfa_register 7
 263:../Dave/Generated/src/CLK001/CLK001.c **** 	uint32_t Return_status = 1U;
 174              		.loc 1 263 0
 175 0006 4FF00103 		mov	r3, #1
 176 000a FB60     		str	r3, [r7, #12]
 264:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 265:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_NORMAL))
 266:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t VCO; 
 267:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t stepping_K2DIV;	
 268:../Dave/Generated/src/CLK001/CLK001.c **** #endif
 269:../Dave/Generated/src/CLK001/CLK001.c **** #if (((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 270:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_PRESCALER) && \
 271:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_PLL_CLOCK_INPUT != CLK001_CLOCK_BACK_UP_CLOCK))|| \
 272:../Dave/Generated/src/CLK001/CLK001.c ****     ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 273:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_NORMAL)))
 274:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t timeout_count;
 275:../Dave/Generated/src/CLK001/CLK001.c **** #endif
 276:../Dave/Generated/src/CLK001/CLK001.c ****   /*Back up clock trimming*/
 277:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_TRIM_OPTION == CLK001_CLOCK_TRIM_AUTOMATIC)&& \
 278:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_STANDBY_CLOCK == CLK001_HIB_CLOCK_FOSI))
 279:../Dave/Generated/src/CLK001/CLK001.c ****   {
 280:../Dave/Generated/src/CLK001/CLK001.c ****   
 281:../Dave/Generated/src/CLK001/CLK001.c ****      /* check if HIB Domain enabled  */
 282:../Dave/Generated/src/CLK001/CLK001.c ****      if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0U)
 177              		.loc 1 282 0
 178 000c 4FF48443 		mov	r3, #16896
 179 0010 C5F20003 		movt	r3, 20480
 180 0014 1B68     		ldr	r3, [r3, #0]
 181 0016 03F00103 		and	r3, r3, #1
 182 001a 002B     		cmp	r3, #0
 183 001c 0BD1     		bne	.L8
 283:../Dave/Generated/src/CLK001/CLK001.c ****      {
 284:../Dave/Generated/src/CLK001/CLK001.c ****        SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;/*enable Hibernate domain*/
 184              		.loc 1 284 0
 185 001e 4FF48443 		mov	r3, #16896
 186 0022 C5F20003 		movt	r3, 20480
 187 0026 4FF48442 		mov	r2, #16896
 188 002a C5F20002 		movt	r2, 20480
 189 002e 5268     		ldr	r2, [r2, #4]
 190 0030 42F00102 		orr	r2, r2, #1
 191 0034 5A60     		str	r2, [r3, #4]
 192              	.L8:
 285:../Dave/Generated/src/CLK001/CLK001.c ****      }
 286:../Dave/Generated/src/CLK001/CLK001.c **** 
 287:../Dave/Generated/src/CLK001/CLK001.c ****      /* check if HIB Domain is not in reset state  */
 288:../Dave/Generated/src/CLK001/CLK001.c ****      if ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0U)
 193              		.loc 1 288 0
 194 0036 4FF48843 		mov	r3, #17408
 195 003a C5F20003 		movt	r3, 20480
 196 003e 1B68     		ldr	r3, [r3, #0]
 197 0040 03F40073 		and	r3, r3, #512
 198 0044 002B     		cmp	r3, #0
 199 0046 0BD0     		beq	.L9
 289:../Dave/Generated/src/CLK001/CLK001.c ****      {
 290:../Dave/Generated/src/CLK001/CLK001.c **** 	     /*de-assert hibernate reset*/
 291:../Dave/Generated/src/CLK001/CLK001.c ****        SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 200              		.loc 1 291 0
 201 0048 4FF48843 		mov	r3, #17408
 202 004c C5F20003 		movt	r3, 20480
 203 0050 4FF48842 		mov	r2, #17408
 204 0054 C5F20002 		movt	r2, 20480
 205 0058 9268     		ldr	r2, [r2, #8]
 206 005a 42F40072 		orr	r2, r2, #512
 207 005e 9A60     		str	r2, [r3, #8]
 208              	.L9:
 292:../Dave/Generated/src/CLK001/CLK001.c ****      }
 293:../Dave/Generated/src/CLK001/CLK001.c ****      SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 209              		.loc 1 293 0
 210 0060 44F21073 		movw	r3, #18192
 211 0064 C5F20003 		movt	r3, 20480
 212 0068 44F21072 		movw	r2, #18192
 213 006c C5F20002 		movt	r2, 20480
 214 0070 5268     		ldr	r2, [r2, #4]
 215 0072 22F48012 		bic	r2, r2, #1048576
 216 0076 5A60     		str	r2, [r3, #4]
 294:../Dave/Generated/src/CLK001/CLK001.c ****      /*insert some delay */
 295:../Dave/Generated/src/CLK001/CLK001.c ****      Delay(CLK001_DELAY_CNT_50US_50MHZ); /*~50us @ maximum back up clock freq*/
 217              		.loc 1 295 0
 218 0078 4FF06400 		mov	r0, #100
 219 007c FFF7FEFF 		bl	Delay
 296:../Dave/Generated/src/CLK001/CLK001.c ****      SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 220              		.loc 1 296 0
 221 0080 44F21073 		movw	r3, #18192
 222 0084 C5F20003 		movt	r3, 20480
 223 0088 44F21072 		movw	r2, #18192
 224 008c C5F20002 		movt	r2, 20480
 225 0090 5268     		ldr	r2, [r2, #4]
 226 0092 42F40022 		orr	r2, r2, #524288
 227 0096 5A60     		str	r2, [r3, #4]
 297:../Dave/Generated/src/CLK001/CLK001.c ****   }
 298:../Dave/Generated/src/CLK001/CLK001.c **** #elif((CLK001_TRIM_OPTION == CLK001_CLOCK_TRIM_AUTOMATIC)&& \
 299:../Dave/Generated/src/CLK001/CLK001.c ****      (CLK001_STANDBY_CLOCK == CLK001_HIB_CLOCK_OSCULP))
 300:../Dave/Generated/src/CLK001/CLK001.c ****   {
 301:../Dave/Generated/src/CLK001/CLK001.c ****     /* check for HIB Domain enabled  */
 302:../Dave/Generated/src/CLK001/CLK001.c ****     if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0U)
 303:../Dave/Generated/src/CLK001/CLK001.c ****     {
 304:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;/*enable Hibernate domain*/
 305:../Dave/Generated/src/CLK001/CLK001.c ****     }
 306:../Dave/Generated/src/CLK001/CLK001.c **** 
 307:../Dave/Generated/src/CLK001/CLK001.c ****     /* check for HIB Domain is not in reset state  */
 308:../Dave/Generated/src/CLK001/CLK001.c ****     if ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0U)
 309:../Dave/Generated/src/CLK001/CLK001.c ****     {
 310:../Dave/Generated/src/CLK001/CLK001.c ****       /*de-assert hibernate reset*/
 311:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 312:../Dave/Generated/src/CLK001/CLK001.c ****     }
 313:../Dave/Generated/src/CLK001/CLK001.c ****     /*check OSCUL if running correct*/
 314:../Dave/Generated/src/CLK001/CLK001.c ****     if ((SCU_HIBERNATE->OSCULCTRL & SCU_HIBERNATE_OSCULCTRL_MODE_Msk) != 0U)
 315:../Dave/Generated/src/CLK001/CLK001.c ****     {
 316:../Dave/Generated/src/CLK001/CLK001.c ****       OSCULP_init();
 317:../Dave/Generated/src/CLK001/CLK001.c **** 	  /* select OSCUL clock for RTC*/
 318:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_RCS_Msk;
 319:../Dave/Generated/src/CLK001/CLK001.c ****       while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 320:../Dave/Generated/src/CLK001/CLK001.c ****       {}
 321:../Dave/Generated/src/CLK001/CLK001.c **** 
 322:../Dave/Generated/src/CLK001/CLK001.c ****       while((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_HDCR_Msk)!=\
 323:../Dave/Generated/src/CLK001/CLK001.c **** 	       SCU_INTERRUPT_SRRAW_HDCR_Msk)
 324:../Dave/Generated/src/CLK001/CLK001.c ****       {}
 325:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_INTERRUPT->SRCLR |= (uint32_t)SCU_INTERRUPT_SRCLR_HDCR_Msk;
 326:../Dave/Generated/src/CLK001/CLK001.c ****     }              
 327:../Dave/Generated/src/CLK001/CLK001.c ****       
 328:../Dave/Generated/src/CLK001/CLK001.c ****     /* now OSCULP is running and can be used*/
 329:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_HIBERNATE->HDCR  |= (uint32_t)SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
 330:../Dave/Generated/src/CLK001/CLK001.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk)!= \
 331:../Dave/Generated/src/CLK001/CLK001.c **** 	       SCU_POWER_PWRSTAT_HIBEN_Msk)
 332:../Dave/Generated/src/CLK001/CLK001.c ****     {}
 333:../Dave/Generated/src/CLK001/CLK001.c **** 
 334:../Dave/Generated/src/CLK001/CLK001.c ****     while((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_HDCR_Msk)!= \
 335:../Dave/Generated/src/CLK001/CLK001.c **** 	       SCU_INTERRUPT_SRRAW_HDCR_Msk)
 336:../Dave/Generated/src/CLK001/CLK001.c ****     {}
 337:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_INTERRUPT->SRCLR |= (uint32_t)SCU_INTERRUPT_SRCLR_HDCR_Msk;
 338:../Dave/Generated/src/CLK001/CLK001.c **** 	
 339:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 340:../Dave/Generated/src/CLK001/CLK001.c ****     
 341:../Dave/Generated/src/CLK001/CLK001.c ****     /*insert some delay */
 342:../Dave/Generated/src/CLK001/CLK001.c ****     Delay(CLK001_DELAY_CNT_50US_50MHZ);/*~50us @ maximum back up clock freq*/
 343:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 344:../Dave/Generated/src/CLK001/CLK001.c **** 
 345:../Dave/Generated/src/CLK001/CLK001.c ****   }
 346:../Dave/Generated/src/CLK001/CLK001.c **** #else /*trimming option is factory trimming*/
 347:../Dave/Generated/src/CLK001/CLK001.c ****   {
 348:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 349:../Dave/Generated/src/CLK001/CLK001.c ****   }
 350:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of trimming options*/
 351:../Dave/Generated/src/CLK001/CLK001.c ****   /*insert some delay after trimming is enabled*/
 352:../Dave/Generated/src/CLK001/CLK001.c ****   Delay(CLK001_DELAY_CNT_50US_50MHZ);/*~50us @ maximum back up clock freq*/
 228              		.loc 1 352 0
 229 0098 4FF06400 		mov	r0, #100
 230 009c FFF7FEFF 		bl	Delay
 353:../Dave/Generated/src/CLK001/CLK001.c **** 
 354:../Dave/Generated/src/CLK001/CLK001.c ****   /*Select system clock = back up clock (is the default configuration anyway)*/
 355:../Dave/Generated/src/CLK001/CLK001.c **** #if (CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_BACKUP)
 356:../Dave/Generated/src/CLK001/CLK001.c ****   {
 357:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_CLK->SYSCLKCR &= (uint32_t)~(SCU_CLK_SYSCLKCR_SYSSEL_Msk);
 358:../Dave/Generated/src/CLK001/CLK001.c ****   }
 359:../Dave/Generated/src/CLK001/CLK001.c ****   /*system clock = pll */
 360:../Dave/Generated/src/CLK001/CLK001.c **** #else/*(CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL)*/
 361:../Dave/Generated/src/CLK001/CLK001.c ****   {
 362:../Dave/Generated/src/CLK001/CLK001.c ****     /* enable PLL first */
 363:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 231              		.loc 1 363 0
 232 00a0 44F21073 		movw	r3, #18192
 233 00a4 C5F20003 		movt	r3, 20480
 234 00a8 44F21072 		movw	r2, #18192
 235 00ac C5F20002 		movt	r2, 20480
 236 00b0 5268     		ldr	r2, [r2, #4]
 237 00b2 22F48032 		bic	r2, r2, #65536
 238 00b6 22F00202 		bic	r2, r2, #2
 239 00ba 5A60     		str	r2, [r3, #4]
 364:../Dave/Generated/src/CLK001/CLK001.c **** 
 365:../Dave/Generated/src/CLK001/CLK001.c ****     /*if crystal or external digital input for PLL input*/
 366:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_CRYSTAL)||\
 367:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_EXT_CLOCK))
 368:../Dave/Generated/src/CLK001/CLK001.c ****     {
 369:../Dave/Generated/src/CLK001/CLK001.c ****       /************************************************************************/
 370:../Dave/Generated/src/CLK001/CLK001.c ****       /*    Use external crystal or digital input for PLL clock input         */
 371:../Dave/Generated/src/CLK001/CLK001.c ****       /************************************************************************/ 
 372:../Dave/Generated/src/CLK001/CLK001.c **** 
 373:../Dave/Generated/src/CLK001/CLK001.c ****       /* Enable OSC_HP if not already on */
 374:../Dave/Generated/src/CLK001/CLK001.c ****       if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != \
 240              		.loc 1 374 0
 241 00bc 4FF48E43 		mov	r3, #18176
 242 00c0 C5F20003 		movt	r3, 20480
 243 00c4 5B68     		ldr	r3, [r3, #4]
 244 00c6 03F03003 		and	r3, r3, #48
 245 00ca 002B     		cmp	r3, #0
 246 00cc 54D0     		beq	.L10
 375:../Dave/Generated/src/CLK001/CLK001.c ****          ((uint32_t)CLK001_OSC_HP_MODE << SCU_OSC_OSCHPCTRL_MODE_Pos))
 376:../Dave/Generated/src/CLK001/CLK001.c ****       {
 377:../Dave/Generated/src/CLK001/CLK001.c ****         /*The OSC HP mode is guaranteed to  be = 11b at this point
 378:../Dave/Generated/src/CLK001/CLK001.c ****         * so we can just clear the bit(s) as per the selected mode
 379:../Dave/Generated/src/CLK001/CLK001.c ****         */
 380:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_OSC->OSCHPCTRL &= (((uint32_t)(~(uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk)) | \
 247              		.loc 1 380 0
 248 00ce 4FF48E43 		mov	r3, #18176
 249 00d2 C5F20003 		movt	r3, 20480
 250 00d6 4FF48E42 		mov	r2, #18176
 251 00da C5F20002 		movt	r2, 20480
 252 00de 5268     		ldr	r2, [r2, #4]
 253 00e0 22F03002 		bic	r2, r2, #48
 254 00e4 5A60     		str	r2, [r3, #4]
 381:../Dave/Generated/src/CLK001/CLK001.c ****            ((uint32_t)CLK001_OSC_HP_MODE << SCU_OSC_OSCHPCTRL_MODE_Pos));
 382:../Dave/Generated/src/CLK001/CLK001.c **** 
 383:../Dave/Generated/src/CLK001/CLK001.c ****         /* setup OSC WDG divider - at this point the bitfield would be 0
 384:../Dave/Generated/src/CLK001/CLK001.c ****         hence we can OR with the desired value*/
 385:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_OSC->OSCHPCTRL |=
 255              		.loc 1 385 0
 256 00e6 4FF48E43 		mov	r3, #18176
 257 00ea C5F20003 		movt	r3, 20480
 258 00ee 4FF48E42 		mov	r2, #18176
 259 00f2 C5F20002 		movt	r2, 20480
 260 00f6 5268     		ldr	r2, [r2, #4]
 261 00f8 42F44032 		orr	r2, r2, #196608
 262 00fc 5A60     		str	r2, [r3, #4]
 386:../Dave/Generated/src/CLK001/CLK001.c ****           ((uint32_t)((CLK001_CLOCK_CRYSTAL_FREQUENCY/CLK001_SOSCWDG_FREF)-1)\
 387:../Dave/Generated/src/CLK001/CLK001.c ****                                               <<SCU_OSC_OSCHPCTRL_OSCVAL_Pos);
 388:../Dave/Generated/src/CLK001/CLK001.c ****         /* select external OSC as PLL input */
 389:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON2 &= (uint32_t)~SCU_PLL_PLLCON2_PINSEL_Msk;
 263              		.loc 1 389 0
 264 00fe 44F21073 		movw	r3, #18192
 265 0102 C5F20003 		movt	r3, 20480
 266 0106 44F21072 		movw	r2, #18192
 267 010a C5F20002 		movt	r2, 20480
 268 010e D268     		ldr	r2, [r2, #12]
 269 0110 22F00102 		bic	r2, r2, #1
 270 0114 DA60     		str	r2, [r3, #12]
 390:../Dave/Generated/src/CLK001/CLK001.c ****         /* restart OSC Watchdog */
 391:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 271              		.loc 1 391 0
 272 0116 44F21073 		movw	r3, #18192
 273 011a C5F20003 		movt	r3, 20480
 274 011e 44F21072 		movw	r2, #18192
 275 0122 C5F20002 		movt	r2, 20480
 276 0126 5268     		ldr	r2, [r2, #4]
 277 0128 22F40032 		bic	r2, r2, #131072
 278 012c 5A60     		str	r2, [r3, #4]
 392:../Dave/Generated/src/CLK001/CLK001.c **** 
 393:../Dave/Generated/src/CLK001/CLK001.c ****         /*approx loop count for 150ms @ max untrimmed Backup clock freq*/
 394:../Dave/Generated/src/CLK001/CLK001.c ****         timeout_count = CLK001_LOOP_CNT_150MS; 
 279              		.loc 1 394 0
 280 012e 44F25063 		movw	r3, #18000
 281 0132 7B60     		str	r3, [r7, #4]
 282              	.L12:
 395:../Dave/Generated/src/CLK001/CLK001.c ****         do 
 396:../Dave/Generated/src/CLK001/CLK001.c ****         {
 397:../Dave/Generated/src/CLK001/CLK001.c ****           /* time out after ~150ms  */
 398:../Dave/Generated/src/CLK001/CLK001.c ****           Delay(CLK001_DELAY_CNT_8US_50MHZ);  
 283              		.loc 1 398 0
 284 0134 4FF00A00 		mov	r0, #10
 285 0138 FFF7FEFF 		bl	Delay
 399:../Dave/Generated/src/CLK001/CLK001.c ****           timeout_count--;
 286              		.loc 1 399 0
 287 013c 7B68     		ldr	r3, [r7, #4]
 288 013e 03F1FF33 		add	r3, r3, #-1
 289 0142 7B60     		str	r3, [r7, #4]
 400:../Dave/Generated/src/CLK001/CLK001.c **** 
 401:../Dave/Generated/src/CLK001/CLK001.c ****         }while((((SCU_PLL->PLLSTAT) & CLK001_PLLSTAT_OSC_USABLE_MASK) != \
 290              		.loc 1 401 0
 291 0144 44F21073 		movw	r3, #18192
 292 0148 C5F20003 		movt	r3, 20480
 293 014c 1B68     		ldr	r3, [r3, #0]
 294 014e 03F46073 		and	r3, r3, #896
 295 0152 B3F5607F 		cmp	r3, #896
 296 0156 02D0     		beq	.L11
 402:../Dave/Generated/src/CLK001/CLK001.c ****               CLK001_PLLSTAT_OSC_USABLE_MASK) && (timeout_count !=0U));
 297              		.loc 1 402 0
 298 0158 7B68     		ldr	r3, [r7, #4]
 299 015a 002B     		cmp	r3, #0
 300 015c EAD1     		bne	.L12
 301              	.L11:
 403:../Dave/Generated/src/CLK001/CLK001.c **** 
 404:../Dave/Generated/src/CLK001/CLK001.c ****         if (((SCU_PLL->PLLSTAT) & CLK001_PLLSTAT_OSC_USABLE_MASK) != \
 302              		.loc 1 404 0
 303 015e 44F21073 		movw	r3, #18192
 304 0162 C5F20003 		movt	r3, 20480
 305 0166 1B68     		ldr	r3, [r3, #0]
 306 0168 03F46073 		and	r3, r3, #896
 307 016c B3F5607F 		cmp	r3, #896
 308 0170 02D0     		beq	.L10
 405:../Dave/Generated/src/CLK001/CLK001.c ****               CLK001_PLLSTAT_OSC_USABLE_MASK)
 406:../Dave/Generated/src/CLK001/CLK001.c ****         {
 407:../Dave/Generated/src/CLK001/CLK001.c ****            /* Return Error */
 408:../Dave/Generated/src/CLK001/CLK001.c ****         	Return_status = 0U;
 309              		.loc 1 408 0
 310 0172 4FF00003 		mov	r3, #0
 311 0176 FB60     		str	r3, [r7, #12]
 312              	.L10:
 409:../Dave/Generated/src/CLK001/CLK001.c ****         }
 410:../Dave/Generated/src/CLK001/CLK001.c ****       }
 411:../Dave/Generated/src/CLK001/CLK001.c ****     }
 412:../Dave/Generated/src/CLK001/CLK001.c **** #else /*PLL clock source is back up clock */
 413:../Dave/Generated/src/CLK001/CLK001.c ****     {
 414:../Dave/Generated/src/CLK001/CLK001.c ****       /*select Backup Clock as input to PLL*/
 415:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON2 |= (uint32_t)SCU_PLL_PLLCON2_PINSEL_Msk;
 416:../Dave/Generated/src/CLK001/CLK001.c ****     }
 417:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of PLL clock source check */
 418:../Dave/Generated/src/CLK001/CLK001.c ****     /**************************************************************************/
 419:../Dave/Generated/src/CLK001/CLK001.c ****     /*   Setup and lock the main PLL (PLL is in normal mode)                  */
 420:../Dave/Generated/src/CLK001/CLK001.c ****     /**************************************************************************/
 421:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 422:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_NORMAL))
 423:../Dave/Generated/src/CLK001/CLK001.c ****     {
 424:../Dave/Generated/src/CLK001/CLK001.c ****       if ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)!= \
 313              		.loc 1 424 0
 314 0178 44F21073 		movw	r3, #18192
 315 017c C5F20003 		movt	r3, 20480
 316 0180 1B68     		ldr	r3, [r3, #0]
 317 0182 03F00403 		and	r3, r3, #4
 318 0186 002B     		cmp	r3, #0
 319 0188 40F08780 		bne	.L13
 425:../Dave/Generated/src/CLK001/CLK001.c **** 	       SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 426:../Dave/Generated/src/CLK001/CLK001.c ****       {
 427:../Dave/Generated/src/CLK001/CLK001.c ****         /* System is still running from Backup clock */ 
 428:../Dave/Generated/src/CLK001/CLK001.c ****        
 429:../Dave/Generated/src/CLK001/CLK001.c ****         /*Calculation for stepping*/
 430:../Dave/Generated/src/CLK001/CLK001.c **** #if((CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_CRYSTAL)||\
 431:../Dave/Generated/src/CLK001/CLK001.c ****    (CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_EXT_CLOCK))
 432:../Dave/Generated/src/CLK001/CLK001.c ****         {
 433:../Dave/Generated/src/CLK001/CLK001.c ****           VCO = (CLK001_CLOCK_CRYSTAL_FREQUENCY/ \
 320              		.loc 1 433 0
 321 018c 4FF46053 		mov	r3, #14336
 322 0190 C1F69C43 		movt	r3, 7324
 323 0194 BB60     		str	r3, [r7, #8]
 434:../Dave/Generated/src/CLK001/CLK001.c ****                 (CLK001_PLL_PDIV+1))*(CLK001_PLL_NDIV+1);
 435:../Dave/Generated/src/CLK001/CLK001.c ****         }
 436:../Dave/Generated/src/CLK001/CLK001.c **** #else /*PLL clcok source is back up clock in normal mode*/
 437:../Dave/Generated/src/CLK001/CLK001.c ****         {
 438:../Dave/Generated/src/CLK001/CLK001.c ****           VCO = (CLK001_CLOCK_BACK_UP/(CLK001_PLL_PDIV+1U))*(CLK001_PLL_NDIV+1U);
 439:../Dave/Generated/src/CLK001/CLK001.c ****         }
 440:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*End of PLL clock source check in normal mode*/
 441:../Dave/Generated/src/CLK001/CLK001.c ****         stepping_K2DIV = (VCO/CLK001_PLL_FREQ_STEP1)-1U;
 324              		.loc 1 441 0
 325 0196 BA68     		ldr	r2, [r7, #8]
 326 0198 49F68173 		movw	r3, #40833
 327 019c C1F25E63 		movt	r3, 5726
 328 01a0 A3FB0213 		umull	r1, r3, r3, r2
 329 01a4 4FEA5353 		lsr	r3, r3, #21
 330 01a8 03F1FF33 		add	r3, r3, #-1
 331 01ac 3B60     		str	r3, [r7, #0]
 442:../Dave/Generated/src/CLK001/CLK001.c ****            
 443:../Dave/Generated/src/CLK001/CLK001.c ****         /* Go to bypass the Main PLL */
 444:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 332              		.loc 1 444 0
 333 01ae 44F21073 		movw	r3, #18192
 334 01b2 C5F20003 		movt	r3, 20480
 335 01b6 44F21072 		movw	r2, #18192
 336 01ba C5F20002 		movt	r2, 20480
 337 01be 5268     		ldr	r2, [r2, #4]
 338 01c0 42F00102 		orr	r2, r2, #1
 339 01c4 5A60     		str	r2, [r3, #4]
 445:../Dave/Generated/src/CLK001/CLK001.c ****         /* disconnect Oscillator from PLL */
 446:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 340              		.loc 1 446 0
 341 01c6 44F21073 		movw	r3, #18192
 342 01ca C5F20003 		movt	r3, 20480
 343 01ce 44F21072 		movw	r2, #18192
 344 01d2 C5F20002 		movt	r2, 20480
 345 01d6 5268     		ldr	r2, [r2, #4]
 346 01d8 42F01002 		orr	r2, r2, #16
 347 01dc 5A60     		str	r2, [r3, #4]
 447:../Dave/Generated/src/CLK001/CLK001.c ****         /* Setup divider settings for main PLL */
 448:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON1 =(((uint32_t)CLK001_PLL_K1DIV) | \
 348              		.loc 1 448 0
 349 01de 44F21073 		movw	r3, #18192
 350 01e2 C5F20003 		movt	r3, 20480
 449:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)CLK001_PLL_NDIV<<SCU_PLL_PLLCON1_NDIV_Pos) | \
 450:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)stepping_K2DIV<<SCU_PLL_PLLCON1_K2DIV_Pos) | \
 351              		.loc 1 450 0
 352 01e6 3A68     		ldr	r2, [r7, #0]
 353 01e8 4FEA0242 		lsl	r2, r2, #16
 354 01ec 42F41C52 		orr	r2, r2, #9984
 448:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON1 =(((uint32_t)CLK001_PLL_K1DIV) | \
 355              		.loc 1 448 0
 356 01f0 9A60     		str	r2, [r3, #8]
 451:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)CLK001_PLL_PDIV<<SCU_PLL_PLLCON1_PDIV_Pos));
 452:../Dave/Generated/src/CLK001/CLK001.c ****         /* Set OSCDISCDIS */
 453:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 357              		.loc 1 453 0
 358 01f2 44F21073 		movw	r3, #18192
 359 01f6 C5F20003 		movt	r3, 20480
 360 01fa 44F21072 		movw	r2, #18192
 361 01fe C5F20002 		movt	r2, 20480
 362 0202 5268     		ldr	r2, [r2, #4]
 363 0204 42F04002 		orr	r2, r2, #64
 364 0208 5A60     		str	r2, [r3, #4]
 454:../Dave/Generated/src/CLK001/CLK001.c ****         /* connect Oscillator to PLL */
 455:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 365              		.loc 1 455 0
 366 020a 44F21073 		movw	r3, #18192
 367 020e C5F20003 		movt	r3, 20480
 368 0212 44F21072 		movw	r2, #18192
 369 0216 C5F20002 		movt	r2, 20480
 370 021a 5268     		ldr	r2, [r2, #4]
 371 021c 22F01002 		bic	r2, r2, #16
 372 0220 5A60     		str	r2, [r3, #4]
 456:../Dave/Generated/src/CLK001/CLK001.c ****         /* restart PLL Lock detection */
 457:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 373              		.loc 1 457 0
 374 0222 44F21073 		movw	r3, #18192
 375 0226 C5F20003 		movt	r3, 20480
 376 022a 44F21072 		movw	r2, #18192
 377 022e C5F20002 		movt	r2, 20480
 378 0232 5268     		ldr	r2, [r2, #4]
 379 0234 42F48022 		orr	r2, r2, #262144
 380 0238 5A60     		str	r2, [r3, #4]
 458:../Dave/Generated/src/CLK001/CLK001.c ****         /* wait for PLL Lock */
 459:../Dave/Generated/src/CLK001/CLK001.c **** 
 460:../Dave/Generated/src/CLK001/CLK001.c ****         /* Timeout for wait loop ~150ms */
 461:../Dave/Generated/src/CLK001/CLK001.c ****         /*approx loop count for 150ms @ Backup Clock freq*/
 462:../Dave/Generated/src/CLK001/CLK001.c ****         timeout_count = CLK001_LOOP_CNT_150MS;
 381              		.loc 1 462 0
 382 023a 44F25063 		movw	r3, #18000
 383 023e 7B60     		str	r3, [r7, #4]
 384              	.L15:
 463:../Dave/Generated/src/CLK001/CLK001.c ****         do
 464:../Dave/Generated/src/CLK001/CLK001.c ****         {
 465:../Dave/Generated/src/CLK001/CLK001.c ****           Delay(CLK001_DELAY_CNT_8US_50MHZ);  /*~8us Delay*/
 385              		.loc 1 465 0
 386 0240 4FF00A00 		mov	r0, #10
 387 0244 FFF7FEFF 		bl	Delay
 466:../Dave/Generated/src/CLK001/CLK001.c ****           timeout_count--;
 388              		.loc 1 466 0
 389 0248 7B68     		ldr	r3, [r7, #4]
 390 024a 03F1FF33 		add	r3, r3, #-1
 391 024e 7B60     		str	r3, [r7, #4]
 467:../Dave/Generated/src/CLK001/CLK001.c ****         } while (((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)!= \
 392              		.loc 1 467 0
 393 0250 44F21073 		movw	r3, #18192
 394 0254 C5F20003 		movt	r3, 20480
 395 0258 1B68     		ldr	r3, [r3, #0]
 396 025a 03F00403 		and	r3, r3, #4
 397 025e 002B     		cmp	r3, #0
 398 0260 02D1     		bne	.L14
 468:../Dave/Generated/src/CLK001/CLK001.c **** 		           SCU_PLL_PLLSTAT_VCOLOCK_Msk)&& (timeout_count !=0U));
 399              		.loc 1 468 0
 400 0262 7B68     		ldr	r3, [r7, #4]
 401 0264 002B     		cmp	r3, #0
 402 0266 EBD1     		bne	.L15
 403              	.L14:
 469:../Dave/Generated/src/CLK001/CLK001.c **** 
 470:../Dave/Generated/src/CLK001/CLK001.c ****         if ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)== \
 404              		.loc 1 470 0
 405 0268 44F21073 		movw	r3, #18192
 406 026c C5F20003 		movt	r3, 20480
 407 0270 1B68     		ldr	r3, [r3, #0]
 408 0272 03F00403 		and	r3, r3, #4
 409 0276 002B     		cmp	r3, #0
 410 0278 0CD0     		beq	.L16
 471:../Dave/Generated/src/CLK001/CLK001.c ****             SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 472:../Dave/Generated/src/CLK001/CLK001.c ****         {
 473:../Dave/Generated/src/CLK001/CLK001.c ****           /* Disable bypass- put pll clock back */
 474:../Dave/Generated/src/CLK001/CLK001.c ****           SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 411              		.loc 1 474 0
 412 027a 44F21073 		movw	r3, #18192
 413 027e C5F20003 		movt	r3, 20480
 414 0282 44F21072 		movw	r2, #18192
 415 0286 C5F20002 		movt	r2, 20480
 416 028a 5268     		ldr	r2, [r2, #4]
 417 028c 22F00102 		bic	r2, r2, #1
 418 0290 5A60     		str	r2, [r3, #4]
 419 0292 02E0     		b	.L13
 420              	.L16:
 475:../Dave/Generated/src/CLK001/CLK001.c ****         }
 476:../Dave/Generated/src/CLK001/CLK001.c ****         else
 477:../Dave/Generated/src/CLK001/CLK001.c ****         {
 478:../Dave/Generated/src/CLK001/CLK001.c ****           
 479:../Dave/Generated/src/CLK001/CLK001.c ****         	Return_status =0U;
 421              		.loc 1 479 0
 422 0294 4FF00003 		mov	r3, #0
 423 0298 FB60     		str	r3, [r7, #12]
 424              	.L13:
 480:../Dave/Generated/src/CLK001/CLK001.c ****         }
 481:../Dave/Generated/src/CLK001/CLK001.c ****       }
 482:../Dave/Generated/src/CLK001/CLK001.c **** 
 483:../Dave/Generated/src/CLK001/CLK001.c ****     }
 484:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of setting PLL is in Normal mode - first frequency stepping*/
 485:../Dave/Generated/src/CLK001/CLK001.c ****     /**************************************************************************/
 486:../Dave/Generated/src/CLK001/CLK001.c ****     /*   Setup main PLL (PLL is in prescaler mode)                            */
 487:../Dave/Generated/src/CLK001/CLK001.c ****     /**************************************************************************/
 488:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 489:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_PRESCALER))
 490:../Dave/Generated/src/CLK001/CLK001.c ****     {
 491:../Dave/Generated/src/CLK001/CLK001.c ****       /* Program PLL for Prescaler mode*/
 492:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON0 |= \
 493:../Dave/Generated/src/CLK001/CLK001.c ****              (SCU_PLL_PLLCON0_VCOBYP_Msk|SCU_PLL_PLLCON0_VCOPWD_Msk);
 494:../Dave/Generated/src/CLK001/CLK001.c ****               
 495:../Dave/Generated/src/CLK001/CLK001.c ****       /* wait for Prescaler mode to be entered*/
 496:../Dave/Generated/src/CLK001/CLK001.c ****       while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)!= \
 497:../Dave/Generated/src/CLK001/CLK001.c **** 	          SCU_PLL_PLLSTAT_VCOBYST_Msk)
 498:../Dave/Generated/src/CLK001/CLK001.c ****       {}
 499:../Dave/Generated/src/CLK001/CLK001.c ****        
 500:../Dave/Generated/src/CLK001/CLK001.c ****       /* Choose fOSC as an input to K1divider*/
 501:../Dave/Generated/src/CLK001/CLK001.c **** #if((CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_CRYSTAL)||\
 502:../Dave/Generated/src/CLK001/CLK001.c ****    (CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_EXT_CLOCK))
 503:../Dave/Generated/src/CLK001/CLK001.c ****       {
 504:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON2 &= (uint32_t)~SCU_PLL_PLLCON2_K1INSEL_Msk;
 505:../Dave/Generated/src/CLK001/CLK001.c ****       }
 506:../Dave/Generated/src/CLK001/CLK001.c **** #else /*Input to K1 divider is back up clock*/
 507:../Dave/Generated/src/CLK001/CLK001.c ****       {
 508:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON2 |= (uint32_t)SCU_PLL_PLLCON2_K1INSEL_Msk;
 509:../Dave/Generated/src/CLK001/CLK001.c ****       }
 510:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of input selection for K1 dividier*/
 511:../Dave/Generated/src/CLK001/CLK001.c ****       /* Setup K1 divider for main PLL */
 512:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 = CLK001_PLL_K1DIV;
 513:../Dave/Generated/src/CLK001/CLK001.c ****     }
 514:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of Prescaler mode settings*/
 515:../Dave/Generated/src/CLK001/CLK001.c **** 	    /* Switch system clock to PLL */
 516:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_CLK->SYSCLKCR |=  (uint32_t)1 << SCU_CLK_SYSCLKCR_SYSSEL_Pos;
 425              		.loc 1 516 0
 426 029a 4FF48C43 		mov	r3, #17920
 427 029e C5F20003 		movt	r3, 20480
 428 02a2 4FF48C42 		mov	r2, #17920
 429 02a6 C5F20002 		movt	r2, 20480
 430 02aa D268     		ldr	r2, [r2, #12]
 431 02ac 42F48032 		orr	r2, r2, #65536
 432 02b0 DA60     		str	r2, [r3, #12]
 517:../Dave/Generated/src/CLK001/CLK001.c ****   }/*end of PLL configuration if PLL is the system clock
 518:../Dave/Generated/src/CLK001/CLK001.c ****     (but it is pending frequency stepping to the target frequency)*/
 519:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of system clock selection - PLL Vs Back up clock*/
 520:../Dave/Generated/src/CLK001/CLK001.c ****   
 521:../Dave/Generated/src/CLK001/CLK001.c **** 	/*******************************************************************
 522:../Dave/Generated/src/CLK001/CLK001.c **** 	Before scaling to final frequency we need to setup the clock dividers 
 523:../Dave/Generated/src/CLK001/CLK001.c **** 	*******************************************************************/
 524:../Dave/Generated/src/CLK001/CLK001.c **** 	
 525:../Dave/Generated/src/CLK001/CLK001.c **** 	
 526:../Dave/Generated/src/CLK001/CLK001.c **** 	
 527:../Dave/Generated/src/CLK001/CLK001.c **** 	
 528:../Dave/Generated/src/CLK001/CLK001.c **** 	
 529:../Dave/Generated/src/CLK001/CLK001.c **** 
 530:../Dave/Generated/src/CLK001/CLK001.c **** 
 531:../Dave/Generated/src/CLK001/CLK001.c ****   /***************************************************************************/
 532:../Dave/Generated/src/CLK001/CLK001.c ****   /*   Frequency stepping for main PLL (PLL is in normal mode)               */
 533:../Dave/Generated/src/CLK001/CLK001.c ****   /***************************************************************************/
 534:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 535:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_NORMAL))
 536:../Dave/Generated/src/CLK001/CLK001.c ****   {
 537:../Dave/Generated/src/CLK001/CLK001.c **** 
 538:../Dave/Generated/src/CLK001/CLK001.c ****     /* Reset OSCDISCDIS */
 539:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 433              		.loc 1 539 0
 434 02b2 44F21073 		movw	r3, #18192
 435 02b6 C5F20003 		movt	r3, 20480
 436 02ba 44F21072 		movw	r2, #18192
 437 02be C5F20002 		movt	r2, 20480
 438 02c2 5268     		ldr	r2, [r2, #4]
 439 02c4 22F04002 		bic	r2, r2, #64
 440 02c8 5A60     		str	r2, [r3, #4]
 540:../Dave/Generated/src/CLK001/CLK001.c **** 
 541:../Dave/Generated/src/CLK001/CLK001.c **** 
 542:../Dave/Generated/src/CLK001/CLK001.c **** 
 543:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************
 544:../Dave/Generated/src/CLK001/CLK001.c ****     here the ramp up of the system clock to FSys < 60MHz
 545:../Dave/Generated/src/CLK001/CLK001.c ****     *********************************************************/
 546:../Dave/Generated/src/CLK001/CLK001.c **** #if (CLK001_CLOCK_FSYS > CLK001_PLL_FREQ_STEP2)
 547:../Dave/Generated/src/CLK001/CLK001.c ****     {
 548:../Dave/Generated/src/CLK001/CLK001.c ****       /*********************************************************/
 549:../Dave/Generated/src/CLK001/CLK001.c ****       /* Delay for next K2 step ~50?s */
 550:../Dave/Generated/src/CLK001/CLK001.c ****       /*********************************************************/
 551:../Dave/Generated/src/CLK001/CLK001.c ****       Delay(CLK001_DELAY_CNT_50US_50MHZ); /*~50us Backup clock*/
 441              		.loc 1 551 0
 442 02ca 4FF06400 		mov	r0, #100
 443 02ce FFF7FEFF 		bl	Delay
 552:../Dave/Generated/src/CLK001/CLK001.c **** 
 553:../Dave/Generated/src/CLK001/CLK001.c ****       /*calculation for stepping*/
 554:../Dave/Generated/src/CLK001/CLK001.c ****       stepping_K2DIV = (VCO/CLK001_PLL_FREQ_STEP2)-1;	
 444              		.loc 1 554 0
 445 02d2 BB68     		ldr	r3, [r7, #8]
 446 02d4 4FEA1322 		lsr	r2, r3, #8
 447 02d8 45F2C743 		movw	r3, #21703
 448 02dc C0F21E13 		movt	r3, 286
 449 02e0 A3FB0213 		umull	r1, r3, r3, r2
 450 02e4 4FEA9323 		lsr	r3, r3, #10
 451 02e8 03F1FF33 		add	r3, r3, #-1
 452 02ec 3B60     		str	r3, [r7, #0]
 555:../Dave/Generated/src/CLK001/CLK001.c **** 
 556:../Dave/Generated/src/CLK001/CLK001.c ****       /*Setup divider settings for main PLL */
 557:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 =(((uint32_t)CLK001_PLL_K1DIV) | \
 453              		.loc 1 557 0
 454 02ee 44F21073 		movw	r3, #18192
 455 02f2 C5F20003 		movt	r3, 20480
 558:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)CLK001_PLL_NDIV<<SCU_PLL_PLLCON1_NDIV_Pos)|\
 559:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)stepping_K2DIV<<SCU_PLL_PLLCON1_K2DIV_Pos)|\
 456              		.loc 1 559 0
 457 02f6 3A68     		ldr	r2, [r7, #0]
 458 02f8 4FEA0242 		lsl	r2, r2, #16
 459 02fc 42F41C52 		orr	r2, r2, #9984
 557:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 =(((uint32_t)CLK001_PLL_K1DIV) | \
 460              		.loc 1 557 0
 461 0300 9A60     		str	r2, [r3, #8]
 560:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)CLK001_PLL_PDIV<<SCU_PLL_PLLCON1_PDIV_Pos));
 561:../Dave/Generated/src/CLK001/CLK001.c ****     }
 562:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of check - if PLL target frequency is greater than 60 MHz*/
 563:../Dave/Generated/src/CLK001/CLK001.c **** 
 564:../Dave/Generated/src/CLK001/CLK001.c **** 
 565:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************
 566:../Dave/Generated/src/CLK001/CLK001.c ****     here the ramp up of the system clock to FSys < 90MHz
 567:../Dave/Generated/src/CLK001/CLK001.c ****     *********************************************************/
 568:../Dave/Generated/src/CLK001/CLK001.c **** #if (CLK001_CLOCK_FSYS > CLK001_PLL_FREQ_STEP3)
 569:../Dave/Generated/src/CLK001/CLK001.c ****     {
 570:../Dave/Generated/src/CLK001/CLK001.c ****       
 571:../Dave/Generated/src/CLK001/CLK001.c ****       /*********************************************************/
 572:../Dave/Generated/src/CLK001/CLK001.c ****       /* Delay for next K2 step ~50us */
 573:../Dave/Generated/src/CLK001/CLK001.c ****       /*********************************************************/
 574:../Dave/Generated/src/CLK001/CLK001.c ****       Delay(CLK001_DELAY_CNT_50US_50MHZ); /*~50?s @ 60MHz clock*/
 462              		.loc 1 574 0
 463 0302 4FF06400 		mov	r0, #100
 464 0306 FFF7FEFF 		bl	Delay
 575:../Dave/Generated/src/CLK001/CLK001.c ****       
 576:../Dave/Generated/src/CLK001/CLK001.c ****       /*calulation for stepping*/
 577:../Dave/Generated/src/CLK001/CLK001.c ****       stepping_K2DIV = (VCO/CLK001_PLL_FREQ_STEP3)-1;			
 465              		.loc 1 577 0
 466 030a BB68     		ldr	r3, [r7, #8]
 467 030c 4FEAD312 		lsr	r2, r3, #7
 468 0310 4EF22F33 		movw	r3, #58159
 469 0314 C0F2BE03 		movt	r3, 190
 470 0318 A3FB0213 		umull	r1, r3, r3, r2
 471 031c 4FEAD323 		lsr	r3, r3, #11
 472 0320 03F1FF33 		add	r3, r3, #-1
 473 0324 3B60     		str	r3, [r7, #0]
 578:../Dave/Generated/src/CLK001/CLK001.c **** 
 579:../Dave/Generated/src/CLK001/CLK001.c ****       /* Setup Divider settings for main PLL */
 580:../Dave/Generated/src/CLK001/CLK001.c **** 
 581:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 = (((uint32_t)CLK001_PLL_K1DIV) | \
 474              		.loc 1 581 0
 475 0326 44F21073 		movw	r3, #18192
 476 032a C5F20003 		movt	r3, 20480
 582:../Dave/Generated/src/CLK001/CLK001.c ****                         ((uint32_t)CLK001_PLL_NDIV<<SCU_PLL_PLLCON1_NDIV_Pos)| \
 583:../Dave/Generated/src/CLK001/CLK001.c ****               ((uint32_t)stepping_K2DIV<<SCU_PLL_PLLCON1_K2DIV_Pos)| \
 477              		.loc 1 583 0
 478 032e 3A68     		ldr	r2, [r7, #0]
 479 0330 4FEA0242 		lsl	r2, r2, #16
 480 0334 42F41C52 		orr	r2, r2, #9984
 581:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 = (((uint32_t)CLK001_PLL_K1DIV) | \
 481              		.loc 1 581 0
 482 0338 9A60     		str	r2, [r3, #8]
 584:../Dave/Generated/src/CLK001/CLK001.c ****               ((uint32_t)CLK001_PLL_PDIV<<SCU_PLL_PLLCON1_PDIV_Pos));
 585:../Dave/Generated/src/CLK001/CLK001.c ****     }
 586:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of check if PLL target frequency is more than 90 MHz*/
 587:../Dave/Generated/src/CLK001/CLK001.c **** 
 588:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************/
 589:../Dave/Generated/src/CLK001/CLK001.c ****     /* Delay for next K2 step ~50?s */
 590:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************/
 591:../Dave/Generated/src/CLK001/CLK001.c **** 
 592:../Dave/Generated/src/CLK001/CLK001.c ****     Delay(CLK001_DELAY_CNT_50US_90MHZ); /*~50us @ 90 MHz clock*/
 483              		.loc 1 592 0
 484 033a 4FF09600 		mov	r0, #150
 485 033e FFF7FEFF 		bl	Delay
 593:../Dave/Generated/src/CLK001/CLK001.c **** 
 594:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************/
 595:../Dave/Generated/src/CLK001/CLK001.c **** 
 596:../Dave/Generated/src/CLK001/CLK001.c ****     /* Setup Divider settings for main PLL */
 597:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON1 = (((uint32_t)CLK001_PLL_K1DIV) | \
 486              		.loc 1 597 0
 487 0342 44F21073 		movw	r3, #18192
 488 0346 C5F20003 		movt	r3, 20480
 489 034a 4FF41C52 		mov	r2, #9984
 490 034e C0F20302 		movt	r2, 3
 491 0352 9A60     		str	r2, [r3, #8]
 598:../Dave/Generated/src/CLK001/CLK001.c ****             ((uint32_t)CLK001_PLL_NDIV<<SCU_PLL_PLLCON1_NDIV_Pos)  | \
 599:../Dave/Generated/src/CLK001/CLK001.c ****             ((uint32_t)CLK001_PLL_K2DIV<<SCU_PLL_PLLCON1_K2DIV_Pos)| \
 600:../Dave/Generated/src/CLK001/CLK001.c ****             ((uint32_t)CLK001_PLL_PDIV<<SCU_PLL_PLLCON1_PDIV_Pos));
 601:../Dave/Generated/src/CLK001/CLK001.c ****             
 602:../Dave/Generated/src/CLK001/CLK001.c ****     /* clear request for System OCS Watchdog Trap and System VCO Lock Trap  */
 603:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk |\
 492              		.loc 1 603 0
 493 0354 44F26013 		movw	r3, #16736
 494 0358 C5F20003 		movt	r3, 20480
 495 035c 4FF00502 		mov	r2, #5
 496 0360 DA60     		str	r2, [r3, #12]
 604:../Dave/Generated/src/CLK001/CLK001.c ****                         SCU_TRAP_TRAPCLR_SVCOLCKT_Msk; 
 605:../Dave/Generated/src/CLK001/CLK001.c ****   }/*end PLL frequency stepping...*/
 606:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of PLL frequency stepping in case of PLL normal mode*/
 607:../Dave/Generated/src/CLK001/CLK001.c ****    /*return success*/
 608:../Dave/Generated/src/CLK001/CLK001.c ****   return Return_status;
 497              		.loc 1 608 0
 498 0362 FB68     		ldr	r3, [r7, #12]
 609:../Dave/Generated/src/CLK001/CLK001.c **** }
 499              		.loc 1 609 0
 500 0364 1846     		mov	r0, r3
 501 0366 07F11007 		add	r7, r7, #16
 502 036a BD46     		mov	sp, r7
 503 036c 80BD     		pop	{r7, pc}
 504              		.cfi_endproc
 505              	.LFE119:
 507 036e 00BF     		.section	.text.USB_Clock_valid,"ax",%progbits
 508              		.align	2
 509              		.thumb
 510              		.thumb_func
 512              	USB_Clock_valid:
 513              	.LFB120:
 610:../Dave/Generated/src/CLK001/CLK001.c ****      
 611:../Dave/Generated/src/CLK001/CLK001.c **** /**
 612:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to check current USB Clock setting based on UI configuration 
 613:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 614:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 615:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval PASS/FAIL
 616:../Dave/Generated/src/CLK001/CLK001.c ****   */
 617:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t	USB_Clock_valid(void)
 618:../Dave/Generated/src/CLK001/CLK001.c **** {
 514              		.loc 1 618 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 8
 517              		@ frame_needed = 1, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 519 0000 80B4     		push	{r7}
 520              	.LCFI9:
 521              		.cfi_def_cfa_offset 4
 522              		.cfi_offset 7, -4
 523 0002 83B0     		sub	sp, sp, #12
 524              	.LCFI10:
 525              		.cfi_def_cfa_offset 16
 526 0004 00AF     		add	r7, sp, #0
 527              	.LCFI11:
 528              		.cfi_def_cfa_register 7
 619:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t USB_clock_status = 1U;
 529              		.loc 1 619 0
 530 0006 4FF00103 		mov	r3, #1
 531 000a 7B60     		str	r3, [r7, #4]
 620:../Dave/Generated/src/CLK001/CLK001.c ****   /* check if PLL is switched on */
 621:../Dave/Generated/src/CLK001/CLK001.c ****   if((SCU_PLL->USBPLLCON &(SCU_PLL_USBPLLCON_VCOPWD_Msk | \
 532              		.loc 1 621 0
 533 000c 44F21073 		movw	r3, #18192
 534 0010 C5F20003 		movt	r3, 20480
 535 0014 5A69     		ldr	r2, [r3, #20]
 536 0016 4FF00203 		mov	r3, #2
 537 001a C0F20103 		movt	r3, 1
 538 001e 1340     		ands	r3, r3, r2
 539 0020 002B     		cmp	r3, #0
 540 0022 02D0     		beq	.L19
 622:../Dave/Generated/src/CLK001/CLK001.c ****                            SCU_PLL_USBPLLCON_PLLPWD_Msk)) != 0U)
 623:../Dave/Generated/src/CLK001/CLK001.c ****   {
 624:../Dave/Generated/src/CLK001/CLK001.c ****     USB_clock_status=0U;
 541              		.loc 1 624 0
 542 0024 4FF00003 		mov	r3, #0
 543 0028 7B60     		str	r3, [r7, #4]
 544              	.L19:
 625:../Dave/Generated/src/CLK001/CLK001.c ****   }
 626:../Dave/Generated/src/CLK001/CLK001.c ****   return(USB_clock_status);
 545              		.loc 1 626 0
 546 002a 7B68     		ldr	r3, [r7, #4]
 627:../Dave/Generated/src/CLK001/CLK001.c **** }
 547              		.loc 1 627 0
 548 002c 1846     		mov	r0, r3
 549 002e 07F10C07 		add	r7, r7, #12
 550 0032 BD46     		mov	sp, r7
 551 0034 80BC     		pop	{r7}
 552 0036 7047     		bx	lr
 553              		.cfi_endproc
 554              	.LFE120:
 556              		.section	.text.USB_Clock_init,"ax",%progbits
 557              		.align	2
 558              		.thumb
 559              		.thumb_func
 561              	USB_Clock_init:
 562              	.LFB121:
 628:../Dave/Generated/src/CLK001/CLK001.c **** 
 629:../Dave/Generated/src/CLK001/CLK001.c **** /**
 630:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to initialize the USB Clock based on UI configuration 
 631:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 632:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 633:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval PASS/FAIL
 634:../Dave/Generated/src/CLK001/CLK001.c ****   */
 635:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t	USB_Clock_init(void)
 636:../Dave/Generated/src/CLK001/CLK001.c **** {
 563              		.loc 1 636 0
 564              		.cfi_startproc
 565              		@ args = 0, pretend = 0, frame = 8
 566              		@ frame_needed = 1, uses_anonymous_args = 0
 567 0000 80B5     		push	{r7, lr}
 568              	.LCFI12:
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 7, -8
 571              		.cfi_offset 14, -4
 572 0002 82B0     		sub	sp, sp, #8
 573              	.LCFI13:
 574              		.cfi_def_cfa_offset 16
 575 0004 00AF     		add	r7, sp, #0
 576              	.LCFI14:
 577              		.cfi_def_cfa_register 7
 637:../Dave/Generated/src/CLK001/CLK001.c **** 
 638:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t timeout_count;
 639:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t Return_status = 1U;
 578              		.loc 1 639 0
 579 0006 4FF00103 		mov	r3, #1
 580 000a 3B60     		str	r3, [r7, #0]
 640:../Dave/Generated/src/CLK001/CLK001.c ****   /* enable USB PLL first */
 641:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | \
 581              		.loc 1 641 0
 582 000c 44F21073 		movw	r3, #18192
 583 0010 C5F20003 		movt	r3, 20480
 584 0014 44F21072 		movw	r2, #18192
 585 0018 C5F20002 		movt	r2, 20480
 586 001c 5269     		ldr	r2, [r2, #20]
 587 001e 22F48032 		bic	r2, r2, #65536
 588 0022 22F00202 		bic	r2, r2, #2
 589 0026 5A61     		str	r2, [r3, #20]
 642:../Dave/Generated/src/CLK001/CLK001.c ****                          SCU_PLL_USBPLLCON_PLLPWD_Msk);
 643:../Dave/Generated/src/CLK001/CLK001.c **** 
 644:../Dave/Generated/src/CLK001/CLK001.c ****   /* check and if not already running enable OSC_HP */
 645:../Dave/Generated/src/CLK001/CLK001.c ****   if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != \
 590              		.loc 1 645 0
 591 0028 4FF48E43 		mov	r3, #18176
 592 002c C5F20003 		movt	r3, 20480
 593 0030 5B68     		ldr	r3, [r3, #4]
 594 0032 03F03003 		and	r3, r3, #48
 595 0036 002B     		cmp	r3, #0
 596 0038 62D0     		beq	.L22
 646:../Dave/Generated/src/CLK001/CLK001.c ****      ((uint32_t)CLK001_OSC_HP_MODE << SCU_OSC_OSCHPCTRL_MODE_Pos))
 647:../Dave/Generated/src/CLK001/CLK001.c ****   {
 648:../Dave/Generated/src/CLK001/CLK001.c ****     /* check if Main PLL is switched on for OSC WD*/
 649:../Dave/Generated/src/CLK001/CLK001.c ****     if ((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | \
 597              		.loc 1 649 0
 598 003a 44F21073 		movw	r3, #18192
 599 003e C5F20003 		movt	r3, 20480
 600 0042 5A68     		ldr	r2, [r3, #4]
 601 0044 4FF00203 		mov	r3, #2
 602 0048 C0F20103 		movt	r3, 1
 603 004c 1340     		ands	r3, r3, r2
 604 004e 002B     		cmp	r3, #0
 605 0050 0DD0     		beq	.L23
 650:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL_PLLCON0_PLLPWD_Msk)) != 0U)
 651:../Dave/Generated/src/CLK001/CLK001.c ****     {
 652:../Dave/Generated/src/CLK001/CLK001.c ****       /* enable PLL first */
 653:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | \
 606              		.loc 1 653 0
 607 0052 44F21073 		movw	r3, #18192
 608 0056 C5F20003 		movt	r3, 20480
 609 005a 44F21072 		movw	r2, #18192
 610 005e C5F20002 		movt	r2, 20480
 611 0062 5268     		ldr	r2, [r2, #4]
 612 0064 22F48032 		bic	r2, r2, #65536
 613 0068 22F00202 		bic	r2, r2, #2
 614 006c 5A60     		str	r2, [r3, #4]
 615              	.L23:
 654:../Dave/Generated/src/CLK001/CLK001.c ****                            SCU_PLL_PLLCON0_PLLPWD_Msk);
 655:../Dave/Generated/src/CLK001/CLK001.c ****     }
 656:../Dave/Generated/src/CLK001/CLK001.c **** 
 657:../Dave/Generated/src/CLK001/CLK001.c ****     /*The OSC HP mode is guaranteed to  be = 11b at this point
 658:../Dave/Generated/src/CLK001/CLK001.c ****     * so we can just clear the bit(s) as per the selected mode
 659:../Dave/Generated/src/CLK001/CLK001.c ****     */
 660:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_OSC->OSCHPCTRL &= (((uint32_t)(~(uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk)) | \
 616              		.loc 1 660 0
 617 006e 4FF48E43 		mov	r3, #18176
 618 0072 C5F20003 		movt	r3, 20480
 619 0076 4FF48E42 		mov	r2, #18176
 620 007a C5F20002 		movt	r2, 20480
 621 007e 5268     		ldr	r2, [r2, #4]
 622 0080 22F03002 		bic	r2, r2, #48
 623 0084 5A60     		str	r2, [r3, #4]
 661:../Dave/Generated/src/CLK001/CLK001.c ****        ((uint32_t)CLK001_OSC_HP_MODE << SCU_OSC_OSCHPCTRL_MODE_Pos));
 662:../Dave/Generated/src/CLK001/CLK001.c ****    
 663:../Dave/Generated/src/CLK001/CLK001.c ****     /* setup OSC WDG Divider */
 664:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_OSC->OSCHPCTRL|=
 624              		.loc 1 664 0
 625 0086 4FF48E43 		mov	r3, #18176
 626 008a C5F20003 		movt	r3, 20480
 627 008e 4FF48E42 		mov	r2, #18176
 628 0092 C5F20002 		movt	r2, 20480
 629 0096 5268     		ldr	r2, [r2, #4]
 630 0098 42F44032 		orr	r2, r2, #196608
 631 009c 5A60     		str	r2, [r3, #4]
 665:../Dave/Generated/src/CLK001/CLK001.c ****       ((uint32_t)((CLK001_CLOCK_CRYSTAL_FREQUENCY/CLK001_SOSCWDG_FREF)-1U)\
 666:../Dave/Generated/src/CLK001/CLK001.c ****                                            <<SCU_OSC_OSCHPCTRL_OSCVAL_Pos);
 667:../Dave/Generated/src/CLK001/CLK001.c ****    
 668:../Dave/Generated/src/CLK001/CLK001.c ****     /* restart OSC Watchdog */
 669:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;  
 632              		.loc 1 669 0
 633 009e 44F21073 		movw	r3, #18192
 634 00a2 C5F20003 		movt	r3, 20480
 635 00a6 44F21072 		movw	r2, #18192
 636 00aa C5F20002 		movt	r2, 20480
 637 00ae 5268     		ldr	r2, [r2, #4]
 638 00b0 22F40032 		bic	r2, r2, #131072
 639 00b4 5A60     		str	r2, [r3, #4]
 670:../Dave/Generated/src/CLK001/CLK001.c **** 
 671:../Dave/Generated/src/CLK001/CLK001.c ****      /* Timeout for wait loo ~150ms */
 672:../Dave/Generated/src/CLK001/CLK001.c ****     /********************************/	  
 673:../Dave/Generated/src/CLK001/CLK001.c ****     /*approx loop count for 150ms @ Backup Clock freq*/
 674:../Dave/Generated/src/CLK001/CLK001.c ****     timeout_count = CLK001_LOOP_CNT_150MS;
 640              		.loc 1 674 0
 641 00b6 44F25063 		movw	r3, #18000
 642 00ba 7B60     		str	r3, [r7, #4]
 643              	.L25:
 675:../Dave/Generated/src/CLK001/CLK001.c ****     do
 676:../Dave/Generated/src/CLK001/CLK001.c ****     {
 677:../Dave/Generated/src/CLK001/CLK001.c ****       Delay(CLK001_DELAY_CNT_8US_50MHZ);  /*~8us Delay*/
 644              		.loc 1 677 0
 645 00bc 4FF00A00 		mov	r0, #10
 646 00c0 FFF7FEFF 		bl	Delay
 678:../Dave/Generated/src/CLK001/CLK001.c ****       timeout_count--;
 647              		.loc 1 678 0
 648 00c4 7B68     		ldr	r3, [r7, #4]
 649 00c6 03F1FF33 		add	r3, r3, #-1
 650 00ca 7B60     		str	r3, [r7, #4]
 679:../Dave/Generated/src/CLK001/CLK001.c **** 
 680:../Dave/Generated/src/CLK001/CLK001.c ****     }while((((SCU_PLL->PLLSTAT) & CLK001_PLLSTAT_OSC_USABLE_MASK) != \
 651              		.loc 1 680 0
 652 00cc 44F21073 		movw	r3, #18192
 653 00d0 C5F20003 		movt	r3, 20480
 654 00d4 1B68     		ldr	r3, [r3, #0]
 655 00d6 03F46073 		and	r3, r3, #896
 656 00da B3F5607F 		cmp	r3, #896
 657 00de 02D0     		beq	.L24
 681:../Dave/Generated/src/CLK001/CLK001.c ****           CLK001_PLLSTAT_OSC_USABLE_MASK) && (timeout_count !=0U));
 658              		.loc 1 681 0
 659 00e0 7B68     		ldr	r3, [r7, #4]
 660 00e2 002B     		cmp	r3, #0
 661 00e4 EAD1     		bne	.L25
 662              	.L24:
 682:../Dave/Generated/src/CLK001/CLK001.c **** 
 683:../Dave/Generated/src/CLK001/CLK001.c ****     if (((SCU_PLL->PLLSTAT) & CLK001_PLLSTAT_OSC_USABLE_MASK) != \
 663              		.loc 1 683 0
 664 00e6 44F21073 		movw	r3, #18192
 665 00ea C5F20003 		movt	r3, 20480
 666 00ee 1B68     		ldr	r3, [r3, #0]
 667 00f0 03F46073 		and	r3, r3, #896
 668 00f4 B3F5607F 		cmp	r3, #896
 669 00f8 02D0     		beq	.L22
 684:../Dave/Generated/src/CLK001/CLK001.c ****           CLK001_PLLSTAT_OSC_USABLE_MASK)
 685:../Dave/Generated/src/CLK001/CLK001.c ****     {
 686:../Dave/Generated/src/CLK001/CLK001.c ****       Return_status =0U;/* Return Error */
 670              		.loc 1 686 0
 671 00fa 4FF00003 		mov	r3, #0
 672 00fe 3B60     		str	r3, [r7, #0]
 673              	.L22:
 687:../Dave/Generated/src/CLK001/CLK001.c ****     }
 688:../Dave/Generated/src/CLK001/CLK001.c ****   }
 689:../Dave/Generated/src/CLK001/CLK001.c **** 
 690:../Dave/Generated/src/CLK001/CLK001.c ****   /* Setup USB PLL */
 691:../Dave/Generated/src/CLK001/CLK001.c ****   /* Go to bypass the USB PLL */
 692:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 674              		.loc 1 692 0
 675 0100 44F21073 		movw	r3, #18192
 676 0104 C5F20003 		movt	r3, 20480
 677 0108 44F21072 		movw	r2, #18192
 678 010c C5F20002 		movt	r2, 20480
 679 0110 5269     		ldr	r2, [r2, #20]
 680 0112 42F00102 		orr	r2, r2, #1
 681 0116 5A61     		str	r2, [r3, #20]
 693:../Dave/Generated/src/CLK001/CLK001.c ****   /* disconnect Oscillator from USB PLL */
 694:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 682              		.loc 1 694 0
 683 0118 44F21073 		movw	r3, #18192
 684 011c C5F20003 		movt	r3, 20480
 685 0120 44F21072 		movw	r2, #18192
 686 0124 C5F20002 		movt	r2, 20480
 687 0128 5269     		ldr	r2, [r2, #20]
 688 012a 42F01002 		orr	r2, r2, #16
 689 012e 5A61     		str	r2, [r3, #20]
 695:../Dave/Generated/src/CLK001/CLK001.c ****   /* Setup Divider settings for USB PLL */
 696:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_PLL->USBPLLCON =(((uint32_t)CLK001_USBPLL_NDIV<<SCU_PLL_USBPLLCON_NDIV_Pos)|\
 690              		.loc 1 696 0
 691 0130 44F21073 		movw	r3, #18192
 692 0134 C5F20003 		movt	r3, 20480
 693 0138 4FF47C52 		mov	r2, #16128
 694 013c C0F20012 		movt	r2, 256
 695 0140 5A61     		str	r2, [r3, #20]
 697:../Dave/Generated/src/CLK001/CLK001.c ****                       ((uint32_t)CLK001_USBPLL_PDIV<<SCU_PLL_USBPLLCON_PDIV_Pos));
 698:../Dave/Generated/src/CLK001/CLK001.c ****   /* Setup USBDIV settings USB clock */
 699:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_CLK->USBCLKCR = CLK001_USBDIV;
 696              		.loc 1 699 0
 697 0142 4FF48C43 		mov	r3, #17920
 698 0146 C5F20003 		movt	r3, 20480
 699 014a 4FF00302 		mov	r2, #3
 700 014e 9A61     		str	r2, [r3, #24]
 700:../Dave/Generated/src/CLK001/CLK001.c ****   /* Set OSCDISCDIS */
 701:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 701              		.loc 1 701 0
 702 0150 44F21073 		movw	r3, #18192
 703 0154 C5F20003 		movt	r3, 20480
 704 0158 44F21072 		movw	r2, #18192
 705 015c C5F20002 		movt	r2, 20480
 706 0160 5269     		ldr	r2, [r2, #20]
 707 0162 42F04002 		orr	r2, r2, #64
 708 0166 5A61     		str	r2, [r3, #20]
 702:../Dave/Generated/src/CLK001/CLK001.c ****   /* connect Oscillator to USB PLL */
 703:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 709              		.loc 1 703 0
 710 0168 44F21073 		movw	r3, #18192
 711 016c C5F20003 		movt	r3, 20480
 712 0170 44F21072 		movw	r2, #18192
 713 0174 C5F20002 		movt	r2, 20480
 714 0178 5269     		ldr	r2, [r2, #20]
 715 017a 22F01002 		bic	r2, r2, #16
 716 017e 5A61     		str	r2, [r3, #20]
 704:../Dave/Generated/src/CLK001/CLK001.c ****   /* restart PLL Lock detection */
 705:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 717              		.loc 1 705 0
 718 0180 44F21073 		movw	r3, #18192
 719 0184 C5F20003 		movt	r3, 20480
 720 0188 44F21072 		movw	r2, #18192
 721 018c C5F20002 		movt	r2, 20480
 722 0190 5269     		ldr	r2, [r2, #20]
 723 0192 42F48022 		orr	r2, r2, #262144
 724 0196 5A61     		str	r2, [r3, #20]
 706:../Dave/Generated/src/CLK001/CLK001.c **** 
 707:../Dave/Generated/src/CLK001/CLK001.c ****   /* wait for PLL Lock */
 708:../Dave/Generated/src/CLK001/CLK001.c ****   while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk)!= \
 725              		.loc 1 708 0
 726 0198 00BF     		nop
 727              	.L26:
 728              		.loc 1 708 0 is_stmt 0 discriminator 1
 729 019a 44F21073 		movw	r3, #18192
 730 019e C5F20003 		movt	r3, 20480
 731 01a2 1B69     		ldr	r3, [r3, #16]
 732 01a4 03F00403 		and	r3, r3, #4
 733 01a8 002B     		cmp	r3, #0
 734 01aa F6D0     		beq	.L26
 709:../Dave/Generated/src/CLK001/CLK001.c ****           SCU_PLL_USBPLLSTAT_VCOLOCK_Msk)
 710:../Dave/Generated/src/CLK001/CLK001.c ****   {}
 711:../Dave/Generated/src/CLK001/CLK001.c **** 
 712:../Dave/Generated/src/CLK001/CLK001.c ****   /* Enable USB Clock */
 713:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_CLK->CLKSET |= (uint32_t)SCU_CLK_CLKSET_USBCEN_Msk;
 735              		.loc 1 713 0 is_stmt 1
 736 01ac 4FF48C43 		mov	r3, #17920
 737 01b0 C5F20003 		movt	r3, 20480
 738 01b4 4FF48C42 		mov	r2, #17920
 739 01b8 C5F20002 		movt	r2, 20480
 740 01bc 5268     		ldr	r2, [r2, #4]
 741 01be 42F00102 		orr	r2, r2, #1
 742 01c2 5A60     		str	r2, [r3, #4]
 714:../Dave/Generated/src/CLK001/CLK001.c **** 
 715:../Dave/Generated/src/CLK001/CLK001.c ****   return Return_status;
 743              		.loc 1 715 0
 744 01c4 3B68     		ldr	r3, [r7, #0]
 716:../Dave/Generated/src/CLK001/CLK001.c **** } 
 745              		.loc 1 716 0
 746 01c6 1846     		mov	r0, r3
 747 01c8 07F10807 		add	r7, r7, #8
 748 01cc BD46     		mov	sp, r7
 749 01ce 80BD     		pop	{r7, pc}
 750              		.cfi_endproc
 751              	.LFE121:
 753              		.section	.text.MMC_Clock_init,"ax",%progbits
 754              		.align	2
 755              		.thumb
 756              		.thumb_func
 758              	MMC_Clock_init:
 759              	.LFB122:
 717:../Dave/Generated/src/CLK001/CLK001.c **** 
 718:../Dave/Generated/src/CLK001/CLK001.c **** 
 719:../Dave/Generated/src/CLK001/CLK001.c **** 
 720:../Dave/Generated/src/CLK001/CLK001.c **** 
 721:../Dave/Generated/src/CLK001/CLK001.c **** /**
 722:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to enable the MMC clock 
 723:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 724:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 725:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval None
 726:../Dave/Generated/src/CLK001/CLK001.c ****   */
 727:../Dave/Generated/src/CLK001/CLK001.c **** static void MMC_Clock_init(void){
 760              		.loc 1 727 0
 761              		.cfi_startproc
 762              		@ args = 0, pretend = 0, frame = 0
 763              		@ frame_needed = 1, uses_anonymous_args = 0
 764              		@ link register save eliminated.
 765 0000 80B4     		push	{r7}
 766              	.LCFI15:
 767              		.cfi_def_cfa_offset 4
 768              		.cfi_offset 7, -4
 769 0002 00AF     		add	r7, sp, #0
 770              	.LCFI16:
 771              		.cfi_def_cfa_register 7
 728:../Dave/Generated/src/CLK001/CLK001.c ****   /* Enable MMC Clock */
 729:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_CLK->CLKSET |= (uint32_t)SCU_CLK_CLKSET_MMCCEN_Msk;
 772              		.loc 1 729 0
 773 0004 4FF48C43 		mov	r3, #17920
 774 0008 C5F20003 		movt	r3, 20480
 775 000c 4FF48C42 		mov	r2, #17920
 776 0010 C5F20002 		movt	r2, 20480
 777 0014 5268     		ldr	r2, [r2, #4]
 778 0016 42F00202 		orr	r2, r2, #2
 779 001a 5A60     		str	r2, [r3, #4]
 730:../Dave/Generated/src/CLK001/CLK001.c **** }
 780              		.loc 1 730 0
 781 001c BD46     		mov	sp, r7
 782 001e 80BC     		pop	{r7}
 783 0020 7047     		bx	lr
 784              		.cfi_endproc
 785              	.LFE122:
 787 0022 00BF     		.section	.text.RTC_Clock_init,"ax",%progbits
 788              		.align	2
 789              		.thumb
 790              		.thumb_func
 792              	RTC_Clock_init:
 793              	.LFB123:
 731:../Dave/Generated/src/CLK001/CLK001.c **** 
 732:../Dave/Generated/src/CLK001/CLK001.c **** /**
 733:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to initialize the RTC clock based on UI configuration
 734:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 735:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 736:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval None
 737:../Dave/Generated/src/CLK001/CLK001.c ****   */
 738:../Dave/Generated/src/CLK001/CLK001.c **** static void RTC_Clock_init(void)
 739:../Dave/Generated/src/CLK001/CLK001.c **** {
 794              		.loc 1 739 0
 795              		.cfi_startproc
 796              		@ args = 0, pretend = 0, frame = 0
 797              		@ frame_needed = 1, uses_anonymous_args = 0
 798              		@ link register save eliminated.
 799 0000 80B4     		push	{r7}
 800              	.LCFI17:
 801              		.cfi_def_cfa_offset 4
 802              		.cfi_offset 7, -4
 803 0002 00AF     		add	r7, sp, #0
 804              	.LCFI18:
 805              		.cfi_def_cfa_register 7
 740:../Dave/Generated/src/CLK001/CLK001.c ****   /*before enabling hibernate domain (if opted), check if it is already enabled.
 741:../Dave/Generated/src/CLK001/CLK001.c ****   we do not repeat the enable if already done*/
 742:../Dave/Generated/src/CLK001/CLK001.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0U )
 806              		.loc 1 742 0
 807 0004 4FF48443 		mov	r3, #16896
 808 0008 C5F20003 		movt	r3, 20480
 809 000c 1B68     		ldr	r3, [r3, #0]
 810 000e 03F00103 		and	r3, r3, #1
 811 0012 002B     		cmp	r3, #0
 812 0014 10D1     		bne	.L30
 743:../Dave/Generated/src/CLK001/CLK001.c ****   {
 744:../Dave/Generated/src/CLK001/CLK001.c ****     /* Enable hibernate domain */
 745:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_HIB_Msk);
 813              		.loc 1 745 0
 814 0016 4FF48443 		mov	r3, #16896
 815 001a C5F20003 		movt	r3, 20480
 816 001e 4FF00102 		mov	r2, #1
 817 0022 5A60     		str	r2, [r3, #4]
 746:../Dave/Generated/src/CLK001/CLK001.c ****     
 747:../Dave/Generated/src/CLK001/CLK001.c ****     /* Wait until hibernate enable status is set */
 748:../Dave/Generated/src/CLK001/CLK001.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk)!= \
 818              		.loc 1 748 0
 819 0024 00BF     		nop
 820              	.L31:
 821              		.loc 1 748 0 is_stmt 0 discriminator 1
 822 0026 4FF48443 		mov	r3, #16896
 823 002a C5F20003 		movt	r3, 20480
 824 002e 1B68     		ldr	r3, [r3, #0]
 825 0030 03F00103 		and	r3, r3, #1
 826 0034 002B     		cmp	r3, #0
 827 0036 F6D0     		beq	.L31
 828              	.L30:
 749:../Dave/Generated/src/CLK001/CLK001.c ****          SCU_POWER_PWRSTAT_HIBEN_Msk)
 750:../Dave/Generated/src/CLK001/CLK001.c ****     {}
 751:../Dave/Generated/src/CLK001/CLK001.c ****   }
 752:../Dave/Generated/src/CLK001/CLK001.c ****   /* check for HIB Domain is not in reset state  */
 753:../Dave/Generated/src/CLK001/CLK001.c ****   if ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0U)
 829              		.loc 1 753 0 is_stmt 1
 830 0038 4FF48843 		mov	r3, #17408
 831 003c C5F20003 		movt	r3, 20480
 832 0040 1B68     		ldr	r3, [r3, #0]
 833 0042 03F40073 		and	r3, r3, #512
 834 0046 002B     		cmp	r3, #0
 835 0048 0BD0     		beq	.L32
 754:../Dave/Generated/src/CLK001/CLK001.c ****   {
 755:../Dave/Generated/src/CLK001/CLK001.c **** 	  SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk; /*de-assert hibernate reset*/
 836              		.loc 1 755 0
 837 004a 4FF48843 		mov	r3, #17408
 838 004e C5F20003 		movt	r3, 20480
 839 0052 4FF48842 		mov	r2, #17408
 840 0056 C5F20002 		movt	r2, 20480
 841 005a 9268     		ldr	r2, [r2, #8]
 842 005c 42F40072 		orr	r2, r2, #512
 843 0060 9A60     		str	r2, [r3, #8]
 844              	.L32:
 756:../Dave/Generated/src/CLK001/CLK001.c ****   }
 757:../Dave/Generated/src/CLK001/CLK001.c ****   /*RTC Clock Source Selection*/   
 758:../Dave/Generated/src/CLK001/CLK001.c ****     /* Enable internal slow clock */
 759:../Dave/Generated/src/CLK001/CLK001.c **** 	/*Selecting RTC Clock Source*/
 760:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_HIBERNATE->HDCR |= ((0U << SCU_HIBERNATE_HDCR_RCS_Pos) & \
 845              		.loc 1 760 0
 846 0062 4FF48643 		mov	r3, #17152
 847 0066 C5F20003 		movt	r3, 20480
 848 006a 4FF48642 		mov	r2, #17152
 849 006e C5F20002 		movt	r2, 20480
 850 0072 D268     		ldr	r2, [r2, #12]
 851 0074 DA60     		str	r2, [r3, #12]
 761:../Dave/Generated/src/CLK001/CLK001.c ****                          SCU_HIBERNATE_HDCR_RCS_Msk); 
 762:../Dave/Generated/src/CLK001/CLK001.c ****   while((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_HDCR_Msk)!= \
 852              		.loc 1 762 0
 853 0076 00BF     		nop
 854              	.L33:
 855              		.loc 1 762 0 is_stmt 0 discriminator 1
 856 0078 44F27403 		movw	r3, #16500
 857 007c C5F20003 		movt	r3, 20480
 858 0080 5B68     		ldr	r3, [r3, #4]
 859 0082 03F40023 		and	r3, r3, #524288
 860 0086 002B     		cmp	r3, #0
 861 0088 F6D0     		beq	.L33
 763:../Dave/Generated/src/CLK001/CLK001.c ****          SCU_INTERRUPT_SRRAW_HDCR_Msk)
 764:../Dave/Generated/src/CLK001/CLK001.c ****   {}
 765:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)SCU_INTERRUPT_SRCLR_HDCR_Msk;
 862              		.loc 1 765 0 is_stmt 1
 863 008a 44F27403 		movw	r3, #16500
 864 008e C5F20003 		movt	r3, 20480
 865 0092 44F27402 		movw	r2, #16500
 866 0096 C5F20002 		movt	r2, 20480
 867 009a D268     		ldr	r2, [r2, #12]
 868 009c 42F40022 		orr	r2, r2, #524288
 869 00a0 DA60     		str	r2, [r3, #12]
 766:../Dave/Generated/src/CLK001/CLK001.c **** 	
 767:../Dave/Generated/src/CLK001/CLK001.c **** }
 870              		.loc 1 767 0
 871 00a2 BD46     		mov	sp, r7
 872 00a4 80BC     		pop	{r7}
 873 00a6 7047     		bx	lr
 874              		.cfi_endproc
 875              	.LFE123:
 877              		.section	.text.CLK001_Init,"ax",%progbits
 878              		.align	2
 879              		.global	CLK001_Init
 880              		.thumb
 881              		.thumb_func
 883              	CLK001_Init:
 884              	.LFB124:
 768:../Dave/Generated/src/CLK001/CLK001.c ****   
 769:../Dave/Generated/src/CLK001/CLK001.c **** 
 770:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 771:../Dave/Generated/src/CLK001/CLK001.c **** **                      Public Function Definitions                           **
 772:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 773:../Dave/Generated/src/CLK001/CLK001.c **** 
 774:../Dave/Generated/src/CLK001/CLK001.c **** /**
 775:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to initialize the Clock Tree based on UI configuration
 776:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 777:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 778:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval None
 779:../Dave/Generated/src/CLK001/CLK001.c ****   */
 780:../Dave/Generated/src/CLK001/CLK001.c **** void CLK001_Init(void)
 781:../Dave/Generated/src/CLK001/CLK001.c **** {
 885              		.loc 1 781 0
 886              		.cfi_startproc
 887              		@ args = 0, pretend = 0, frame = 0
 888              		@ frame_needed = 1, uses_anonymous_args = 0
 889 0000 80B5     		push	{r7, lr}
 890              	.LCFI19:
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 0002 00AF     		add	r7, sp, #0
 895              	.LCFI20:
 896              		.cfi_def_cfa_register 7
 782:../Dave/Generated/src/CLK001/CLK001.c ****   /*<<<DD_CLK001_API_1>>>*/
 783:../Dave/Generated/src/CLK001/CLK001.c ****  /*  Function to check the clock status based on UI configuration */
 784:../Dave/Generated/src/CLK001/CLK001.c ****   if(System_Clock_valid() == 0U)
 897              		.loc 1 784 0
 898 0004 FFF7FEFF 		bl	System_Clock_valid
 899 0008 0346     		mov	r3, r0
 900 000a 002B     		cmp	r3, #0
 901 000c 01D1     		bne	.L35
 785:../Dave/Generated/src/CLK001/CLK001.c ****   {   
 786:../Dave/Generated/src/CLK001/CLK001.c ****     /*  Function to initialize the System Clock based on UI configuration */
 787:../Dave/Generated/src/CLK001/CLK001.c ****     System_Clock_init();
 902              		.loc 1 787 0
 903 000e FFF7FEFF 		bl	System_Clock_init
 904              	.L35:
 788:../Dave/Generated/src/CLK001/CLK001.c ****   }     
 789:../Dave/Generated/src/CLK001/CLK001.c ****   /*  Function to initialize the USB Clock based on UI configuration */     
 790:../Dave/Generated/src/CLK001/CLK001.c ****   if(USB_Clock_valid() == 0U)
 905              		.loc 1 790 0
 906 0012 FFF7FEFF 		bl	USB_Clock_valid
 907 0016 0346     		mov	r3, r0
 908 0018 002B     		cmp	r3, #0
 909 001a 01D1     		bne	.L36
 791:../Dave/Generated/src/CLK001/CLK001.c ****   {   
 792:../Dave/Generated/src/CLK001/CLK001.c ****   	USB_Clock_init();
 910              		.loc 1 792 0
 911 001c FFF7FEFF 		bl	USB_Clock_init
 912              	.L36:
 793:../Dave/Generated/src/CLK001/CLK001.c ****   } 
 794:../Dave/Generated/src/CLK001/CLK001.c **** 
 795:../Dave/Generated/src/CLK001/CLK001.c **** 
 796:../Dave/Generated/src/CLK001/CLK001.c ****   /*  Function to enable the MMC Clock based on UI configuration */
 797:../Dave/Generated/src/CLK001/CLK001.c ****   MMC_Clock_init();
 913              		.loc 1 797 0
 914 0020 FFF7FEFF 		bl	MMC_Clock_init
 798:../Dave/Generated/src/CLK001/CLK001.c ****  
 799:../Dave/Generated/src/CLK001/CLK001.c ****    /*  Function to initialize the RTC Clock based on UI configuration */     
 800:../Dave/Generated/src/CLK001/CLK001.c ****   RTC_Clock_init();   
 915              		.loc 1 800 0
 916 0024 FFF7FEFF 		bl	RTC_Clock_init
 801:../Dave/Generated/src/CLK001/CLK001.c ****   /* Update the clock variable */
 802:../Dave/Generated/src/CLK001/CLK001.c ****   SystemCoreClockUpdate();
 917              		.loc 1 802 0
 918 0028 FFF7FEFF 		bl	SystemCoreClockUpdate
 803:../Dave/Generated/src/CLK001/CLK001.c **** }
 919              		.loc 1 803 0
 920 002c 80BD     		pop	{r7, pc}
 921              		.cfi_endproc
 922              	.LFE124:
 924 002e 00BF     		.section	.text.AllowPLLInitByStartup,"ax",%progbits
 925              		.align	2
 926              		.global	AllowPLLInitByStartup
 927              		.thumb
 928              		.thumb_func
 930              	AllowPLLInitByStartup:
 931              	.LFB125:
 804:../Dave/Generated/src/CLK001/CLK001.c **** 
 805:../Dave/Generated/src/CLK001/CLK001.c **** /*
 806:../Dave/Generated/src/CLK001/CLK001.c ****  * This routine is called by CMSIS startup to find out if clock tree setup should
 807:../Dave/Generated/src/CLK001/CLK001.c ****  * be done by it. This routine is WEAKLY defined in CStart.
 808:../Dave/Generated/src/CLK001/CLK001.c ****  *
 809:../Dave/Generated/src/CLK001/CLK001.c ****  * In the absence of clock app, the weak definition takes precedence which always
 810:../Dave/Generated/src/CLK001/CLK001.c ****  * permits clock tree setup by CStart.
 811:../Dave/Generated/src/CLK001/CLK001.c ****  *
 812:../Dave/Generated/src/CLK001/CLK001.c ****  * When clock app is defined, this function overrides the CStart definition.Clock
 813:../Dave/Generated/src/CLK001/CLK001.c ****  * tree setup is launched and upon completion, control is ceded back to CStart.
 814:../Dave/Generated/src/CLK001/CLK001.c ****  *
 815:../Dave/Generated/src/CLK001/CLK001.c ****  * CStart abstains from setting up clock tree and instead proceeds with program
 816:../Dave/Generated/src/CLK001/CLK001.c ****  * loading.
 817:../Dave/Generated/src/CLK001/CLK001.c ****  *
 818:../Dave/Generated/src/CLK001/CLK001.c ****  * Return 0 to disallow CStart from performing clock tree setup.
 819:../Dave/Generated/src/CLK001/CLK001.c ****  */
 820:../Dave/Generated/src/CLK001/CLK001.c **** uint32_t AllowPLLInitByStartup(void)
 821:../Dave/Generated/src/CLK001/CLK001.c **** {
 932              		.loc 1 821 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 1, uses_anonymous_args = 0
 936              		@ link register save eliminated.
 937 0000 80B4     		push	{r7}
 938              	.LCFI21:
 939              		.cfi_def_cfa_offset 4
 940              		.cfi_offset 7, -4
 941 0002 00AF     		add	r7, sp, #0
 942              	.LCFI22:
 943              		.cfi_def_cfa_register 7
 822:../Dave/Generated/src/CLK001/CLK001.c **** 	/*
 823:../Dave/Generated/src/CLK001/CLK001.c **** 	 * Let the CStart know that there is no more a need to perform clock tree
 824:../Dave/Generated/src/CLK001/CLK001.c **** 	 * initialization.
 825:../Dave/Generated/src/CLK001/CLK001.c **** 	 */
 826:../Dave/Generated/src/CLK001/CLK001.c **** 	return 0U;
 944              		.loc 1 826 0
 945 0004 4FF00003 		mov	r3, #0
 827:../Dave/Generated/src/CLK001/CLK001.c **** }
 946              		.loc 1 827 0
 947 0008 1846     		mov	r0, r3
 948 000a BD46     		mov	sp, r7
 949 000c 80BC     		pop	{r7}
 950 000e 7047     		bx	lr
 951              		.cfi_endproc
 952              	.LFE125:
 954              		.text
 955              	.Letext0:
 956              		.file 3 "c:\\dave-3.1.10\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-none-eabi/i
 957              		.file 4 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 958              		.file 5 "C:\\DAVE-3.1.10\\eclipse\\/../CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CLK001.c
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:20     .text.Delay:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:24     .text.Delay:00000000 Delay
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:104    .text.System_Clock_valid:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:108    .text.System_Clock_valid:00000000 System_Clock_valid
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:153    .text.System_Clock_init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:157    .text.System_Clock_init:00000000 System_Clock_init
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:508    .text.USB_Clock_valid:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:512    .text.USB_Clock_valid:00000000 USB_Clock_valid
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:557    .text.USB_Clock_init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:561    .text.USB_Clock_init:00000000 USB_Clock_init
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:754    .text.MMC_Clock_init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:758    .text.MMC_Clock_init:00000000 MMC_Clock_init
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:788    .text.RTC_Clock_init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:792    .text.RTC_Clock_init:00000000 RTC_Clock_init
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:878    .text.CLK001_Init:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:883    .text.CLK001_Init:00000000 CLK001_Init
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:925    .text.AllowPLLInitByStartup:00000000 $t
C:\Users\Mihai\AppData\Local\Temp\ccZjWJBT.s:930    .text.AllowPLLInitByStartup:00000000 AllowPLLInitByStartup
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.1791a5ae2e936ca1033c1c44be394cc7
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.55.0006b5fda1d606516f2dcaf4aca92b11
                           .group:00000000 wm4.MULTIPLEXER.h.43.4aa654be3ec80895f631b5281bbb9105
                           .group:00000000 wm4.CCU8PWMLIB.h.70.a5d6a5267902b8b4aea2a0224518259a
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.SYSTM001.h.63.668098b2213d40a5bd0db5fbe813cf05
                           .group:00000000 wm4.ETH002_Conf.h.56.5bd2b085b66f43d51abd69396be7f35f
                           .group:00000000 wm4.EthernetPHY.h.54.7af1709186b21e62a5f1d4049da3988b
                           .group:00000000 wm4.ETH001_Conf.h.71.1e151af1ba54dd023e1f942bdf922819
                           .group:00000000 wm4.synopGMAC_plat.h.78.7a90e072b497857344aea4ba1e994097
                           .group:00000000 wm4.synopGMAC_stack_interface.h.73.6be6aaee0ac6637432f4d0589044479b
                           .group:00000000 wm4.SynopGMAC_Dev.h.72.7c89c07cf666d37f5c9b615720d5e111
                           .group:00000000 wm4.synopGMAC_network_interface.h.73.4dd08316a11bc43c8c4a9da15277fb0f
                           .group:00000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:00000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:00000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4.stddef.h.161.c6104a0666cf681b6269ddc9b4f516d4
                           .group:00000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:00000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:00000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:00000000 wm4.ETH004_Conf.h.56.564c3f309c32b3c742fc91049cf66940
                           .group:00000000 wm4.lwipopts.h.73.a7a63bda1e8216abd1d90275eaaa0027
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.b213c7fd77614ebc3691cef18ad2ff22
                           .group:00000000 wm4.cc.h.66.ec134211c658dcc89de4610e4e7bab46
                           .group:00000000 wm4.arch.h.47.5153c52bfb94ee3b37299920afab6afd
                           .group:00000000 wm4.debug.h.43.557ecd6c90cc70b375bb8a29118be47b
                           .group:00000000 wm4.opt.h.94.d36882acafebb8726bce646fc8b2397b
                           .group:00000000 wm4.err.h.52.37c5d17538f8e8347a9c84196701e92d
                           .group:00000000 wm4.pbuf.h.43.e9a1ad12b97478787a109e22d5306820
                           .group:00000000 wm4.inet.h.46.b516065779826845d16d49f513869a2b
                           .group:00000000 wm4.ip_addr.h.79.9a0ce887ca8c88c22ad7686bcb5105df
                           .group:00000000 wm4.sys.h.65.4a0cd87b9e0d8bb4cd6b30e939b2ca7e
                           .group:00000000 wm4.mem.h.96.20770766e6c9e6c42af6bfa95ef5c63f
                           .group:00000000 wm4.def.h.33.049f911dab26023a266ed46ced0ce4bc
                           .group:00000000 wm4.netif.h.53.c13431a64f0e73a26710e71455725e84
                           .group:00000000 wm4.ip.h.48.ad46847692d4d729760949b27e48a442
                           .group:00000000 wm4.icmp.h.44.450dbf91f594cc26ad19d086cdc83713
                           .group:00000000 wm4.tcp.h.55.5c30b9432fa60afaa85cbdd225b0c683
                           .group:00000000 wm4.udp.h.48.1a8dde095cd0a13580afaba1443e5a3f
                           .group:00000000 wm4.SDMMC003_Conf.h.50.e707c07613fb4e6f2eaec982a892429d
                           .group:00000000 wm4.SDMMC003.h.85.b66055f6032a052f5173e3d123f9c61e
                           .group:00000000 wm4.SDMMC001.h.50.3e2fedc7e5ace33db4121d5cc027e8a4
                           .group:00000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:00000000 wm4.time.h.16.a4579e68956d2601c6113814b546764b
                           .group:00000000 wm4.diskio.h.7.93a3c8131d08770c060b04d2180fd09a
                           .group:00000000 wm4.diskio.h.42.a863614abe78d56d18ed7cb292d0028d
                           .group:00000000 wm4.ffconf.h.57.4ab321a2116d35ff7f28236ac31fad7c
                           .group:00000000 wm4.ff.h.82.8f05a37d35a49dba2681a7f047fee4ee
                           .group:00000000 wm4.lmm001_debuglog.h.40.8031299705ecf04ad726bd19baff976d
                           .group:00000000 wm4.LMM001.h.42.c21fe9cbedc336738c3dc89405cad216
                           .group:00000000 wm4.stdio.h.27.f2ac352bab34f31f9f478442827b2ba6
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:00000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:00000000 wm4.time.h.24.c499d4c1915694df17abb795fd34b719
                           .group:00000000 wm4.time.h.124.10ced469f846269cafc58b59c853e1bb
                           .group:00000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:00000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:00000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:00000000 wm4.unistd.h.251.605bc560cdc6c3b07b599bb71ac4e425
                           .group:00000000 wm4.malloc.h.4.62bd13b8107d5245f60bd92bb5994838
                           .group:00000000 wm4.malloc.h.148.73b7de3bd065dafbd594b04197a9466e
                           .group:00000000 wm4.reent.h.91.faac4d0ac97c0fcf23d10d0786197642
                           .group:00000000 wm4.SLTHA003.h.100.69cb08672bc6ab3f052aa9d5bd6dc5ca
                           .group:00000000 wm4._default_fcntl.h.6.d036cf640d0f9a06bcff1be55acd66be
                           .group:00000000 wm4.stat.h.2.a761b02482a54847ff0d09dfcff24a5c
                           .group:00000000 wm4.fcntl.h.9.9336f33d7f5028f694c75e6e224e0cf7
                           .group:00000000 wm4.SLTHA001.h.97.d7e87c19a31e3244bdd5839e7cc42a61
                           .group:00000000 wm4.WEBSERVER001_Conf.h.54.cd6d29aaa96a848cbc5321bab5d6cd90
                           .group:00000000 wm4.IO004.h.51.dbf9dd216c57d6a7f14a22b2cb7e5626
                           .group:00000000 wm4.MOTORLIBS.h.59.b2e97de0df555dedfa51e24447b57ab8
                           .group:00000000 wm4.uc_id.h.35.a6c4837fad81477ba31967683332b8cc
                           .group:00000000 wm4.Usic.h.90.22743468abc46f16747d12430b219aaf
                           .group:00000000 wm4.UART001_Conf.h.53.c5c972f6f634bc5116c171852aaab668
                           .group:00000000 wm4.UART001.h.109.3e835815a7a59791d8bd39655f4d4cc9
                           .group:00000000 wm4.NVIC002_Conf.h.63.4809ded45954a78aa476d1e9f44d110e
                           .group:00000000 wm4.ADCGROUP001.h.66.3ee81aba16709c201614af7d67499bdb
                           .group:00000000 wm4.IO001.h.49.4efcabb368feaef60c65bd7504b48505
                           .group:00000000 wm4.ADC001.h.72.a0f6b9479a18584b91fa95e6f862978d

UNDEFINED SYMBOLS
SystemCoreClockUpdate
