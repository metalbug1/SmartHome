
/**
 * @file crypto_aes.h
 * @date 2015-10-09
 *
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is regenerated.
 *
 * @cond
 ***********************************************************************************************************************
 * CRYPTO_AES v4.0.8 - Encrypt/Decrypt user data using the AES standard
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-16:
 *     - Initial version <br>
 *
 * 2015-04-21:
 *     - CRYPTO_AES_Reset() now returns nothing <br>
 *     - Symbolic name changes in CRYPTO_AES_STATUS_t <br>
 *     - Other cosmetic changes <br>
 *
 * 2015-06-20:
 *     - Update license/version information <br>
 *
 * @endcond
 */

#ifndef CRYPTO_AES_H
#define CRYPTO_AES_H

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/

#include <xmc_common.h>
#include "aes.h"
#include "crypto_aes_conf.h"
#include "DAVE_Common.h"

/**********************************************************************************************************************
 * MACROS
 **********************************************************************************************************************/

/**********************************************************************************************************************
 * ENUMS
 **********************************************************************************************************************/

/**
  * @ingroup CRYPTO_AES_enumerations
  * @{
  */

/**
 * @brief Return statuses for CRYPTO_AES APP functions
 */
typedef enum CRYPTO_AES_STATUS
{
  CRYPTO_AES_STATUS_SUCCESS = 0U,        /**< AES operation successful */
  CRYPTO_AES_STATUS_FAILURE,             /**< AES operation failure */
  CRYPTO_AES_STATUS_INVALID_KEY,         /**< Invalid AES key */
  CRYPTO_AES_STATUS_INVALID_MODE,        /**< Invalid AES mode */
  CRYPTO_AES_STATUS_INVALID_KEY_LENGTH,  /**< Invalid AES key length */
  CRYPTO_AES_STATUS_INVALID_DATA_LENGTH  /**< Invalid AES data length */
} CRYPTO_AES_STATUS_t;

/**
 * @brief AES confidentiality modes
 */
typedef enum CRYPTO_AES_MODES
{
  CRYPTO_AES_MODE_ECB = 0U, /**< Electronic code book mode */
  CRYPTO_AES_MODE_CFB,      /**< Cipher feedback mode */
  CRYPTO_AES_MODE_CBC,      /**< Cipher block-chain mode */
  CRYPTO_AES_MODE_OFB,      /**< Output feedback mode */
  CRYPTO_AES_MODE_CTR       /**< Counter mode */
} CRYPTO_AES_MODE_t;

/**
 * @brief AES encryption key sizes
 */
typedef enum CRYPTO_AES_KEY_SIZE
{
  CRYPTO_AES_KEY_SIZE_128 = 128U, /**< AES 128-bit cipher mode */
  CRYPTO_AES_KEY_SIZE_192 = 192U, /**< AES 192-bit cipher mode */
  CRYPTO_AES_KEY_SIZE_256 = 256U  /**< AES 256-bit cipher mode */
} CRYPTO_AES_KEY_SIZE_t;

/**
 * @brief AES key statuses
 */
typedef enum CRYPTO_AES_KEY_STATUS
{
  CRYPTO_AES_KEY_STATUS_NOT_SET = 0U, /**< Key not set */
  CRYPTO_AES_KEY_STATUS_ENCRYPT,      /**< Set for encryption */
  CRYPTO_AES_KEY_STATUS_DECRYPT       /**< Set for decryption */
} CRYPTO_AES_KEY_STATUS_t;

/**
 * @}
 */

/**********************************************************************************************************************
 * DATA STRUCTURES
 **********************************************************************************************************************/

/**
  * @ingroup CRYPTO_AES_datastructures
  * @{
  */

/**
 * @brief Static configuration parameters for CRYPTO_AES
 */
typedef struct CRYPTO_AES
{
  CRYPTO_AES_KEY_STATUS_t key_status;  /**< AES key status if encryption or decryption is set */
  CRYPTO_AES_MODE_t mode;              /**< AES mode to be used for encryption or decryption */
  CRYPTO_AES_KEY_SIZE_t key_size;      /**< AES key length in bits */
  uint8_t init_vector[AES_BLOCK_SIZE]; /**< Initialization vector */
  AES_KEY expanded_key;                /**< Expanded key to speed up encrypt/decrypt calls */
  bool encryption_operation;           /**< What is the user performing? Enciphering or deciphering? */
} CRYPTO_AES_t;

/**
 * @}
 */

/***********************************************************************************************************************
 * API PROTOTYPES
 **********************************************************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

/**
  * @ingroup CRYPTO_AES_apidoc
  * @{
  */

/**
 * @brief Get CRYPTO_AES APP version
 * @return DAVE_APP_VERSION_t
 *
 * \par<b>Description: </b><br>
 * The function can be used to check application software
 * compatibility with a specific version of the APP.
 *
 * Example Usage:
 *
 * @code
 * #include <DAVE.h>
 *
 * // Please note: The `CRYPTO_AES_Init' function is
 * // AES cipher mode agnostic.
 *
 * int main(void) {
 *   DAVE_STATUS_t init_status;
 *   DAVE_APP_VERSION_t version;
 *
 *   // Initialize CRYPTO_AES APP:
 *   // CRYPTO_AES_Init() is called from within DAVE_Init().
 *   //
 *   // CRYPTO_AES_Init() takes a reference to CRYPTO_AES_t as
 *   // the *only* actual parameter, defined in crypto_aes_conf.c.
 *   // The structure contains all GUI user configuration.
 *   init_status = DAVE_Init();
 *
 *   version = CRYPTO_AES_GetAppVersion();
 *   if (version.major != 4U) {
 *     // Probably, not the right version.
 *   }
 *
 *   // More code here
 *   while(1) {
 *
 *   }
 *   return (0);
 * }
 * @endcode<BR> </p>
 */
DAVE_APP_VERSION_t CRYPTO_AES_GetAppVersion(void);

/**
 * @brief Initialization of the AES context
 * @param obj A pointer to ::CRYPTO_AES_t, pointing to the configuration parameters
 * @return DAVE_STATUS_t
 *
 * \par<b>Description: </b><br>
 * The function initializes the AES context with the configurations in the
 * GUI of the APP. The function is automatically called from within DAVE_Init();
 * An explicit call to this function is not required.
 *
 * Example Usage:
 *
 * @code
 * #include <DAVE.h>
 *
 * // Please note: The `CRYPTO_AES_Init' function is
 * // AES cipher mode agnostic.
 *
 * int main(void) {
 *   DAVE_STATUS_t init_status;
 *
 *   // Initialize CRYPTO_AES APP:
 *   // CRYPTO_AES_Init() is called from within DAVE_Init().
 *   //
 *   // CRYPTO_AES_Init() takes a reference to CRYPTO_AES_t as
 *   // the *only* actual parameter, defined in crypto_aes_conf.c.
 *   // The structure contains all GUI user configuration.
 *   init_status = DAVE_Init();
 *
 *   // More code here
 *   while(1) {
 *
 *   }
 *   return (0);
 * }
 * @endcode<BR> </p>
 */
CRYPTO_AES_STATUS_t CRYPTO_AES_Init(CRYPTO_AES_t *obj);

/**
 * @brief Reset the AES context
 * @param obj A pointer to ::CRYPTO_AES_t, pointing to the configuration parameters
 * @return None
 *
 * \par<b>Description: </b><br>
 * It defaults to a 128-bit key size, a default key status ("not set": Please
 * see ::CRYPTO_AES_KEY_STATUS_t), zeros out the initialization vector
 * and sets the default AES confidentiality mode to ECB (Electronic codebook)
 *
 * Example Usage:
 *
 * @code
 * #include <DAVE.h>
 *
 * // Please note: The `CRYPTO_AES_Reset' function is
 * // AES cipher mode agnostic.
 *
 * int main(void) {
 *   DAVE_STATUS_t init_status;
 *
 *   init_status = DAVE_Init();
 *
 *   // The CRYPTO_AES_Reset function resets the APP
 *   // handle structure to its default values.
 *   CRYPTO_AES_Reset(&CRYPTO_AES_0);
 *
 *   // More code here
 *   while(1) {
 *
 *   }
 *   return (0);
 * }
 * @endcode<BR> </p>
 */
void CRYPTO_AES_Reset(CRYPTO_AES_t *obj);

/**
 * @brief Sets the key used for the AES operation
 * @param obj A pointer to ::CRYPTO_AES_t, pointing to the configuration parameters
 * @param key [IN] Key to stored into the OBJ
 * @param encryption_mode [IN] If true, set the key to be used for encryption else otherwise.
 * @return CRYPTO_AES_STATUS_t: Status of the operation
 *
 * \par<b>Description: </b><br>
 * The function sets the AES encryption key. This function shall be called before invoking
 * ::CRYPTO_AES_Encrypt() or ::CRYPTO_AES_Decrypt().
 *
 * Example Usage:
 *
 * @code
 * #include <DAVE.h>
 *
 * // Please note: The following example works with the
 * // AES ECB mode. The encipher/decipher text is clearly
 * // different for different AES cipher modes.
 * // For the same input text, one can expect a different
 * // cipher text with a different AES encryption mode.
 *
 * int main(void) {
 *   DAVE_STATUS_t init_status;
 *   const uint8_t dec[] = {'%', 4, '/', 138, 176, 'K', '!', '6', '?', '^', 207, 'V', '~', 189, '?', 134};
 *   const uint8_t key[] = "foobarfoobarbaz1";
 *   uint8_t output[16];
 *
 *   // Initialize all DAVE Apps
 *   init_status = DAVE_Init();
 *
 *   // `AES_DECRYPT' is defined in aes.h
 *   // `CRYPTO_AES_0' is automatically generated by DAVE
 *   // and is defined in crypto_aes_conf.c
 *   CRYPTO_AES_SetKey(&CRYPTO_AES_0, key, AES_DECRYPT);
 *
 *   // More code here
 *   while(1) {
 *
 *   }
 *   return (0);
 * }
 * @endcode<BR> </p>
 */
CRYPTO_AES_STATUS_t CRYPTO_AES_SetKey(CRYPTO_AES_t *obj,
                                      const uint8_t *key,
                                      bool encryption_mode);

/**
 * @brief Encrypt data
 * @param obj A pointer to ::CRYPTO_AES_t, pointing to the configuration parameters
 * @param out_buf [IN] Pointer to output buffer, used to store encrypted data
 * @param in_buf [IN] Pointer to the input buffer containing user data
 * @param num_bytes [IN] Number of bytes to be encrypted
 * @return CRYPTO_AES_STATUS_t: Status of the operation
 *
 * \par<b>Description: </b><br>
 * The function encrypts user data using the AES mode configured in the GUI of
 * the APP. The encryption key must be set before invoking this function. (See
 * CRYPTO_AES_SetKey()).
 *
 * Example Usage:
 *
 * @code
 * #include <DAVE.h>
 *
 * // Please note: The following example works with the
 * // AES ECB mode. The encipher/decipher text is clearly
 * // different for different AES cipher modes.
 * // For the same input text, one can expect a different
 * // cipher text with a different AES encryption mode.
 *
 * int main(void) {
 *   DAVE_STATUS_t init_status;
 *   const uint8_t input[]  = "helloworldhello1";
 *   const uint8_t key[] = "foobarfoobarbaz1";
 *   uint8_t output[16]; // Holds the encryption output
 *
 *   // Initialize all DAVE Apps
 *   init_status = DAVE_Init();
 *
 *   // `AES_DECRYPT' is defined in aes.h
 *   // `CRYPTO_AES_0' is automatically generated by DAVE
 *   // and is defined in crypto_aes_conf.c
 *   CRYPTO_AES_SetKey(&CRYPTO_AES_0, key, AES_ENCRYPT);
 *
 *   // Encrypt data:
 *   //
 *   // `output', the C array symbol should contain the following
 *   // data as indicated by the debugger:
 *   // '%', 4, '/', 138, 176, 'K', '!', '6', '?', '^', 207, 'V', '~', 189, '?', 134
 *   //
 *   CRYPTO_AES_Encrypt(&CRYPTO_AES_0, output, input, 16);
 *
 *   // More code here
 *   while(1) {
 *
 *   }
 *   return (0);
 * }
 * @endcode<BR> </p>
 */
CRYPTO_AES_STATUS_t CRYPTO_AES_Encrypt(CRYPTO_AES_t *obj,
                                       uint8_t *out_buf,
                                       const uint8_t *in_buf,
                                       uint32_t num_bytes);

/**
 * @brief Decrypt data
 * @param obj A pointer to ::CRYPTO_AES_t, pointing to the configuration parameters
 * @param out_buf [IN] Pointer to output buffer, used to store deciphered data
 * @param in_buf [IN] Pointer to the input buffer containing encrypted data
 * @param num_bytes [IN] Number of bytes to be deciphered
 * @return CRYPTO_AES_STATUS_t: Status of the operation
 *
 * \par<b>Description: </b><br>
 * The function decrypts user data using the AES mode configured in the GUI of
 * the APP. The decryption key must be set before invoking this function. (See
 * CRYPTO_AES_SetKey()).
 *
 * Example Usage:
 *
 * @code
 * #include <DAVE.h>
 *
 * // Please note: The following example works with the
 * // AES ECB mode. The encipher/decipher text is clearly
 * // different for different AES cipher modes.
 * // For the same input text, one can expect a different
 * // cipher text with a different AES encryption mode.
 *
 * int main(void) {
 *   DAVE_STATUS_t init_status;
 *   const uint8_t dec[] = {'%', 4, '/', 138, 176, 'K', '!', '6', '?', '^', 207, 'V', '~', 189, '?', 134};
 *   const uint8_t key[] = "foobarfoobarbaz1";
 *   uint8_t output[16]; // Holds the decryption output
 *
 *   // Initialize all DAVE Apps
 *   init_status = DAVE_Init();
 *
 *   // `AES_DECRYPT' is defined in aes.h
 *   // `CRYPTO_AES_0' is automatically generated by DAVE
 *   // and is defined in crypto_aes_conf.c
 *   CRYPTO_AES_SetKey(&CRYPTO_AES_0, key, AES_DECRYPT);
 *
 *   // Decrypt data
 *   //
 *   // `output' should contain `helloworldhello1'
 *   CRYPTO_AES_Decrypt(&CRYPTO_AES_0, output, dec, 16);
 *
 *   // More code here
 *   while(1) {
 *
 *   }
 *   return (0);
 * }
 * @endcode<BR> </p>
 */
CRYPTO_AES_STATUS_t CRYPTO_AES_Decrypt(CRYPTO_AES_t *obj,
                                       uint8_t *out_buf,
                                       const uint8_t *in_buf,
                                       uint32_t num_bytes);

/**
 * @}
 */

/***********************************************************************************************************************
 * EXTERNAL INCLUDE FILES
 **********************************************************************************************************************/

#include "crypto_aes_extern.h"

#ifdef __cplusplus
}
#endif

#endif /* CRYPTO_AES_H */
